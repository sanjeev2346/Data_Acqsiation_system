
HEROEBIKEDATAAQUSTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cacc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  0800cbe0  0800cbe0  0001cbe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4fc  0800d4fc  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800d4fc  0800d4fc  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d4fc  0800d4fc  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4fc  0800d4fc  0001d4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d500  0800d500  0001d500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002630  20000208  0800d70c  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002838  0800d70c  00022838  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db0f  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274a  00000000  00000000  0002dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00030490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043e7  00000000  00000000  00031e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010891  00000000  00000000  0003622f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c636  00000000  00000000  00046ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d30f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d80  00000000  00000000  000d3148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cbc4 	.word	0x0800cbc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800cbc4 	.word	0x0800cbc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <ADC_Select_CH0>:
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void ADC_Select_CH0(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_0;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2301      	movs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <ADC_Select_CH0+0x38>)
 800122e:	f001 ff35 	bl	800309c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 8001238:	f001 f8e0 	bl	80023fc <Error_Handler>
	  }

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20002280 	.word	0x20002280

08001248 <ADC_Select_CH1>:
void ADC_Select_CH1(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2301      	movs	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001260:	2301      	movs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <ADC_Select_CH1+0x38>)
 800126a:	f001 ff17 	bl	800309c <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8001274:	f001 f8c2 	bl	80023fc <Error_Handler>
	  }

}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20002280 	.word	0x20002280

08001284 <ADC_Select_CH2>:
void ADC_Select_CH2(void){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 8001294:	2302      	movs	r3, #2
 8001296:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800129c:	2301      	movs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <ADC_Select_CH2+0x38>)
 80012a6:	f001 fef9 	bl	800309c <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 80012b0:	f001 f8a4 	bl	80023fc <Error_Handler>
	  }

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20002280 	.word	0x20002280

080012c0 <ADC_Select_CH3>:
void ADC_Select_CH3(void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80012d8:	2301      	movs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <ADC_Select_CH3+0x38>)
 80012e2:	f001 fedb 	bl	800309c <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 80012ec:	f001 f886 	bl	80023fc <Error_Handler>
	  }

}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20002280 	.word	0x20002280

080012fc <lookupSOC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to look up SOC based on voltage
uint8_t lookupSOC(uint16_t voltage) {
 80012fc:	b490      	push	{r4, r7}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
    // Search the voltage table for the closest match
    for (int i = 0; i < TABLE_SIZE; i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	e03c      	b.n	8001386 <lookupSOC+0x8a>
        if (voltage >= voltage_table[i]) {
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <lookupSOC+0x9c>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	429a      	cmp	r2, r3
 8001318:	d332      	bcc.n	8001380 <lookupSOC+0x84>
            // Linear interpolation between two nearest points
            if (i == TABLE_SIZE - 1 || voltage <= voltage_table[i + 1]) {
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d007      	beq.n	8001330 <lookupSOC+0x34>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <lookupSOC+0x9c>)
 8001326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	429a      	cmp	r2, r3
 800132e:	d827      	bhi.n	8001380 <lookupSOC+0x84>
                // Calculate SOC using linear interpolation
                uint8_t soc = soc_table[i] + (voltage - voltage_table[i]) * (soc_table[i + 1] - soc_table[i]) / (voltage_table[i + 1] - voltage_table[i]);
 8001330:	4a1a      	ldr	r2, [pc, #104]	; (800139c <lookupSOC+0xa0>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <lookupSOC+0x9c>)
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001342:	1a5b      	subs	r3, r3, r1
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	3101      	adds	r1, #1
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <lookupSOC+0xa0>)
 800134a:	5c41      	ldrb	r1, [r0, r1]
 800134c:	460c      	mov	r4, r1
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <lookupSOC+0xa0>)
 8001350:	68f9      	ldr	r1, [r7, #12]
 8001352:	4401      	add	r1, r0
 8001354:	7809      	ldrb	r1, [r1, #0]
 8001356:	1a61      	subs	r1, r4, r1
 8001358:	fb03 f101 	mul.w	r1, r3, r1
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <lookupSOC+0x9c>)
 8001362:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001366:	461c      	mov	r4, r3
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <lookupSOC+0x9c>)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001370:	1ae3      	subs	r3, r4, r3
 8001372:	fb91 f3f3 	sdiv	r3, r1, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	72fb      	strb	r3, [r7, #11]
                return soc;
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	e006      	b.n	800138e <lookupSOC+0x92>
    for (int i = 0; i < TABLE_SIZE; i++) {
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b0a      	cmp	r3, #10
 800138a:	ddbf      	ble.n	800130c <lookupSOC+0x10>
            }
        }
    }
    // Default return value if voltage is out of range
    return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr
 8001398:	0800cf74 	.word	0x0800cf74
 800139c:	0800cf8c 	.word	0x0800cf8c

080013a0 <lookupDoD>:

// Function to look up DoD based on voltage and current
uint8_t lookupDoD(uint16_t voltage, uint16_t current) {
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	460a      	mov	r2, r1
 80013aa:	80fb      	strh	r3, [r7, #6]
 80013ac:	4613      	mov	r3, r2
 80013ae:	80bb      	strh	r3, [r7, #4]
    // Search the voltage and current table for the closest match
    for (int i = 0; i < TABLE_SIZE; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e04b      	b.n	800144e <lookupDoD+0xae>
        if (voltage >= voltage_table[i] && current >= current_table[i]) {
 80013b6:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <lookupDoD+0xc0>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d341      	bcc.n	8001448 <lookupDoD+0xa8>
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <lookupDoD+0xc4>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013cc:	88ba      	ldrh	r2, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d33a      	bcc.n	8001448 <lookupDoD+0xa8>
            // Linear interpolation between two nearest points
            if (i == TABLE_SIZE - 1 || (voltage <= voltage_table[i + 1] && current <= current_table[i + 1])) {
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b0a      	cmp	r3, #10
 80013d6:	d00f      	beq.n	80013f8 <lookupDoD+0x58>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <lookupDoD+0xc0>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d82f      	bhi.n	8001448 <lookupDoD+0xa8>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <lookupDoD+0xc4>)
 80013ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f2:	88ba      	ldrh	r2, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d827      	bhi.n	8001448 <lookupDoD+0xa8>
                // Calculate DoD using linear interpolation
                uint8_t dod = dod_table[i] + (voltage - voltage_table[i]) * (dod_table[i + 1] - dod_table[i]) / (voltage_table[i + 1] - voltage_table[i]);
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <lookupDoD+0xc8>)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <lookupDoD+0xc0>)
 8001404:	68f9      	ldr	r1, [r7, #12]
 8001406:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 800140a:	1a5b      	subs	r3, r3, r1
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	3101      	adds	r1, #1
 8001410:	4815      	ldr	r0, [pc, #84]	; (8001468 <lookupDoD+0xc8>)
 8001412:	5c41      	ldrb	r1, [r0, r1]
 8001414:	460c      	mov	r4, r1
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <lookupDoD+0xc8>)
 8001418:	68f9      	ldr	r1, [r7, #12]
 800141a:	4401      	add	r1, r0
 800141c:	7809      	ldrb	r1, [r1, #0]
 800141e:	1a61      	subs	r1, r4, r1
 8001420:	fb03 f101 	mul.w	r1, r3, r1
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <lookupDoD+0xc0>)
 800142a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800142e:	461c      	mov	r4, r3
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <lookupDoD+0xc0>)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001438:	1ae3      	subs	r3, r4, r3
 800143a:	fb91 f3f3 	sdiv	r3, r1, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	72fb      	strb	r3, [r7, #11]
                return dod;
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	e006      	b.n	8001456 <lookupDoD+0xb6>
    for (int i = 0; i < TABLE_SIZE; i++) {
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b0a      	cmp	r3, #10
 8001452:	ddb0      	ble.n	80013b6 <lookupDoD+0x16>
            }
        }
    }
    // Default return value if voltage or current is out of range
    return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bc90      	pop	{r4, r7}
 800145e:	4770      	bx	lr
 8001460:	0800cf74 	.word	0x0800cf74
 8001464:	0800cf98 	.word	0x0800cf98
 8001468:	0800cfb0 	.word	0x0800cfb0

0800146c <calculateBatteryPercentage>:

uint8_t calculateBatteryPercentage(float voltage)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    // Calculate battery percentage
    float percentage = ((voltage - VOLTAGE_mins) / (VOLTAGE_MAX - VOLTAGE_mins)) * 100;
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <calculateBatteryPercentage+0x64>)
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fb7a 	bl	8000b70 <__aeabi_fsub>
 800147c:	4603      	mov	r3, r0
 800147e:	4915      	ldr	r1, [pc, #84]	; (80014d4 <calculateBatteryPercentage+0x68>)
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd33 	bl	8000eec <__aeabi_fdiv>
 8001486:	4603      	mov	r3, r0
 8001488:	4913      	ldr	r1, [pc, #76]	; (80014d8 <calculateBatteryPercentage+0x6c>)
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fc7a 	bl	8000d84 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]

    // Ensure percentage is within valid range (0 to 100)
    if (percentage < 0)
 8001494:	f04f 0100 	mov.w	r1, #0
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff fe11 	bl	80010c0 <__aeabi_fcmplt>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <calculateBatteryPercentage+0x40>
    {
        percentage = 0;
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	e008      	b.n	80014be <calculateBatteryPercentage+0x52>
    }
    else if (percentage > 100)
 80014ac:	490a      	ldr	r1, [pc, #40]	; (80014d8 <calculateBatteryPercentage+0x6c>)
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff fe24 	bl	80010fc <__aeabi_fcmpgt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <calculateBatteryPercentage+0x52>
    {
        percentage = 100;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <calculateBatteryPercentage+0x6c>)
 80014bc:	60fb      	str	r3, [r7, #12]
    }

    return (uint8_t)percentage;
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fe4c 	bl	800115c <__aeabi_f2uiz>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	42580000 	.word	0x42580000
 80014d4:	41f00000 	.word	0x41f00000
 80014d8:	42c80000 	.word	0x42c80000
 80014dc:	00000000 	.word	0x00000000

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e4:	b0b7      	sub	sp, #220	; 0xdc
 80014e6:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e8:	f001 f9b8 	bl	800285c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ec:	f000 fdfa 	bl	80020e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f0:	f000 fee6 	bl	80022c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014f4:	f000 fe52 	bl	800219c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80014f8:	f000 feb8 	bl	800226c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80014fc:	f000 fe7e 	bl	80021fc <MX_SPI1_Init>
  MX_FATFS_Init();
 8001500:	f003 f9f6 	bl	80048f0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  f_mount(&fs, "", 0);
 8001504:	2200      	movs	r2, #0
 8001506:	49ca      	ldr	r1, [pc, #808]	; (8001830 <main+0x350>)
 8001508:	48ca      	ldr	r0, [pc, #808]	; (8001834 <main+0x354>)
 800150a:	f005 fad3 	bl	8006ab4 <f_mount>
    	    f_open(&fil, "DAS.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800150e:	2213      	movs	r2, #19
 8001510:	49c9      	ldr	r1, [pc, #804]	; (8001838 <main+0x358>)
 8001512:	48ca      	ldr	r0, [pc, #808]	; (800183c <main+0x35c>)
 8001514:	f005 fb18 	bl	8006b48 <f_open>
    	  	f_lseek(&fil, fil.fsize);
 8001518:	4bc8      	ldr	r3, [pc, #800]	; (800183c <main+0x35c>)
 800151a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4619      	mov	r1, r3
 8001522:	48c6      	ldr	r0, [pc, #792]	; (800183c <main+0x35c>)
 8001524:	f006 f948 	bl	80077b8 <f_lseek>
    	  	f_puts("Logging Vechicle Data...\n", &fil);
 8001528:	49c4      	ldr	r1, [pc, #784]	; (800183c <main+0x35c>)
 800152a:	48c5      	ldr	r0, [pc, #788]	; (8001840 <main+0x360>)
 800152c:	f006 fc72 	bl	8007e14 <f_puts>
    	  	f_close(&fil);
 8001530:	48c2      	ldr	r0, [pc, #776]	; (800183c <main+0x35c>)
 8001532:	f006 f916 	bl	8007762 <f_close>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ADC_Select_CH0();
 8001536:	f7ff fe69 	bl	800120c <ADC_Select_CH0>
	 	 	  	 	  HAL_ADC_Start(&hadc1);
 800153a:	48c2      	ldr	r0, [pc, #776]	; (8001844 <main+0x364>)
 800153c:	f001 faec 	bl	8002b18 <HAL_ADC_Start>
	 	 	  	 	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001540:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001544:	48bf      	ldr	r0, [pc, #764]	; (8001844 <main+0x364>)
 8001546:	f001 fbc1 	bl	8002ccc <HAL_ADC_PollForConversion>
	 	 	  	 	 ADC_Valu0 = HAL_ADC_GetValue(&hadc1);
 800154a:	48be      	ldr	r0, [pc, #760]	; (8001844 <main+0x364>)
 800154c:	f001 fcc4 	bl	8002ed8 <HAL_ADC_GetValue>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4bbc      	ldr	r3, [pc, #752]	; (8001848 <main+0x368>)
 8001556:	601a      	str	r2, [r3, #0]

	 	 	        VBAT_Out_Raw_Voltage		=		(((ADC_Valu0)*3.3)/4095);
 8001558:	4bbb      	ldr	r3, [pc, #748]	; (8001848 <main+0x368>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff51 	bl	8000404 <__aeabi_i2d>
 8001562:	a3a5      	add	r3, pc, #660	; (adr r3, 80017f8 <main+0x318>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7fe ffb6 	bl	80004d8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	a3a2      	add	r3, pc, #648	; (adr r3, 8001800 <main+0x320>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f8d7 	bl	800072c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fa7f 	bl	8000a88 <__aeabi_d2uiz>
 800158a:	4603      	mov	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	4baf      	ldr	r3, [pc, #700]	; (800184c <main+0x36c>)
 8001590:	801a      	strh	r2, [r3, #0]
	 	 	         VBAT_Out_Voltage			=		(((VBAT_Out_Raw_Voltage * (68+2.2))/2.2));
 8001592:	4bae      	ldr	r3, [pc, #696]	; (800184c <main+0x36c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff34 	bl	8000404 <__aeabi_i2d>
 800159c:	a39a      	add	r3, pc, #616	; (adr r3, 8001808 <main+0x328>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7fe ff99 	bl	80004d8 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	a398      	add	r3, pc, #608	; (adr r3, 8001810 <main+0x330>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f8ba 	bl	800072c <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fa62 	bl	8000a88 <__aeabi_d2uiz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4ba1      	ldr	r3, [pc, #644]	; (8001850 <main+0x370>)
 80015ca:	801a      	strh	r2, [r3, #0]
	 	 	         HAL_ADC_Stop(&hadc1);
 80015cc:	489d      	ldr	r0, [pc, #628]	; (8001844 <main+0x364>)
 80015ce:	f001 fb51 	bl	8002c74 <HAL_ADC_Stop>

	 	 	         ADC_Select_CH1();
 80015d2:	f7ff fe39 	bl	8001248 <ADC_Select_CH1>
	 	 	         	  HAL_ADC_Start(&hadc1);
 80015d6:	489b      	ldr	r0, [pc, #620]	; (8001844 <main+0x364>)
 80015d8:	f001 fa9e 	bl	8002b18 <HAL_ADC_Start>
	 	 	         	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80015dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e0:	4898      	ldr	r0, [pc, #608]	; (8001844 <main+0x364>)
 80015e2:	f001 fb73 	bl	8002ccc <HAL_ADC_PollForConversion>
	 	 	         	ADC_Valu1 = HAL_ADC_GetValue(&hadc1);
 80015e6:	4897      	ldr	r0, [pc, #604]	; (8001844 <main+0x364>)
 80015e8:	f001 fc76 	bl	8002ed8 <HAL_ADC_GetValue>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b98      	ldr	r3, [pc, #608]	; (8001854 <main+0x374>)
 80015f2:	601a      	str	r2, [r3, #0]

	 	 	         VBAT_Out_Raw_current		=		(((ADC_Valu1)*3.3)/4095);
 80015f4:	4b97      	ldr	r3, [pc, #604]	; (8001854 <main+0x374>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff03 	bl	8000404 <__aeabi_i2d>
 80015fe:	a37e      	add	r3, pc, #504	; (adr r3, 80017f8 <main+0x318>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe ff68 	bl	80004d8 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	a37b      	add	r3, pc, #492	; (adr r3, 8001800 <main+0x320>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7ff f889 	bl	800072c <__aeabi_ddiv>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa31 	bl	8000a88 <__aeabi_d2uiz>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b8b      	ldr	r3, [pc, #556]	; (8001858 <main+0x378>)
 800162c:	801a      	strh	r2, [r3, #0]
	 	 	  	     VBAT_Out_current			=		(((VBAT_Out_Raw_Voltage * (68+2.2))/2.2));
 800162e:	4b87      	ldr	r3, [pc, #540]	; (800184c <main+0x36c>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fee6 	bl	8000404 <__aeabi_i2d>
 8001638:	a373      	add	r3, pc, #460	; (adr r3, 8001808 <main+0x328>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ff4b 	bl	80004d8 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a371      	add	r3, pc, #452	; (adr r3, 8001810 <main+0x330>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f86c 	bl	800072c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fa14 	bl	8000a88 <__aeabi_d2uiz>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b7d      	ldr	r3, [pc, #500]	; (800185c <main+0x37c>)
 8001666:	801a      	strh	r2, [r3, #0]
	 	 	  	     VBAT_current          =      VBAT_Out_current/0.75;
 8001668:	4b7c      	ldr	r3, [pc, #496]	; (800185c <main+0x37c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fec9 	bl	8000404 <__aeabi_i2d>
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <main+0x380>)
 8001678:	f7ff f858 	bl	800072c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa00 	bl	8000a88 <__aeabi_d2uiz>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b75      	ldr	r3, [pc, #468]	; (8001864 <main+0x384>)
 800168e:	801a      	strh	r2, [r3, #0]
	 	 	  	     HAL_ADC_Stop(&hadc1);
 8001690:	486c      	ldr	r0, [pc, #432]	; (8001844 <main+0x364>)
 8001692:	f001 faef 	bl	8002c74 <HAL_ADC_Stop>

	 	 	  	     ADC_Select_CH2();
 8001696:	f7ff fdf5 	bl	8001284 <ADC_Select_CH2>
	 	 	  	     	  HAL_ADC_Start(&hadc1);
 800169a:	486a      	ldr	r0, [pc, #424]	; (8001844 <main+0x364>)
 800169c:	f001 fa3c 	bl	8002b18 <HAL_ADC_Start>
	 	 	  	     	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80016a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a4:	4867      	ldr	r0, [pc, #412]	; (8001844 <main+0x364>)
 80016a6:	f001 fb11 	bl	8002ccc <HAL_ADC_PollForConversion>
	 	 	  	     	 ADC_Valu2 = HAL_ADC_GetValue(&hadc1);
 80016aa:	4866      	ldr	r0, [pc, #408]	; (8001844 <main+0x364>)
 80016ac:	f001 fc14 	bl	8002ed8 <HAL_ADC_GetValue>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b6c      	ldr	r3, [pc, #432]	; (8001868 <main+0x388>)
 80016b6:	601a      	str	r2, [r3, #0]

	 	 	         V_Raw_speed		=		(((ADC_Valu2)*3.3)/4095);
 80016b8:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <main+0x388>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fea1 	bl	8000404 <__aeabi_i2d>
 80016c2:	a34d      	add	r3, pc, #308	; (adr r3, 80017f8 <main+0x318>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ff06 	bl	80004d8 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	a34a      	add	r3, pc, #296	; (adr r3, 8001800 <main+0x320>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7ff f827 	bl	800072c <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f9cf 	bl	8000a88 <__aeabi_d2uiz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <main+0x38c>)
 80016f0:	801a      	strh	r2, [r3, #0]
	 	 	  		 V_speed			=		(((V_Raw_speed* (51+4.7))/4.7)); //VBAT_Out_Voltage,VBAT_current,speed,contemp
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <main+0x38c>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fe84 	bl	8000404 <__aeabi_i2d>
 80016fc:	a346      	add	r3, pc, #280	; (adr r3, 8001818 <main+0x338>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe fee9 	bl	80004d8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	a344      	add	r3, pc, #272	; (adr r3, 8001820 <main+0x340>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7ff f80a 	bl	800072c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f9b2 	bl	8000a88 <__aeabi_d2uiz>
 8001724:	4603      	mov	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <main+0x390>)
 800172a:	801a      	strh	r2, [r3, #0]
	 	 	  		 rpm = (V_speed/39)*652;
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <main+0x390>)
 800172e:	881a      	ldrh	r2, [r3, #0]
 8001730:	4b50      	ldr	r3, [pc, #320]	; (8001874 <main+0x394>)
 8001732:	fba3 1302 	umull	r1, r3, r3, r2
 8001736:	1ad2      	subs	r2, r2, r3
 8001738:	0852      	lsrs	r2, r2, #1
 800173a:	4413      	add	r3, r2
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b29b      	uxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	00d2      	lsls	r2, r2, #3
 8001744:	441a      	add	r2, r3
 8001746:	4611      	mov	r1, r2
 8001748:	00c8      	lsls	r0, r1, #3
 800174a:	4611      	mov	r1, r2
 800174c:	4602      	mov	r2, r0
 800174e:	440a      	add	r2, r1
 8001750:	0052      	lsls	r2, r2, #1
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <main+0x398>)
 800175a:	801a      	strh	r2, [r3, #0]
	 	 	  	     rphr = rpm*60;
 800175c:	4b46      	ldr	r3, [pc, #280]	; (8001878 <main+0x398>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <main+0x39c>)
 800176c:	801a      	strh	r2, [r3, #0]
	 	 	  	     speed =0.001356*rphr;
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <main+0x39c>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe46 	bl	8000404 <__aeabi_i2d>
 8001778:	a32b      	add	r3, pc, #172	; (adr r3, 8001828 <main+0x348>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe feab 	bl	80004d8 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f97d 	bl	8000a88 <__aeabi_d2uiz>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <main+0x3a0>)
 8001794:	801a      	strh	r2, [r3, #0]
	 	 	  	     HAL_ADC_Stop(&hadc1);
 8001796:	482b      	ldr	r0, [pc, #172]	; (8001844 <main+0x364>)
 8001798:	f001 fa6c 	bl	8002c74 <HAL_ADC_Stop>

	 	 	  	     ADC_Select_CH3();
 800179c:	f7ff fd90 	bl	80012c0 <ADC_Select_CH3>
	 	 	  	    	  HAL_ADC_Start(&hadc1);
 80017a0:	4828      	ldr	r0, [pc, #160]	; (8001844 <main+0x364>)
 80017a2:	f001 f9b9 	bl	8002b18 <HAL_ADC_Start>
	 	 	  	    	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80017a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017aa:	4826      	ldr	r0, [pc, #152]	; (8001844 <main+0x364>)
 80017ac:	f001 fa8e 	bl	8002ccc <HAL_ADC_PollForConversion>
	 	 	  	    	  ADC_Valu4 = HAL_ADC_GetValue(&hadc1);
 80017b0:	4824      	ldr	r0, [pc, #144]	; (8001844 <main+0x364>)
 80017b2:	f001 fb91 	bl	8002ed8 <HAL_ADC_GetValue>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <main+0x3a4>)
 80017bc:	601a      	str	r2, [r3, #0]
	 	 	  	     VRT = (((ADC_Valu4)*3.3)/4095);      //Conversion to voltage
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <main+0x3a4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe1e 	bl	8000404 <__aeabi_i2d>
 80017c8:	a30b      	add	r3, pc, #44	; (adr r3, 80017f8 <main+0x318>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fe83 	bl	80004d8 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	a309      	add	r3, pc, #36	; (adr r3, 8001800 <main+0x320>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe ffa4 	bl	800072c <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f96c 	bl	8000ac8 <__aeabi_d2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	e049      	b.n	8001888 <main+0x3a8>
 80017f4:	f3af 8000 	nop.w
 80017f8:	66666666 	.word	0x66666666
 80017fc:	400a6666 	.word	0x400a6666
 8001800:	00000000 	.word	0x00000000
 8001804:	40affe00 	.word	0x40affe00
 8001808:	cccccccd 	.word	0xcccccccd
 800180c:	40518ccc 	.word	0x40518ccc
 8001810:	9999999a 	.word	0x9999999a
 8001814:	40019999 	.word	0x40019999
 8001818:	9999999a 	.word	0x9999999a
 800181c:	404bd999 	.word	0x404bd999
 8001820:	cccccccd 	.word	0xcccccccd
 8001824:	4012cccc 	.word	0x4012cccc
 8001828:	e9d0e992 	.word	0xe9d0e992
 800182c:	3f563779 	.word	0x3f563779
 8001830:	0800cbe0 	.word	0x0800cbe0
 8001834:	20000224 	.word	0x20000224
 8001838:	0800cbe4 	.word	0x0800cbe4
 800183c:	20001254 	.word	0x20001254
 8001840:	0800cbec 	.word	0x0800cbec
 8001844:	20002280 	.word	0x20002280
 8001848:	2000237c 	.word	0x2000237c
 800184c:	2000234c 	.word	0x2000234c
 8001850:	2000234e 	.word	0x2000234e
 8001854:	20002380 	.word	0x20002380
 8001858:	20002350 	.word	0x20002350
 800185c:	20002352 	.word	0x20002352
 8001860:	3fe80000 	.word	0x3fe80000
 8001864:	20002354 	.word	0x20002354
 8001868:	20002384 	.word	0x20002384
 800186c:	20002356 	.word	0x20002356
 8001870:	20002358 	.word	0x20002358
 8001874:	a41a41a5 	.word	0xa41a41a5
 8001878:	2000235a 	.word	0x2000235a
 800187c:	2000235c 	.word	0x2000235c
 8001880:	2000235e 	.word	0x2000235e
 8001884:	20002388 	.word	0x20002388
 8001888:	4aa3      	ldr	r2, [pc, #652]	; (8001b18 <main+0x638>)
 800188a:	6013      	str	r3, [r2, #0]
	 	 	  		 VR = vcc - VRT;
 800188c:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <main+0x63c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4aa1      	ldr	r2, [pc, #644]	; (8001b18 <main+0x638>)
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f96a 	bl	8000b70 <__aeabi_fsub>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b9f      	ldr	r3, [pc, #636]	; (8001b20 <main+0x640>)
 80018a2:	601a      	str	r2, [r3, #0]
	 	 	     	 RT = VRT / (VR / R);               //Resistance of RT
 80018a4:	4b9c      	ldr	r3, [pc, #624]	; (8001b18 <main+0x638>)
 80018a6:	681c      	ldr	r4, [r3, #0]
 80018a8:	4b9d      	ldr	r3, [pc, #628]	; (8001b20 <main+0x640>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a9d      	ldr	r2, [pc, #628]	; (8001b24 <main+0x644>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb1a 	bl	8000eec <__aeabi_fdiv>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff fb15 	bl	8000eec <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b98      	ldr	r3, [pc, #608]	; (8001b28 <main+0x648>)
 80018c8:	601a      	str	r2, [r3, #0]

	 	 	  		 ln = log(RT / rto);
 80018ca:	4b97      	ldr	r3, [pc, #604]	; (8001b28 <main+0x648>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a97      	ldr	r2, [pc, #604]	; (8001b2c <main+0x64c>)
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fb09 	bl	8000eec <__aeabi_fdiv>
 80018da:	4603      	mov	r3, r0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fda3 	bl	8000428 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f00a ff87 	bl	800c7fc <log>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f8e7 	bl	8000ac8 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a8c      	ldr	r2, [pc, #560]	; (8001b30 <main+0x650>)
 80018fe:	6013      	str	r3, [r2, #0]
	 	 	  		 TX = (1 / ((ln / b) + (1 / T0))); //Temperature from thermistor
 8001900:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <main+0x650>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a8b      	ldr	r2, [pc, #556]	; (8001b34 <main+0x654>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff faee 	bl	8000eec <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	461c      	mov	r4, r3
 8001914:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <main+0x658>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800191e:	f7ff fae5 	bl	8000eec <__aeabi_fdiv>
 8001922:	4603      	mov	r3, r0
 8001924:	4619      	mov	r1, r3
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff f924 	bl	8000b74 <__addsf3>
 800192c:	4603      	mov	r3, r0
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001934:	f7ff fada 	bl	8000eec <__aeabi_fdiv>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <main+0x65c>)
 800193e:	601a      	str	r2, [r3, #0]

	 	 	  		 contemp = TX - 273.15;
 8001940:	4b7e      	ldr	r3, [pc, #504]	; (8001b3c <main+0x65c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fd6f 	bl	8000428 <__aeabi_f2d>
 800194a:	a371      	add	r3, pc, #452	; (adr r3, 8001b10 <main+0x630>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe fc0a 	bl	8000168 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8b4 	bl	8000ac8 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4a77      	ldr	r2, [pc, #476]	; (8001b40 <main+0x660>)
 8001964:	6013      	str	r3, [r2, #0]
	 	 	  		HAL_ADC_Stop(&hadc1);
 8001966:	4877      	ldr	r0, [pc, #476]	; (8001b44 <main+0x664>)
 8001968:	f001 f984 	bl	8002c74 <HAL_ADC_Stop>


	  	  	 	  	    uint16_t voltage = VBAT_Out_Voltage;
 800196c:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <main+0x668>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  	  	 	  	    uint16_t current =  VBAT_current;
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <main+0x66c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	  	  	 	  	    uint8_t dod = lookupDoD(voltage, current);
 800197c:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8001980:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fd0a 	bl	80013a0 <lookupDoD>
 800198c:	4603      	mov	r3, r0
 800198e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  	  	 	  	    uint8_t soc = lookupSOC(voltage);
 8001992:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fcb0 	bl	80012fc <lookupSOC>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	  	  	 	  	 // Calculate battery percentage
	  	  	 	  	    batteryPercentage = calculateBatteryPercentage(VBAT_Out_Voltage);
 80019a2:	4b69      	ldr	r3, [pc, #420]	; (8001b48 <main+0x668>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f994 	bl	8000cd4 <__aeabi_ui2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fd5c 	bl	800146c <calculateBatteryPercentage>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <main+0x670>)
 80019ba:	701a      	strb	r2, [r3, #0]

	  	  	 	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c2:	4864      	ldr	r0, [pc, #400]	; (8001b54 <main+0x674>)
 80019c4:	f001 ffaf 	bl	8003926 <HAL_GPIO_WritePin>




	  	  	 	  			  	 	  		   	 		if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3))  { //Check if button pressed
 80019c8:	2108      	movs	r1, #8
 80019ca:	4863      	ldr	r0, [pc, #396]	; (8001b58 <main+0x678>)
 80019cc:	f001 ff94 	bl	80038f8 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <main+0x4fe>

	  	  	 	  			  	 	  		   	 			 	  			 normal = 1; //vechicle normal mode
 80019d6:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <main+0x67c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	e002      	b.n	80019e4 <main+0x504>


	  	  	 	  			  	 	  		   	 		}
	  	  	 	  			  	 	  		   	 		else{

	  	  	 	  			  	 	  		   	                              normal = 0;
 80019de:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <main+0x67c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		}

	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15))  { //Check if button pressed
 80019e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e8:	485d      	ldr	r0, [pc, #372]	; (8001b60 <main+0x680>)
 80019ea:	f001 ff85 	bl	80038f8 <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <main+0x51c>

	  	  	 	  			  	 	  		   	 			 	  		  echo = 1; //vechicle echo mode
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <main+0x684>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	e002      	b.n	8001a02 <main+0x522>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			 	  	  	 echo = 0;//VBAT_Out_Voltage,VBAT_current,speed,contemp,normal,echo,sports,
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <main+0x684>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12))  { //Check if button pressed
 8001a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a06:	4854      	ldr	r0, [pc, #336]	; (8001b58 <main+0x678>)
 8001a08:	f001 ff76 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <main+0x53a>

	  	  	 	  			  	 	  		   	 			  	  		  sports = 1; //vechicle sports mode
 8001a12:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <main+0x688>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e002      	b.n	8001a20 <main+0x540>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  		  sports = 0;
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <main+0x688>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13))  { //Check if button pressed
 8001a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a24:	484c      	ldr	r0, [pc, #304]	; (8001b58 <main+0x678>)
 8001a26:	f001 ff67 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <main+0x558>

	  	  	 	  			  	 	  		   	 				  		    side_stand = 1; //side stand status check
 8001a30:	4b4e      	ldr	r3, [pc, #312]	; (8001b6c <main+0x68c>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	e002      	b.n	8001a3e <main+0x55e>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 				  		   side_stand = 0;
 8001a38:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <main+0x68c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14))  { //Check if button pressed
 8001a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a42:	4845      	ldr	r0, [pc, #276]	; (8001b58 <main+0x678>)
 8001a44:	f001 ff58 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <main+0x576>

	  	  	 	  			  	 	  		   	 			  	  		  	charging = 1; //charging status check
 8001a4e:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <main+0x690>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	801a      	strh	r2, [r3, #0]
 8001a54:	e002      	b.n	8001a5c <main+0x57c>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  		    charging = 0;
 8001a56:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <main+0x690>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15))  { //Check if button pressed
 8001a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a60:	483d      	ldr	r0, [pc, #244]	; (8001b58 <main+0x678>)
 8001a62:	f001 ff49 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <main+0x594>

	  	  	 	  			  	 	  		   	 			  	  		   vechicle_on = 1; //vechicle status check
 8001a6c:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <main+0x694>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	e002      	b.n	8001a7a <main+0x59a>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  		  vechicle_on = 0;
 8001a74:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <main+0x694>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4))  { //Check if button pressed
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	4836      	ldr	r0, [pc, #216]	; (8001b58 <main+0x678>)
 8001a7e:	f001 ff3b 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <main+0x5bc>

	  	  	 	  			  	 	  		   	 			  	  	  		  DAS = 1; // DAS status check
 8001a88:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <main+0x698>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	801a      	strh	r2, [r3, #0]
	  	  	 	  			  	 	  		   	 			  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a94:	482f      	ldr	r0, [pc, #188]	; (8001b54 <main+0x674>)
 8001a96:	f001 ff46 	bl	8003926 <HAL_GPIO_WritePin>
 8001a9a:	e002      	b.n	8001aa2 <main+0x5c2>


	  	  	 	  			  	 	  		   	 	 }
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  	  		 DAS = 0;
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <main+0x698>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_7))  { //Check if button pressed
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	482c      	ldr	r0, [pc, #176]	; (8001b58 <main+0x678>)
 8001aa6:	f001 ff27 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <main+0x5d8>

	  	  	 	  			  	 	  		   	 		 	  			  	  brake = 1; // brake status check
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <main+0x69c>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e002      	b.n	8001abe <main+0x5de>


	  	  	 	  			  	 	  		   	 		 }
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 		 	  			  	   brake = 0;
 8001ab8:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <main+0x69c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	 if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6))  { //Check if button pressed
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	4825      	ldr	r0, [pc, #148]	; (8001b58 <main+0x678>)
 8001ac2:	f001 ff19 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <main+0x5f4>

	  	  	 	  			  	 	  		   	 		 	  			  	 	left_ind = 1; // indicator status check
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <main+0x6a0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	e002      	b.n	8001ada <main+0x5fa>


	  	  	 	  			  	 	  		   	 		  }
	  	  	 	  			  	 	  		   	 		 else{

	  	  	 	  			  	 	  		   	 		 	  			  	 	 left_ind = 0;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <main+0x6a0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		}
	  	  	 	  			  	 	  		   	 	 if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5))  { //Check if button pressed
 8001ada:	2120      	movs	r1, #32
 8001adc:	481e      	ldr	r0, [pc, #120]	; (8001b58 <main+0x678>)
 8001ade:	f001 ff0b 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <main+0x610>

	  	  	 	  			  	 	  		   	 		 	  			  right_ind = 1; // indicator status check
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <main+0x6a4>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	801a      	strh	r2, [r3, #0]
 8001aee:	e002      	b.n	8001af6 <main+0x616>

	  	  	 	                                           }
	  	  	 	  			  	 	  		   	 		else{

	  	  	 	  			  	 	  		   	 		 	  			    right_ind = 0;
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <main+0x6a4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	801a      	strh	r2, [r3, #0]
	  	  	 	  			  	 	  		   	 		 	 }
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_8))  { //Check if button pressed
 8001af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001afa:	4817      	ldr	r0, [pc, #92]	; (8001b58 <main+0x678>)
 8001afc:	f001 fefc 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d042      	beq.n	8001b8c <main+0x6ac>

	  	  	 	  			  	 	  		   	 		 		           low_beam = 1; // low beam status check
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <main+0x6a8>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	e041      	b.n	8001b92 <main+0x6b2>
 8001b0e:	bf00      	nop
 8001b10:	66666666 	.word	0x66666666
 8001b14:	40711266 	.word	0x40711266
 8001b18:	20002390 	.word	0x20002390
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20002394 	.word	0x20002394
 8001b24:	2000000c 	.word	0x2000000c
 8001b28:	20002398 	.word	0x20002398
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	2000239c 	.word	0x2000239c
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000010 	.word	0x20000010
 8001b3c:	200023a0 	.word	0x200023a0
 8001b40:	200023a4 	.word	0x200023a4
 8001b44:	20002280 	.word	0x20002280
 8001b48:	2000234e 	.word	0x2000234e
 8001b4c:	20002354 	.word	0x20002354
 8001b50:	2000238c 	.word	0x2000238c
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	20002360 	.word	0x20002360
 8001b60:	40010800 	.word	0x40010800
 8001b64:	20002362 	.word	0x20002362
 8001b68:	20002364 	.word	0x20002364
 8001b6c:	20002366 	.word	0x20002366
 8001b70:	20002368 	.word	0x20002368
 8001b74:	2000236c 	.word	0x2000236c
 8001b78:	2000236a 	.word	0x2000236a
 8001b7c:	2000236e 	.word	0x2000236e
 8001b80:	20002370 	.word	0x20002370
 8001b84:	20002372 	.word	0x20002372
 8001b88:	20002374 	.word	0x20002374


	  	  	 	  			  	 	  		   	 	 }
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 		 	                low_beam = 0;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <main+0x72c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		}
	  	  	 	  		 		   	 			  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_9))  { //Check if button pressed
 8001b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b96:	481e      	ldr	r0, [pc, #120]	; (8001c10 <main+0x730>)
 8001b98:	f001 feae 	bl	80038f8 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <main+0x6ca>

	  	  	 	  			  	 	  		   	 			 		  	 high_beam = 1; // high beam status check
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <main+0x734>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	e002      	b.n	8001bb0 <main+0x6d0>

	  	  	 	                                         }
	  	  	 	  			  	 	  		   	 	else{//VBAT_Out_Voltage,VBAT_current,speed,contemp,normal,echo,sports,side_stand,charging,vechicle_on, DAS,brake,left_ind,right_ind,low_beam,high_beam
	  	  	 	  			  	 	  		   	 		                 high_beam = 0;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <main+0x734>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		 	}

	  	  	 	  		 		   	 			  if((side_stand == 1) && (charging == 1)&&(( soc<=5))&&( (contemp<=15)||(contemp>40))){
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <main+0x738>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d13d      	bne.n	8001c34 <main+0x754>
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <main+0x73c>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d139      	bne.n	8001c34 <main+0x754>
 8001bc0:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d835      	bhi.n	8001c34 <main+0x754>
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <main+0x740>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4915      	ldr	r1, [pc, #84]	; (8001c24 <main+0x744>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fa80 	bl	80010d4 <__aeabi_fcmple>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <main+0x70c>
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <main+0x740>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4912      	ldr	r1, [pc, #72]	; (8001c28 <main+0x748>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fa8b 	bl	80010fc <__aeabi_fcmpgt>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <main+0x754>
	  	  	 	  		 		   	 			        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <main+0x74c>)
 8001bf4:	f001 fe97 	bl	8003926 <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <main+0x74c>)
 8001c00:	f001 fe91 	bl	8003926 <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 	                 alert=1;// Alert signal
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <main+0x750>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	e022      	b.n	8001c52 <main+0x772>
 8001c0c:	20002374 	.word	0x20002374
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	20002376 	.word	0x20002376
 8001c18:	20002366 	.word	0x20002366
 8001c1c:	20002368 	.word	0x20002368
 8001c20:	200023a4 	.word	0x200023a4
 8001c24:	41700000 	.word	0x41700000
 8001c28:	42200000 	.word	0x42200000
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	20002378 	.word	0x20002378
	  	  	 	  		 		   	 			  }
	  	  	 	  		 		   	 			  else{
	  	  	 	  		 		   	            		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3a:	48b1      	ldr	r0, [pc, #708]	; (8001f00 <main+0xa20>)
 8001c3c:	f001 fe73 	bl	8003926 <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 				 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	48ae      	ldr	r0, [pc, #696]	; (8001f00 <main+0xa20>)
 8001c48:	f001 fe6d 	bl	8003926 <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 				     alert=0;
 8001c4c:	4bad      	ldr	r3, [pc, #692]	; (8001f04 <main+0xa24>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	801a      	strh	r2, [r3, #0]
	  	  	 	  		 		   	 			  }
	  	  	 	  		 		   	 			memset(VBAT_Out_Voltage_string, 0, sizeof(VBAT_Out_Voltage_string));
 8001c52:	2232      	movs	r2, #50	; 0x32
 8001c54:	2100      	movs	r1, #0
 8001c56:	48ac      	ldr	r0, [pc, #688]	; (8001f08 <main+0xa28>)
 8001c58:	f006 f99a 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(VBAT_current_string, 0, sizeof(VBAT_current_string));
 8001c5c:	2232      	movs	r2, #50	; 0x32
 8001c5e:	2100      	movs	r1, #0
 8001c60:	48aa      	ldr	r0, [pc, #680]	; (8001f0c <main+0xa2c>)
 8001c62:	f006 f995 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(speed_string, 0, sizeof(speed_string));
 8001c66:	2232      	movs	r2, #50	; 0x32
 8001c68:	2100      	movs	r1, #0
 8001c6a:	48a9      	ldr	r0, [pc, #676]	; (8001f10 <main+0xa30>)
 8001c6c:	f006 f990 	bl	8007f90 <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(contemp_string, 0, sizeof(contemp_string));
 8001c70:	2232      	movs	r2, #50	; 0x32
 8001c72:	2100      	movs	r1, #0
 8001c74:	48a7      	ldr	r0, [pc, #668]	; (8001f14 <main+0xa34>)
 8001c76:	f006 f98b 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(normal_string, 0, sizeof(normal_string));
 8001c7a:	2232      	movs	r2, #50	; 0x32
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	48a6      	ldr	r0, [pc, #664]	; (8001f18 <main+0xa38>)
 8001c80:	f006 f986 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(echo_string, 0, sizeof(echo_string));
 8001c84:	2232      	movs	r2, #50	; 0x32
 8001c86:	2100      	movs	r1, #0
 8001c88:	48a4      	ldr	r0, [pc, #656]	; (8001f1c <main+0xa3c>)
 8001c8a:	f006 f981 	bl	8007f90 <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(sports_string, 0, sizeof(sports_string));
 8001c8e:	2232      	movs	r2, #50	; 0x32
 8001c90:	2100      	movs	r1, #0
 8001c92:	48a3      	ldr	r0, [pc, #652]	; (8001f20 <main+0xa40>)
 8001c94:	f006 f97c 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(side_stand_string, 0, sizeof(side_stand_string));
 8001c98:	2232      	movs	r2, #50	; 0x32
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	48a1      	ldr	r0, [pc, #644]	; (8001f24 <main+0xa44>)
 8001c9e:	f006 f977 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(charging_string, 0, sizeof(charging_string));
 8001ca2:	2232      	movs	r2, #50	; 0x32
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	48a0      	ldr	r0, [pc, #640]	; (8001f28 <main+0xa48>)
 8001ca8:	f006 f972 	bl	8007f90 <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(vechicle_on_string, 0, sizeof(vechicle_on_string));
 8001cac:	2232      	movs	r2, #50	; 0x32
 8001cae:	2100      	movs	r1, #0
 8001cb0:	489e      	ldr	r0, [pc, #632]	; (8001f2c <main+0xa4c>)
 8001cb2:	f006 f96d 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(DAS_string, 0, sizeof(DAS_string));
 8001cb6:	2232      	movs	r2, #50	; 0x32
 8001cb8:	2100      	movs	r1, #0
 8001cba:	489d      	ldr	r0, [pc, #628]	; (8001f30 <main+0xa50>)
 8001cbc:	f006 f968 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(brake_string, 0, sizeof(brake_string));
 8001cc0:	2232      	movs	r2, #50	; 0x32
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	489b      	ldr	r0, [pc, #620]	; (8001f34 <main+0xa54>)
 8001cc6:	f006 f963 	bl	8007f90 <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(left_ind_string, 0, sizeof(left_ind_string));
 8001cca:	2232      	movs	r2, #50	; 0x32
 8001ccc:	2100      	movs	r1, #0
 8001cce:	489a      	ldr	r0, [pc, #616]	; (8001f38 <main+0xa58>)
 8001cd0:	f006 f95e 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(right_ind_string, 0, sizeof(right_ind_string));
 8001cd4:	2232      	movs	r2, #50	; 0x32
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4898      	ldr	r0, [pc, #608]	; (8001f3c <main+0xa5c>)
 8001cda:	f006 f959 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(low_beam_string, 0, sizeof(low_beam_string));
 8001cde:	2232      	movs	r2, #50	; 0x32
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4897      	ldr	r0, [pc, #604]	; (8001f40 <main+0xa60>)
 8001ce4:	f006 f954 	bl	8007f90 <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(high_beam_string, 0, sizeof(high_beam_string));
 8001ce8:	2232      	movs	r2, #50	; 0x32
 8001cea:	2100      	movs	r1, #0
 8001cec:	4895      	ldr	r0, [pc, #596]	; (8001f44 <main+0xa64>)
 8001cee:	f006 f94f 	bl	8007f90 <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	       // memset(temp_string, 0, sizeof(temp_string));
	  	  	 	  		 		   	 					 		   	 			 	      	       // memset(press_string, 0, sizeof(press_string));

	  	  	 	  		 		   	 			 		   	 		                        memset(soc_string, 0, sizeof(soc_string));
 8001cf2:	2232      	movs	r2, #50	; 0x32
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4894      	ldr	r0, [pc, #592]	; (8001f48 <main+0xa68>)
 8001cf8:	f006 f94a 	bl	8007f90 <memset>
	  	  	 	  		 		   	 			 		   	 			 	      	        memset(dod_string, 0, sizeof(dod_string));
 8001cfc:	2232      	movs	r2, #50	; 0x32
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4892      	ldr	r0, [pc, #584]	; (8001f4c <main+0xa6c>)
 8001d02:	f006 f945 	bl	8007f90 <memset>
	  	  	 	  		 		   	 			 		   	 			 	      	        memset(batteryPercentage_string, 0, sizeof(batteryPercentage_string));
 8001d06:	2232      	movs	r2, #50	; 0x32
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4891      	ldr	r0, [pc, #580]	; (8001f50 <main+0xa70>)
 8001d0c:	f006 f940 	bl	8007f90 <memset>





	  	  	 	  		 		   	 					 		   	 			 	                sprintf(VBAT_Out_Voltage_string, "VBAT_Out_Voltage %03.1f%% ",VBAT_Out_Voltage);
 8001d10:	4b90      	ldr	r3, [pc, #576]	; (8001f54 <main+0xa74>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4990      	ldr	r1, [pc, #576]	; (8001f58 <main+0xa78>)
 8001d18:	487b      	ldr	r0, [pc, #492]	; (8001f08 <main+0xa28>)
 8001d1a:	f006 ffb3 	bl	8008c84 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(VBAT_current_string, "VBAT_current %03.1fC ", VBAT_current);
 8001d1e:	4b8f      	ldr	r3, [pc, #572]	; (8001f5c <main+0xa7c>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	498e      	ldr	r1, [pc, #568]	; (8001f60 <main+0xa80>)
 8001d26:	4879      	ldr	r0, [pc, #484]	; (8001f0c <main+0xa2c>)
 8001d28:	f006 ffac 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(speed_string, "speed %03.1fhPa\n", speed);
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <main+0xa84>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	498d      	ldr	r1, [pc, #564]	; (8001f68 <main+0xa88>)
 8001d34:	4876      	ldr	r0, [pc, #472]	; (8001f10 <main+0xa30>)
 8001d36:	f006 ffa5 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(contemp_string, "temperature %03.1f%% ",contemp);
 8001d3a:	4b8c      	ldr	r3, [pc, #560]	; (8001f6c <main+0xa8c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fb72 	bl	8000428 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4989      	ldr	r1, [pc, #548]	; (8001f70 <main+0xa90>)
 8001d4a:	4872      	ldr	r0, [pc, #456]	; (8001f14 <main+0xa34>)
 8001d4c:	f006 ff9a 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(normal_string, "normal %03.1fC ", normal);
 8001d50:	4b88      	ldr	r3, [pc, #544]	; (8001f74 <main+0xa94>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4988      	ldr	r1, [pc, #544]	; (8001f78 <main+0xa98>)
 8001d58:	486f      	ldr	r0, [pc, #444]	; (8001f18 <main+0xa38>)
 8001d5a:	f006 ff93 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(echo_string, "echo %03.1fhPa\n",echo);
 8001d5e:	4b87      	ldr	r3, [pc, #540]	; (8001f7c <main+0xa9c>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4986      	ldr	r1, [pc, #536]	; (8001f80 <main+0xaa0>)
 8001d66:	486d      	ldr	r0, [pc, #436]	; (8001f1c <main+0xa3c>)
 8001d68:	f006 ff8c 	bl	8008c84 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	                sprintf(sports_string, "sports %03.1f%% ",sports);
 8001d6c:	4b85      	ldr	r3, [pc, #532]	; (8001f84 <main+0xaa4>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4985      	ldr	r1, [pc, #532]	; (8001f88 <main+0xaa8>)
 8001d74:	486a      	ldr	r0, [pc, #424]	; (8001f20 <main+0xa40>)
 8001d76:	f006 ff85 	bl	8008c84 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(side_stand_string, "side_stand %03.1fC ", side_stand);
 8001d7a:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <main+0xaac>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4983      	ldr	r1, [pc, #524]	; (8001f90 <main+0xab0>)
 8001d82:	4868      	ldr	r0, [pc, #416]	; (8001f24 <main+0xa44>)
 8001d84:	f006 ff7e 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(charging_string, "charging %03.1fhPa\n", charging);
 8001d88:	4b82      	ldr	r3, [pc, #520]	; (8001f94 <main+0xab4>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4982      	ldr	r1, [pc, #520]	; (8001f98 <main+0xab8>)
 8001d90:	4865      	ldr	r0, [pc, #404]	; (8001f28 <main+0xa48>)
 8001d92:	f006 ff77 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(vechicle_on_string, "vechicle_on %03.1f%% ",vechicle_on);
 8001d96:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <main+0xabc>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4980      	ldr	r1, [pc, #512]	; (8001fa0 <main+0xac0>)
 8001d9e:	4863      	ldr	r0, [pc, #396]	; (8001f2c <main+0xa4c>)
 8001da0:	f006 ff70 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(DAS_string, "DAS %03.1fC ", DAS);
 8001da4:	4b7f      	ldr	r3, [pc, #508]	; (8001fa4 <main+0xac4>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	497f      	ldr	r1, [pc, #508]	; (8001fa8 <main+0xac8>)
 8001dac:	4860      	ldr	r0, [pc, #384]	; (8001f30 <main+0xa50>)
 8001dae:	f006 ff69 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(brake_string, "brake %03.1fhPa\n",brake);
 8001db2:	4b7e      	ldr	r3, [pc, #504]	; (8001fac <main+0xacc>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	497d      	ldr	r1, [pc, #500]	; (8001fb0 <main+0xad0>)
 8001dba:	485e      	ldr	r0, [pc, #376]	; (8001f34 <main+0xa54>)
 8001dbc:	f006 ff62 	bl	8008c84 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(left_ind_string, "left_ind %03.1fC ", left_ind);
 8001dc0:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <main+0xad4>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	497c      	ldr	r1, [pc, #496]	; (8001fb8 <main+0xad8>)
 8001dc8:	485b      	ldr	r0, [pc, #364]	; (8001f38 <main+0xa58>)
 8001dca:	f006 ff5b 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(right_ind_string, "right_ind %03.1fhPa\n", right_ind);
 8001dce:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <main+0xadc>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	497a      	ldr	r1, [pc, #488]	; (8001fc0 <main+0xae0>)
 8001dd6:	4859      	ldr	r0, [pc, #356]	; (8001f3c <main+0xa5c>)
 8001dd8:	f006 ff54 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(low_beam_string, "low_beam %03.1f%% ",low_beam);
 8001ddc:	4b79      	ldr	r3, [pc, #484]	; (8001fc4 <main+0xae4>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4979      	ldr	r1, [pc, #484]	; (8001fc8 <main+0xae8>)
 8001de4:	4856      	ldr	r0, [pc, #344]	; (8001f40 <main+0xa60>)
 8001de6:	f006 ff4d 	bl	8008c84 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(high_beam_string, "high_beam %03.1fC ", high_beam);
 8001dea:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <main+0xaec>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	4977      	ldr	r1, [pc, #476]	; (8001fd0 <main+0xaf0>)
 8001df2:	4854      	ldr	r0, [pc, #336]	; (8001f44 <main+0xa64>)
 8001df4:	f006 ff46 	bl	8008c84 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(dod_string, "dod %03.1fC ", dod);
 8001df8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4975      	ldr	r1, [pc, #468]	; (8001fd4 <main+0xaf4>)
 8001e00:	4852      	ldr	r0, [pc, #328]	; (8001f4c <main+0xa6c>)
 8001e02:	f006 ff3f 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(soc_string, "soc %03.1fhPa\n", soc);
 8001e06:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4972      	ldr	r1, [pc, #456]	; (8001fd8 <main+0xaf8>)
 8001e0e:	484e      	ldr	r0, [pc, #312]	; (8001f48 <main+0xa68>)
 8001e10:	f006 ff38 	bl	8008c84 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(batteryPercentage_string, "batteryPercentage %03.1f%% ",batteryPercentage);
 8001e14:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <main+0xafc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4971      	ldr	r1, [pc, #452]	; (8001fe0 <main+0xb00>)
 8001e1c:	484c      	ldr	r0, [pc, #304]	; (8001f50 <main+0xa70>)
 8001e1e:	f006 ff31 	bl	8008c84 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	f_open(&fil, "DAS.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001e22:	2213      	movs	r2, #19
 8001e24:	496f      	ldr	r1, [pc, #444]	; (8001fe4 <main+0xb04>)
 8001e26:	4870      	ldr	r0, [pc, #448]	; (8001fe8 <main+0xb08>)
 8001e28:	f004 fe8e 	bl	8006b48 <f_open>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_lseek(&fil, fil.fsize);
 8001e2c:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <main+0xb08>)
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4619      	mov	r1, r3
 8001e36:	486c      	ldr	r0, [pc, #432]	; (8001fe8 <main+0xb08>)
 8001e38:	f005 fcbe 	bl	80077b8 <f_lseek>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(VBAT_Out_Voltage_string, &fil);
 8001e3c:	496a      	ldr	r1, [pc, #424]	; (8001fe8 <main+0xb08>)
 8001e3e:	4832      	ldr	r0, [pc, #200]	; (8001f08 <main+0xa28>)
 8001e40:	f005 ffe8 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(VBAT_current_string, &fil);
 8001e44:	4968      	ldr	r1, [pc, #416]	; (8001fe8 <main+0xb08>)
 8001e46:	4831      	ldr	r0, [pc, #196]	; (8001f0c <main+0xa2c>)
 8001e48:	f005 ffe4 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(contemp_string, &fil);
 8001e4c:	4966      	ldr	r1, [pc, #408]	; (8001fe8 <main+0xb08>)
 8001e4e:	4831      	ldr	r0, [pc, #196]	; (8001f14 <main+0xa34>)
 8001e50:	f005 ffe0 	bl	8007e14 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(normal_string, &fil);
 8001e54:	4964      	ldr	r1, [pc, #400]	; (8001fe8 <main+0xb08>)
 8001e56:	4830      	ldr	r0, [pc, #192]	; (8001f18 <main+0xa38>)
 8001e58:	f005 ffdc 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(echo_string, &fil);
 8001e5c:	4962      	ldr	r1, [pc, #392]	; (8001fe8 <main+0xb08>)
 8001e5e:	482f      	ldr	r0, [pc, #188]	; (8001f1c <main+0xa3c>)
 8001e60:	f005 ffd8 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(sports_string, &fil);
 8001e64:	4960      	ldr	r1, [pc, #384]	; (8001fe8 <main+0xb08>)
 8001e66:	482e      	ldr	r0, [pc, #184]	; (8001f20 <main+0xa40>)
 8001e68:	f005 ffd4 	bl	8007e14 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(side_stand_string, &fil);
 8001e6c:	495e      	ldr	r1, [pc, #376]	; (8001fe8 <main+0xb08>)
 8001e6e:	482d      	ldr	r0, [pc, #180]	; (8001f24 <main+0xa44>)
 8001e70:	f005 ffd0 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(charging_string, &fil);
 8001e74:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <main+0xb08>)
 8001e76:	482c      	ldr	r0, [pc, #176]	; (8001f28 <main+0xa48>)
 8001e78:	f005 ffcc 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(vechicle_on_string, &fil);
 8001e7c:	495a      	ldr	r1, [pc, #360]	; (8001fe8 <main+0xb08>)
 8001e7e:	482b      	ldr	r0, [pc, #172]	; (8001f2c <main+0xa4c>)
 8001e80:	f005 ffc8 	bl	8007e14 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(DAS_string, &fil);
 8001e84:	4958      	ldr	r1, [pc, #352]	; (8001fe8 <main+0xb08>)
 8001e86:	482a      	ldr	r0, [pc, #168]	; (8001f30 <main+0xa50>)
 8001e88:	f005 ffc4 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(brake_string, &fil);
 8001e8c:	4956      	ldr	r1, [pc, #344]	; (8001fe8 <main+0xb08>)
 8001e8e:	4829      	ldr	r0, [pc, #164]	; (8001f34 <main+0xa54>)
 8001e90:	f005 ffc0 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(left_ind_string, &fil);
 8001e94:	4954      	ldr	r1, [pc, #336]	; (8001fe8 <main+0xb08>)
 8001e96:	4828      	ldr	r0, [pc, #160]	; (8001f38 <main+0xa58>)
 8001e98:	f005 ffbc 	bl	8007e14 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(right_ind_string, &fil);
 8001e9c:	4952      	ldr	r1, [pc, #328]	; (8001fe8 <main+0xb08>)
 8001e9e:	4827      	ldr	r0, [pc, #156]	; (8001f3c <main+0xa5c>)
 8001ea0:	f005 ffb8 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(low_beam_string, &fil);
 8001ea4:	4950      	ldr	r1, [pc, #320]	; (8001fe8 <main+0xb08>)
 8001ea6:	4826      	ldr	r0, [pc, #152]	; (8001f40 <main+0xa60>)
 8001ea8:	f005 ffb4 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(high_beam_string, &fil);
 8001eac:	494e      	ldr	r1, [pc, #312]	; (8001fe8 <main+0xb08>)
 8001eae:	4825      	ldr	r0, [pc, #148]	; (8001f44 <main+0xa64>)
 8001eb0:	f005 ffb0 	bl	8007e14 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(dod_string, &fil);
 8001eb4:	494c      	ldr	r1, [pc, #304]	; (8001fe8 <main+0xb08>)
 8001eb6:	4825      	ldr	r0, [pc, #148]	; (8001f4c <main+0xa6c>)
 8001eb8:	f005 ffac 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(soc_string, &fil);
 8001ebc:	494a      	ldr	r1, [pc, #296]	; (8001fe8 <main+0xb08>)
 8001ebe:	4822      	ldr	r0, [pc, #136]	; (8001f48 <main+0xa68>)
 8001ec0:	f005 ffa8 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(batteryPercentage_string, &fil);
 8001ec4:	4948      	ldr	r1, [pc, #288]	; (8001fe8 <main+0xb08>)
 8001ec6:	4822      	ldr	r0, [pc, #136]	; (8001f50 <main+0xa70>)
 8001ec8:	f005 ffa4 	bl	8007e14 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(time, &fil);
 8001ecc:	4946      	ldr	r1, [pc, #280]	; (8001fe8 <main+0xb08>)
 8001ece:	4847      	ldr	r0, [pc, #284]	; (8001fec <main+0xb0c>)
 8001ed0:	f005 ffa0 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(location, &fil);
 8001ed4:	4944      	ldr	r1, [pc, #272]	; (8001fe8 <main+0xb08>)
 8001ed6:	4846      	ldr	r0, [pc, #280]	; (8001ff0 <main+0xb10>)
 8001ed8:	f005 ff9c 	bl	8007e14 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_close(&fil);
 8001edc:	4842      	ldr	r0, [pc, #264]	; (8001fe8 <main+0xb08>)
 8001ede:	f005 fc40 	bl	8007762 <f_close>

	  	  	 	  			// HAL_UART_Transmit (&huart1, data, sizeof (data), 1000);//VBAT_Out_Voltage,VBAT_current,speed,contemp,normal,echo,sports,side_stand,charging,vechicle_on, DAS,brake,left_ind,right_ind,low_beam,high_beam
	  	  	 	   uart_buf_len = sprintf(uart_buf,"{\"voltage\":%d,\"current\":%d,\"speed\":%d,\"temp\":%d,\"normal\":%d,\"echo\":%d,\"sports\":%d,\"side_stand\":%d,\"charging\":%d,\"vechicle_on\":%d,\"DAS\":%d,\"brake\":%d,\"left_ind\":%d,\"right_ind\":%d,\"low_beam\":%d,\"high_beam\":%d,\"soc\":%d,\"dod\":%d,\"batteryPercentage\":%d,\"latitude\":13.0728,\"NS\":N,\"longitude\":80.2042,\"EW\":E,\"hour\":23,\"min\":30,\"sec\":15,\"day\":29,\"mon\":03,\"year\":2003,\"trip\":60,\"range\":80}\n",(int)VBAT_Out_Voltage,(int)VBAT_current,(int)speed,(int)contemp,(int)normal,(int)echo,(int)sports,(int)side_stand,(int)charging,(int)vechicle_on,(int)DAS,(int)brake,(int)left_ind,(int)right_ind,(int)low_beam,(int)high_beam,(int)soc,(int)dod);//,(int)batteryPercentage,(int)latitude,NS,(int)longitude,EW,(int)hours,(int)mins,(int)secs,(int)days,(int)mont,(int)years);
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <main+0xa74>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	4698      	mov	r8, r3
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <main+0xa7c>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	4699      	mov	r9, r3
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <main+0xa84>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <main+0xa8c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f909 	bl	8001110 <__aeabi_f2iz>
 8001efe:	e079      	b.n	8001ff4 <main+0xb14>
 8001f00:	40011000 	.word	0x40011000
 8001f04:	20002378 	.word	0x20002378
 8001f08:	200023a8 	.word	0x200023a8
 8001f0c:	200023dc 	.word	0x200023dc
 8001f10:	20002410 	.word	0x20002410
 8001f14:	20002444 	.word	0x20002444
 8001f18:	20002478 	.word	0x20002478
 8001f1c:	200024ac 	.word	0x200024ac
 8001f20:	200024e0 	.word	0x200024e0
 8001f24:	20002514 	.word	0x20002514
 8001f28:	20002548 	.word	0x20002548
 8001f2c:	2000257c 	.word	0x2000257c
 8001f30:	200025b0 	.word	0x200025b0
 8001f34:	200025e4 	.word	0x200025e4
 8001f38:	20002618 	.word	0x20002618
 8001f3c:	2000264c 	.word	0x2000264c
 8001f40:	20002680 	.word	0x20002680
 8001f44:	200026b4 	.word	0x200026b4
 8001f48:	200026e8 	.word	0x200026e8
 8001f4c:	2000271c 	.word	0x2000271c
 8001f50:	20002750 	.word	0x20002750
 8001f54:	2000234e 	.word	0x2000234e
 8001f58:	0800cc08 	.word	0x0800cc08
 8001f5c:	20002354 	.word	0x20002354
 8001f60:	0800cc24 	.word	0x0800cc24
 8001f64:	2000235e 	.word	0x2000235e
 8001f68:	0800cc3c 	.word	0x0800cc3c
 8001f6c:	200023a4 	.word	0x200023a4
 8001f70:	0800cc50 	.word	0x0800cc50
 8001f74:	20002360 	.word	0x20002360
 8001f78:	0800cc68 	.word	0x0800cc68
 8001f7c:	20002362 	.word	0x20002362
 8001f80:	0800cc78 	.word	0x0800cc78
 8001f84:	20002364 	.word	0x20002364
 8001f88:	0800cc88 	.word	0x0800cc88
 8001f8c:	20002366 	.word	0x20002366
 8001f90:	0800cc9c 	.word	0x0800cc9c
 8001f94:	20002368 	.word	0x20002368
 8001f98:	0800ccb0 	.word	0x0800ccb0
 8001f9c:	2000236c 	.word	0x2000236c
 8001fa0:	0800ccc4 	.word	0x0800ccc4
 8001fa4:	2000236a 	.word	0x2000236a
 8001fa8:	0800ccdc 	.word	0x0800ccdc
 8001fac:	2000236e 	.word	0x2000236e
 8001fb0:	0800ccec 	.word	0x0800ccec
 8001fb4:	20002370 	.word	0x20002370
 8001fb8:	0800cd00 	.word	0x0800cd00
 8001fbc:	20002372 	.word	0x20002372
 8001fc0:	0800cd14 	.word	0x0800cd14
 8001fc4:	20002374 	.word	0x20002374
 8001fc8:	0800cd2c 	.word	0x0800cd2c
 8001fcc:	20002376 	.word	0x20002376
 8001fd0:	0800cd40 	.word	0x0800cd40
 8001fd4:	0800cd54 	.word	0x0800cd54
 8001fd8:	0800cd64 	.word	0x0800cd64
 8001fdc:	2000238c 	.word	0x2000238c
 8001fe0:	0800cd74 	.word	0x0800cd74
 8001fe4:	0800cbe4 	.word	0x0800cbe4
 8001fe8:	20001254 	.word	0x20001254
 8001fec:	20002784 	.word	0x20002784
 8001ff0:	200027b8 	.word	0x200027b8
 8001ff4:	4605      	mov	r5, r0
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <main+0xbcc>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <main+0xbd0>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <main+0xbd4>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <main+0xbd8>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <main+0xbdc>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <main+0xbe0>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <main+0xbe4>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <main+0xbe8>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <main+0xbec>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <main+0xbf0>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461e      	mov	r6, r3
 8002032:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <main+0xbf4>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	461c      	mov	r4, r3
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <main+0xbf8>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8002042:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002046:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800204a:	930f      	str	r3, [sp, #60]	; 0x3c
 800204c:	920e      	str	r2, [sp, #56]	; 0x38
 800204e:	910d      	str	r1, [sp, #52]	; 0x34
 8002050:	940c      	str	r4, [sp, #48]	; 0x30
 8002052:	960b      	str	r6, [sp, #44]	; 0x2c
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	920a      	str	r2, [sp, #40]	; 0x28
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	9209      	str	r2, [sp, #36]	; 0x24
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	9208      	str	r2, [sp, #32]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	9207      	str	r2, [sp, #28]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	9206      	str	r2, [sp, #24]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	9205      	str	r2, [sp, #20]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	9204      	str	r2, [sp, #16]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	9203      	str	r2, [sp, #12]
 8002074:	6a3a      	ldr	r2, [r7, #32]
 8002076:	9202      	str	r2, [sp, #8]
 8002078:	9501      	str	r5, [sp, #4]
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	464b      	mov	r3, r9
 8002080:	4642      	mov	r2, r8
 8002082:	4916      	ldr	r1, [pc, #88]	; (80020dc <main+0xbfc>)
 8002084:	f006 fdfe 	bl	8008c84 <siprintf>
 8002088:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	  	  	 	  	 HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf,uart_buf_len, 1000);
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002090:	b29a      	uxth	r2, r3
 8002092:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209a:	4811      	ldr	r0, [pc, #68]	; (80020e0 <main+0xc00>)
 800209c:	f002 fabd 	bl	800461a <HAL_UART_Transmit>
	  	  	 	  			 HAL_Delay(1000);
 80020a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a4:	f000 fc3c 	bl	8002920 <HAL_Delay>
  {
 80020a8:	f7ff ba45 	b.w	8001536 <main+0x56>
 80020ac:	20002360 	.word	0x20002360
 80020b0:	20002362 	.word	0x20002362
 80020b4:	20002364 	.word	0x20002364
 80020b8:	20002366 	.word	0x20002366
 80020bc:	20002368 	.word	0x20002368
 80020c0:	2000236c 	.word	0x2000236c
 80020c4:	2000236a 	.word	0x2000236a
 80020c8:	2000236e 	.word	0x2000236e
 80020cc:	20002370 	.word	0x20002370
 80020d0:	20002372 	.word	0x20002372
 80020d4:	20002374 	.word	0x20002374
 80020d8:	20002376 	.word	0x20002376
 80020dc:	0800cd90 	.word	0x0800cd90
 80020e0:	20002308 	.word	0x20002308

080020e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b094      	sub	sp, #80	; 0x50
 80020e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ee:	2228      	movs	r2, #40	; 0x28
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f005 ff4c 	bl	8007f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002114:	2301      	movs	r3, #1
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002122:	2301      	movs	r3, #1
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002126:	2302      	movs	r3, #2
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800212a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002130:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002134:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800213a:	4618      	mov	r0, r3
 800213c:	f001 fc0c 	bl	8003958 <HAL_RCC_OscConfig>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002146:	f000 f959 	bl	80023fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800214a:	230f      	movs	r3, #15
 800214c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214e:	2302      	movs	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2102      	movs	r1, #2
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fe78 	bl	8003e5c <HAL_RCC_ClockConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002172:	f000 f943 	bl	80023fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002176:	2302      	movs	r3, #2
 8002178:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800217a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4618      	mov	r0, r3
 8002184:	f002 f802 	bl	800418c <HAL_RCCEx_PeriphCLKConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800218e:	f000 f935 	bl	80023fc <Error_Handler>
  }
}
 8002192:	bf00      	nop
 8002194:	3750      	adds	r7, #80	; 0x50
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <MX_ADC1_Init+0x5c>)
 80021b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021bc:	2201      	movs	r2, #1
 80021be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80021cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021d6:	2204      	movs	r2, #4
 80021d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021da:	4806      	ldr	r0, [pc, #24]	; (80021f4 <MX_ADC1_Init+0x58>)
 80021dc:	f000 fbc4 	bl	8002968 <HAL_ADC_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80021e6:	f000 f909 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20002280 	.word	0x20002280
 80021f8:	40012400 	.word	0x40012400

080021fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <MX_SPI1_Init+0x68>)
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <MX_SPI1_Init+0x6c>)
 8002204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <MX_SPI1_Init+0x68>)
 8002208:	f44f 7282 	mov.w	r2, #260	; 0x104
 800220c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <MX_SPI1_Init+0x68>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_SPI1_Init+0x68>)
 8002216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800221a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_SPI1_Init+0x68>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <MX_SPI1_Init+0x68>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_SPI1_Init+0x68>)
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_SPI1_Init+0x68>)
 8002232:	2210      	movs	r2, #16
 8002234:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_SPI1_Init+0x68>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_SPI1_Init+0x68>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_SPI1_Init+0x68>)
 8002244:	2200      	movs	r2, #0
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_SPI1_Init+0x68>)
 800224a:	220a      	movs	r2, #10
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_SPI1_Init+0x68>)
 8002250:	f002 f912 	bl	8004478 <HAL_SPI_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800225a:	f000 f8cf 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200022b0 	.word	0x200022b0
 8002268:	40013000 	.word	0x40013000

0800226c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <MX_USART1_UART_Init+0x50>)
 8002274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800227c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 80022a4:	f002 f96c 	bl	8004580 <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ae:	f000 f8a5 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20002308 	.word	0x20002308
 80022bc:	40013800 	.word	0x40013800

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 0310 	add.w	r3, r7, #16
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d4:	4b45      	ldr	r3, [pc, #276]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4a44      	ldr	r2, [pc, #272]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022da:	f043 0310 	orr.w	r3, r3, #16
 80022de:	6193      	str	r3, [r2, #24]
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ec:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a3e      	ldr	r2, [pc, #248]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022f2:	f043 0320 	orr.w	r3, r3, #32
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b39      	ldr	r3, [pc, #228]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a38      	ldr	r2, [pc, #224]	; (80023ec <MX_GPIO_Init+0x12c>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <MX_GPIO_Init+0x12c>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <MX_GPIO_Init+0x12c>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800233a:	482d      	ldr	r0, [pc, #180]	; (80023f0 <MX_GPIO_Init+0x130>)
 800233c:	f001 faf3 	bl	8003926 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2108      	movs	r1, #8
 8002344:	482b      	ldr	r0, [pc, #172]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002346:	f001 faee 	bl	8003926 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002350:	4829      	ldr	r0, [pc, #164]	; (80023f8 <MX_GPIO_Init+0x138>)
 8002352:	f001 fae8 	bl	8003926 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002356:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800235a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235c:	2301      	movs	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2302      	movs	r3, #2
 8002366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	4619      	mov	r1, r3
 800236e:	4820      	ldr	r0, [pc, #128]	; (80023f0 <MX_GPIO_Init+0x130>)
 8002370:	f001 f93e 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002374:	2308      	movs	r3, #8
 8002376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	2301      	movs	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2302      	movs	r3, #2
 8002382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	4619      	mov	r1, r3
 800238a:	481a      	ldr	r0, [pc, #104]	; (80023f4 <MX_GPIO_Init+0x134>)
 800238c:	f001 f930 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8002390:	f247 33f8 	movw	r3, #29688	; 0x73f8
 8002394:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4619      	mov	r1, r3
 80023a4:	4814      	ldr	r0, [pc, #80]	; (80023f8 <MX_GPIO_Init+0x138>)
 80023a6:	f001 f923 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	4619      	mov	r1, r3
 80023c2:	480d      	ldr	r0, [pc, #52]	; (80023f8 <MX_GPIO_Init+0x138>)
 80023c4:	f001 f914 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80023c8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80023cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_GPIO_Init+0x134>)
 80023de:	f001 f907 	bl	80035f0 <HAL_GPIO_Init>

}
 80023e2:	bf00      	nop
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40010800 	.word	0x40010800
 80023f8:	40010c00 	.word	0x40010c00

080023fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002404:	e7fe      	b.n	8002404 <Error_Handler+0x8>
	...

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_MspInit+0x5c>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_MspInit+0x5c>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6193      	str	r3, [r2, #24]
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_MspInit+0x5c>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_MspInit+0x5c>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <HAL_MspInit+0x5c>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_MspInit+0x5c>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_MspInit+0x60>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_MspInit+0x60>)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000

0800246c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_ADC_MspInit+0x7c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d129      	bne.n	80024e0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_ADC_MspInit+0x80>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a16      	ldr	r2, [pc, #88]	; (80024ec <HAL_ADC_MspInit+0x80>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_ADC_MspInit+0x80>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_ADC_MspInit+0x80>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_ADC_MspInit+0x80>)
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_ADC_MspInit+0x80>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80024bc:	2317      	movs	r3, #23
 80024be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c0:	2303      	movs	r3, #3
 80024c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4619      	mov	r1, r3
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <HAL_ADC_MspInit+0x84>)
 80024cc:	f001 f890 	bl	80035f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2012      	movs	r0, #18
 80024d6:	f001 f854 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024da:	2012      	movs	r0, #18
 80024dc:	f001 f86d 	bl	80035ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40012400 	.word	0x40012400
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010800 	.word	0x40010800

080024f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_SPI_MspInit+0x88>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d12f      	bne.n	8002574 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 800251a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002544:	23a0      	movs	r3, #160	; 0xa0
 8002546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4619      	mov	r1, r3
 8002556:	480b      	ldr	r0, [pc, #44]	; (8002584 <HAL_SPI_MspInit+0x90>)
 8002558:	f001 f84a 	bl	80035f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4619      	mov	r1, r3
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_SPI_MspInit+0x90>)
 8002570:	f001 f83e 	bl	80035f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002574:	bf00      	nop
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40013000 	.word	0x40013000
 8002580:	40021000 	.word	0x40021000
 8002584:	40010800 	.word	0x40010800

08002588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_UART_MspInit+0x8c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d131      	bne.n	800260c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_UART_MspInit+0x90>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_UART_MspInit+0x90>)
 80025ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_UART_MspInit+0x90>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_UART_MspInit+0x90>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <HAL_UART_MspInit+0x90>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_UART_MspInit+0x90>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	480b      	ldr	r0, [pc, #44]	; (800261c <HAL_UART_MspInit+0x94>)
 80025ee:	f000 ffff 	bl	80035f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4619      	mov	r1, r3
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <HAL_UART_MspInit+0x94>)
 8002608:	f000 fff2 	bl	80035f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40013800 	.word	0x40013800
 8002618:	40021000 	.word	0x40021000
 800261c:	40010800 	.word	0x40010800

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <NMI_Handler+0x4>

08002626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <MemManage_Handler+0x4>

08002632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <BusFault_Handler+0x4>

08002638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <UsageFault_Handler+0x4>

0800263e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002666:	f000 f93f 	bl	80028e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <ADC1_2_IRQHandler+0x10>)
 8002676:	f000 fc3b 	bl	8002ef0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20002280 	.word	0x20002280

08002684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
	return 1;
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <_kill>:

int _kill(int pid, int sig)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800269c:	f005 fc4e 	bl	8007f3c <__errno>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2216      	movs	r2, #22
 80026a4:	601a      	str	r2, [r3, #0]
	return -1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <_exit>:

void _exit (int status)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ba:	f04f 31ff 	mov.w	r1, #4294967295
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ffe7 	bl	8002692 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026c4:	e7fe      	b.n	80026c4 <_exit+0x12>

080026c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e00a      	b.n	80026ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026d8:	f3af 8000 	nop.w
 80026dc:	4601      	mov	r1, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	60ba      	str	r2, [r7, #8]
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	dbf0      	blt.n	80026d8 <_read+0x12>
	}

return len;
 80026f6:	687b      	ldr	r3, [r7, #4]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e009      	b.n	8002726 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	60ba      	str	r2, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	dbf1      	blt.n	8002712 <_write+0x12>
	}
	return len;
 800272e:	687b      	ldr	r3, [r7, #4]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_close>:

int _close(int file)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	return -1;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800275e:	605a      	str	r2, [r3, #4]
	return 0;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <_isatty>:

int _isatty(int file)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	return 1;
 8002774:	2301      	movs	r3, #1
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
	return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <_sbrk+0x5c>)
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <_sbrk+0x60>)
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <_sbrk+0x64>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <_sbrk+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d207      	bcs.n	80027d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c8:	f005 fbb8 	bl	8007f3c <__errno>
 80027cc:	4603      	mov	r3, r0
 80027ce:	220c      	movs	r2, #12
 80027d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e009      	b.n	80027ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <_sbrk+0x64>)
 80027e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20005000 	.word	0x20005000
 80027f8:	00000400 	.word	0x00000400
 80027fc:	200027ec 	.word	0x200027ec
 8002800:	20002838 	.word	0x20002838

08002804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002812:	490d      	ldr	r1, [pc, #52]	; (8002848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002818:	e002      	b.n	8002820 <LoopCopyDataInit>

0800281a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800281c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281e:	3304      	adds	r3, #4

08002820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002824:	d3f9      	bcc.n	800281a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002828:	4c0a      	ldr	r4, [pc, #40]	; (8002854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800282c:	e001      	b.n	8002832 <LoopFillZerobss>

0800282e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002830:	3204      	adds	r2, #4

08002832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002834:	d3fb      	bcc.n	800282e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002836:	f7ff ffe5 	bl	8002804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283a:	f005 fb85 	bl	8007f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800283e:	f7fe fe4f 	bl	80014e0 <main>
  bx lr
 8002842:	4770      	bx	lr
  ldr r0, =_sdata
 8002844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002848:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800284c:	0800d504 	.word	0x0800d504
  ldr r2, =_sbss
 8002850:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002854:	20002838 	.word	0x20002838

08002858 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <CAN1_RX1_IRQHandler>
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_Init+0x28>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_Init+0x28>)
 8002866:	f043 0310 	orr.w	r3, r3, #16
 800286a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286c:	2003      	movs	r0, #3
 800286e:	f000 fe7d 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002872:	200f      	movs	r0, #15
 8002874:	f000 f808 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002878:	f7ff fdc6 	bl	8002408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x54>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x58>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289e:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fe95 	bl	80035d6 <HAL_SYSTICK_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00e      	b.n	80028d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d80a      	bhi.n	80028d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f000 fe5d 	bl	8003582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_InitTick+0x5c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000014 	.word	0x20000014
 80028e0:	2000001c 	.word	0x2000001c
 80028e4:	20000018 	.word	0x20000018

080028e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_IncTick+0x1c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_IncTick+0x20>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a03      	ldr	r2, [pc, #12]	; (8002908 <HAL_IncTick+0x20>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	2000001c 	.word	0x2000001c
 8002908:	200027f0 	.word	0x200027f0

0800290c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b02      	ldr	r3, [pc, #8]	; (800291c <HAL_GetTick+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	200027f0 	.word	0x200027f0

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff fff0 	bl	800290c <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_Delay+0x44>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffe0 	bl	800290c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000001c 	.word	0x2000001c

08002968 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0be      	b.n	8002b08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fd60 	bl	800246c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fcc7 	bl	8003340 <ADC_ConversionStop_Disable>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8099 	bne.w	8002af6 <HAL_ADC_Init+0x18e>
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 8095 	bne.w	8002af6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029d4:	f023 0302 	bic.w	r3, r3, #2
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7b1b      	ldrb	r3, [r3, #12]
 80029ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a00:	d003      	beq.n	8002a0a <HAL_ADC_Init+0xa2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_ADC_Init+0xa8>
 8002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0e:	e000      	b.n	8002a12 <HAL_ADC_Init+0xaa>
 8002a10:	2300      	movs	r3, #0
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7d1b      	ldrb	r3, [r3, #20]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d119      	bne.n	8002a54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7b1b      	ldrb	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	035a      	lsls	r2, r3, #13
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	e00b      	b.n	8002a54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <HAL_ADC_Init+0x1a8>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a84:	d003      	beq.n	8002a8e <HAL_ADC_Init+0x126>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d104      	bne.n	8002a98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	051b      	lsls	r3, r3, #20
 8002a96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_ADC_Init+0x1ac>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d10b      	bne.n	8002ad4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ad2:	e018      	b.n	8002b06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f023 0312 	bic.w	r3, r3, #18
 8002adc:	f043 0210 	orr.w	r2, r3, #16
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002af4:	e007      	b.n	8002b06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	f043 0210 	orr.w	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	ffe1f7fd 	.word	0xffe1f7fd
 8002b14:	ff1f0efe 	.word	0xff1f0efe

08002b18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_Start+0x1a>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e098      	b.n	8002c64 <HAL_ADC_Start+0x14c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fba6 	bl	800328c <ADC_Enable>
 8002b40:	4603      	mov	r3, r0
 8002b42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 8087 	bne.w	8002c5a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a41      	ldr	r2, [pc, #260]	; (8002c6c <HAL_ADC_Start+0x154>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d105      	bne.n	8002b76 <HAL_ADC_Start+0x5e>
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_ADC_Start+0x158>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d115      	bne.n	8002ba2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d026      	beq.n	8002bde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ba0:	e01d      	b.n	8002bde <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2f      	ldr	r2, [pc, #188]	; (8002c70 <HAL_ADC_Start+0x158>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Start+0xaa>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <HAL_ADC_Start+0x154>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10d      	bne.n	8002bde <HAL_ADC_Start+0xc6>
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_ADC_Start+0x158>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f023 0206 	bic.w	r2, r3, #6
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bf6:	e002      	b.n	8002bfe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0202 	mvn.w	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c1e:	d113      	bne.n	8002c48 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_ADC_Start+0x154>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_ADC_Start+0x158>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e00c      	b.n	8002c62 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e003      	b.n	8002c62 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40012800 	.word	0x40012800
 8002c70:	40012400 	.word	0x40012400

08002c74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_Stop+0x1a>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e01a      	b.n	8002cc4 <HAL_ADC_Stop+0x50>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fb52 	bl	8003340 <ADC_ConversionStop_Disable>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ce2:	f7ff fe13 	bl	800290c <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0d3      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d131      	bne.n	8002d80 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d12a      	bne.n	8002d80 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d2a:	e021      	b.n	8002d70 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d01d      	beq.n	8002d70 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <HAL_ADC_PollForConversion+0x7e>
 8002d3a:	f7ff fde7 	bl	800290c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d212      	bcs.n	8002d70 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0a2      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0d6      	beq.n	8002d2c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d7e:	e070      	b.n	8002e62 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d80:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <HAL_ADC_PollForConversion+0x1f4>)
 8002d82:	681c      	ldr	r4, [r3, #0]
 8002d84:	2002      	movs	r0, #2
 8002d86:	f001 fab7 	bl	80042f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	4b4b      	ldr	r3, [pc, #300]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f8>)
 8002d98:	400b      	ands	r3, r1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0x104>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68d9      	ldr	r1, [r3, #12]
 8002da4:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <HAL_ADC_PollForConversion+0x1fc>)
 8002da6:	400b      	ands	r3, r1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d111      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0x104>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6919      	ldr	r1, [r3, #16]
 8002db2:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_ADC_PollForConversion+0x200>)
 8002db4:	400b      	ands	r3, r1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <HAL_ADC_PollForConversion+0x100>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_ADC_PollForConversion+0x204>)
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_PollForConversion+0x100>
 8002dc8:	2314      	movs	r3, #20
 8002dca:	e020      	b.n	8002e0e <HAL_ADC_PollForConversion+0x142>
 8002dcc:	2329      	movs	r3, #41	; 0x29
 8002dce:	e01e      	b.n	8002e0e <HAL_ADC_PollForConversion+0x142>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6919      	ldr	r1, [r3, #16]
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <HAL_ADC_PollForConversion+0x200>)
 8002dd8:	400b      	ands	r3, r1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_ADC_PollForConversion+0x120>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68d9      	ldr	r1, [r3, #12]
 8002de4:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <HAL_ADC_PollForConversion+0x204>)
 8002de6:	400b      	ands	r3, r1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <HAL_ADC_PollForConversion+0x13c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_ADC_PollForConversion+0x208>)
 8002df4:	400b      	ands	r3, r1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <HAL_ADC_PollForConversion+0x140>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_ADC_PollForConversion+0x208>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_PollForConversion+0x140>
 8002e08:	2354      	movs	r3, #84	; 0x54
 8002e0a:	e000      	b.n	8002e0e <HAL_ADC_PollForConversion+0x142>
 8002e0c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e14:	e021      	b.n	8002e5a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d01a      	beq.n	8002e54 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_ADC_PollForConversion+0x168>
 8002e24:	f7ff fd72 	bl	800290c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d20f      	bcs.n	8002e54 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d90b      	bls.n	8002e54 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e030      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d8d9      	bhi.n	8002e16 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f06f 0212 	mvn.w	r2, #18
 8002e6a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e86:	d115      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd90      	pop	{r4, r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000014 	.word	0x20000014
 8002ec4:	24924924 	.word	0x24924924
 8002ec8:	00924924 	.word	0x00924924
 8002ecc:	12492492 	.word	0x12492492
 8002ed0:	00492492 	.word	0x00492492
 8002ed4:	00249249 	.word	0x00249249

08002ed8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d140      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d139      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f3a:	d11d      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d119      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0220 	bic.w	r2, r2, #32
 8002f52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f87c 	bl	8003076 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f06f 0212 	mvn.w	r2, #18
 8002f86:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b80      	cmp	r3, #128	; 0x80
 8002f94:	d14f      	bne.n	8003036 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d148      	bne.n	8003036 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002fc6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002fca:	d012      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d125      	bne.n	8003026 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002fe4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fe8:	d11d      	bne.n	8003026 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d119      	bne.n	8003026 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003000:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9cb 	bl	80033c2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 020c 	mvn.w	r2, #12
 8003034:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d114      	bne.n	800306e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10d      	bne.n	800306e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f812 	bl	8003088 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0201 	mvn.w	r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
	...

0800309c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x20>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0dc      	b.n	8003276 <HAL_ADC_ConfigChannel+0x1da>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d81c      	bhi.n	8003106 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b05      	subs	r3, #5
 80030de:	221f      	movs	r2, #31
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4019      	ands	r1, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	3b05      	subs	r3, #5
 80030f8:	fa00 f203 	lsl.w	r2, r0, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
 8003104:	e03c      	b.n	8003180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d81c      	bhi.n	8003148 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3b23      	subs	r3, #35	; 0x23
 8003120:	221f      	movs	r2, #31
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	4019      	ands	r1, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b23      	subs	r3, #35	; 0x23
 800313a:	fa00 f203 	lsl.w	r2, r0, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
 8003146:	e01b      	b.n	8003180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b41      	subs	r3, #65	; 0x41
 800315a:	221f      	movs	r2, #31
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	4019      	ands	r1, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b41      	subs	r3, #65	; 0x41
 8003174:	fa00 f203 	lsl.w	r2, r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d91c      	bls.n	80031c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	3b1e      	subs	r3, #30
 800319a:	2207      	movs	r2, #7
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	4019      	ands	r1, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6898      	ldr	r0, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	3b1e      	subs	r3, #30
 80031b4:	fa00 f203 	lsl.w	r2, r0, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	e019      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6919      	ldr	r1, [r3, #16]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	2207      	movs	r2, #7
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	4019      	ands	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6898      	ldr	r0, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	fa00 f203 	lsl.w	r2, r0, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d003      	beq.n	8003206 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003202:	2b11      	cmp	r3, #17
 8003204:	d132      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_ADC_ConfigChannel+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d125      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d126      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800322c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d11a      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_ADC_ConfigChannel+0x1e8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <HAL_ADC_ConfigChannel+0x1ec>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	0c9a      	lsrs	r2, r3, #18
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800324c:	e002      	b.n	8003254 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3b01      	subs	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f9      	bne.n	800324e <HAL_ADC_ConfigChannel+0x1b2>
 800325a:	e007      	b.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40012400 	.word	0x40012400
 8003284:	20000014 	.word	0x20000014
 8003288:	431bde83 	.word	0x431bde83

0800328c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d040      	beq.n	800332c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032ba:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <ADC_Enable+0xac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <ADC_Enable+0xb0>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032c8:	e002      	b.n	80032d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f9      	bne.n	80032ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032d6:	f7ff fb19 	bl	800290c <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032dc:	e01f      	b.n	800331e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032de:	f7ff fb15 	bl	800290c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d918      	bls.n	800331e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d011      	beq.n	800331e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e007      	b.n	800332e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d1d8      	bne.n	80032de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000014 	.word	0x20000014
 800333c:	431bde83 	.word	0x431bde83

08003340 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d12e      	bne.n	80033b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800336a:	f7ff facf 	bl	800290c <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003370:	e01b      	b.n	80033aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003372:	f7ff facb 	bl	800290c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d914      	bls.n	80033aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10d      	bne.n	80033aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d0dc      	beq.n	8003372 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003406:	4a04      	ldr	r2, [pc, #16]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	60d3      	str	r3, [r2, #12]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__NVIC_GetPriorityGrouping+0x18>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	f003 0307 	and.w	r3, r3, #7
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db0b      	blt.n	8003462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <__NVIC_EnableIRQ+0x34>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2001      	movs	r0, #1
 800345a:	fa00 f202 	lsl.w	r2, r0, r2
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003538:	d301      	bcc.n	800353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <SysTick_Config+0x40>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003546:	210f      	movs	r1, #15
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f7ff ff90 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <SysTick_Config+0x40>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <SysTick_Config+0x40>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff2d 	bl	80033d4 <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff42 	bl	800341c <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff90 	bl	80034c4 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5f 	bl	8003470 <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff35 	bl	8003438 <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffa2 	bl	8003528 <SysTick_Config>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b08b      	sub	sp, #44	; 0x2c
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003602:	e169      	b.n	80038d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003604:	2201      	movs	r2, #1
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	429a      	cmp	r2, r3
 800361e:	f040 8158 	bne.w	80038d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a9a      	ldr	r2, [pc, #616]	; (8003890 <HAL_GPIO_Init+0x2a0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d05e      	beq.n	80036ea <HAL_GPIO_Init+0xfa>
 800362c:	4a98      	ldr	r2, [pc, #608]	; (8003890 <HAL_GPIO_Init+0x2a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d875      	bhi.n	800371e <HAL_GPIO_Init+0x12e>
 8003632:	4a98      	ldr	r2, [pc, #608]	; (8003894 <HAL_GPIO_Init+0x2a4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d058      	beq.n	80036ea <HAL_GPIO_Init+0xfa>
 8003638:	4a96      	ldr	r2, [pc, #600]	; (8003894 <HAL_GPIO_Init+0x2a4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d86f      	bhi.n	800371e <HAL_GPIO_Init+0x12e>
 800363e:	4a96      	ldr	r2, [pc, #600]	; (8003898 <HAL_GPIO_Init+0x2a8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d052      	beq.n	80036ea <HAL_GPIO_Init+0xfa>
 8003644:	4a94      	ldr	r2, [pc, #592]	; (8003898 <HAL_GPIO_Init+0x2a8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d869      	bhi.n	800371e <HAL_GPIO_Init+0x12e>
 800364a:	4a94      	ldr	r2, [pc, #592]	; (800389c <HAL_GPIO_Init+0x2ac>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d04c      	beq.n	80036ea <HAL_GPIO_Init+0xfa>
 8003650:	4a92      	ldr	r2, [pc, #584]	; (800389c <HAL_GPIO_Init+0x2ac>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d863      	bhi.n	800371e <HAL_GPIO_Init+0x12e>
 8003656:	4a92      	ldr	r2, [pc, #584]	; (80038a0 <HAL_GPIO_Init+0x2b0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d046      	beq.n	80036ea <HAL_GPIO_Init+0xfa>
 800365c:	4a90      	ldr	r2, [pc, #576]	; (80038a0 <HAL_GPIO_Init+0x2b0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d85d      	bhi.n	800371e <HAL_GPIO_Init+0x12e>
 8003662:	2b12      	cmp	r3, #18
 8003664:	d82a      	bhi.n	80036bc <HAL_GPIO_Init+0xcc>
 8003666:	2b12      	cmp	r3, #18
 8003668:	d859      	bhi.n	800371e <HAL_GPIO_Init+0x12e>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <HAL_GPIO_Init+0x80>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	080036eb 	.word	0x080036eb
 8003674:	080036c5 	.word	0x080036c5
 8003678:	080036d7 	.word	0x080036d7
 800367c:	08003719 	.word	0x08003719
 8003680:	0800371f 	.word	0x0800371f
 8003684:	0800371f 	.word	0x0800371f
 8003688:	0800371f 	.word	0x0800371f
 800368c:	0800371f 	.word	0x0800371f
 8003690:	0800371f 	.word	0x0800371f
 8003694:	0800371f 	.word	0x0800371f
 8003698:	0800371f 	.word	0x0800371f
 800369c:	0800371f 	.word	0x0800371f
 80036a0:	0800371f 	.word	0x0800371f
 80036a4:	0800371f 	.word	0x0800371f
 80036a8:	0800371f 	.word	0x0800371f
 80036ac:	0800371f 	.word	0x0800371f
 80036b0:	0800371f 	.word	0x0800371f
 80036b4:	080036cd 	.word	0x080036cd
 80036b8:	080036e1 	.word	0x080036e1
 80036bc:	4a79      	ldr	r2, [pc, #484]	; (80038a4 <HAL_GPIO_Init+0x2b4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036c2:	e02c      	b.n	800371e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	623b      	str	r3, [r7, #32]
          break;
 80036ca:	e029      	b.n	8003720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	3304      	adds	r3, #4
 80036d2:	623b      	str	r3, [r7, #32]
          break;
 80036d4:	e024      	b.n	8003720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	3308      	adds	r3, #8
 80036dc:	623b      	str	r3, [r7, #32]
          break;
 80036de:	e01f      	b.n	8003720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	330c      	adds	r3, #12
 80036e6:	623b      	str	r3, [r7, #32]
          break;
 80036e8:	e01a      	b.n	8003720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036f2:	2304      	movs	r3, #4
 80036f4:	623b      	str	r3, [r7, #32]
          break;
 80036f6:	e013      	b.n	8003720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003700:	2308      	movs	r3, #8
 8003702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	611a      	str	r2, [r3, #16]
          break;
 800370a:	e009      	b.n	8003720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800370c:	2308      	movs	r3, #8
 800370e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	615a      	str	r2, [r3, #20]
          break;
 8003716:	e003      	b.n	8003720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
          break;
 800371c:	e000      	b.n	8003720 <HAL_GPIO_Init+0x130>
          break;
 800371e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2bff      	cmp	r3, #255	; 0xff
 8003724:	d801      	bhi.n	800372a <HAL_GPIO_Init+0x13a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	e001      	b.n	800372e <HAL_GPIO_Init+0x13e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	d802      	bhi.n	800373c <HAL_GPIO_Init+0x14c>
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	e002      	b.n	8003742 <HAL_GPIO_Init+0x152>
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	3b08      	subs	r3, #8
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	210f      	movs	r1, #15
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	401a      	ands	r2, r3
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80b1 	beq.w	80038d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003770:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	4a4c      	ldr	r2, [pc, #304]	; (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6193      	str	r3, [r2, #24]
 800377c:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <HAL_GPIO_Init+0x2b8>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003788:	4a48      	ldr	r2, [pc, #288]	; (80038ac <HAL_GPIO_Init+0x2bc>)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	3302      	adds	r3, #2
 8003790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	220f      	movs	r2, #15
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a40      	ldr	r2, [pc, #256]	; (80038b0 <HAL_GPIO_Init+0x2c0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <HAL_GPIO_Init+0x1ec>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a3f      	ldr	r2, [pc, #252]	; (80038b4 <HAL_GPIO_Init+0x2c4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00d      	beq.n	80037d8 <HAL_GPIO_Init+0x1e8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a3e      	ldr	r2, [pc, #248]	; (80038b8 <HAL_GPIO_Init+0x2c8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <HAL_GPIO_Init+0x1e4>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a3d      	ldr	r2, [pc, #244]	; (80038bc <HAL_GPIO_Init+0x2cc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_GPIO_Init+0x1e0>
 80037cc:	2303      	movs	r3, #3
 80037ce:	e006      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037d0:	2304      	movs	r3, #4
 80037d2:	e004      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e002      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037dc:	2300      	movs	r3, #0
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	f002 0203 	and.w	r2, r2, #3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	4093      	lsls	r3, r2
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037ee:	492f      	ldr	r1, [pc, #188]	; (80038ac <HAL_GPIO_Init+0x2bc>)
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	492c      	ldr	r1, [pc, #176]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	43db      	mvns	r3, r3
 800381e:	4928      	ldr	r1, [pc, #160]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003820:	4013      	ands	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003830:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4922      	ldr	r1, [pc, #136]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	e006      	b.n	800384c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	491e      	ldr	r1, [pc, #120]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003848:	4013      	ands	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d006      	beq.n	8003866 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4918      	ldr	r1, [pc, #96]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
 8003864:	e006      	b.n	8003874 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	43db      	mvns	r3, r3
 800386e:	4914      	ldr	r1, [pc, #80]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003870:	4013      	ands	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d021      	beq.n	80038c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_GPIO_Init+0x2d0>)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
 800388c:	e021      	b.n	80038d2 <HAL_GPIO_Init+0x2e2>
 800388e:	bf00      	nop
 8003890:	10320000 	.word	0x10320000
 8003894:	10310000 	.word	0x10310000
 8003898:	10220000 	.word	0x10220000
 800389c:	10210000 	.word	0x10210000
 80038a0:	10120000 	.word	0x10120000
 80038a4:	10110000 	.word	0x10110000
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40010800 	.word	0x40010800
 80038b4:	40010c00 	.word	0x40010c00
 80038b8:	40011000 	.word	0x40011000
 80038bc:	40011400 	.word	0x40011400
 80038c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_GPIO_Init+0x304>)
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	4909      	ldr	r1, [pc, #36]	; (80038f4 <HAL_GPIO_Init+0x304>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	3301      	adds	r3, #1
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f47f ae8e 	bne.w	8003604 <HAL_GPIO_Init+0x14>
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	372c      	adds	r7, #44	; 0x2c
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40010400 	.word	0x40010400

080038f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	e001      	b.n	800391a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	807b      	strh	r3, [r7, #2]
 8003932:	4613      	mov	r3, r2
 8003934:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003936:	787b      	ldrb	r3, [r7, #1]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393c:	887a      	ldrh	r2, [r7, #2]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003942:	e003      	b.n	800394c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003944:	887b      	ldrh	r3, [r7, #2]
 8003946:	041a      	lsls	r2, r3, #16
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	611a      	str	r2, [r3, #16]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e272      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8087 	beq.w	8003a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003978:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b04      	cmp	r3, #4
 8003982:	d00c      	beq.n	800399e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003984:	4b8f      	ldr	r3, [pc, #572]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d112      	bne.n	80039b6 <HAL_RCC_OscConfig+0x5e>
 8003990:	4b8c      	ldr	r3, [pc, #560]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d10b      	bne.n	80039b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399e:	4b89      	ldr	r3, [pc, #548]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d06c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x12c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d168      	bne.n	8003a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e24c      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x76>
 80039c0:	4b80      	ldr	r3, [pc, #512]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a7f      	ldr	r2, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e02e      	b.n	8003a2c <HAL_RCC_OscConfig+0xd4>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x98>
 80039d6:	4b7b      	ldr	r3, [pc, #492]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7a      	ldr	r2, [pc, #488]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b78      	ldr	r3, [pc, #480]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a77      	ldr	r2, [pc, #476]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e01d      	b.n	8003a2c <HAL_RCC_OscConfig+0xd4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0xbc>
 80039fa:	4b72      	ldr	r3, [pc, #456]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a71      	ldr	r2, [pc, #452]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0xd4>
 8003a14:	4b6b      	ldr	r3, [pc, #428]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6a      	ldr	r2, [pc, #424]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe ff6a 	bl	800290c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe ff66 	bl	800290c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e200      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe4>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe ff56 	bl	800290c <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe ff52 	bl	800290c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1ec      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x10c>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d063      	beq.n	8003b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a92:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x18c>
 8003aaa:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d116      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_RCC_OscConfig+0x176>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e1c0      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ace:	4b3d      	ldr	r3, [pc, #244]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4939      	ldr	r1, [pc, #228]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	e03a      	b.n	8003b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe ff0b 	bl	800290c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fe ff07 	bl	800290c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1a1      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4927      	ldr	r1, [pc, #156]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	e015      	b.n	8003b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe feea 	bl	800290c <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fe fee6 	bl	800290c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e180      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d03a      	beq.n	8003bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d019      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b74:	f7fe feca 	bl	800290c <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7c:	f7fe fec6 	bl	800290c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e160      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f000 fad8 	bl	8004150 <RCC_Delay>
 8003ba0:	e01c      	b.n	8003bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fe feb0 	bl	800290c <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bae:	e00f      	b.n	8003bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fe feac 	bl	800290c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d908      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e146      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	42420000 	.word	0x42420000
 8003bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	4b92      	ldr	r3, [pc, #584]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e9      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a6 	beq.w	8003d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bee:	4b8b      	ldr	r3, [pc, #556]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4a87      	ldr	r2, [pc, #540]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	61d3      	str	r3, [r2, #28]
 8003c06:	4b85      	ldr	r3, [pc, #532]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b82      	ldr	r3, [pc, #520]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b7f      	ldr	r3, [pc, #508]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7e      	ldr	r2, [pc, #504]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fe6d 	bl	800290c <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fe fe69 	bl	800290c <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b64      	cmp	r3, #100	; 0x64
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e103      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x312>
 8003c5c:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a6e      	ldr	r2, [pc, #440]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6213      	str	r3, [r2, #32]
 8003c68:	e02d      	b.n	8003cc6 <HAL_RCC_OscConfig+0x36e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x334>
 8003c72:	4b6a      	ldr	r3, [pc, #424]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4a69      	ldr	r2, [pc, #420]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6213      	str	r3, [r2, #32]
 8003c7e:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a66      	ldr	r2, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	e01c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x36e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d10c      	bne.n	8003cae <HAL_RCC_OscConfig+0x356>
 8003c94:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4a60      	ldr	r2, [pc, #384]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6213      	str	r3, [r2, #32]
 8003ca0:	4b5e      	ldr	r3, [pc, #376]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6213      	str	r3, [r2, #32]
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCC_OscConfig+0x36e>
 8003cae:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a5a      	ldr	r2, [pc, #360]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6213      	str	r3, [r2, #32]
 8003cba:	4b58      	ldr	r3, [pc, #352]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d015      	beq.n	8003cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fe fe1d 	bl	800290c <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fe fe19 	bl	800290c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0b1      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ee      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x37e>
 8003cf8:	e014      	b.n	8003d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fe07 	bl	800290c <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe fe03 	bl	800290c <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e09b      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ee      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b3c      	ldr	r3, [pc, #240]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8087 	beq.w	8003e4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d40:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d061      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d146      	bne.n	8003de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <HAL_RCC_OscConfig+0x4cc>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fdd7 	bl	800290c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fe fdd3 	bl	800290c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e06d      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d74:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d108      	bne.n	8003d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4921      	ldr	r1, [pc, #132]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a19      	ldr	r1, [r3, #32]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	430b      	orrs	r3, r1
 8003dae:	491b      	ldr	r1, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fda7 	bl	800290c <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fe fda3 	bl	800290c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e03d      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x46a>
 8003de0:	e035      	b.n	8003e4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_RCC_OscConfig+0x4cc>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe fd90 	bl	800290c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fe fd8c 	bl	800290c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e026      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x498>
 8003e0e:	e01e      	b.n	8003e4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e019      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
 8003e24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x500>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000

08003e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0d0      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d910      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 0207 	bic.w	r2, r3, #7
 8003e86:	4965      	ldr	r1, [pc, #404]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b8      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb8:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed0:	4b53      	ldr	r3, [pc, #332]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b50      	ldr	r3, [pc, #320]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	494d      	ldr	r1, [pc, #308]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d040      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d115      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e073      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e06b      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4936      	ldr	r1, [pc, #216]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f4c:	f7fe fcde 	bl	800290c <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fe fcda 	bl	800290c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e053      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 020c 	and.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1eb      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d210      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0207 	bic.w	r2, r3, #7
 8003f92:	4922      	ldr	r1, [pc, #136]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4916      	ldr	r1, [pc, #88]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490e      	ldr	r1, [pc, #56]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f821 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490a      	ldr	r1, [pc, #40]	; (8004024 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_ClockConfig+0x1cc>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1d0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fc3c 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40022000 	.word	0x40022000
 8004020:	40021000 	.word	0x40021000
 8004024:	0800cfbc 	.word	0x0800cfbc
 8004028:	20000014 	.word	0x20000014
 800402c:	20000018 	.word	0x20000018

08004030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	b490      	push	{r4, r7}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCC_GetSysClockFreq+0xac>)
 8004038:	1d3c      	adds	r4, r7, #4
 800403a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800403c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004040:	f240 2301 	movw	r3, #513	; 0x201
 8004044:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b04      	cmp	r3, #4
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x40>
 800406a:	2b08      	cmp	r3, #8
 800406c:	d003      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x46>
 800406e:	e02b      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004072:	623b      	str	r3, [r7, #32]
      break;
 8004074:	e02b      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	0c9b      	lsrs	r3, r3, #18
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	3328      	adds	r3, #40	; 0x28
 8004080:	443b      	add	r3, r7
 8004082:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004086:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d012      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	0c5b      	lsrs	r3, r3, #17
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	3328      	adds	r3, #40	; 0x28
 800409e:	443b      	add	r3, r7
 80040a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040aa:	fb03 f202 	mul.w	r2, r3, r2
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
 80040b6:	e004      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	623b      	str	r3, [r7, #32]
      break;
 80040c6:	e002      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040ca:	623b      	str	r3, [r7, #32]
      break;
 80040cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ce:	6a3b      	ldr	r3, [r7, #32]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc90      	pop	{r4, r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	0800cf10 	.word	0x0800cf10
 80040e0:	40021000 	.word	0x40021000
 80040e4:	007a1200 	.word	0x007a1200
 80040e8:	003d0900 	.word	0x003d0900

080040ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f0:	4b02      	ldr	r3, [pc, #8]	; (80040fc <HAL_RCC_GetHCLKFreq+0x10>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	20000014 	.word	0x20000014

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004104:	f7ff fff2 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	0800cfcc 	.word	0x0800cfcc

08004128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800412c:	f7ff ffde 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0adb      	lsrs	r3, r3, #11
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK2Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	0800cfcc 	.word	0x0800cfcc

08004150 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <RCC_Delay+0x34>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <RCC_Delay+0x38>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0a5b      	lsrs	r3, r3, #9
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800416c:	bf00      	nop
  }
  while (Delay --);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1e5a      	subs	r2, r3, #1
 8004172:	60fa      	str	r2, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f9      	bne.n	800416c <RCC_Delay+0x1c>
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	20000014 	.word	0x20000014
 8004188:	10624dd3 	.word	0x10624dd3

0800418c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d07d      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ac:	4b4f      	ldr	r3, [pc, #316]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	4b4c      	ldr	r3, [pc, #304]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	4a4b      	ldr	r2, [pc, #300]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	61d3      	str	r3, [r2, #28]
 80041c4:	4b49      	ldr	r3, [pc, #292]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d4:	4b46      	ldr	r3, [pc, #280]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d118      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e0:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a42      	ldr	r2, [pc, #264]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ec:	f7fe fb8e 	bl	800290c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	e008      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fe fb8a 	bl	800290c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e06d      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d02e      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	429a      	cmp	r2, r3
 800422e:	d027      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004230:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004238:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004240:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004246:	4a29      	ldr	r2, [pc, #164]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d014      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fe fb59 	bl	800290c <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7fe fb55 	bl	800290c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e036      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ee      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4917      	ldr	r1, [pc, #92]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428e:	4313      	orrs	r3, r2
 8004290:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004292:	7dfb      	ldrb	r3, [r7, #23]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004298:	4b14      	ldr	r3, [pc, #80]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	490b      	ldr	r1, [pc, #44]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4904      	ldr	r1, [pc, #16]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40007000 	.word	0x40007000
 80042f4:	42420440 	.word	0x42420440

080042f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b08d      	sub	sp, #52	; 0x34
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004300:	4b58      	ldr	r3, [pc, #352]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004302:	f107 040c 	add.w	r4, r7, #12
 8004306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800430c:	f240 2301 	movw	r3, #513	; 0x201
 8004310:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
 8004316:	2300      	movs	r3, #0
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b10      	cmp	r3, #16
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b10      	cmp	r3, #16
 8004330:	f200 808e 	bhi.w	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d049      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d079      	beq.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004340:	e086      	b.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004342:	4b49      	ldr	r3, [pc, #292]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004348:	4b47      	ldr	r3, [pc, #284]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d07f      	beq.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	0c9b      	lsrs	r3, r3, #18
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	3330      	adds	r3, #48	; 0x30
 800435e:	443b      	add	r3, r7
 8004360:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004364:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d017      	beq.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004370:	4b3d      	ldr	r3, [pc, #244]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	0c5b      	lsrs	r3, r3, #17
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	3330      	adds	r3, #48	; 0x30
 800437c:	443b      	add	r3, r7
 800437e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800438e:	4a37      	ldr	r2, [pc, #220]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	fbb2 f2f3 	udiv	r2, r2, r3
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439e:	e004      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	4a33      	ldr	r2, [pc, #204]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80043aa:	4b2f      	ldr	r3, [pc, #188]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b6:	d102      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043bc:	e04a      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043cc:	e042      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d108      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80043ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f0:	e01f      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d109      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800440a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004410:	e00f      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441c:	d11c      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800442a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004430:	e012      	b.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004432:	e011      	b.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004434:	f7ff fe78 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	0b9b      	lsrs	r3, r3, #14
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	3301      	adds	r3, #1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004458:	bf00      	nop
    }
  }
  return (frequency);
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800445c:	4618      	mov	r0, r3
 800445e:	3734      	adds	r7, #52	; 0x34
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	0800cf20 	.word	0x0800cf20
 8004468:	40021000 	.word	0x40021000
 800446c:	007a1200 	.word	0x007a1200
 8004470:	003d0900 	.word	0x003d0900
 8004474:	aaaaaaab 	.word	0xaaaaaaab

08004478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e076      	b.n	8004578 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449a:	d009      	beq.n	80044b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	61da      	str	r2, [r3, #28]
 80044a2:	e005      	b.n	80044b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fe f812 	bl	80024f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	ea42 0103 	orr.w	r1, r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	0c1a      	lsrs	r2, r3, #16
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f002 0204 	and.w	r2, r2, #4
 8004556:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004566:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e03f      	b.n	8004612 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fd ffee 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f905 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b08a      	sub	sp, #40	; 0x28
 800461e:	af02      	add	r7, sp, #8
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b20      	cmp	r3, #32
 8004638:	d17c      	bne.n	8004734 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_UART_Transmit+0x2c>
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e075      	b.n	8004736 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UART_Transmit+0x3e>
 8004654:	2302      	movs	r3, #2
 8004656:	e06e      	b.n	8004736 <HAL_UART_Transmit+0x11c>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2221      	movs	r2, #33	; 0x21
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466e:	f7fe f94d 	bl	800290c <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	88fa      	ldrh	r2, [r7, #6]
 800467e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d108      	bne.n	800469c <HAL_UART_Transmit+0x82>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d104      	bne.n	800469c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	e003      	b.n	80046a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046ac:	e02a      	b.n	8004704 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2180      	movs	r1, #128	; 0x80
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f840 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e036      	b.n	8004736 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	3302      	adds	r3, #2
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	e007      	b.n	80046f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1cf      	bne.n	80046ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	2140      	movs	r1, #64	; 0x40
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f810 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e006      	b.n	8004736 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	e02c      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d028      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x30>
 800475e:	f7fe f8d5 	bl	800290c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	429a      	cmp	r2, r3
 800476c:	d21d      	bcs.n	80047aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800477c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e00f      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d0c3      	beq.n	8004750 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800480e:	f023 030c 	bic.w	r3, r3, #12
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	430b      	orrs	r3, r1
 800481a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <UART_SetConfig+0x114>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800483c:	f7ff fc74 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	e002      	b.n	800484a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7ff fc5c 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8004848:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	4a22      	ldr	r2, [pc, #136]	; (80048ec <UART_SetConfig+0x118>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	0119      	lsls	r1, r3, #4
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009a      	lsls	r2, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <UART_SetConfig+0x118>)
 8004882:	fba3 0302 	umull	r0, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2064      	movs	r0, #100	; 0x64
 800488a:	fb00 f303 	mul.w	r3, r0, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	3332      	adds	r3, #50	; 0x32
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <UART_SetConfig+0x118>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a0:	4419      	add	r1, r3
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009a      	lsls	r2, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <UART_SetConfig+0x118>)
 80048ba:	fba3 0302 	umull	r0, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2064      	movs	r0, #100	; 0x64
 80048c2:	fb00 f303 	mul.w	r3, r0, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	3332      	adds	r3, #50	; 0x32
 80048cc:	4a07      	ldr	r2, [pc, #28]	; (80048ec <UART_SetConfig+0x118>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	440a      	add	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40013800 	.word	0x40013800
 80048ec:	51eb851f 	.word	0x51eb851f

080048f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80048f4:	4904      	ldr	r1, [pc, #16]	; (8004908 <MX_FATFS_Init+0x18>)
 80048f6:	4805      	ldr	r0, [pc, #20]	; (800490c <MX_FATFS_Init+0x1c>)
 80048f8:	f003 fb10 	bl	8007f1c <FATFS_LinkDriver>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <MX_FATFS_Init+0x20>)
 8004902:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004904:	bf00      	nop
 8004906:	bd80      	pop	{r7, pc}
 8004908:	200027f8 	.word	0x200027f8
 800490c:	20000020 	.word	0x20000020
 8004910:	200027f4 	.word	0x200027f4

08004914 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004918:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800491a:	4618      	mov	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
	...

08004924 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <USER_initialize+0x20>)
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <USER_initialize+0x20>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	2000001d 	.word	0x2000001d

08004948 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <USER_status+0x20>)
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <USER_status+0x20>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	2000001d 	.word	0x2000001d

0800496c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800497c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004998:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	603a      	str	r2, [r7, #0]
 80049ae:	71fb      	strb	r3, [r7, #7]
 80049b0:	460b      	mov	r3, r1
 80049b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
    return res;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <disk_status+0x30>)
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	79fa      	ldrb	r2, [r7, #7]
 80049dc:	4905      	ldr	r1, [pc, #20]	; (80049f4 <disk_status+0x30>)
 80049de:	440a      	add	r2, r1
 80049e0:	7a12      	ldrb	r2, [r2, #8]
 80049e2:	4610      	mov	r0, r2
 80049e4:	4798      	blx	r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	2000281c 	.word	0x2000281c

080049f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <disk_initialize+0x48>)
 8004a0a:	5cd3      	ldrb	r3, [r2, r3]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <disk_initialize+0x48>)
 8004a14:	2101      	movs	r1, #1
 8004a16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <disk_initialize+0x48>)
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	79fa      	ldrb	r2, [r7, #7]
 8004a26:	4906      	ldr	r1, [pc, #24]	; (8004a40 <disk_initialize+0x48>)
 8004a28:	440a      	add	r2, r1
 8004a2a:	7a12      	ldrb	r2, [r2, #8]
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4798      	blx	r3
 8004a30:	4603      	mov	r3, r0
 8004a32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000281c 	.word	0x2000281c

08004a44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4603      	mov	r3, r0
 8004a52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <disk_read+0x3c>)
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	689c      	ldr	r4, [r3, #8]
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	4a07      	ldr	r2, [pc, #28]	; (8004a80 <disk_read+0x3c>)
 8004a64:	4413      	add	r3, r2
 8004a66:	7a18      	ldrb	r0, [r3, #8]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	47a0      	blx	r4
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000281c 	.word	0x2000281c

08004a84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <disk_write+0x3c>)
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68dc      	ldr	r4, [r3, #12]
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <disk_write+0x3c>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	7a18      	ldrb	r0, [r3, #8]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	47a0      	blx	r4
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd90      	pop	{r4, r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	2000281c 	.word	0x2000281c

08004ac4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	603a      	str	r2, [r7, #0]
 8004ace:	71fb      	strb	r3, [r7, #7]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <disk_ioctl+0x38>)
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	79fa      	ldrb	r2, [r7, #7]
 8004ae2:	4906      	ldr	r1, [pc, #24]	; (8004afc <disk_ioctl+0x38>)
 8004ae4:	440a      	add	r2, r1
 8004ae6:	7a10      	ldrb	r0, [r2, #8]
 8004ae8:	79b9      	ldrb	r1, [r7, #6]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	4798      	blx	r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	73fb      	strb	r3, [r7, #15]
  return res;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	2000281c 	.word	0x2000281c

08004b00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004b14:	e007      	b.n	8004b26 <mem_cpy+0x26>
		*d++ = *s++;
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	1c53      	adds	r3, r2, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	6179      	str	r1, [r7, #20]
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f2      	bne.n	8004b16 <mem_cpy+0x16>
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004b4c:	e005      	b.n	8004b5a <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	617a      	str	r2, [r7, #20]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	1e5a      	subs	r2, r3, #1
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f4      	bne.n	8004b4e <mem_set+0x12>
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004b70:	b480      	push	{r7}
 8004b72:	b089      	sub	sp, #36	; 0x24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	61fb      	str	r3, [r7, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004b88:	bf00      	nop
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	1e5a      	subs	r2, r3, #1
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00d      	beq.n	8004bb0 <mem_cmp+0x40>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	61ba      	str	r2, [r7, #24]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	1acb      	subs	r3, r1, r3
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ec      	beq.n	8004b8a <mem_cmp+0x1a>
	return r;
 8004bb0:	697b      	ldr	r3, [r7, #20]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3724      	adds	r7, #36	; 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004bc6:	e002      	b.n	8004bce <chk_chr+0x12>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <chk_chr+0x26>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d1f2      	bne.n	8004bc8 <chk_chr+0xc>
	return *str;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	781b      	ldrb	r3, [r3, #0]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e03b      	b.n	8004c7c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004c04:	4931      	ldr	r1, [pc, #196]	; (8004ccc <chk_lock+0xdc>)
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02c      	beq.n	8004c72 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004c18:	492c      	ldr	r1, [pc, #176]	; (8004ccc <chk_lock+0xdc>)
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d120      	bne.n	8004c76 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004c34:	4925      	ldr	r1, [pc, #148]	; (8004ccc <chk_lock+0xdc>)
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3304      	adds	r3, #4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d111      	bne.n	8004c76 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004c52:	491e      	ldr	r1, [pc, #120]	; (8004ccc <chk_lock+0xdc>)
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3308      	adds	r3, #8
 8004c62:	881a      	ldrh	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d102      	bne.n	8004c76 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004c70:	e007      	b.n	8004c82 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004c72:	2301      	movs	r3, #1
 8004c74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d9c0      	bls.n	8004c04 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d109      	bne.n	8004c9c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <chk_lock+0xa4>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d101      	bne.n	8004c98 <chk_lock+0xa8>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e013      	b.n	8004cc0 <chk_lock+0xd0>
 8004c98:	2312      	movs	r3, #18
 8004c9a:	e011      	b.n	8004cc0 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <chk_lock+0xca>
 8004ca2:	490a      	ldr	r1, [pc, #40]	; (8004ccc <chk_lock+0xdc>)
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	330a      	adds	r3, #10
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb8:	d101      	bne.n	8004cbe <chk_lock+0xce>
 8004cba:	2310      	movs	r3, #16
 8004cbc:	e000      	b.n	8004cc0 <chk_lock+0xd0>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20002804 	.word	0x20002804

08004cd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	e002      	b.n	8004ce2 <enq_lock+0x12>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d809      	bhi.n	8004cfc <enq_lock+0x2c>
 8004ce8:	490a      	ldr	r1, [pc, #40]	; (8004d14 <enq_lock+0x44>)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1ef      	bne.n	8004cdc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20002804 	.word	0x20002804

08004d18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e02e      	b.n	8004d86 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8004d28:	4958      	ldr	r1, [pc, #352]	; (8004e8c <inc_lock+0x174>)
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d11d      	bne.n	8004d80 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004d44:	4951      	ldr	r1, [pc, #324]	; (8004e8c <inc_lock+0x174>)
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	3304      	adds	r3, #4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d10e      	bne.n	8004d80 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004d62:	494a      	ldr	r1, [pc, #296]	; (8004e8c <inc_lock+0x174>)
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3308      	adds	r3, #8
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d006      	beq.n	8004d8e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d9cd      	bls.n	8004d28 <inc_lock+0x10>
 8004d8c:	e000      	b.n	8004d90 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8004d8e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d148      	bne.n	8004e28 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e002      	b.n	8004da2 <inc_lock+0x8a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d809      	bhi.n	8004dbc <inc_lock+0xa4>
 8004da8:	4938      	ldr	r1, [pc, #224]	; (8004e8c <inc_lock+0x174>)
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4613      	mov	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ef      	bne.n	8004d9c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d101      	bne.n	8004dc6 <inc_lock+0xae>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e05d      	b.n	8004e82 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	482f      	ldr	r0, [pc, #188]	; (8004e8c <inc_lock+0x174>)
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4403      	add	r3, r0
 8004ddc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	4829      	ldr	r0, [pc, #164]	; (8004e8c <inc_lock+0x174>)
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4403      	add	r3, r0
 8004df4:	3304      	adds	r3, #4
 8004df6:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfe:	88d8      	ldrh	r0, [r3, #6]
 8004e00:	4922      	ldr	r1, [pc, #136]	; (8004e8c <inc_lock+0x174>)
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3308      	adds	r3, #8
 8004e10:	4602      	mov	r2, r0
 8004e12:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004e14:	491d      	ldr	r1, [pc, #116]	; (8004e8c <inc_lock+0x174>)
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	330a      	adds	r3, #10
 8004e24:	2200      	movs	r2, #0
 8004e26:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <inc_lock+0x130>
 8004e2e:	4917      	ldr	r1, [pc, #92]	; (8004e8c <inc_lock+0x174>)
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4613      	mov	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	330a      	adds	r3, #10
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <inc_lock+0x130>
 8004e44:	2300      	movs	r3, #0
 8004e46:	e01c      	b.n	8004e82 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <inc_lock+0x14e>
 8004e4e:	490f      	ldr	r1, [pc, #60]	; (8004e8c <inc_lock+0x174>)
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	330a      	adds	r3, #10
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	b299      	uxth	r1, r3
 8004e64:	e001      	b.n	8004e6a <inc_lock+0x152>
 8004e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e6a:	4808      	ldr	r0, [pc, #32]	; (8004e8c <inc_lock+0x174>)
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4403      	add	r3, r0
 8004e78:	330a      	adds	r3, #10
 8004e7a:	460a      	mov	r2, r1
 8004e7c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	20002804 	.word	0x20002804

08004e90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d82e      	bhi.n	8004f02 <dec_lock+0x72>
		n = Files[i].ctr;
 8004ea4:	491b      	ldr	r1, [pc, #108]	; (8004f14 <dec_lock+0x84>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	330a      	adds	r3, #10
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004eb8:	89fb      	ldrh	r3, [r7, #14]
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebe:	d101      	bne.n	8004ec4 <dec_lock+0x34>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <dec_lock+0x40>
 8004eca:	89fb      	ldrh	r3, [r7, #14]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004ed0:	4910      	ldr	r1, [pc, #64]	; (8004f14 <dec_lock+0x84>)
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	330a      	adds	r3, #10
 8004ee0:	89fa      	ldrh	r2, [r7, #14]
 8004ee2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004ee4:	89fb      	ldrh	r3, [r7, #14]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <dec_lock+0x6c>
 8004eea:	490a      	ldr	r1, [pc, #40]	; (8004f14 <dec_lock+0x84>)
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	737b      	strb	r3, [r7, #13]
 8004f00:	e001      	b.n	8004f06 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f02:	2302      	movs	r3, #2
 8004f04:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004f06:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20002804 	.word	0x20002804

08004f18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e016      	b.n	8004f54 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004f26:	4910      	ldr	r1, [pc, #64]	; (8004f68 <clear_lock+0x50>)
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d108      	bne.n	8004f4e <clear_lock+0x36>
 8004f3c:	490a      	ldr	r1, [pc, #40]	; (8004f68 <clear_lock+0x50>)
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d9e5      	bls.n	8004f26 <clear_lock+0xe>
	}
}
 8004f5a:	bf00      	nop
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20002804 	.word	0x20002804

08004f6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7e:	791b      	ldrb	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d040      	beq.n	8005006 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f94:	7858      	ldrb	r0, [r3, #1]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	2301      	movs	r3, #1
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	f7ff fd72 	bl	8004a84 <disk_write>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <sync_window+0x40>
			res = FR_DISK_ERR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e02c      	b.n	8005006 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	1ad2      	subs	r2, r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d21b      	bcs.n	8005006 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd4:	78db      	ldrb	r3, [r3, #3]
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	e012      	b.n	8005000 <sync_window+0x94>
					wsect += fs->fsize;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fee:	7858      	ldrb	r0, [r3, #1]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	f7ff fd45 	bl	8004a84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d8e9      	bhi.n	8004fda <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d01e      	beq.n	800506a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff9d 	bl	8004f6c <sync_window>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d116      	bne.n	800506a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005042:	7858      	ldrb	r0, [r3, #1]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	2301      	movs	r3, #1
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	f7ff fcfb 	bl	8004a44 <disk_read>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	461a      	mov	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ff75 	bl	8004f6c <sync_window>
 8005082:	4603      	mov	r3, r0
 8005084:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f040 80ad 	bne.w	80051e8 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b03      	cmp	r3, #3
 8005098:	f040 8098 	bne.w	80051cc <sync_fs+0x158>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a2:	795b      	ldrb	r3, [r3, #5]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 8091 	bne.w	80051cc <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b2:	895b      	ldrh	r3, [r3, #10]
 80050b4:	461a      	mov	r2, r3
 80050b6:	2100      	movs	r1, #0
 80050b8:	f7ff fd40 	bl	8004b3c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2255      	movs	r2, #85	; 0x55
 80050c0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	22aa      	movs	r2, #170	; 0xaa
 80050c8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2252      	movs	r2, #82	; 0x52
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2252      	movs	r2, #82	; 0x52
 80050d6:	705a      	strb	r2, [r3, #1]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2261      	movs	r2, #97	; 0x61
 80050dc:	709a      	strb	r2, [r3, #2]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2241      	movs	r2, #65	; 0x41
 80050e2:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2272      	movs	r2, #114	; 0x72
 80050e8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2272      	movs	r2, #114	; 0x72
 80050f0:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2241      	movs	r2, #65	; 0x41
 80050f8:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2261      	movs	r2, #97	; 0x61
 8005100:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	b29b      	uxth	r3, r3
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	b29b      	uxth	r3, r3
 8005122:	b2da      	uxtb	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	b2da      	uxtb	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	0e1b      	lsrs	r3, r3, #24
 8005146:	b2da      	uxtb	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	b29b      	uxth	r3, r3
 8005168:	0a1b      	lsrs	r3, r3, #8
 800516a:	b29b      	uxth	r3, r3
 800516c:	b2da      	uxtb	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	b2da      	uxtb	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	0e1b      	lsrs	r3, r3, #24
 8005190:	b2da      	uxtb	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	3301      	adds	r3, #1
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051a8:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b0:	7858      	ldrb	r0, [r3, #1]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	2301      	movs	r3, #1
 80051be:	f7ff fc61 	bl	8004a84 <disk_write>
			fs->fsi_flag = 0;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c8:	2200      	movs	r2, #0
 80051ca:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fc73 	bl	8004ac4 <disk_ioctl>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	3b02      	subs	r3, #2
 8005200:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	3b02      	subs	r3, #2
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d301      	bcc.n	8005216 <clust2sect+0x24>
 8005212:	2300      	movs	r3, #0
 8005214:	e00c      	b.n	8005230 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	789b      	ldrb	r3, [r3, #2]
 800521e:	461a      	mov	r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	fb03 f202 	mul.w	r2, r3, r2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	4413      	add	r3, r2
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d906      	bls.n	8005258 <get_fat+0x1e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d302      	bcc.n	800525e <get_fat+0x24>
		val = 1;	/* Internal error */
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e0e4      	b.n	8005428 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b03      	cmp	r3, #3
 800526e:	f000 8098 	beq.w	80053a2 <get_fat+0x168>
 8005272:	2b03      	cmp	r3, #3
 8005274:	f300 80ce 	bgt.w	8005414 <get_fat+0x1da>
 8005278:	2b01      	cmp	r3, #1
 800527a:	d002      	beq.n	8005282 <get_fat+0x48>
 800527c:	2b02      	cmp	r3, #2
 800527e:	d05f      	beq.n	8005340 <get_fat+0x106>
 8005280:	e0c8      	b.n	8005414 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529e:	895b      	ldrh	r3, [r3, #10]
 80052a0:	4619      	mov	r1, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80052a8:	4413      	add	r3, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff feaf 	bl	8005010 <move_window>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f040 80b0 	bne.w	800541a <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	60fa      	str	r2, [r7, #12]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052c6:	8952      	ldrh	r2, [r2, #10]
 80052c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80052cc:	fb01 f202 	mul.w	r2, r1, r2
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	5cd3      	ldrb	r3, [r2, r3]
 80052d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	6a1a      	ldr	r2, [r3, #32]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e6:	895b      	ldrh	r3, [r3, #10]
 80052e8:	4619      	mov	r1, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80052f0:	4413      	add	r3, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fe8b 	bl	8005010 <move_window>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f040 808e 	bne.w	800541e <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005308:	895b      	ldrh	r3, [r3, #10]
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005312:	fb01 f202 	mul.w	r2, r1, r2
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	5cd3      	ldrb	r3, [r2, r3]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	461a      	mov	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4313      	orrs	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <get_fat+0xfc>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	e002      	b.n	800533c <get_fat+0x102>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	617b      	str	r3, [r7, #20]
			break;
 800533e:	e073      	b.n	8005428 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534e:	895b      	ldrh	r3, [r3, #10]
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	b29b      	uxth	r3, r3
 8005354:	4619      	mov	r1, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	fbb3 f3f1 	udiv	r3, r3, r1
 800535c:	4413      	add	r3, r2
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fe55 	bl	8005010 <move_window>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d15a      	bne.n	8005422 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005376:	8952      	ldrh	r2, [r2, #10]
 8005378:	fbb3 f1f2 	udiv	r1, r3, r2
 800537c:	fb01 f202 	mul.w	r2, r1, r2
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3301      	adds	r3, #1
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	b21a      	sxth	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	b21b      	sxth	r3, r3
 8005398:	4313      	orrs	r3, r2
 800539a:	b21b      	sxth	r3, r3
 800539c:	b29b      	uxth	r3, r3
 800539e:	617b      	str	r3, [r7, #20]
			break;
 80053a0:	e042      	b.n	8005428 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	895b      	ldrh	r3, [r3, #10]
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	4619      	mov	r1, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80053be:	4413      	add	r3, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fe24 	bl	8005010 <move_window>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d12b      	bne.n	8005426 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053d8:	8952      	ldrh	r2, [r2, #10]
 80053da:	fbb3 f1f2 	udiv	r1, r3, r2
 80053de:	fb01 f202 	mul.w	r2, r1, r2
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3303      	adds	r3, #3
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	061a      	lsls	r2, r3, #24
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3302      	adds	r3, #2
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	4313      	orrs	r3, r2
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	3201      	adds	r2, #1
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	0212      	lsls	r2, r2, #8
 8005404:	4313      	orrs	r3, r2
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	7812      	ldrb	r2, [r2, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005410:	617b      	str	r3, [r7, #20]
			break;
 8005412:	e009      	b.n	8005428 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e006      	b.n	8005428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800541a:	bf00      	nop
 800541c:	e004      	b.n	8005428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005426:	bf00      	nop
		}
	}

	return val;
 8005428:	697b      	ldr	r3, [r7, #20]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b088      	sub	sp, #32
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d906      	bls.n	8005452 <put_fat+0x20>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <put_fat+0x26>
		res = FR_INT_ERR;
 8005452:	2302      	movs	r3, #2
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e13a      	b.n	80056ce <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b03      	cmp	r3, #3
 8005462:	f000 80d0 	beq.w	8005606 <put_fat+0x1d4>
 8005466:	2b03      	cmp	r3, #3
 8005468:	f300 8127 	bgt.w	80056ba <put_fat+0x288>
 800546c:	2b01      	cmp	r3, #1
 800546e:	d003      	beq.n	8005478 <put_fat+0x46>
 8005470:	2b02      	cmp	r3, #2
 8005472:	f000 808f 	beq.w	8005594 <put_fat+0x162>
 8005476:	e120      	b.n	80056ba <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4413      	add	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548c:	6a1a      	ldr	r2, [r3, #32]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005494:	895b      	ldrh	r3, [r3, #10]
 8005496:	4619      	mov	r1, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	fbb3 f3f1 	udiv	r3, r3, r1
 800549e:	4413      	add	r3, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff fdb4 	bl	8005010 <move_window>
 80054a8:	4603      	mov	r3, r0
 80054aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054ac:	7ffb      	ldrb	r3, [r7, #31]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 8106 	bne.w	80056c0 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	617a      	str	r2, [r7, #20]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054c0:	8952      	ldrh	r2, [r2, #10]
 80054c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80054c6:	fb01 f202 	mul.w	r2, r1, r2
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <put_fat+0xc6>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b25b      	sxtb	r3, r3
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	b25a      	sxtb	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	b25b      	sxtb	r3, r3
 80054f0:	4313      	orrs	r3, r2
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e001      	b.n	80054fc <put_fat+0xca>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005506:	2201      	movs	r2, #1
 8005508:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005518:	895b      	ldrh	r3, [r3, #10]
 800551a:	4619      	mov	r1, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005522:	4413      	add	r3, r2
 8005524:	4619      	mov	r1, r3
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff fd72 	bl	8005010 <move_window>
 800552c:	4603      	mov	r3, r0
 800552e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005530:	7ffb      	ldrb	r3, [r7, #31]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 80c6 	bne.w	80056c4 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553e:	895b      	ldrh	r3, [r3, #10]
 8005540:	461a      	mov	r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	fbb3 f1f2 	udiv	r1, r3, r2
 8005548:	fb01 f202 	mul.w	r2, r1, r2
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <put_fat+0x134>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	b2db      	uxtb	r3, r3
 8005564:	e00e      	b.n	8005584 <put_fat+0x152>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	b25b      	sxtb	r3, r3
 800556c:	f023 030f 	bic.w	r3, r3, #15
 8005570:	b25a      	sxtb	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	b25b      	sxtb	r3, r3
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	b25b      	sxtb	r3, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	b25b      	sxtb	r3, r3
 8005582:	b2db      	uxtb	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558e:	2201      	movs	r2, #1
 8005590:	711a      	strb	r2, [r3, #4]
			break;
 8005592:	e09c      	b.n	80056ce <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a2:	895b      	ldrh	r3, [r3, #10]
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	4619      	mov	r1, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80055b0:	4413      	add	r3, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff fd2b 	bl	8005010 <move_window>
 80055ba:	4603      	mov	r3, r0
 80055bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055be:	7ffb      	ldrb	r3, [r7, #31]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 8081 	bne.w	80056c8 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055d0:	8952      	ldrh	r2, [r2, #10]
 80055d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80055d6:	fb01 f202 	mul.w	r2, r1, r2
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	3301      	adds	r3, #1
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005600:	2201      	movs	r2, #1
 8005602:	711a      	strb	r2, [r3, #4]
			break;
 8005604:	e063      	b.n	80056ce <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005614:	895b      	ldrh	r3, [r3, #10]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	b29b      	uxth	r3, r3
 800561a:	4619      	mov	r1, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005622:	4413      	add	r3, r2
 8005624:	4619      	mov	r1, r3
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff fcf2 	bl	8005010 <move_window>
 800562c:	4603      	mov	r3, r0
 800562e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005630:	7ffb      	ldrb	r3, [r7, #31]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d14a      	bne.n	80056cc <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005640:	8952      	ldrh	r2, [r2, #10]
 8005642:	fbb3 f1f2 	udiv	r1, r3, r2
 8005646:	fb01 f202 	mul.w	r2, r1, r2
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	3303      	adds	r3, #3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	061a      	lsls	r2, r3, #24
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	3302      	adds	r3, #2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	4313      	orrs	r3, r2
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	3201      	adds	r2, #1
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	0212      	lsls	r2, r2, #8
 800566c:	4313      	orrs	r3, r2
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4313      	orrs	r3, r2
 800567c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	b29b      	uxth	r3, r3
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	b29a      	uxth	r2, r3
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3301      	adds	r3, #1
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0c1a      	lsrs	r2, r3, #16
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0e1a      	lsrs	r2, r3, #24
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	3303      	adds	r3, #3
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b4:	2201      	movs	r2, #1
 80056b6:	711a      	strb	r2, [r3, #4]
			break;
 80056b8:	e009      	b.n	80056ce <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80056ba:	2302      	movs	r3, #2
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e006      	b.n	80056ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80056c0:	bf00      	nop
 80056c2:	e004      	b.n	80056ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80056c4:	bf00      	nop
 80056c6:	e002      	b.n	80056ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80056cc:	bf00      	nop
		}
	}

	return res;
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d906      	bls.n	80056f6 <remove_chain+0x1e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <remove_chain+0x24>
		res = FR_INT_ERR;
 80056f6:	2302      	movs	r3, #2
 80056f8:	73fb      	strb	r3, [r7, #15]
 80056fa:	e049      	b.n	8005790 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005700:	e03b      	b.n	800577a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fd98 	bl	800523a <get_fat>
 800570a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d03b      	beq.n	800578a <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d102      	bne.n	800571e <remove_chain+0x46>
 8005718:	2302      	movs	r3, #2
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e038      	b.n	8005790 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d102      	bne.n	800572c <remove_chain+0x54>
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	e031      	b.n	8005790 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800572c:	2200      	movs	r2, #0
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fe7e 	bl	8005432 <put_fat>
 8005736:	4603      	mov	r3, r0
 8005738:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d126      	bne.n	800578e <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d013      	beq.n	8005776 <remove_chain+0x9e>
				fs->free_clust++;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	3301      	adds	r3, #1
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800575e:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005766:	795b      	ldrb	r3, [r3, #5]
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	b2da      	uxtb	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005774:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d3bc      	bcc.n	8005702 <remove_chain+0x2a>
 8005788:	e002      	b.n	8005790 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800578e:	bf00      	nop
		}
	}

	return res;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b086      	sub	sp, #24
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d111      	bne.n	80057ce <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d006      	beq.n	80057c8 <create_chain+0x2e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d31d      	bcc.n	8005804 <create_chain+0x6a>
 80057c8:	2301      	movs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	e01a      	b.n	8005804 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fd32 	bl	800523a <get_fat>
 80057d6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d801      	bhi.n	80057e2 <create_chain+0x48>
 80057de:	2301      	movs	r3, #1
 80057e0:	e07f      	b.n	80058e2 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d101      	bne.n	80057ee <create_chain+0x54>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	e079      	b.n	80058e2 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d201      	bcs.n	8005800 <create_chain+0x66>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	e070      	b.n	80058e2 <create_chain+0x148>
		scl = clst;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	3301      	adds	r3, #1
 800580c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	429a      	cmp	r2, r3
 800581a:	d307      	bcc.n	800582c <create_chain+0x92>
			ncl = 2;
 800581c:	2302      	movs	r3, #2
 800581e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	429a      	cmp	r2, r3
 8005826:	d901      	bls.n	800582c <create_chain+0x92>
 8005828:	2300      	movs	r3, #0
 800582a:	e05a      	b.n	80058e2 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800582c:	6979      	ldr	r1, [r7, #20]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fd03 	bl	800523a <get_fat>
 8005834:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d002      	beq.n	800584a <create_chain+0xb0>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <create_chain+0xb4>
			return cs;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	e049      	b.n	80058e2 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	429a      	cmp	r2, r3
 8005854:	d1d8      	bne.n	8005808 <create_chain+0x6e>
 8005856:	2300      	movs	r3, #0
 8005858:	e043      	b.n	80058e2 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800585a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800585c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005860:	6979      	ldr	r1, [r7, #20]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fde5 	bl	8005432 <put_fat>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <create_chain+0xec>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fdd8 	bl	8005432 <put_fat>
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d121      	bne.n	80058d0 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005892:	461a      	mov	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d01c      	beq.n	80058e0 <create_chain+0x146>
			fs->free_clust--;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058b6:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058be:	795b      	ldrb	r3, [r3, #5]
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058cc:	715a      	strb	r2, [r3, #5]
 80058ce:	e007      	b.n	80058e0 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d102      	bne.n	80058dc <create_chain+0x142>
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295
 80058da:	e000      	b.n	80058de <create_chain+0x144>
 80058dc:	2301      	movs	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80058e0:	697b      	ldr	r3, [r7, #20]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b087      	sub	sp, #28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	3304      	adds	r3, #4
 80058fe:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590c:	895b      	ldrh	r3, [r3, #10]
 800590e:	461a      	mov	r2, r3
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	fbb3 f3f2 	udiv	r3, r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005922:	7892      	ldrb	r2, [r2, #2]
 8005924:	fbb3 f3f2 	udiv	r3, r3, r2
 8005928:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1d1a      	adds	r2, r3, #4
 800592e:	613a      	str	r2, [r7, #16]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <clmt_clust+0x54>
 800593a:	2300      	movs	r3, #0
 800593c:	e010      	b.n	8005960 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	429a      	cmp	r2, r3
 8005944:	d307      	bcc.n	8005956 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3304      	adds	r3, #4
 8005952:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005954:	e7e9      	b.n	800592a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005956:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	4413      	add	r3, r2
}
 8005960:	4618      	mov	r0, r3
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d009      	beq.n	80059a4 <dir_sdi+0x3a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d301      	bcc.n	80059a8 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0aa      	b.n	8005afe <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d110      	bne.n	80059d0 <dir_sdi+0x66>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d107      	bne.n	80059d0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d115      	bne.n	8005a02 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e2:	891b      	ldrh	r3, [r3, #8]
 80059e4:	461a      	mov	r2, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d301      	bcc.n	80059f0 <dir_sdi+0x86>
			return FR_INT_ERR;
 80059ec:	2302      	movs	r3, #2
 80059ee:	e086      	b.n	8005afe <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e043      	b.n	8005a8a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0e:	895b      	ldrh	r3, [r3, #10]
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a22:	789b      	ldrb	r3, [r3, #2]
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005a2a:	e021      	b.n	8005a70 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fbff 	bl	800523a <get_fat>
 8005a3c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d101      	bne.n	8005a4a <dir_sdi+0xe0>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e059      	b.n	8005afe <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d909      	bls.n	8005a64 <dir_sdi+0xfa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d301      	bcc.n	8005a68 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005a64:	2302      	movs	r3, #2
 8005a66:	e04a      	b.n	8005afe <dir_sdi+0x194>
			idx -= ic;
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d2d9      	bcs.n	8005a2c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fbb5 	bl	80051f2 <clust2sect>
 8005a88:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a90:	461a      	mov	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <dir_sdi+0x136>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e02e      	b.n	8005afe <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aac:	895b      	ldrh	r3, [r3, #10]
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4413      	add	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ac4:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005adc:	895b      	ldrh	r3, [r3, #10]
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005aea:	fb01 f202 	mul.w	r2, r1, r2
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	015b      	lsls	r3, r3, #5
 8005af2:	4403      	add	r3, r0
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005afa:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b06:	b590      	push	{r4, r7, lr}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	88db      	ldrh	r3, [r3, #6]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <dir_next+0x2a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <dir_next+0x2e>
		return FR_NO_FILE;
 8005b30:	2304      	movs	r3, #4
 8005b32:	e12e      	b.n	8005d92 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b40:	895b      	ldrh	r3, [r3, #10]
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b4e:	fb01 f202 	mul.w	r2, r1, r2
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 80fa 	bne.w	8005d4e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	3301      	adds	r3, #1
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b6a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10d      	bne.n	8005b94 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b84:	891b      	ldrh	r3, [r3, #8]
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	f0c0 80df 	bcc.w	8005d4e <dir_next+0x248>
				return FR_NO_FILE;
 8005b90:	2304      	movs	r3, #4
 8005b92:	e0fe      	b.n	8005d92 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba0:	895b      	ldrh	r3, [r3, #10]
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bba:	7892      	ldrb	r2, [r2, #2]
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f040 80c4 	bne.w	8005d4e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f7ff fb2e 	bl	800523a <get_fat>
 8005bde:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d801      	bhi.n	8005bea <dir_next+0xe4>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e0d3      	b.n	8005d92 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d101      	bne.n	8005bf6 <dir_next+0xf0>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0cd      	b.n	8005d92 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	f0c0 808e 	bcc.w	8005d28 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <dir_next+0x110>
 8005c12:	2304      	movs	r3, #4
 8005c14:	e0bd      	b.n	8005d92 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7ff fdb6 	bl	800579a <create_chain>
 8005c2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <dir_next+0x134>
 8005c36:	2307      	movs	r3, #7
 8005c38:	e0ab      	b.n	8005d92 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <dir_next+0x13e>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e0a6      	b.n	8005d92 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d101      	bne.n	8005c50 <dir_next+0x14a>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0a0      	b.n	8005d92 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff f987 	bl	8004f6c <sync_window>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <dir_next+0x162>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e094      	b.n	8005d92 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7e:	895b      	ldrh	r3, [r3, #10]
 8005c80:	461a      	mov	r2, r3
 8005c82:	2100      	movs	r1, #0
 8005c84:	f7fe ff5a 	bl	8004b3c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c96:	681c      	ldr	r4, [r3, #0]
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f7ff faa9 	bl	80051f2 <clust2sect>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8005ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	e021      	b.n	8005cf2 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cba:	2201      	movs	r2, #1
 8005cbc:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff f950 	bl	8004f6c <sync_window>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <dir_next+0x1d0>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e05d      	b.n	8005d92 <dir_next+0x28c>
						dp->fs->winsect++;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfe:	789b      	ldrb	r3, [r3, #2]
 8005d00:	461a      	mov	r2, r3
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d3d2      	bcc.n	8005cae <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1acb      	subs	r3, r1, r3
 8005d22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d26:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2e:	461a      	mov	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6979      	ldr	r1, [r7, #20]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fa57 	bl	80051f2 <clust2sect>
 8005d44:	4602      	mov	r2, r0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d70:	895b      	ldrh	r3, [r3, #10]
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d7e:	fb01 f202 	mul.w	r2, r1, r2
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	015b      	lsls	r3, r3, #5
 8005d86:	4403      	add	r3, r0
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d8e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd90      	pop	{r4, r7, pc}

08005d9a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005da4:	2100      	movs	r1, #0
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fddf 	bl	800596a <dir_sdi>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d135      	bne.n	8005e22 <dir_alloc+0x88>
		n = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7ff f91f 	bl	8005010 <move_window>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d121      	bne.n	8005e20 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2be5      	cmp	r3, #229	; 0xe5
 8005de8:	d006      	beq.n	8005df8 <dir_alloc+0x5e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d107      	bne.n	8005e08 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d102      	bne.n	8005e0c <dir_alloc+0x72>
 8005e06:	e00c      	b.n	8005e22 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff fe79 	bl	8005b06 <dir_next>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0cd      	beq.n	8005dba <dir_alloc+0x20>
 8005e1e:	e000      	b.n	8005e22 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8005e20:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d101      	bne.n	8005e2c <dir_alloc+0x92>
 8005e28:	2307      	movs	r3, #7
 8005e2a:	73fb      	strb	r3, [r7, #15]
	return res;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	331b      	adds	r3, #27
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	331a      	adds	r3, #26
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	4313      	orrs	r3, r2
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d10f      	bne.n	8005e86 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	3315      	adds	r3, #21
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	b21a      	sxth	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	3314      	adds	r3, #20
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	b21b      	sxth	r3, r3
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

	return cl;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	331a      	adds	r3, #26
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	331b      	adds	r3, #27
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	0c1a      	lsrs	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3314      	adds	r3, #20
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3315      	adds	r3, #21
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b086      	sub	sp, #24
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fd3e 	bl	800596a <dir_sdi>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <dir_find+0x1e>
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	e03f      	b.n	8005f7c <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7ff f87e 	bl	8005010 <move_window>
 8005f14:	4603      	mov	r3, r0
 8005f16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d12a      	bne.n	8005f74 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <dir_find+0x5c>
 8005f34:	2304      	movs	r3, #4
 8005f36:	75fb      	strb	r3, [r7, #23]
 8005f38:	e01f      	b.n	8005f7a <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	330b      	adds	r3, #11
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <dir_find+0x82>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	220b      	movs	r2, #11
 8005f52:	4619      	mov	r1, r3
 8005f54:	6938      	ldr	r0, [r7, #16]
 8005f56:	f7fe fe0b 	bl	8004b70 <mem_cmp>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005f60:	2100      	movs	r1, #0
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fdcf 	bl	8005b06 <dir_next>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0c4      	beq.n	8005efc <dir_find+0x1e>
 8005f72:	e002      	b.n	8005f7a <dir_find+0x9c>
		if (res != FR_OK) break;
 8005f74:	bf00      	nop
 8005f76:	e000      	b.n	8005f7a <dir_find+0x9c>
			break;
 8005f78:	bf00      	nop

	return res;
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ff03 	bl	8005d9a <dir_alloc>
 8005f94:	4603      	mov	r3, r0
 8005f96:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d12d      	bne.n	8005ffa <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f7ff f82d 	bl	8005010 <move_window>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11c      	bne.n	8005ffa <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fdb5 	bl	8004b3c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd8:	6958      	ldr	r0, [r3, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	220b      	movs	r2, #11
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7fe fd8b 	bl	8004b00 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <create_name+0x18>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b2f      	cmp	r3, #47	; 0x2f
 8006022:	d0f8      	beq.n	8006016 <create_name+0x12>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b5c      	cmp	r3, #92	; 0x5c
 800602a:	d0f4      	beq.n	8006016 <create_name+0x12>
	sfn = dp->fn;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006036:	220b      	movs	r2, #11
 8006038:	2120      	movs	r1, #32
 800603a:	68b8      	ldr	r0, [r7, #8]
 800603c:	f7fe fd7e 	bl	8004b3c <mem_set>
	si = i = b = 0; ni = 8;
 8006040:	2300      	movs	r3, #0
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	2300      	movs	r3, #0
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	2308      	movs	r3, #8
 800604e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	617a      	str	r2, [r7, #20]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800605e:	7fbb      	ldrb	r3, [r7, #30]
 8006060:	2b20      	cmp	r3, #32
 8006062:	d953      	bls.n	800610c <create_name+0x108>
 8006064:	7fbb      	ldrb	r3, [r7, #30]
 8006066:	2b2f      	cmp	r3, #47	; 0x2f
 8006068:	d050      	beq.n	800610c <create_name+0x108>
 800606a:	7fbb      	ldrb	r3, [r7, #30]
 800606c:	2b5c      	cmp	r3, #92	; 0x5c
 800606e:	d04d      	beq.n	800610c <create_name+0x108>
		if (c == '.' || i >= ni) {
 8006070:	7fbb      	ldrb	r3, [r7, #30]
 8006072:	2b2e      	cmp	r3, #46	; 0x2e
 8006074:	d003      	beq.n	800607e <create_name+0x7a>
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	429a      	cmp	r2, r3
 800607c:	d30f      	bcc.n	800609e <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d102      	bne.n	800608a <create_name+0x86>
 8006084:	7fbb      	ldrb	r3, [r7, #30]
 8006086:	2b2e      	cmp	r3, #46	; 0x2e
 8006088:	d001      	beq.n	800608e <create_name+0x8a>
 800608a:	2306      	movs	r3, #6
 800608c:	e073      	b.n	8006176 <create_name+0x172>
			i = 8; ni = 11;
 800608e:	2308      	movs	r3, #8
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	230b      	movs	r3, #11
 8006094:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006096:	7ffb      	ldrb	r3, [r7, #31]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e035      	b.n	800610a <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800609e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da08      	bge.n	80060b8 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 80060a6:	7ffb      	ldrb	r3, [r7, #31]
 80060a8:	f043 0303 	orr.w	r3, r3, #3
 80060ac:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80060ae:	7fbb      	ldrb	r3, [r7, #30]
 80060b0:	3b80      	subs	r3, #128	; 0x80
 80060b2:	4a33      	ldr	r2, [pc, #204]	; (8006180 <create_name+0x17c>)
 80060b4:	5cd3      	ldrb	r3, [r2, r3]
 80060b6:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80060b8:	7fbb      	ldrb	r3, [r7, #30]
 80060ba:	4619      	mov	r1, r3
 80060bc:	4831      	ldr	r0, [pc, #196]	; (8006184 <create_name+0x180>)
 80060be:	f7fe fd7d 	bl	8004bbc <chk_chr>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <create_name+0xc8>
				return FR_INVALID_NAME;
 80060c8:	2306      	movs	r3, #6
 80060ca:	e054      	b.n	8006176 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80060cc:	7fbb      	ldrb	r3, [r7, #30]
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d907      	bls.n	80060e2 <create_name+0xde>
 80060d2:	7fbb      	ldrb	r3, [r7, #30]
 80060d4:	2b5a      	cmp	r3, #90	; 0x5a
 80060d6:	d804      	bhi.n	80060e2 <create_name+0xde>
				b |= 2;
 80060d8:	7ffb      	ldrb	r3, [r7, #31]
 80060da:	f043 0302 	orr.w	r3, r3, #2
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e00c      	b.n	80060fc <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80060e2:	7fbb      	ldrb	r3, [r7, #30]
 80060e4:	2b60      	cmp	r3, #96	; 0x60
 80060e6:	d909      	bls.n	80060fc <create_name+0xf8>
 80060e8:	7fbb      	ldrb	r3, [r7, #30]
 80060ea:	2b7a      	cmp	r3, #122	; 0x7a
 80060ec:	d806      	bhi.n	80060fc <create_name+0xf8>
					b |= 1; c -= 0x20;
 80060ee:	7ffb      	ldrb	r3, [r7, #31]
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	7fbb      	ldrb	r3, [r7, #30]
 80060f8:	3b20      	subs	r3, #32
 80060fa:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	613a      	str	r2, [r7, #16]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4413      	add	r3, r2
 8006106:	7fba      	ldrb	r2, [r7, #30]
 8006108:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800610a:	e7a1      	b.n	8006050 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	441a      	add	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006116:	7fbb      	ldrb	r3, [r7, #30]
 8006118:	2b20      	cmp	r3, #32
 800611a:	d801      	bhi.n	8006120 <create_name+0x11c>
 800611c:	2304      	movs	r3, #4
 800611e:	e000      	b.n	8006122 <create_name+0x11e>
 8006120:	2300      	movs	r3, #0
 8006122:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <create_name+0x12a>
 800612a:	2306      	movs	r3, #6
 800612c:	e023      	b.n	8006176 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2be5      	cmp	r3, #229	; 0xe5
 8006134:	d102      	bne.n	800613c <create_name+0x138>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2205      	movs	r2, #5
 800613a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b08      	cmp	r3, #8
 8006140:	d102      	bne.n	8006148 <create_name+0x144>
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006148:	7ffb      	ldrb	r3, [r7, #31]
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d103      	bne.n	800615a <create_name+0x156>
 8006152:	7fbb      	ldrb	r3, [r7, #30]
 8006154:	f043 0310 	orr.w	r3, r3, #16
 8006158:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800615a:	7ffb      	ldrb	r3, [r7, #31]
 800615c:	f003 030c 	and.w	r3, r3, #12
 8006160:	2b04      	cmp	r3, #4
 8006162:	d103      	bne.n	800616c <create_name+0x168>
 8006164:	7fbb      	ldrb	r3, [r7, #30]
 8006166:	f043 0308 	orr.w	r3, r3, #8
 800616a:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	330b      	adds	r3, #11
 8006170:	7fba      	ldrb	r2, [r7, #30]
 8006172:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006174:	2300      	movs	r3, #0
#endif
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	0800cfd4 	.word	0x0800cfd4
 8006184:	0800cf30 	.word	0x0800cf30

08006188 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b2f      	cmp	r3, #47	; 0x2f
 8006198:	d003      	beq.n	80061a2 <follow_path+0x1a>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b5c      	cmp	r3, #92	; 0x5c
 80061a0:	d102      	bne.n	80061a8 <follow_path+0x20>
		path++;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b1f      	cmp	r3, #31
 80061ba:	d80c      	bhi.n	80061d6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80061bc:	2100      	movs	r1, #0
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fbd3 	bl	800596a <dir_sdi>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ce:	461a      	mov	r2, r3
 80061d0:	2300      	movs	r3, #0
 80061d2:	6153      	str	r3, [r2, #20]
 80061d4:	e049      	b.n	800626a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80061d6:	463b      	mov	r3, r7
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ff12 	bl	8006004 <create_name>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d13a      	bne.n	8006260 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fe77 	bl	8005ede <dir_find>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	7adb      	ldrb	r3, [r3, #11]
 80061fe:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d12b      	bne.n	8006264 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d126      	bne.n	8006264 <follow_path+0xdc>
 8006216:	2305      	movs	r3, #5
 8006218:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800621a:	e023      	b.n	8006264 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d120      	bne.n	8006268 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	330b      	adds	r3, #11
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800623e:	2305      	movs	r3, #5
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e012      	b.n	800626a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fdf1 	bl	8005e36 <ld_clust>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800625e:	e7ba      	b.n	80061d6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8006260:	bf00      	nop
 8006262:	e002      	b.n	800626a <follow_path+0xe2>
				break;
 8006264:	bf00      	nop
 8006266:	e000      	b.n	800626a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006268:	bf00      	nop
		}
	}

	return res;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d031      	beq.n	80062ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e002      	b.n	8006298 <get_ldnumber+0x24>
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	3301      	adds	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b20      	cmp	r3, #32
 800629e:	d903      	bls.n	80062a8 <get_ldnumber+0x34>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b3a      	cmp	r3, #58	; 0x3a
 80062a6:	d1f4      	bne.n	8006292 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b3a      	cmp	r3, #58	; 0x3a
 80062ae:	d11c      	bne.n	80062ea <get_ldnumber+0x76>
			tp = *path;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	60fa      	str	r2, [r7, #12]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	3b30      	subs	r3, #48	; 0x30
 80062c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d80e      	bhi.n	80062e6 <get_ldnumber+0x72>
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d10a      	bne.n	80062e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d107      	bne.n	80062e6 <get_ldnumber+0x72>
					vol = (int)i;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	3301      	adds	r3, #1
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	e002      	b.n	80062f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80062ee:	693b      	ldr	r3, [r7, #16]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr
	...

080062fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630c:	2200      	movs	r2, #0
 800630e:	711a      	strb	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006316:	461a      	mov	r2, r3
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fe fe75 	bl	8005010 <move_window>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <check_fs+0x34>
		return 3;
 800632c:	2303      	movs	r3, #3
 800632e:	e04a      	b.n	80063c6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006336:	3301      	adds	r3, #1
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	b21a      	sxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006344:	b21b      	sxth	r3, r3
 8006346:	4313      	orrs	r3, r2
 8006348:	b21b      	sxth	r3, r3
 800634a:	4a21      	ldr	r2, [pc, #132]	; (80063d0 <check_fs+0xd4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d001      	beq.n	8006354 <check_fs+0x58>
		return 2;
 8006350:	2302      	movs	r3, #2
 8006352:	e038      	b.n	80063c6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3336      	adds	r3, #54	; 0x36
 8006358:	3303      	adds	r3, #3
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	061a      	lsls	r2, r3, #24
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3336      	adds	r3, #54	; 0x36
 8006362:	3302      	adds	r3, #2
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	041b      	lsls	r3, r3, #16
 8006368:	4313      	orrs	r3, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	3236      	adds	r2, #54	; 0x36
 800636e:	3201      	adds	r2, #1
 8006370:	7812      	ldrb	r2, [r2, #0]
 8006372:	0212      	lsls	r2, r2, #8
 8006374:	4313      	orrs	r3, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800637c:	4313      	orrs	r3, r2
 800637e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006382:	4a14      	ldr	r2, [pc, #80]	; (80063d4 <check_fs+0xd8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <check_fs+0x90>
		return 0;
 8006388:	2300      	movs	r3, #0
 800638a:	e01c      	b.n	80063c6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3352      	adds	r3, #82	; 0x52
 8006390:	3303      	adds	r3, #3
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	061a      	lsls	r2, r3, #24
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3352      	adds	r3, #82	; 0x52
 800639a:	3302      	adds	r3, #2
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	4313      	orrs	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	3252      	adds	r2, #82	; 0x52
 80063a6:	3201      	adds	r2, #1
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	0212      	lsls	r2, r2, #8
 80063ac:	4313      	orrs	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063ba:	4a06      	ldr	r2, [pc, #24]	; (80063d4 <check_fs+0xd8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d101      	bne.n	80063c4 <check_fs+0xc8>
		return 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e000      	b.n	80063c6 <check_fs+0xca>

	return 1;
 80063c4:	2301      	movs	r3, #1
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	ffffaa55 	.word	0xffffaa55
 80063d4:	00544146 	.word	0x00544146

080063d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b096      	sub	sp, #88	; 0x58
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80063ec:	68b8      	ldr	r0, [r7, #8]
 80063ee:	f7ff ff41 	bl	8006274 <get_ldnumber>
 80063f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da01      	bge.n	80063fe <find_volume+0x26>
 80063fa:	230b      	movs	r3, #11
 80063fc:	e311      	b.n	8006a22 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80063fe:	4a98      	ldr	r2, [pc, #608]	; (8006660 <find_volume+0x288>)
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <find_volume+0x3a>
 800640e:	230c      	movs	r3, #12
 8006410:	e307      	b.n	8006a22 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006416:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01c      	beq.n	800645e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe fac9 	bl	80049c4 <disk_status>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10c      	bne.n	800645e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <find_volume+0x82>
 800644a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006456:	230a      	movs	r3, #10
 8006458:	e2e3      	b.n	8006a22 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800645a:	2300      	movs	r3, #0
 800645c:	e2e1      	b.n	8006a22 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646a:	b2da      	uxtb	r2, r3
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006472:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fabb 	bl	80049f8 <disk_initialize>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006494:	2303      	movs	r3, #3
 8006496:	e2c4      	b.n	8006a22 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <find_volume+0xd6>
 800649e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80064aa:	230a      	movs	r3, #10
 80064ac:	e2b9      	b.n	8006a22 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b4:	7858      	ldrb	r0, [r3, #1]
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064bc:	330a      	adds	r3, #10
 80064be:	461a      	mov	r2, r3
 80064c0:	2102      	movs	r1, #2
 80064c2:	f7fe faff 	bl	8004ac4 <disk_ioctl>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10d      	bne.n	80064e8 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d2:	895b      	ldrh	r3, [r3, #10]
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d306      	bcc.n	80064e8 <find_volume+0x110>
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e0:	895b      	ldrh	r3, [r3, #10]
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e6:	d901      	bls.n	80064ec <find_volume+0x114>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e29a      	b.n	8006a22 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80064f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064f4:	f7ff ff02 	bl	80062fc <check_fs>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80064fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006502:	2b01      	cmp	r3, #1
 8006504:	d153      	bne.n	80065ae <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006506:	2300      	movs	r3, #0
 8006508:	643b      	str	r3, [r7, #64]	; 0x40
 800650a:	e028      	b.n	800655e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800650c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800650e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006516:	4413      	add	r3, r2
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	3304      	adds	r3, #4
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d012      	beq.n	800654a <find_volume+0x172>
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	330b      	adds	r3, #11
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	061a      	lsls	r2, r3, #24
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	330a      	adds	r3, #10
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	4313      	orrs	r3, r2
 8006536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006538:	3209      	adds	r2, #9
 800653a:	7812      	ldrb	r2, [r2, #0]
 800653c:	0212      	lsls	r2, r2, #8
 800653e:	4313      	orrs	r3, r2
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	3208      	adds	r2, #8
 8006544:	7812      	ldrb	r2, [r2, #0]
 8006546:	431a      	orrs	r2, r3
 8006548:	e000      	b.n	800654c <find_volume+0x174>
 800654a:	2200      	movs	r2, #0
 800654c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	3358      	adds	r3, #88	; 0x58
 8006552:	443b      	add	r3, r7
 8006554:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655a:	3301      	adds	r3, #1
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
 800655e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006560:	2b03      	cmp	r3, #3
 8006562:	d9d3      	bls.n	800650c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006564:	2300      	movs	r3, #0
 8006566:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <find_volume+0x19c>
 800656e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006570:	3b01      	subs	r3, #1
 8006572:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	3358      	adds	r3, #88	; 0x58
 800657a:	443b      	add	r3, r7
 800657c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006580:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <find_volume+0x1bc>
 8006588:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800658a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800658c:	f7ff feb6 	bl	80062fc <check_fs>
 8006590:	4603      	mov	r3, r0
 8006592:	e000      	b.n	8006596 <find_volume+0x1be>
 8006594:	2302      	movs	r3, #2
 8006596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800659a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <find_volume+0x1d6>
 80065a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a4:	3301      	adds	r3, #1
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
 80065a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d9e2      	bls.n	8006574 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80065ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d101      	bne.n	80065ba <find_volume+0x1e2>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e233      	b.n	8006a22 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80065ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <find_volume+0x1ee>
 80065c2:	230d      	movs	r3, #13
 80065c4:	e22d      	b.n	8006a22 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	7b1b      	ldrb	r3, [r3, #12]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	b21a      	sxth	r2, r3
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	7adb      	ldrb	r3, [r3, #11]
 80065d2:	b21b      	sxth	r3, r3
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b21a      	sxth	r2, r3
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065de:	895b      	ldrh	r3, [r3, #10]
 80065e0:	b21b      	sxth	r3, r3
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d001      	beq.n	80065ea <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80065e6:	230d      	movs	r3, #13
 80065e8:	e21b      	b.n	8006a22 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	7ddb      	ldrb	r3, [r3, #23]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	b21a      	sxth	r2, r3
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	7d9b      	ldrb	r3, [r3, #22]
 80065f6:	b21b      	sxth	r3, r3
 80065f8:	4313      	orrs	r3, r2
 80065fa:	b21b      	sxth	r3, r3
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d112      	bne.n	800662c <find_volume+0x254>
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800660c:	061a      	lsls	r2, r3, #24
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	4313      	orrs	r3, r2
 8006618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800661a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800661e:	0212      	lsls	r2, r2, #8
 8006620:	4313      	orrs	r3, r2
 8006622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006624:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006628:	4313      	orrs	r3, r2
 800662a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006632:	461a      	mov	r2, r3
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	7c1a      	ldrb	r2, [r3, #16]
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006642:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664a:	78db      	ldrb	r3, [r3, #3]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d009      	beq.n	8006664 <find_volume+0x28c>
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006656:	78db      	ldrb	r3, [r3, #3]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d003      	beq.n	8006664 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800665c:	230d      	movs	r3, #13
 800665e:	e1e0      	b.n	8006a22 <find_volume+0x64a>
 8006660:	200027fc 	.word	0x200027fc
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	461a      	mov	r2, r3
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	fb02 f303 	mul.w	r3, r2, r3
 8006674:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	7b5a      	ldrb	r2, [r3, #13]
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006680:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006688:	789b      	ldrb	r3, [r3, #2]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <find_volume+0x2d0>
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006694:	789b      	ldrb	r3, [r3, #2]
 8006696:	461a      	mov	r2, r3
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669e:	789b      	ldrb	r3, [r3, #2]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80066a8:	230d      	movs	r3, #13
 80066aa:	e1ba      	b.n	8006a22 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	7c9b      	ldrb	r3, [r3, #18]
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	b21a      	sxth	r2, r3
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	7c5b      	ldrb	r3, [r3, #17]
 80066b8:	b21b      	sxth	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b21b      	sxth	r3, r3
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ce:	891b      	ldrh	r3, [r3, #8]
 80066d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066d6:	8952      	ldrh	r2, [r2, #10]
 80066d8:	0952      	lsrs	r2, r2, #5
 80066da:	b292      	uxth	r2, r2
 80066dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80066e0:	fb01 f202 	mul.w	r2, r1, r2
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80066ec:	230d      	movs	r3, #13
 80066ee:	e198      	b.n	8006a22 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	7d1b      	ldrb	r3, [r3, #20]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	b21a      	sxth	r2, r3
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	7cdb      	ldrb	r3, [r3, #19]
 80066fc:	b21b      	sxth	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b21b      	sxth	r3, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006708:	2b00      	cmp	r3, #0
 800670a:	d112      	bne.n	8006732 <find_volume+0x35a>
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006712:	061a      	lsls	r2, r3, #24
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	4313      	orrs	r3, r2
 800671e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006720:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006724:	0212      	lsls	r2, r2, #8
 8006726:	4313      	orrs	r3, r2
 8006728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800672a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800672e:	4313      	orrs	r3, r2
 8006730:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	7bdb      	ldrb	r3, [r3, #15]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	b21a      	sxth	r2, r3
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	7b9b      	ldrb	r3, [r3, #14]
 800673e:	b21b      	sxth	r3, r3
 8006740:	4313      	orrs	r3, r2
 8006742:	b21b      	sxth	r3, r3
 8006744:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006746:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <find_volume+0x378>
 800674c:	230d      	movs	r3, #13
 800674e:	e168      	b.n	8006a22 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006750:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006754:	4413      	add	r3, r2
 8006756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006758:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800675c:	8911      	ldrh	r1, [r2, #8]
 800675e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006764:	8952      	ldrh	r2, [r2, #10]
 8006766:	0952      	lsrs	r2, r2, #5
 8006768:	b292      	uxth	r2, r2
 800676a:	fbb1 f2f2 	udiv	r2, r1, r2
 800676e:	b292      	uxth	r2, r2
 8006770:	4413      	add	r3, r2
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	429a      	cmp	r2, r3
 800677a:	d201      	bcs.n	8006780 <find_volume+0x3a8>
 800677c:	230d      	movs	r3, #13
 800677e:	e150      	b.n	8006a22 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006788:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800678c:	7892      	ldrb	r2, [r2, #2]
 800678e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <find_volume+0x3c6>
 800679a:	230d      	movs	r3, #13
 800679c:	e141      	b.n	8006a22 <find_volume+0x64a>
	fmt = FS_FAT12;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d902      	bls.n	80067b4 <find_volume+0x3dc>
 80067ae:	2302      	movs	r3, #2
 80067b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d902      	bls.n	80067c4 <find_volume+0x3ec>
 80067be:	2303      	movs	r3, #3
 80067c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	3302      	adds	r3, #2
 80067c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067ce:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d6:	461a      	mov	r2, r3
 80067d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067da:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80067dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e0:	4413      	add	r3, r2
 80067e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067e8:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80067ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	4413      	add	r3, r2
 80067f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067f6:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80067f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d124      	bne.n	800684a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006806:	891b      	ldrh	r3, [r3, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <find_volume+0x438>
 800680c:	230d      	movs	r3, #13
 800680e:	e108      	b.n	8006a22 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006816:	061a      	lsls	r2, r3, #24
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	4313      	orrs	r3, r2
 8006822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006824:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006828:	0212      	lsls	r2, r2, #8
 800682a:	4313      	orrs	r3, r2
 800682c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006832:	4313      	orrs	r3, r2
 8006834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800683a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	647b      	str	r3, [r7, #68]	; 0x44
 8006848:	e02b      	b.n	80068a2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006850:	891b      	ldrh	r3, [r3, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <find_volume+0x482>
 8006856:	230d      	movs	r3, #13
 8006858:	e0e3      	b.n	8006a22 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	4413      	add	r3, r2
 8006866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006868:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800686c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800686e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006872:	2b02      	cmp	r3, #2
 8006874:	d105      	bne.n	8006882 <find_volume+0x4aa>
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	e00e      	b.n	80068a0 <find_volume+0x4c8>
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006888:	695a      	ldr	r2, [r3, #20]
 800688a:	4613      	mov	r3, r2
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	4413      	add	r3, r2
 8006890:	085a      	lsrs	r2, r3, #1
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80068a0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b0:	895b      	ldrh	r3, [r3, #10]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b6:	440b      	add	r3, r1
 80068b8:	3b01      	subs	r3, #1
 80068ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068bc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80068c0:	8949      	ldrh	r1, [r1, #10]
 80068c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d201      	bcs.n	80068ce <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80068ca:	230d      	movs	r3, #13
 80068cc:	e0a9      	b.n	8006a22 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d4:	461a      	mov	r2, r3
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	6113      	str	r3, [r2, #16]
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068ea:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80068f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d17a      	bne.n	80069f4 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	b21a      	sxth	r2, r3
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800690e:	b21b      	sxth	r3, r3
 8006910:	4313      	orrs	r3, r2
 8006912:	b21b      	sxth	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d16d      	bne.n	80069f4 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691a:	3301      	adds	r3, #1
 800691c:	4619      	mov	r1, r3
 800691e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006920:	f7fe fb76 	bl	8005010 <move_window>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d164      	bne.n	80069f4 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006930:	2200      	movs	r2, #0
 8006932:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	b21a      	sxth	r2, r3
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006944:	b21b      	sxth	r3, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	b21b      	sxth	r3, r3
 800694a:	4a38      	ldr	r2, [pc, #224]	; (8006a2c <find_volume+0x654>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d151      	bne.n	80069f4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	061a      	lsls	r2, r3, #24
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	789b      	ldrb	r3, [r3, #2]
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	4313      	orrs	r3, r2
 800695e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006960:	7852      	ldrb	r2, [r2, #1]
 8006962:	0212      	lsls	r2, r2, #8
 8006964:	4313      	orrs	r3, r2
 8006966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	4313      	orrs	r3, r2
 800696c:	4a30      	ldr	r2, [pc, #192]	; (8006a30 <find_volume+0x658>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d140      	bne.n	80069f4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006978:	061a      	lsls	r2, r3, #24
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006980:	041b      	lsls	r3, r3, #16
 8006982:	4313      	orrs	r3, r2
 8006984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006986:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800698a:	0212      	lsls	r2, r2, #8
 800698c:	4313      	orrs	r3, r2
 800698e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006990:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006994:	4313      	orrs	r3, r2
 8006996:	4a27      	ldr	r2, [pc, #156]	; (8006a34 <find_volume+0x65c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d12b      	bne.n	80069f4 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80069a2:	061a      	lsls	r2, r3, #24
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	4313      	orrs	r3, r2
 80069ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80069b4:	0212      	lsls	r2, r2, #8
 80069b6:	4313      	orrs	r3, r2
 80069b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ba:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80069be:	4313      	orrs	r3, r2
 80069c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069c6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80069ce:	061a      	lsls	r2, r3, #24
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80069d6:	041b      	lsls	r3, r3, #16
 80069d8:	4313      	orrs	r3, r2
 80069da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069dc:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80069e0:	0212      	lsls	r2, r2, #8
 80069e2:	4313      	orrs	r3, r2
 80069e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80069ea:	4313      	orrs	r3, r2
 80069ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069f2:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fa:	461a      	mov	r2, r3
 80069fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a00:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006a02:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <find_volume+0x660>)
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <find_volume+0x660>)
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <find_volume+0x660>)
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a18:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006a1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a1c:	f7fe fa7c 	bl	8004f18 <clear_lock>
#endif

	return FR_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3758      	adds	r7, #88	; 0x58
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	ffffaa55 	.word	0xffffaa55
 8006a30:	41615252 	.word	0x41615252
 8006a34:	61417272 	.word	0x61417272
 8006a38:	20002800 	.word	0x20002800

08006a3c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d02a      	beq.n	8006aa4 <validate+0x68>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d024      	beq.n	8006aa4 <validate+0x68>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01b      	beq.n	8006aa4 <validate+0x68>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a78:	88da      	ldrh	r2, [r3, #6]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a80:	889b      	ldrh	r3, [r3, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d10e      	bne.n	8006aa4 <validate+0x68>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fd ff95 	bl	80049c4 <disk_status>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006aa4:	2309      	movs	r3, #9
 8006aa6:	e000      	b.n	8006aaa <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006ac6:	f107 0310 	add.w	r3, r7, #16
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fbd2 	bl	8006274 <get_ldnumber>
 8006ad0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	da01      	bge.n	8006adc <f_mount+0x28>
 8006ad8:	230b      	movs	r3, #11
 8006ada:	e02f      	b.n	8006b3c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006adc:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <f_mount+0x90>)
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006aec:	69b8      	ldr	r0, [r7, #24]
 8006aee:	f7fe fa13 	bl	8004f18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	490d      	ldr	r1, [pc, #52]	; (8006b44 <f_mount+0x90>)
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <f_mount+0x6e>
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d001      	beq.n	8006b26 <f_mount+0x72>
 8006b22:	2300      	movs	r3, #0
 8006b24:	e00a      	b.n	8006b3c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006b26:	f107 0108 	add.w	r1, r7, #8
 8006b2a:	f107 030c 	add.w	r3, r7, #12
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fc51 	bl	80063d8 <find_volume>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200027fc 	.word	0x200027fc

08006b48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b56:	f843 0c44 	str.w	r0, [r3, #-68]
 8006b5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b5e:	f843 1c48 	str.w	r1, [r3, #-72]
 8006b62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b66:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006b6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <f_open+0x32>
 8006b76:	2309      	movs	r3, #9
 8006b78:	e2e6      	b.n	8007148 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 8006b7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006b8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b90:	461a      	mov	r2, r3
 8006b92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b96:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ba6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	f107 0110 	add.w	r1, r7, #16
 8006bb4:	3908      	subs	r1, #8
 8006bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bba:	3b10      	subs	r3, #16
 8006bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff fc09 	bl	80063d8 <find_volume>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006bcc:	f102 020f 	add.w	r2, r2, #15
 8006bd0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006bd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bd6:	f103 030f 	add.w	r3, r3, #15
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 82ae 	bne.w	800713e <f_open+0x5f6>
		INIT_BUF(dj);
 8006be2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006be6:	461a      	mov	r2, r3
 8006be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bec:	3b1c      	subs	r3, #28
 8006bee:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8006bf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006bf6:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bfe:	3b10      	subs	r3, #16
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fac0 	bl	8006188 <follow_path>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c0e:	f102 020f 	add.w	r2, r2, #15
 8006c12:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006c14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c18:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8006c1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c20:	f102 0208 	add.w	r2, r2, #8
 8006c24:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c2a:	f103 030f 	add.w	r3, r3, #15
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d126      	bne.n	8006c82 <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 8006c34:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c38:	f103 0308 	add.w	r3, r3, #8
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <f_open+0x108>
				res = FR_INVALID_NAME;
 8006c42:	2306      	movs	r3, #6
 8006c44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c48:	f102 020f 	add.w	r2, r2, #15
 8006c4c:	7013      	strb	r3, [r2, #0]
 8006c4e:	e018      	b.n	8006c82 <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c54:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bf14      	ite	ne
 8006c60:	2301      	movne	r3, #1
 8006c62:	2300      	moveq	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c6c:	3b10      	subs	r3, #16
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd ffbd 	bl	8004bf0 <chk_lock>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c7c:	f102 020f 	add.w	r2, r2, #15
 8006c80:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006c82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c86:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006c8a:	f003 031c 	and.w	r3, r3, #28
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 8134 	beq.w	8006efc <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8006c94:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c98:	f103 030f 	add.w	r3, r3, #15
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02e      	beq.n	8006d00 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006ca2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ca6:	f103 030f 	add.w	r3, r3, #15
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d112      	bne.n	8006cd6 <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006cb0:	f7fe f80e 	bl	8004cd0 <enq_lock>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <f_open+0x182>
 8006cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cbe:	3b10      	subs	r3, #16
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff f95f 	bl	8005f84 <dir_register>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	e000      	b.n	8006ccc <f_open+0x184>
 8006cca:	2312      	movs	r3, #18
 8006ccc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006cd0:	f102 020f 	add.w	r2, r2, #15
 8006cd4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006cd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ce0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006ce4:	f043 0308 	orr.w	r3, r3, #8
 8006ce8:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8006cec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006cf0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8006cf4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006cf8:	f102 0208 	add.w	r2, r2, #8
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	e01f      	b.n	8006d40 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d04:	f103 0308 	add.w	r3, r3, #8
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330b      	adds	r3, #11
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 0311 	and.w	r3, r3, #17
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <f_open+0x1dc>
					res = FR_DENIED;
 8006d16:	2307      	movs	r3, #7
 8006d18:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d1c:	f102 020f 	add.w	r2, r2, #15
 8006d20:	7013      	strb	r3, [r2, #0]
 8006d22:	e00d      	b.n	8006d40 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006d24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d28:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <f_open+0x1f8>
						res = FR_EXIST;
 8006d34:	2308      	movs	r3, #8
 8006d36:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d3a:	f102 020f 	add.w	r2, r2, #15
 8006d3e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d40:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d44:	f103 030f 	add.w	r3, r3, #15
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 8108 	bne.w	8006f60 <f_open+0x418>
 8006d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d54:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80ff 	beq.w	8006f60 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8006d62:	f7fd fdd7 	bl	8004914 <get_fattime>
 8006d66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d6a:	f103 0304 	add.w	r3, r3, #4
 8006d6e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006d70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d74:	f103 0308 	add.w	r3, r3, #8
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330e      	adds	r3, #14
 8006d7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d80:	f102 0204 	add.w	r2, r2, #4
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d8e:	f103 0304 	add.w	r3, r3, #4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d9e:	f103 0308 	add.w	r3, r3, #8
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330f      	adds	r3, #15
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dae:	f103 0304 	add.w	r3, r3, #4
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	0c1a      	lsrs	r2, r3, #16
 8006db6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dba:	f103 0308 	add.w	r3, r3, #8
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3310      	adds	r3, #16
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dca:	f103 0304 	add.w	r3, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	0e1a      	lsrs	r2, r3, #24
 8006dd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dd6:	f103 0308 	add.w	r3, r3, #8
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3311      	adds	r3, #17
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006de2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006de6:	f103 0308 	add.w	r3, r3, #8
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330b      	adds	r3, #11
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006df2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006df6:	f103 0308 	add.w	r3, r3, #8
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	331c      	adds	r3, #28
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e06:	f103 0308 	add.w	r3, r3, #8
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	331d      	adds	r3, #29
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e16:	f103 0308 	add.w	r3, r3, #8
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	331e      	adds	r3, #30
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e26:	f103 0308 	add.w	r3, r3, #8
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	331f      	adds	r3, #31
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006e32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e36:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8006e3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e3e:	f102 0208 	add.w	r2, r2, #8
 8006e42:	6811      	ldr	r1, [r2, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fff6 	bl	8005e36 <ld_clust>
 8006e4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e4e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8006e50:	2100      	movs	r1, #0
 8006e52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e56:	f103 0308 	add.w	r3, r3, #8
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	f7ff f819 	bl	8005e92 <st_clust>
				dj.fs->wflag = 1;
 8006e60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e64:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8006e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8006e70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d072      	beq.n	8006f60 <f_open+0x418>
					dw = dj.fs->winsect;
 8006e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e7e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8006e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e8c:	f102 0204 	add.w	r2, r2, #4
 8006e90:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006e92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e96:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8006e9a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e9e:	6811      	ldr	r1, [r2, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe fc19 	bl	80056d8 <remove_chain>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006eac:	f102 020f 	add.w	r2, r2, #15
 8006eb0:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006eb2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006eb6:	f103 030f 	add.w	r3, r3, #15
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d14f      	bne.n	8006f60 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006ec0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ec4:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8006ec8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ed4:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8006ed6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006eda:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8006ede:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ee2:	f102 0204 	add.w	r2, r2, #4
 8006ee6:	6811      	ldr	r1, [r2, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe f891 	bl	8005010 <move_window>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ef4:	f102 020f 	add.w	r2, r2, #15
 8006ef8:	7013      	strb	r3, [r2, #0]
 8006efa:	e031      	b.n	8006f60 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006efc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f00:	f103 030f 	add.w	r3, r3, #15
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d12a      	bne.n	8006f60 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006f0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f0e:	f103 0308 	add.w	r3, r3, #8
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330b      	adds	r3, #11
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d006      	beq.n	8006f2e <f_open+0x3e6>
					res = FR_NO_FILE;
 8006f20:	2304      	movs	r3, #4
 8006f22:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f26:	f102 020f 	add.w	r2, r2, #15
 8006f2a:	7013      	strb	r3, [r2, #0]
 8006f2c:	e018      	b.n	8006f60 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006f2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f32:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d010      	beq.n	8006f60 <f_open+0x418>
 8006f3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f42:	f103 0308 	add.w	r3, r3, #8
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330b      	adds	r3, #11
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <f_open+0x418>
						res = FR_DENIED;
 8006f54:	2307      	movs	r3, #7
 8006f56:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f5a:	f102 020f 	add.w	r2, r2, #15
 8006f5e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006f60:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f64:	f103 030f 	add.w	r3, r3, #15
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d157      	bne.n	800701e <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006f6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f72:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <f_open+0x44c>
				mode |= FA__WRITTEN;
 8006f7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f82:	461a      	mov	r2, r3
 8006f84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f88:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006f8c:	f043 0320 	orr.w	r3, r3, #32
 8006f90:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006f94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f98:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8006f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006fa6:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8006faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fae:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8006fb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006fb4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fc2:	f103 0308 	add.w	r3, r3, #8
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006fce:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf14      	ite	ne
 8006fda:	2301      	movne	r3, #1
 8006fdc:	2300      	moveq	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fe6:	3b10      	subs	r3, #16
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fd fe94 	bl	8004d18 <inc_lock>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ff6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007000:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007004:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d105      	bne.n	800701e <f_open+0x4d6>
 8007012:	2302      	movs	r3, #2
 8007014:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007018:	f102 020f 	add.w	r2, r2, #15
 800701c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800701e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007022:	f103 030f 	add.w	r3, r3, #15
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 8088 	bne.w	800713e <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 800702e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007032:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703a:	461a      	mov	r2, r3
 800703c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007040:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007044:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800704a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	2200      	movs	r2, #0
 8007054:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007056:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800705a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800705e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007062:	f102 0208 	add.w	r2, r2, #8
 8007066:	6811      	ldr	r1, [r2, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fee4 	bl	8005e36 <ld_clust>
 800706e:	4602      	mov	r2, r0
 8007070:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007074:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707c:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800707e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007082:	f103 0308 	add.w	r3, r3, #8
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	331f      	adds	r3, #31
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	061a      	lsls	r2, r3, #24
 800708e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007092:	f103 0308 	add.w	r3, r3, #8
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	331e      	adds	r3, #30
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	4313      	orrs	r3, r2
 80070a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070a4:	f102 0208 	add.w	r2, r2, #8
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	321d      	adds	r2, #29
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	0212      	lsls	r2, r2, #8
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070b6:	f102 0208 	add.w	r2, r2, #8
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	321c      	adds	r2, #28
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80070c6:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80070ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070ce:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80070d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070d4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070dc:	461a      	mov	r2, r3
 80070de:	2300      	movs	r3, #0
 80070e0:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80070e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ee:	461a      	mov	r2, r3
 80070f0:	2300      	movs	r3, #0
 80070f2:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80070f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070f8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007100:	461a      	mov	r2, r3
 8007102:	2300      	movs	r3, #0
 8007104:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007106:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800710a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800710e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007112:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007116:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800711a:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800711c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007120:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712e:	88da      	ldrh	r2, [r3, #6]
 8007130:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007134:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713c:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800713e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007142:	f103 030f 	add.w	r3, r3, #15
 8007146:	781b      	ldrb	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f7ff fc65 	bl	8006a3c <validate>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <f_write+0x2c>
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	e21e      	b.n	80075be <f_write+0x46a>
	if (fp->err)							/* Check error */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007186:	79db      	ldrb	r3, [r3, #7]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007192:	79db      	ldrb	r3, [r3, #7]
 8007194:	e213      	b.n	80075be <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719c:	799b      	ldrb	r3, [r3, #6]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80071a6:	2307      	movs	r3, #7
 80071a8:	e209      	b.n	80075be <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	f080 81d9 	bcs.w	8007576 <f_write+0x422>
 80071c4:	2300      	movs	r3, #0
 80071c6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80071c8:	e1d5      	b.n	8007576 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071de:	8952      	ldrh	r2, [r2, #10]
 80071e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80071e4:	fb01 f202 	mul.w	r2, r1, r2
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 8169 	bne.w	80074c2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007204:	8952      	ldrh	r2, [r2, #10]
 8007206:	fbb3 f3f2 	udiv	r3, r3, r2
 800720a:	b2da      	uxtb	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007218:	789b      	ldrb	r3, [r3, #2]
 800721a:	3b01      	subs	r3, #1
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4013      	ands	r3, r2
 8007220:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007222:	7dbb      	ldrb	r3, [r7, #22]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d15f      	bne.n	80072e8 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d111      	bne.n	8007258 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	2b00      	cmp	r3, #0
 8007242:	d126      	bne.n	8007292 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe faa3 	bl	800579a <create_chain>
 8007254:	6278      	str	r0, [r7, #36]	; 0x24
 8007256:	e01c      	b.n	8007292 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	4619      	mov	r1, r3
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7fe fb3b 	bl	80058ea <clmt_clust>
 8007274:	6278      	str	r0, [r7, #36]	; 0x24
 8007276:	e00c      	b.n	8007292 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f7fe fa85 	bl	800579a <create_chain>
 8007290:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8173 	beq.w	8007580 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	2b01      	cmp	r3, #1
 800729e:	d106      	bne.n	80072ae <f_write+0x15a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a6:	2202      	movs	r2, #2
 80072a8:	71da      	strb	r2, [r3, #7]
 80072aa:	2302      	movs	r3, #2
 80072ac:	e187      	b.n	80075be <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d106      	bne.n	80072c4 <f_write+0x170>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072bc:	2201      	movs	r2, #1
 80072be:	71da      	strb	r2, [r3, #7]
 80072c0:	2301      	movs	r3, #1
 80072c2:	e17c      	b.n	80075be <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ca:	461a      	mov	r2, r3
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <f_write+0x194>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e2:	461a      	mov	r2, r3
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ee:	799b      	ldrb	r3, [r3, #6]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d023      	beq.n	8007340 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007304:	7858      	ldrb	r0, [r3, #1]
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	2301      	movs	r3, #1
 8007312:	f7fd fbb7 	bl	8004a84 <disk_write>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007322:	2201      	movs	r2, #1
 8007324:	71da      	strb	r2, [r3, #7]
 8007326:	2301      	movs	r3, #1
 8007328:	e149      	b.n	80075be <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007330:	799b      	ldrb	r3, [r3, #6]
 8007332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007336:	b2da      	uxtb	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7fd ff4d 	bl	80051f2 <clust2sect>
 8007358:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d106      	bne.n	800736e <f_write+0x21a>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007366:	2202      	movs	r2, #2
 8007368:	71da      	strb	r2, [r3, #7]
 800736a:	2302      	movs	r3, #2
 800736c:	e127      	b.n	80075be <f_write+0x46a>
			sect += csect;
 800736e:	7dbb      	ldrb	r3, [r7, #22]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007382:	895b      	ldrh	r3, [r3, #10]
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	fbb3 f3f2 	udiv	r3, r3, r2
 800738c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d069      	beq.n	8007468 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007394:	7dba      	ldrb	r2, [r7, #22]
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073a6:	7892      	ldrb	r2, [r2, #2]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d90a      	bls.n	80073c2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b8:	789b      	ldrb	r3, [r3, #2]
 80073ba:	461a      	mov	r2, r3
 80073bc:	7dbb      	ldrb	r3, [r7, #22]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ce:	7858      	ldrb	r0, [r3, #1]
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	69b9      	ldr	r1, [r7, #24]
 80073d6:	f7fd fb55 	bl	8004a84 <disk_write>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d006      	beq.n	80073ee <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e6:	2201      	movs	r2, #1
 80073e8:	71da      	strb	r2, [r3, #7]
 80073ea:	2301      	movs	r3, #1
 80073ec:	e0e7      	b.n	80075be <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d926      	bls.n	800744e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800741a:	8952      	ldrh	r2, [r2, #10]
 800741c:	fb02 f303 	mul.w	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	18d1      	adds	r1, r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007430:	895b      	ldrh	r3, [r3, #10]
 8007432:	461a      	mov	r2, r3
 8007434:	f7fd fb64 	bl	8004b00 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743e:	799b      	ldrb	r3, [r3, #6]
 8007440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745a:	895b      	ldrh	r3, [r3, #10]
 800745c:	461a      	mov	r2, r3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	fb02 f303 	mul.w	r3, r2, r3
 8007464:	623b      	str	r3, [r7, #32]
				continue;
 8007466:	e06e      	b.n	8007546 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	429a      	cmp	r2, r3
 8007474:	d01f      	beq.n	80074b6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	429a      	cmp	r2, r3
 8007488:	d215      	bcs.n	80074b6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007496:	7858      	ldrb	r0, [r3, #1]
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	2301      	movs	r3, #1
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	f7fd fad1 	bl	8004a44 <disk_read>
 80074a2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d006      	beq.n	80074b6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ae:	2201      	movs	r2, #1
 80074b0:	71da      	strb	r2, [r3, #7]
 80074b2:	2301      	movs	r3, #1
 80074b4:	e083      	b.n	80075be <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	461a      	mov	r2, r3
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ce:	895b      	ldrh	r3, [r3, #10]
 80074d0:	4618      	mov	r0, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074e6:	8952      	ldrh	r2, [r2, #10]
 80074e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ec:	fb01 f202 	mul.w	r2, r1, r2
 80074f0:	1a9b      	subs	r3, r3, r2
 80074f2:	1ac3      	subs	r3, r0, r3
 80074f4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d901      	bls.n	8007502 <f_write+0x3ae>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007516:	8952      	ldrh	r2, [r2, #10]
 8007518:	fbb3 f1f2 	udiv	r1, r3, r2
 800751c:	fb01 f202 	mul.w	r2, r1, r2
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	6a3a      	ldr	r2, [r7, #32]
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fd fae8 	bl	8004b00 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007536:	799b      	ldrb	r3, [r3, #6]
 8007538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800753c:	b2da      	uxtb	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007544:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	4413      	add	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	4413      	add	r3, r2
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007560:	6093      	str	r3, [r2, #8]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	441a      	add	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f47f ae26 	bne.w	80071ca <f_write+0x76>
 800757e:	e000      	b.n	8007582 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007580:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	429a      	cmp	r2, r3
 8007594:	d907      	bls.n	80075a6 <f_write+0x452>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075a4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ac:	799b      	ldrb	r3, [r3, #6]
 80075ae:	f043 0320 	orr.w	r3, r3, #32
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ba:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3728      	adds	r7, #40	; 0x28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b086      	sub	sp, #24
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fa34 	bl	8006a3c <validate>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f040 80bc 	bne.w	8007758 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e6:	799b      	ldrb	r3, [r3, #6]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80b3 	beq.w	8007758 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f8:	799b      	ldrb	r3, [r3, #6]
 80075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d01e      	beq.n	8007640 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760e:	7858      	ldrb	r0, [r3, #1]
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	2301      	movs	r3, #1
 800761c:	f7fd fa32 	bl	8004a84 <disk_write>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007626:	2301      	movs	r3, #1
 8007628:	e097      	b.n	800775a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007630:	799b      	ldrb	r3, [r3, #6]
 8007632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007636:	b2da      	uxtb	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fd fcdc 	bl	8005010 <move_window>
 8007658:	4603      	mov	r3, r0
 800765a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d17a      	bne.n	8007758 <f_sync+0x192>
				dir = fp->dir_ptr;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	330b      	adds	r3, #11
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	330b      	adds	r3, #11
 8007676:	f042 0220 	orr.w	r2, r2, #32
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	331c      	adds	r3, #28
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	b29b      	uxth	r3, r3
 8007698:	0a1b      	lsrs	r3, r3, #8
 800769a:	b29a      	uxth	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	331d      	adds	r3, #29
 80076a0:	b2d2      	uxtb	r2, r2
 80076a2:	701a      	strb	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	0c1a      	lsrs	r2, r3, #16
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	331e      	adds	r3, #30
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	0e1a      	lsrs	r2, r3, #24
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	331f      	adds	r3, #31
 80076c4:	b2d2      	uxtb	r2, r2
 80076c6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6938      	ldr	r0, [r7, #16]
 80076d4:	f7fe fbdd 	bl	8005e92 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80076d8:	f7fd f91c 	bl	8004914 <get_fattime>
 80076dc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	3316      	adds	r3, #22
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	0a1b      	lsrs	r3, r3, #8
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3317      	adds	r3, #23
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	0c1a      	lsrs	r2, r3, #16
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	3318      	adds	r3, #24
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	0e1a      	lsrs	r2, r3, #24
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	3319      	adds	r3, #25
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	3312      	adds	r3, #18
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	3313      	adds	r3, #19
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007726:	799b      	ldrb	r3, [r3, #6]
 8007728:	f023 0320 	bic.w	r3, r3, #32
 800772c:	b2da      	uxtb	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007734:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007742:	2201      	movs	r2, #1
 8007744:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f7fd fc90 	bl	8005074 <sync_fs>
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007758:	7dfb      	ldrb	r3, [r7, #23]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff ff2b 	bl	80075c6 <f_sync>
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d119      	bne.n	80077ae <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff f95e 	bl	8006a3c <validate>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d111      	bne.n	80077ae <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	4618      	mov	r0, r3
 8007794:	f7fd fb7c 	bl	8004e90 <dec_lock>
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d105      	bne.n	80077ae <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a8:	461a      	mov	r2, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b090      	sub	sp, #64	; 0x40
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff f93a 	bl	8006a3c <validate>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80077ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <f_lseek+0x24>
 80077d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077da:	e2da      	b.n	8007d92 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e2:	79db      	ldrb	r3, [r3, #7]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d004      	beq.n	80077f2 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ee:	79db      	ldrb	r3, [r3, #7]
 80077f0:	e2cf      	b.n	8007d92 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8124 	beq.w	8007a48 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007806:	d16c      	bne.n	80078e2 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	1d1a      	adds	r2, r3, #4
 8007816:	627a      	str	r2, [r7, #36]	; 0x24
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	2302      	movs	r3, #2
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d046      	beq.n	80078be <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	2300      	movs	r3, #0
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	3302      	adds	r3, #2
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	3301      	adds	r3, #1
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007852:	4618      	mov	r0, r3
 8007854:	f7fd fcf1 	bl	800523a <get_fat>
 8007858:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	2b01      	cmp	r3, #1
 800785e:	d806      	bhi.n	800786e <f_lseek+0xb6>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007866:	2202      	movs	r2, #2
 8007868:	71da      	strb	r2, [r3, #7]
 800786a:	2302      	movs	r3, #2
 800786c:	e291      	b.n	8007d92 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d106      	bne.n	8007884 <f_lseek+0xcc>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787c:	2201      	movs	r2, #1
 800787e:	71da      	strb	r2, [r3, #7]
 8007880:	2301      	movs	r3, #1
 8007882:	e286      	b.n	8007d92 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800788a:	429a      	cmp	r2, r3
 800788c:	d0d7      	beq.n	800783e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800788e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	429a      	cmp	r2, r3
 8007894:	d809      	bhi.n	80078aa <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	1d1a      	adds	r2, r3, #4
 800789a:	627a      	str	r2, [r7, #36]	; 0x24
 800789c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	627a      	str	r2, [r7, #36]	; 0x24
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d3b8      	bcc.n	8007830 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80078ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d803      	bhi.n	80078da <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	e259      	b.n	8007d8e <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80078da:	2311      	movs	r3, #17
 80078dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80078e0:	e255      	b.n	8007d8e <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d904      	bls.n	80078fa <f_lseek+0x142>
				ofs = fp->fsize;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007900:	461a      	mov	r2, r3
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8240 	beq.w	8007d8e <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	3b01      	subs	r3, #1
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fd ffe8 	bl	80058ea <clmt_clust>
 800791a:	4602      	mov	r2, r0
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007922:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7fd fc5b 	bl	80051f2 <clust2sect>
 800793c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d106      	bne.n	8007952 <f_lseek+0x19a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794a:	2202      	movs	r2, #2
 800794c:	71da      	strb	r2, [r3, #7]
 800794e:	2302      	movs	r3, #2
 8007950:	e21f      	b.n	8007d92 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	3b01      	subs	r3, #1
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007962:	8952      	ldrh	r2, [r2, #10]
 8007964:	fbb3 f3f2 	udiv	r3, r3, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007974:	7892      	ldrb	r2, [r2, #2]
 8007976:	3a01      	subs	r2, #1
 8007978:	4013      	ands	r3, r2
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	4413      	add	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007994:	8952      	ldrh	r2, [r2, #10]
 8007996:	fbb3 f1f2 	udiv	r1, r3, r2
 800799a:	fb01 f202 	mul.w	r2, r1, r2
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 81f4 	beq.w	8007d8e <f_lseek+0x5d6>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	f000 81ec 	beq.w	8007d8e <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079bc:	799b      	ldrb	r3, [r3, #6]
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d023      	beq.n	8007a0e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d2:	7858      	ldrb	r0, [r3, #1]
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	2301      	movs	r3, #1
 80079e0:	f7fd f850 	bl	8004a84 <disk_write>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d006      	beq.n	80079f8 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f0:	2201      	movs	r2, #1
 80079f2:	71da      	strb	r2, [r3, #7]
 80079f4:	2301      	movs	r3, #1
 80079f6:	e1cc      	b.n	8007d92 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fe:	799b      	ldrb	r3, [r3, #6]
 8007a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1a:	7858      	ldrb	r0, [r3, #1]
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	2301      	movs	r3, #1
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	f7fd f80f 	bl	8004a44 <disk_read>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a32:	2201      	movs	r2, #1
 8007a34:	71da      	strb	r2, [r3, #7]
 8007a36:	2301      	movs	r3, #1
 8007a38:	e1ab      	b.n	8007d92 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a40:	461a      	mov	r2, r3
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	6193      	str	r3, [r2, #24]
 8007a46:	e1a2      	b.n	8007d8e <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d90c      	bls.n	8007a70 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a5c:	799b      	ldrb	r3, [r3, #6]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a84:	461a      	mov	r2, r3
 8007a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a88:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8100 	beq.w	8007c92 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a9e:	789b      	ldrb	r3, [r3, #2]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aae:	895b      	ldrh	r3, [r3, #10]
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
 8007ab4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d021      	beq.n	8007b00 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	1e5a      	subs	r2, r3, #1
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	1e59      	subs	r1, r3, #1
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d315      	bcc.n	8007b00 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	1e5a      	subs	r2, r3, #1
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	425b      	negs	r3, r3
 8007adc:	4013      	ands	r3, r2
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ae4:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007afe:	e031      	b.n	8007b64 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d123      	bne.n	8007b58 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fd fe3d 	bl	800579a <create_chain>
 8007b20:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d106      	bne.n	8007b36 <f_lseek+0x37e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	2202      	movs	r2, #2
 8007b30:	71da      	strb	r2, [r3, #7]
 8007b32:	2302      	movs	r3, #2
 8007b34:	e12d      	b.n	8007d92 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d106      	bne.n	8007b4c <f_lseek+0x394>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b44:	2201      	movs	r2, #1
 8007b46:	71da      	strb	r2, [r3, #7]
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e122      	b.n	8007d92 <f_lseek+0x5da>
					fp->sclust = clst;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b52:	461a      	mov	r2, r3
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8093 	beq.w	8007c92 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8007b6c:	e052      	b.n	8007c14 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b74:	799b      	ldrb	r3, [r3, #6]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fd fe06 	bl	800579a <create_chain>
 8007b8e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <f_lseek+0x3f6>
							ofs = bcs; break;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	603b      	str	r3, [r7, #0]
 8007b9a:	e03f      	b.n	8007c1c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fd fb47 	bl	800523a <get_fat>
 8007bac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d106      	bne.n	8007bc4 <f_lseek+0x40c>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	71da      	strb	r2, [r3, #7]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0e6      	b.n	8007d92 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d909      	bls.n	8007bde <f_lseek+0x426>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d306      	bcc.n	8007bec <f_lseek+0x434>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be4:	2202      	movs	r2, #2
 8007be6:	71da      	strb	r2, [r3, #7]
 8007be8:	2302      	movs	r3, #2
 8007bea:	e0d2      	b.n	8007d92 <f_lseek+0x5da>
					fp->clust = clst;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c0a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d8a8      	bhi.n	8007b6e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	4413      	add	r3, r2
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c2e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3c:	895b      	ldrh	r3, [r3, #10]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c46:	fb01 f202 	mul.w	r2, r1, r2
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d020      	beq.n	8007c92 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd fac9 	bl	80051f2 <clust2sect>
 8007c60:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <f_lseek+0x4be>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c6e:	2202      	movs	r2, #2
 8007c70:	71da      	strb	r2, [r3, #7]
 8007c72:	2302      	movs	r3, #2
 8007c74:	e08d      	b.n	8007d92 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c82:	895b      	ldrh	r3, [r3, #10]
 8007c84:	461a      	mov	r2, r3
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c8e:	4413      	add	r3, r2
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ca0:	6812      	ldr	r2, [r2, #0]
 8007ca2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ca6:	8952      	ldrh	r2, [r2, #10]
 8007ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cac:	fb01 f202 	mul.w	r2, r1, r2
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d04e      	beq.n	8007d54 <f_lseek+0x59c>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d047      	beq.n	8007d54 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cca:	799b      	ldrb	r3, [r3, #6]
 8007ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d023      	beq.n	8007d1c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce0:	7858      	ldrb	r0, [r3, #1]
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cea:	699a      	ldr	r2, [r3, #24]
 8007cec:	2301      	movs	r3, #1
 8007cee:	f7fc fec9 	bl	8004a84 <disk_write>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfe:	2201      	movs	r2, #1
 8007d00:	71da      	strb	r2, [r3, #7]
 8007d02:	2301      	movs	r3, #1
 8007d04:	e045      	b.n	8007d92 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	799b      	ldrb	r3, [r3, #6]
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d28:	7858      	ldrb	r0, [r3, #1]
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d30:	f7fc fe88 	bl	8004a44 <disk_read>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d006      	beq.n	8007d48 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d40:	2201      	movs	r2, #1
 8007d42:	71da      	strb	r2, [r3, #7]
 8007d44:	2301      	movs	r3, #1
 8007d46:	e024      	b.n	8007d92 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d912      	bls.n	8007d8e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d76:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7e:	799b      	ldrb	r3, [r3, #6]
 8007d80:	f043 0320 	orr.w	r3, r3, #32
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3740      	adds	r7, #64	; 0x40
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	2b0a      	cmp	r3, #10
 8007daa:	d103      	bne.n	8007db4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007dac:	210d      	movs	r1, #13
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff fff3 	bl	8007d9a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	db25      	blt.n	8007e0c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	60fa      	str	r2, [r7, #12]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b3c      	cmp	r3, #60	; 0x3c
 8007dd2:	dd12      	ble.n	8007dfa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f103 010c 	add.w	r1, r3, #12
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	f107 0308 	add.w	r3, r7, #8
 8007de4:	f7ff f9b6 	bl	8007154 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d101      	bne.n	8007df4 <putc_bfd+0x5a>
 8007df0:	2300      	movs	r3, #0
 8007df2:	e001      	b.n	8007df8 <putc_bfd+0x5e>
 8007df4:	f04f 33ff 	mov.w	r3, #4294967295
 8007df8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	609a      	str	r2, [r3, #8]
 8007e0a:	e000      	b.n	8007e0e <putc_bfd+0x74>
	if (i < 0) return;
 8007e0c:	bf00      	nop
}
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b097      	sub	sp, #92	; 0x5c
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8007e2a:	e009      	b.n	8007e40 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	781a      	ldrb	r2, [r3, #0]
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff ffad 	bl	8007d9a <putc_bfd>
	while (*str)			/* Put the string */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f1      	bne.n	8007e2c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	db15      	blt.n	8007e7a <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	461c      	mov	r4, r3
 8007e54:	f107 0208 	add.w	r2, r7, #8
 8007e58:	f107 030c 	add.w	r3, r7, #12
 8007e5c:	f103 010c 	add.w	r1, r3, #12
 8007e60:	4613      	mov	r3, r2
 8007e62:	4622      	mov	r2, r4
 8007e64:	f7ff f976 	bl	8007154 <f_write>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d105      	bne.n	8007e7a <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d101      	bne.n	8007e7a <f_puts+0x66>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	e001      	b.n	8007e7e <f_puts+0x6a>
	return EOF;
 8007e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	375c      	adds	r7, #92	; 0x5c
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd90      	pop	{r4, r7, pc}
	...

08007e88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007ea0:	7a5b      	ldrb	r3, [r3, #9]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d831      	bhi.n	8007f0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007eaa:	7a5b      	ldrb	r3, [r3, #9]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4b19      	ldr	r3, [pc, #100]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007eb8:	7a5b      	ldrb	r3, [r3, #9]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	4a16      	ldr	r2, [pc, #88]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007ec8:	7a5b      	ldrb	r3, [r3, #9]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007ed0:	4413      	add	r3, r2
 8007ed2:	79fa      	ldrb	r2, [r7, #7]
 8007ed4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007ed6:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007ed8:	7a5b      	ldrb	r3, [r3, #9]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	b2d1      	uxtb	r1, r2
 8007ee0:	4a0d      	ldr	r2, [pc, #52]	; (8007f18 <FATFS_LinkDriverEx+0x90>)
 8007ee2:	7251      	strb	r1, [r2, #9]
 8007ee4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007ee6:	7dbb      	ldrb	r3, [r7, #22]
 8007ee8:	3330      	adds	r3, #48	; 0x30
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	223a      	movs	r2, #58	; 0x3a
 8007ef6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	3302      	adds	r3, #2
 8007efc:	222f      	movs	r2, #47	; 0x2f
 8007efe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3303      	adds	r3, #3
 8007f04:	2200      	movs	r2, #0
 8007f06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr
 8007f18:	2000281c 	.word	0x2000281c

08007f1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f26:	2200      	movs	r2, #0
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff ffac 	bl	8007e88 <FATFS_LinkDriverEx>
 8007f30:	4603      	mov	r3, r0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <__errno>:
 8007f3c:	4b01      	ldr	r3, [pc, #4]	; (8007f44 <__errno+0x8>)
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000034 	.word	0x20000034

08007f48 <__libc_init_array>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	4d0c      	ldr	r5, [pc, #48]	; (8007f80 <__libc_init_array+0x38>)
 8007f4e:	4c0d      	ldr	r4, [pc, #52]	; (8007f84 <__libc_init_array+0x3c>)
 8007f50:	1b64      	subs	r4, r4, r5
 8007f52:	10a4      	asrs	r4, r4, #2
 8007f54:	42a6      	cmp	r6, r4
 8007f56:	d109      	bne.n	8007f6c <__libc_init_array+0x24>
 8007f58:	f004 fe34 	bl	800cbc4 <_init>
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	4d0a      	ldr	r5, [pc, #40]	; (8007f88 <__libc_init_array+0x40>)
 8007f60:	4c0a      	ldr	r4, [pc, #40]	; (8007f8c <__libc_init_array+0x44>)
 8007f62:	1b64      	subs	r4, r4, r5
 8007f64:	10a4      	asrs	r4, r4, #2
 8007f66:	42a6      	cmp	r6, r4
 8007f68:	d105      	bne.n	8007f76 <__libc_init_array+0x2e>
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f70:	4798      	blx	r3
 8007f72:	3601      	adds	r6, #1
 8007f74:	e7ee      	b.n	8007f54 <__libc_init_array+0xc>
 8007f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7a:	4798      	blx	r3
 8007f7c:	3601      	adds	r6, #1
 8007f7e:	e7f2      	b.n	8007f66 <__libc_init_array+0x1e>
 8007f80:	0800d4fc 	.word	0x0800d4fc
 8007f84:	0800d4fc 	.word	0x0800d4fc
 8007f88:	0800d4fc 	.word	0x0800d4fc
 8007f8c:	0800d500 	.word	0x0800d500

08007f90 <memset>:
 8007f90:	4603      	mov	r3, r0
 8007f92:	4402      	add	r2, r0
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d100      	bne.n	8007f9a <memset+0xa>
 8007f98:	4770      	bx	lr
 8007f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f9e:	e7f9      	b.n	8007f94 <memset+0x4>

08007fa0 <__cvt>:
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa6:	461f      	mov	r7, r3
 8007fa8:	bfbb      	ittet	lt
 8007faa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007fae:	461f      	movlt	r7, r3
 8007fb0:	2300      	movge	r3, #0
 8007fb2:	232d      	movlt	r3, #45	; 0x2d
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	4614      	mov	r4, r2
 8007fb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007fbc:	7013      	strb	r3, [r2, #0]
 8007fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fc0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007fc4:	f023 0820 	bic.w	r8, r3, #32
 8007fc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fcc:	d005      	beq.n	8007fda <__cvt+0x3a>
 8007fce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fd2:	d100      	bne.n	8007fd6 <__cvt+0x36>
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e000      	b.n	8007fdc <__cvt+0x3c>
 8007fda:	2303      	movs	r3, #3
 8007fdc:	aa07      	add	r2, sp, #28
 8007fde:	9204      	str	r2, [sp, #16]
 8007fe0:	aa06      	add	r2, sp, #24
 8007fe2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fe6:	e9cd 3500 	strd	r3, r5, [sp]
 8007fea:	4622      	mov	r2, r4
 8007fec:	463b      	mov	r3, r7
 8007fee:	f001 fd83 	bl	8009af8 <_dtoa_r>
 8007ff2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	d102      	bne.n	8008000 <__cvt+0x60>
 8007ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ffc:	07db      	lsls	r3, r3, #31
 8007ffe:	d522      	bpl.n	8008046 <__cvt+0xa6>
 8008000:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008004:	eb06 0905 	add.w	r9, r6, r5
 8008008:	d110      	bne.n	800802c <__cvt+0x8c>
 800800a:	7833      	ldrb	r3, [r6, #0]
 800800c:	2b30      	cmp	r3, #48	; 0x30
 800800e:	d10a      	bne.n	8008026 <__cvt+0x86>
 8008010:	2200      	movs	r2, #0
 8008012:	2300      	movs	r3, #0
 8008014:	4620      	mov	r0, r4
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 fcc6 	bl	80009a8 <__aeabi_dcmpeq>
 800801c:	b918      	cbnz	r0, 8008026 <__cvt+0x86>
 800801e:	f1c5 0501 	rsb	r5, r5, #1
 8008022:	f8ca 5000 	str.w	r5, [sl]
 8008026:	f8da 3000 	ldr.w	r3, [sl]
 800802a:	4499      	add	r9, r3
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	4620      	mov	r0, r4
 8008032:	4639      	mov	r1, r7
 8008034:	f7f8 fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 8008038:	b108      	cbz	r0, 800803e <__cvt+0x9e>
 800803a:	f8cd 901c 	str.w	r9, [sp, #28]
 800803e:	2230      	movs	r2, #48	; 0x30
 8008040:	9b07      	ldr	r3, [sp, #28]
 8008042:	454b      	cmp	r3, r9
 8008044:	d307      	bcc.n	8008056 <__cvt+0xb6>
 8008046:	4630      	mov	r0, r6
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800804c:	1b9b      	subs	r3, r3, r6
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	b008      	add	sp, #32
 8008052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008056:	1c59      	adds	r1, r3, #1
 8008058:	9107      	str	r1, [sp, #28]
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	e7f0      	b.n	8008040 <__cvt+0xa0>

0800805e <__exponent>:
 800805e:	4603      	mov	r3, r0
 8008060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008062:	2900      	cmp	r1, #0
 8008064:	f803 2b02 	strb.w	r2, [r3], #2
 8008068:	bfb6      	itet	lt
 800806a:	222d      	movlt	r2, #45	; 0x2d
 800806c:	222b      	movge	r2, #43	; 0x2b
 800806e:	4249      	neglt	r1, r1
 8008070:	2909      	cmp	r1, #9
 8008072:	7042      	strb	r2, [r0, #1]
 8008074:	dd2b      	ble.n	80080ce <__exponent+0x70>
 8008076:	f10d 0407 	add.w	r4, sp, #7
 800807a:	46a4      	mov	ip, r4
 800807c:	270a      	movs	r7, #10
 800807e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008082:	460a      	mov	r2, r1
 8008084:	46a6      	mov	lr, r4
 8008086:	fb07 1516 	mls	r5, r7, r6, r1
 800808a:	2a63      	cmp	r2, #99	; 0x63
 800808c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008090:	4631      	mov	r1, r6
 8008092:	f104 34ff 	add.w	r4, r4, #4294967295
 8008096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800809a:	dcf0      	bgt.n	800807e <__exponent+0x20>
 800809c:	3130      	adds	r1, #48	; 0x30
 800809e:	f1ae 0502 	sub.w	r5, lr, #2
 80080a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080a6:	4629      	mov	r1, r5
 80080a8:	1c44      	adds	r4, r0, #1
 80080aa:	4561      	cmp	r1, ip
 80080ac:	d30a      	bcc.n	80080c4 <__exponent+0x66>
 80080ae:	f10d 0209 	add.w	r2, sp, #9
 80080b2:	eba2 020e 	sub.w	r2, r2, lr
 80080b6:	4565      	cmp	r5, ip
 80080b8:	bf88      	it	hi
 80080ba:	2200      	movhi	r2, #0
 80080bc:	4413      	add	r3, r2
 80080be:	1a18      	subs	r0, r3, r0
 80080c0:	b003      	add	sp, #12
 80080c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080cc:	e7ed      	b.n	80080aa <__exponent+0x4c>
 80080ce:	2330      	movs	r3, #48	; 0x30
 80080d0:	3130      	adds	r1, #48	; 0x30
 80080d2:	7083      	strb	r3, [r0, #2]
 80080d4:	70c1      	strb	r1, [r0, #3]
 80080d6:	1d03      	adds	r3, r0, #4
 80080d8:	e7f1      	b.n	80080be <__exponent+0x60>
	...

080080dc <_printf_float>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	b091      	sub	sp, #68	; 0x44
 80080e2:	460c      	mov	r4, r1
 80080e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080e8:	4616      	mov	r6, r2
 80080ea:	461f      	mov	r7, r3
 80080ec:	4605      	mov	r5, r0
 80080ee:	f002 fe57 	bl	800ada0 <_localeconv_r>
 80080f2:	6803      	ldr	r3, [r0, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	9309      	str	r3, [sp, #36]	; 0x24
 80080f8:	f7f8 f82a 	bl	8000150 <strlen>
 80080fc:	2300      	movs	r3, #0
 80080fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008100:	f8d8 3000 	ldr.w	r3, [r8]
 8008104:	900a      	str	r0, [sp, #40]	; 0x28
 8008106:	3307      	adds	r3, #7
 8008108:	f023 0307 	bic.w	r3, r3, #7
 800810c:	f103 0208 	add.w	r2, r3, #8
 8008110:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008114:	f8d4 b000 	ldr.w	fp, [r4]
 8008118:	f8c8 2000 	str.w	r2, [r8]
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008124:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008128:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800812c:	930b      	str	r3, [sp, #44]	; 0x2c
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	4640      	mov	r0, r8
 8008134:	4b9c      	ldr	r3, [pc, #624]	; (80083a8 <_printf_float+0x2cc>)
 8008136:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008138:	f7f8 fc68 	bl	8000a0c <__aeabi_dcmpun>
 800813c:	bb70      	cbnz	r0, 800819c <_printf_float+0xc0>
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	4640      	mov	r0, r8
 8008144:	4b98      	ldr	r3, [pc, #608]	; (80083a8 <_printf_float+0x2cc>)
 8008146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008148:	f7f8 fc42 	bl	80009d0 <__aeabi_dcmple>
 800814c:	bb30      	cbnz	r0, 800819c <_printf_float+0xc0>
 800814e:	2200      	movs	r2, #0
 8008150:	2300      	movs	r3, #0
 8008152:	4640      	mov	r0, r8
 8008154:	4651      	mov	r1, sl
 8008156:	f7f8 fc31 	bl	80009bc <__aeabi_dcmplt>
 800815a:	b110      	cbz	r0, 8008162 <_printf_float+0x86>
 800815c:	232d      	movs	r3, #45	; 0x2d
 800815e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008162:	4b92      	ldr	r3, [pc, #584]	; (80083ac <_printf_float+0x2d0>)
 8008164:	4892      	ldr	r0, [pc, #584]	; (80083b0 <_printf_float+0x2d4>)
 8008166:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800816a:	bf94      	ite	ls
 800816c:	4698      	movls	r8, r3
 800816e:	4680      	movhi	r8, r0
 8008170:	2303      	movs	r3, #3
 8008172:	f04f 0a00 	mov.w	sl, #0
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	f02b 0304 	bic.w	r3, fp, #4
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	4633      	mov	r3, r6
 8008180:	4621      	mov	r1, r4
 8008182:	4628      	mov	r0, r5
 8008184:	9700      	str	r7, [sp, #0]
 8008186:	aa0f      	add	r2, sp, #60	; 0x3c
 8008188:	f000 f9d4 	bl	8008534 <_printf_common>
 800818c:	3001      	adds	r0, #1
 800818e:	f040 8090 	bne.w	80082b2 <_printf_float+0x1d6>
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	b011      	add	sp, #68	; 0x44
 8008198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819c:	4642      	mov	r2, r8
 800819e:	4653      	mov	r3, sl
 80081a0:	4640      	mov	r0, r8
 80081a2:	4651      	mov	r1, sl
 80081a4:	f7f8 fc32 	bl	8000a0c <__aeabi_dcmpun>
 80081a8:	b148      	cbz	r0, 80081be <_printf_float+0xe2>
 80081aa:	f1ba 0f00 	cmp.w	sl, #0
 80081ae:	bfb8      	it	lt
 80081b0:	232d      	movlt	r3, #45	; 0x2d
 80081b2:	4880      	ldr	r0, [pc, #512]	; (80083b4 <_printf_float+0x2d8>)
 80081b4:	bfb8      	it	lt
 80081b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081ba:	4b7f      	ldr	r3, [pc, #508]	; (80083b8 <_printf_float+0x2dc>)
 80081bc:	e7d3      	b.n	8008166 <_printf_float+0x8a>
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	d142      	bne.n	800824e <_printf_float+0x172>
 80081c8:	2306      	movs	r3, #6
 80081ca:	6063      	str	r3, [r4, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	9206      	str	r2, [sp, #24]
 80081d0:	aa0e      	add	r2, sp, #56	; 0x38
 80081d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80081d6:	aa0d      	add	r2, sp, #52	; 0x34
 80081d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081dc:	9203      	str	r2, [sp, #12]
 80081de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	4642      	mov	r2, r8
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	4628      	mov	r0, r5
 80081f0:	4653      	mov	r3, sl
 80081f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80081f4:	f7ff fed4 	bl	8007fa0 <__cvt>
 80081f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081fa:	4680      	mov	r8, r0
 80081fc:	2947      	cmp	r1, #71	; 0x47
 80081fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008200:	d108      	bne.n	8008214 <_printf_float+0x138>
 8008202:	1cc8      	adds	r0, r1, #3
 8008204:	db02      	blt.n	800820c <_printf_float+0x130>
 8008206:	6863      	ldr	r3, [r4, #4]
 8008208:	4299      	cmp	r1, r3
 800820a:	dd40      	ble.n	800828e <_printf_float+0x1b2>
 800820c:	f1a9 0902 	sub.w	r9, r9, #2
 8008210:	fa5f f989 	uxtb.w	r9, r9
 8008214:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008218:	d81f      	bhi.n	800825a <_printf_float+0x17e>
 800821a:	464a      	mov	r2, r9
 800821c:	3901      	subs	r1, #1
 800821e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008222:	910d      	str	r1, [sp, #52]	; 0x34
 8008224:	f7ff ff1b 	bl	800805e <__exponent>
 8008228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800822a:	4682      	mov	sl, r0
 800822c:	1813      	adds	r3, r2, r0
 800822e:	2a01      	cmp	r2, #1
 8008230:	6123      	str	r3, [r4, #16]
 8008232:	dc02      	bgt.n	800823a <_printf_float+0x15e>
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	07d2      	lsls	r2, r2, #31
 8008238:	d501      	bpl.n	800823e <_printf_float+0x162>
 800823a:	3301      	adds	r3, #1
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008242:	2b00      	cmp	r3, #0
 8008244:	d09b      	beq.n	800817e <_printf_float+0xa2>
 8008246:	232d      	movs	r3, #45	; 0x2d
 8008248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800824c:	e797      	b.n	800817e <_printf_float+0xa2>
 800824e:	2947      	cmp	r1, #71	; 0x47
 8008250:	d1bc      	bne.n	80081cc <_printf_float+0xf0>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1ba      	bne.n	80081cc <_printf_float+0xf0>
 8008256:	2301      	movs	r3, #1
 8008258:	e7b7      	b.n	80081ca <_printf_float+0xee>
 800825a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800825e:	d118      	bne.n	8008292 <_printf_float+0x1b6>
 8008260:	2900      	cmp	r1, #0
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	dd0b      	ble.n	800827e <_printf_float+0x1a2>
 8008266:	6121      	str	r1, [r4, #16]
 8008268:	b913      	cbnz	r3, 8008270 <_printf_float+0x194>
 800826a:	6822      	ldr	r2, [r4, #0]
 800826c:	07d0      	lsls	r0, r2, #31
 800826e:	d502      	bpl.n	8008276 <_printf_float+0x19a>
 8008270:	3301      	adds	r3, #1
 8008272:	440b      	add	r3, r1
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	f04f 0a00 	mov.w	sl, #0
 800827a:	65a1      	str	r1, [r4, #88]	; 0x58
 800827c:	e7df      	b.n	800823e <_printf_float+0x162>
 800827e:	b913      	cbnz	r3, 8008286 <_printf_float+0x1aa>
 8008280:	6822      	ldr	r2, [r4, #0]
 8008282:	07d2      	lsls	r2, r2, #31
 8008284:	d501      	bpl.n	800828a <_printf_float+0x1ae>
 8008286:	3302      	adds	r3, #2
 8008288:	e7f4      	b.n	8008274 <_printf_float+0x198>
 800828a:	2301      	movs	r3, #1
 800828c:	e7f2      	b.n	8008274 <_printf_float+0x198>
 800828e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008294:	4299      	cmp	r1, r3
 8008296:	db05      	blt.n	80082a4 <_printf_float+0x1c8>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	6121      	str	r1, [r4, #16]
 800829c:	07d8      	lsls	r0, r3, #31
 800829e:	d5ea      	bpl.n	8008276 <_printf_float+0x19a>
 80082a0:	1c4b      	adds	r3, r1, #1
 80082a2:	e7e7      	b.n	8008274 <_printf_float+0x198>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	bfcc      	ite	gt
 80082a8:	2201      	movgt	r2, #1
 80082aa:	f1c1 0202 	rsble	r2, r1, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	e7e0      	b.n	8008274 <_printf_float+0x198>
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	055a      	lsls	r2, r3, #21
 80082b6:	d407      	bmi.n	80082c8 <_printf_float+0x1ec>
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	4642      	mov	r2, r8
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	d12b      	bne.n	800831e <_printf_float+0x242>
 80082c6:	e764      	b.n	8008192 <_printf_float+0xb6>
 80082c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082cc:	f240 80dd 	bls.w	800848a <_printf_float+0x3ae>
 80082d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082d4:	2200      	movs	r2, #0
 80082d6:	2300      	movs	r3, #0
 80082d8:	f7f8 fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d033      	beq.n	8008348 <_printf_float+0x26c>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	4a35      	ldr	r2, [pc, #212]	; (80083bc <_printf_float+0x2e0>)
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f af51 	beq.w	8008192 <_printf_float+0xb6>
 80082f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082f4:	429a      	cmp	r2, r3
 80082f6:	db02      	blt.n	80082fe <_printf_float+0x222>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	07d8      	lsls	r0, r3, #31
 80082fc:	d50f      	bpl.n	800831e <_printf_float+0x242>
 80082fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	f43f af42 	beq.w	8008192 <_printf_float+0xb6>
 800830e:	f04f 0800 	mov.w	r8, #0
 8008312:	f104 091a 	add.w	r9, r4, #26
 8008316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008318:	3b01      	subs	r3, #1
 800831a:	4543      	cmp	r3, r8
 800831c:	dc09      	bgt.n	8008332 <_printf_float+0x256>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	079b      	lsls	r3, r3, #30
 8008322:	f100 8102 	bmi.w	800852a <_printf_float+0x44e>
 8008326:	68e0      	ldr	r0, [r4, #12]
 8008328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800832a:	4298      	cmp	r0, r3
 800832c:	bfb8      	it	lt
 800832e:	4618      	movlt	r0, r3
 8008330:	e731      	b.n	8008196 <_printf_float+0xba>
 8008332:	2301      	movs	r3, #1
 8008334:	464a      	mov	r2, r9
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f af28 	beq.w	8008192 <_printf_float+0xb6>
 8008342:	f108 0801 	add.w	r8, r8, #1
 8008346:	e7e6      	b.n	8008316 <_printf_float+0x23a>
 8008348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800834a:	2b00      	cmp	r3, #0
 800834c:	dc38      	bgt.n	80083c0 <_printf_float+0x2e4>
 800834e:	2301      	movs	r3, #1
 8008350:	4631      	mov	r1, r6
 8008352:	4628      	mov	r0, r5
 8008354:	4a19      	ldr	r2, [pc, #100]	; (80083bc <_printf_float+0x2e0>)
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f af1a 	beq.w	8008192 <_printf_float+0xb6>
 800835e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008362:	4313      	orrs	r3, r2
 8008364:	d102      	bne.n	800836c <_printf_float+0x290>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	07d9      	lsls	r1, r3, #31
 800836a:	d5d8      	bpl.n	800831e <_printf_float+0x242>
 800836c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008370:	4631      	mov	r1, r6
 8008372:	4628      	mov	r0, r5
 8008374:	47b8      	blx	r7
 8008376:	3001      	adds	r0, #1
 8008378:	f43f af0b 	beq.w	8008192 <_printf_float+0xb6>
 800837c:	f04f 0900 	mov.w	r9, #0
 8008380:	f104 0a1a 	add.w	sl, r4, #26
 8008384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008386:	425b      	negs	r3, r3
 8008388:	454b      	cmp	r3, r9
 800838a:	dc01      	bgt.n	8008390 <_printf_float+0x2b4>
 800838c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800838e:	e794      	b.n	80082ba <_printf_float+0x1de>
 8008390:	2301      	movs	r3, #1
 8008392:	4652      	mov	r2, sl
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f aef9 	beq.w	8008192 <_printf_float+0xb6>
 80083a0:	f109 0901 	add.w	r9, r9, #1
 80083a4:	e7ee      	b.n	8008384 <_printf_float+0x2a8>
 80083a6:	bf00      	nop
 80083a8:	7fefffff 	.word	0x7fefffff
 80083ac:	0800d058 	.word	0x0800d058
 80083b0:	0800d05c 	.word	0x0800d05c
 80083b4:	0800d064 	.word	0x0800d064
 80083b8:	0800d060 	.word	0x0800d060
 80083bc:	0800d068 	.word	0x0800d068
 80083c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083c4:	429a      	cmp	r2, r3
 80083c6:	bfa8      	it	ge
 80083c8:	461a      	movge	r2, r3
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	4691      	mov	r9, r2
 80083ce:	dc37      	bgt.n	8008440 <_printf_float+0x364>
 80083d0:	f04f 0b00 	mov.w	fp, #0
 80083d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083d8:	f104 021a 	add.w	r2, r4, #26
 80083dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083e0:	ebaa 0309 	sub.w	r3, sl, r9
 80083e4:	455b      	cmp	r3, fp
 80083e6:	dc33      	bgt.n	8008450 <_printf_float+0x374>
 80083e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083ec:	429a      	cmp	r2, r3
 80083ee:	db3b      	blt.n	8008468 <_printf_float+0x38c>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07da      	lsls	r2, r3, #31
 80083f4:	d438      	bmi.n	8008468 <_printf_float+0x38c>
 80083f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083fa:	eba3 020a 	sub.w	r2, r3, sl
 80083fe:	eba3 0901 	sub.w	r9, r3, r1
 8008402:	4591      	cmp	r9, r2
 8008404:	bfa8      	it	ge
 8008406:	4691      	movge	r9, r2
 8008408:	f1b9 0f00 	cmp.w	r9, #0
 800840c:	dc34      	bgt.n	8008478 <_printf_float+0x39c>
 800840e:	f04f 0800 	mov.w	r8, #0
 8008412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008416:	f104 0a1a 	add.w	sl, r4, #26
 800841a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	eba3 0309 	sub.w	r3, r3, r9
 8008424:	4543      	cmp	r3, r8
 8008426:	f77f af7a 	ble.w	800831e <_printf_float+0x242>
 800842a:	2301      	movs	r3, #1
 800842c:	4652      	mov	r2, sl
 800842e:	4631      	mov	r1, r6
 8008430:	4628      	mov	r0, r5
 8008432:	47b8      	blx	r7
 8008434:	3001      	adds	r0, #1
 8008436:	f43f aeac 	beq.w	8008192 <_printf_float+0xb6>
 800843a:	f108 0801 	add.w	r8, r8, #1
 800843e:	e7ec      	b.n	800841a <_printf_float+0x33e>
 8008440:	4613      	mov	r3, r2
 8008442:	4631      	mov	r1, r6
 8008444:	4642      	mov	r2, r8
 8008446:	4628      	mov	r0, r5
 8008448:	47b8      	blx	r7
 800844a:	3001      	adds	r0, #1
 800844c:	d1c0      	bne.n	80083d0 <_printf_float+0x2f4>
 800844e:	e6a0      	b.n	8008192 <_printf_float+0xb6>
 8008450:	2301      	movs	r3, #1
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	920b      	str	r2, [sp, #44]	; 0x2c
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f ae99 	beq.w	8008192 <_printf_float+0xb6>
 8008460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008462:	f10b 0b01 	add.w	fp, fp, #1
 8008466:	e7b9      	b.n	80083dc <_printf_float+0x300>
 8008468:	4631      	mov	r1, r6
 800846a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	d1bf      	bne.n	80083f6 <_printf_float+0x31a>
 8008476:	e68c      	b.n	8008192 <_printf_float+0xb6>
 8008478:	464b      	mov	r3, r9
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	eb08 020a 	add.w	r2, r8, sl
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	d1c2      	bne.n	800840e <_printf_float+0x332>
 8008488:	e683      	b.n	8008192 <_printf_float+0xb6>
 800848a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800848c:	2a01      	cmp	r2, #1
 800848e:	dc01      	bgt.n	8008494 <_printf_float+0x3b8>
 8008490:	07db      	lsls	r3, r3, #31
 8008492:	d537      	bpl.n	8008504 <_printf_float+0x428>
 8008494:	2301      	movs	r3, #1
 8008496:	4642      	mov	r2, r8
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f ae77 	beq.w	8008192 <_printf_float+0xb6>
 80084a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	f43f ae6f 	beq.w	8008192 <_printf_float+0xb6>
 80084b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084b8:	2200      	movs	r2, #0
 80084ba:	2300      	movs	r3, #0
 80084bc:	f7f8 fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80084c0:	b9d8      	cbnz	r0, 80084fa <_printf_float+0x41e>
 80084c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084c4:	f108 0201 	add.w	r2, r8, #1
 80084c8:	3b01      	subs	r3, #1
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d10e      	bne.n	80084f2 <_printf_float+0x416>
 80084d4:	e65d      	b.n	8008192 <_printf_float+0xb6>
 80084d6:	2301      	movs	r3, #1
 80084d8:	464a      	mov	r2, r9
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	f43f ae56 	beq.w	8008192 <_printf_float+0xb6>
 80084e6:	f108 0801 	add.w	r8, r8, #1
 80084ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ec:	3b01      	subs	r3, #1
 80084ee:	4543      	cmp	r3, r8
 80084f0:	dcf1      	bgt.n	80084d6 <_printf_float+0x3fa>
 80084f2:	4653      	mov	r3, sl
 80084f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084f8:	e6e0      	b.n	80082bc <_printf_float+0x1e0>
 80084fa:	f04f 0800 	mov.w	r8, #0
 80084fe:	f104 091a 	add.w	r9, r4, #26
 8008502:	e7f2      	b.n	80084ea <_printf_float+0x40e>
 8008504:	2301      	movs	r3, #1
 8008506:	4642      	mov	r2, r8
 8008508:	e7df      	b.n	80084ca <_printf_float+0x3ee>
 800850a:	2301      	movs	r3, #1
 800850c:	464a      	mov	r2, r9
 800850e:	4631      	mov	r1, r6
 8008510:	4628      	mov	r0, r5
 8008512:	47b8      	blx	r7
 8008514:	3001      	adds	r0, #1
 8008516:	f43f ae3c 	beq.w	8008192 <_printf_float+0xb6>
 800851a:	f108 0801 	add.w	r8, r8, #1
 800851e:	68e3      	ldr	r3, [r4, #12]
 8008520:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008522:	1a5b      	subs	r3, r3, r1
 8008524:	4543      	cmp	r3, r8
 8008526:	dcf0      	bgt.n	800850a <_printf_float+0x42e>
 8008528:	e6fd      	b.n	8008326 <_printf_float+0x24a>
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	f104 0919 	add.w	r9, r4, #25
 8008532:	e7f4      	b.n	800851e <_printf_float+0x442>

08008534 <_printf_common>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	4616      	mov	r6, r2
 800853a:	4699      	mov	r9, r3
 800853c:	688a      	ldr	r2, [r1, #8]
 800853e:	690b      	ldr	r3, [r1, #16]
 8008540:	4607      	mov	r7, r0
 8008542:	4293      	cmp	r3, r2
 8008544:	bfb8      	it	lt
 8008546:	4613      	movlt	r3, r2
 8008548:	6033      	str	r3, [r6, #0]
 800854a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800854e:	460c      	mov	r4, r1
 8008550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008554:	b10a      	cbz	r2, 800855a <_printf_common+0x26>
 8008556:	3301      	adds	r3, #1
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	0699      	lsls	r1, r3, #26
 800855e:	bf42      	ittt	mi
 8008560:	6833      	ldrmi	r3, [r6, #0]
 8008562:	3302      	addmi	r3, #2
 8008564:	6033      	strmi	r3, [r6, #0]
 8008566:	6825      	ldr	r5, [r4, #0]
 8008568:	f015 0506 	ands.w	r5, r5, #6
 800856c:	d106      	bne.n	800857c <_printf_common+0x48>
 800856e:	f104 0a19 	add.w	sl, r4, #25
 8008572:	68e3      	ldr	r3, [r4, #12]
 8008574:	6832      	ldr	r2, [r6, #0]
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	42ab      	cmp	r3, r5
 800857a:	dc28      	bgt.n	80085ce <_printf_common+0x9a>
 800857c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008580:	1e13      	subs	r3, r2, #0
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	bf18      	it	ne
 8008586:	2301      	movne	r3, #1
 8008588:	0692      	lsls	r2, r2, #26
 800858a:	d42d      	bmi.n	80085e8 <_printf_common+0xb4>
 800858c:	4649      	mov	r1, r9
 800858e:	4638      	mov	r0, r7
 8008590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008594:	47c0      	blx	r8
 8008596:	3001      	adds	r0, #1
 8008598:	d020      	beq.n	80085dc <_printf_common+0xa8>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	68e5      	ldr	r5, [r4, #12]
 800859e:	f003 0306 	and.w	r3, r3, #6
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	bf18      	it	ne
 80085a6:	2500      	movne	r5, #0
 80085a8:	6832      	ldr	r2, [r6, #0]
 80085aa:	f04f 0600 	mov.w	r6, #0
 80085ae:	68a3      	ldr	r3, [r4, #8]
 80085b0:	bf08      	it	eq
 80085b2:	1aad      	subeq	r5, r5, r2
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	bf08      	it	eq
 80085b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085bc:	4293      	cmp	r3, r2
 80085be:	bfc4      	itt	gt
 80085c0:	1a9b      	subgt	r3, r3, r2
 80085c2:	18ed      	addgt	r5, r5, r3
 80085c4:	341a      	adds	r4, #26
 80085c6:	42b5      	cmp	r5, r6
 80085c8:	d11a      	bne.n	8008600 <_printf_common+0xcc>
 80085ca:	2000      	movs	r0, #0
 80085cc:	e008      	b.n	80085e0 <_printf_common+0xac>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4652      	mov	r2, sl
 80085d2:	4649      	mov	r1, r9
 80085d4:	4638      	mov	r0, r7
 80085d6:	47c0      	blx	r8
 80085d8:	3001      	adds	r0, #1
 80085da:	d103      	bne.n	80085e4 <_printf_common+0xb0>
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295
 80085e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e4:	3501      	adds	r5, #1
 80085e6:	e7c4      	b.n	8008572 <_printf_common+0x3e>
 80085e8:	2030      	movs	r0, #48	; 0x30
 80085ea:	18e1      	adds	r1, r4, r3
 80085ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085f6:	4422      	add	r2, r4
 80085f8:	3302      	adds	r3, #2
 80085fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085fe:	e7c5      	b.n	800858c <_printf_common+0x58>
 8008600:	2301      	movs	r3, #1
 8008602:	4622      	mov	r2, r4
 8008604:	4649      	mov	r1, r9
 8008606:	4638      	mov	r0, r7
 8008608:	47c0      	blx	r8
 800860a:	3001      	adds	r0, #1
 800860c:	d0e6      	beq.n	80085dc <_printf_common+0xa8>
 800860e:	3601      	adds	r6, #1
 8008610:	e7d9      	b.n	80085c6 <_printf_common+0x92>
	...

08008614 <_printf_i>:
 8008614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008618:	7e0f      	ldrb	r7, [r1, #24]
 800861a:	4691      	mov	r9, r2
 800861c:	2f78      	cmp	r7, #120	; 0x78
 800861e:	4680      	mov	r8, r0
 8008620:	460c      	mov	r4, r1
 8008622:	469a      	mov	sl, r3
 8008624:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800862a:	d807      	bhi.n	800863c <_printf_i+0x28>
 800862c:	2f62      	cmp	r7, #98	; 0x62
 800862e:	d80a      	bhi.n	8008646 <_printf_i+0x32>
 8008630:	2f00      	cmp	r7, #0
 8008632:	f000 80d9 	beq.w	80087e8 <_printf_i+0x1d4>
 8008636:	2f58      	cmp	r7, #88	; 0x58
 8008638:	f000 80a4 	beq.w	8008784 <_printf_i+0x170>
 800863c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008644:	e03a      	b.n	80086bc <_printf_i+0xa8>
 8008646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800864a:	2b15      	cmp	r3, #21
 800864c:	d8f6      	bhi.n	800863c <_printf_i+0x28>
 800864e:	a101      	add	r1, pc, #4	; (adr r1, 8008654 <_printf_i+0x40>)
 8008650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008654:	080086ad 	.word	0x080086ad
 8008658:	080086c1 	.word	0x080086c1
 800865c:	0800863d 	.word	0x0800863d
 8008660:	0800863d 	.word	0x0800863d
 8008664:	0800863d 	.word	0x0800863d
 8008668:	0800863d 	.word	0x0800863d
 800866c:	080086c1 	.word	0x080086c1
 8008670:	0800863d 	.word	0x0800863d
 8008674:	0800863d 	.word	0x0800863d
 8008678:	0800863d 	.word	0x0800863d
 800867c:	0800863d 	.word	0x0800863d
 8008680:	080087cf 	.word	0x080087cf
 8008684:	080086f1 	.word	0x080086f1
 8008688:	080087b1 	.word	0x080087b1
 800868c:	0800863d 	.word	0x0800863d
 8008690:	0800863d 	.word	0x0800863d
 8008694:	080087f1 	.word	0x080087f1
 8008698:	0800863d 	.word	0x0800863d
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	0800863d 	.word	0x0800863d
 80086a4:	0800863d 	.word	0x0800863d
 80086a8:	080087b9 	.word	0x080087b9
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	1d1a      	adds	r2, r3, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	602a      	str	r2, [r5, #0]
 80086b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086bc:	2301      	movs	r3, #1
 80086be:	e0a4      	b.n	800880a <_printf_i+0x1f6>
 80086c0:	6820      	ldr	r0, [r4, #0]
 80086c2:	6829      	ldr	r1, [r5, #0]
 80086c4:	0606      	lsls	r6, r0, #24
 80086c6:	f101 0304 	add.w	r3, r1, #4
 80086ca:	d50a      	bpl.n	80086e2 <_printf_i+0xce>
 80086cc:	680e      	ldr	r6, [r1, #0]
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	2e00      	cmp	r6, #0
 80086d2:	da03      	bge.n	80086dc <_printf_i+0xc8>
 80086d4:	232d      	movs	r3, #45	; 0x2d
 80086d6:	4276      	negs	r6, r6
 80086d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086dc:	230a      	movs	r3, #10
 80086de:	485e      	ldr	r0, [pc, #376]	; (8008858 <_printf_i+0x244>)
 80086e0:	e019      	b.n	8008716 <_printf_i+0x102>
 80086e2:	680e      	ldr	r6, [r1, #0]
 80086e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	bf18      	it	ne
 80086ec:	b236      	sxthne	r6, r6
 80086ee:	e7ef      	b.n	80086d0 <_printf_i+0xbc>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	6820      	ldr	r0, [r4, #0]
 80086f4:	1d19      	adds	r1, r3, #4
 80086f6:	6029      	str	r1, [r5, #0]
 80086f8:	0601      	lsls	r1, r0, #24
 80086fa:	d501      	bpl.n	8008700 <_printf_i+0xec>
 80086fc:	681e      	ldr	r6, [r3, #0]
 80086fe:	e002      	b.n	8008706 <_printf_i+0xf2>
 8008700:	0646      	lsls	r6, r0, #25
 8008702:	d5fb      	bpl.n	80086fc <_printf_i+0xe8>
 8008704:	881e      	ldrh	r6, [r3, #0]
 8008706:	2f6f      	cmp	r7, #111	; 0x6f
 8008708:	bf0c      	ite	eq
 800870a:	2308      	moveq	r3, #8
 800870c:	230a      	movne	r3, #10
 800870e:	4852      	ldr	r0, [pc, #328]	; (8008858 <_printf_i+0x244>)
 8008710:	2100      	movs	r1, #0
 8008712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008716:	6865      	ldr	r5, [r4, #4]
 8008718:	2d00      	cmp	r5, #0
 800871a:	bfa8      	it	ge
 800871c:	6821      	ldrge	r1, [r4, #0]
 800871e:	60a5      	str	r5, [r4, #8]
 8008720:	bfa4      	itt	ge
 8008722:	f021 0104 	bicge.w	r1, r1, #4
 8008726:	6021      	strge	r1, [r4, #0]
 8008728:	b90e      	cbnz	r6, 800872e <_printf_i+0x11a>
 800872a:	2d00      	cmp	r5, #0
 800872c:	d04d      	beq.n	80087ca <_printf_i+0x1b6>
 800872e:	4615      	mov	r5, r2
 8008730:	fbb6 f1f3 	udiv	r1, r6, r3
 8008734:	fb03 6711 	mls	r7, r3, r1, r6
 8008738:	5dc7      	ldrb	r7, [r0, r7]
 800873a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800873e:	4637      	mov	r7, r6
 8008740:	42bb      	cmp	r3, r7
 8008742:	460e      	mov	r6, r1
 8008744:	d9f4      	bls.n	8008730 <_printf_i+0x11c>
 8008746:	2b08      	cmp	r3, #8
 8008748:	d10b      	bne.n	8008762 <_printf_i+0x14e>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	07de      	lsls	r6, r3, #31
 800874e:	d508      	bpl.n	8008762 <_printf_i+0x14e>
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	6861      	ldr	r1, [r4, #4]
 8008754:	4299      	cmp	r1, r3
 8008756:	bfde      	ittt	le
 8008758:	2330      	movle	r3, #48	; 0x30
 800875a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800875e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008762:	1b52      	subs	r2, r2, r5
 8008764:	6122      	str	r2, [r4, #16]
 8008766:	464b      	mov	r3, r9
 8008768:	4621      	mov	r1, r4
 800876a:	4640      	mov	r0, r8
 800876c:	f8cd a000 	str.w	sl, [sp]
 8008770:	aa03      	add	r2, sp, #12
 8008772:	f7ff fedf 	bl	8008534 <_printf_common>
 8008776:	3001      	adds	r0, #1
 8008778:	d14c      	bne.n	8008814 <_printf_i+0x200>
 800877a:	f04f 30ff 	mov.w	r0, #4294967295
 800877e:	b004      	add	sp, #16
 8008780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008784:	4834      	ldr	r0, [pc, #208]	; (8008858 <_printf_i+0x244>)
 8008786:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800878a:	6829      	ldr	r1, [r5, #0]
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008792:	6029      	str	r1, [r5, #0]
 8008794:	061d      	lsls	r5, r3, #24
 8008796:	d514      	bpl.n	80087c2 <_printf_i+0x1ae>
 8008798:	07df      	lsls	r7, r3, #31
 800879a:	bf44      	itt	mi
 800879c:	f043 0320 	orrmi.w	r3, r3, #32
 80087a0:	6023      	strmi	r3, [r4, #0]
 80087a2:	b91e      	cbnz	r6, 80087ac <_printf_i+0x198>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	f023 0320 	bic.w	r3, r3, #32
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	2310      	movs	r3, #16
 80087ae:	e7af      	b.n	8008710 <_printf_i+0xfc>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	f043 0320 	orr.w	r3, r3, #32
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	2378      	movs	r3, #120	; 0x78
 80087ba:	4828      	ldr	r0, [pc, #160]	; (800885c <_printf_i+0x248>)
 80087bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087c0:	e7e3      	b.n	800878a <_printf_i+0x176>
 80087c2:	0659      	lsls	r1, r3, #25
 80087c4:	bf48      	it	mi
 80087c6:	b2b6      	uxthmi	r6, r6
 80087c8:	e7e6      	b.n	8008798 <_printf_i+0x184>
 80087ca:	4615      	mov	r5, r2
 80087cc:	e7bb      	b.n	8008746 <_printf_i+0x132>
 80087ce:	682b      	ldr	r3, [r5, #0]
 80087d0:	6826      	ldr	r6, [r4, #0]
 80087d2:	1d18      	adds	r0, r3, #4
 80087d4:	6961      	ldr	r1, [r4, #20]
 80087d6:	6028      	str	r0, [r5, #0]
 80087d8:	0635      	lsls	r5, r6, #24
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	d501      	bpl.n	80087e2 <_printf_i+0x1ce>
 80087de:	6019      	str	r1, [r3, #0]
 80087e0:	e002      	b.n	80087e8 <_printf_i+0x1d4>
 80087e2:	0670      	lsls	r0, r6, #25
 80087e4:	d5fb      	bpl.n	80087de <_printf_i+0x1ca>
 80087e6:	8019      	strh	r1, [r3, #0]
 80087e8:	2300      	movs	r3, #0
 80087ea:	4615      	mov	r5, r2
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	e7ba      	b.n	8008766 <_printf_i+0x152>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	2100      	movs	r1, #0
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	681d      	ldr	r5, [r3, #0]
 80087fa:	6862      	ldr	r2, [r4, #4]
 80087fc:	4628      	mov	r0, r5
 80087fe:	f002 faed 	bl	800addc <memchr>
 8008802:	b108      	cbz	r0, 8008808 <_printf_i+0x1f4>
 8008804:	1b40      	subs	r0, r0, r5
 8008806:	6060      	str	r0, [r4, #4]
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	6123      	str	r3, [r4, #16]
 800880c:	2300      	movs	r3, #0
 800880e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008812:	e7a8      	b.n	8008766 <_printf_i+0x152>
 8008814:	462a      	mov	r2, r5
 8008816:	4649      	mov	r1, r9
 8008818:	4640      	mov	r0, r8
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	47d0      	blx	sl
 800881e:	3001      	adds	r0, #1
 8008820:	d0ab      	beq.n	800877a <_printf_i+0x166>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	079b      	lsls	r3, r3, #30
 8008826:	d413      	bmi.n	8008850 <_printf_i+0x23c>
 8008828:	68e0      	ldr	r0, [r4, #12]
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	4298      	cmp	r0, r3
 800882e:	bfb8      	it	lt
 8008830:	4618      	movlt	r0, r3
 8008832:	e7a4      	b.n	800877e <_printf_i+0x16a>
 8008834:	2301      	movs	r3, #1
 8008836:	4632      	mov	r2, r6
 8008838:	4649      	mov	r1, r9
 800883a:	4640      	mov	r0, r8
 800883c:	47d0      	blx	sl
 800883e:	3001      	adds	r0, #1
 8008840:	d09b      	beq.n	800877a <_printf_i+0x166>
 8008842:	3501      	adds	r5, #1
 8008844:	68e3      	ldr	r3, [r4, #12]
 8008846:	9903      	ldr	r1, [sp, #12]
 8008848:	1a5b      	subs	r3, r3, r1
 800884a:	42ab      	cmp	r3, r5
 800884c:	dcf2      	bgt.n	8008834 <_printf_i+0x220>
 800884e:	e7eb      	b.n	8008828 <_printf_i+0x214>
 8008850:	2500      	movs	r5, #0
 8008852:	f104 0619 	add.w	r6, r4, #25
 8008856:	e7f5      	b.n	8008844 <_printf_i+0x230>
 8008858:	0800d06a 	.word	0x0800d06a
 800885c:	0800d07b 	.word	0x0800d07b

08008860 <_scanf_float>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	b087      	sub	sp, #28
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	688b      	ldr	r3, [r1, #8]
 800886a:	4617      	mov	r7, r2
 800886c:	1e5a      	subs	r2, r3, #1
 800886e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008872:	bf85      	ittet	hi
 8008874:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008878:	195b      	addhi	r3, r3, r5
 800887a:	2300      	movls	r3, #0
 800887c:	9302      	strhi	r3, [sp, #8]
 800887e:	bf88      	it	hi
 8008880:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008884:	468b      	mov	fp, r1
 8008886:	f04f 0500 	mov.w	r5, #0
 800888a:	bf8c      	ite	hi
 800888c:	608b      	strhi	r3, [r1, #8]
 800888e:	9302      	strls	r3, [sp, #8]
 8008890:	680b      	ldr	r3, [r1, #0]
 8008892:	4680      	mov	r8, r0
 8008894:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008898:	f84b 3b1c 	str.w	r3, [fp], #28
 800889c:	460c      	mov	r4, r1
 800889e:	465e      	mov	r6, fp
 80088a0:	46aa      	mov	sl, r5
 80088a2:	46a9      	mov	r9, r5
 80088a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088a8:	9501      	str	r5, [sp, #4]
 80088aa:	68a2      	ldr	r2, [r4, #8]
 80088ac:	b152      	cbz	r2, 80088c4 <_scanf_float+0x64>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b4e      	cmp	r3, #78	; 0x4e
 80088b4:	d864      	bhi.n	8008980 <_scanf_float+0x120>
 80088b6:	2b40      	cmp	r3, #64	; 0x40
 80088b8:	d83c      	bhi.n	8008934 <_scanf_float+0xd4>
 80088ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80088be:	b2c8      	uxtb	r0, r1
 80088c0:	280e      	cmp	r0, #14
 80088c2:	d93a      	bls.n	800893a <_scanf_float+0xda>
 80088c4:	f1b9 0f00 	cmp.w	r9, #0
 80088c8:	d003      	beq.n	80088d2 <_scanf_float+0x72>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088d6:	f1ba 0f01 	cmp.w	sl, #1
 80088da:	f200 8113 	bhi.w	8008b04 <_scanf_float+0x2a4>
 80088de:	455e      	cmp	r6, fp
 80088e0:	f200 8105 	bhi.w	8008aee <_scanf_float+0x28e>
 80088e4:	2501      	movs	r5, #1
 80088e6:	4628      	mov	r0, r5
 80088e8:	b007      	add	sp, #28
 80088ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80088f2:	2a0d      	cmp	r2, #13
 80088f4:	d8e6      	bhi.n	80088c4 <_scanf_float+0x64>
 80088f6:	a101      	add	r1, pc, #4	; (adr r1, 80088fc <_scanf_float+0x9c>)
 80088f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088fc:	08008a3b 	.word	0x08008a3b
 8008900:	080088c5 	.word	0x080088c5
 8008904:	080088c5 	.word	0x080088c5
 8008908:	080088c5 	.word	0x080088c5
 800890c:	08008a9b 	.word	0x08008a9b
 8008910:	08008a73 	.word	0x08008a73
 8008914:	080088c5 	.word	0x080088c5
 8008918:	080088c5 	.word	0x080088c5
 800891c:	08008a49 	.word	0x08008a49
 8008920:	080088c5 	.word	0x080088c5
 8008924:	080088c5 	.word	0x080088c5
 8008928:	080088c5 	.word	0x080088c5
 800892c:	080088c5 	.word	0x080088c5
 8008930:	08008a01 	.word	0x08008a01
 8008934:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008938:	e7db      	b.n	80088f2 <_scanf_float+0x92>
 800893a:	290e      	cmp	r1, #14
 800893c:	d8c2      	bhi.n	80088c4 <_scanf_float+0x64>
 800893e:	a001      	add	r0, pc, #4	; (adr r0, 8008944 <_scanf_float+0xe4>)
 8008940:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008944:	080089f3 	.word	0x080089f3
 8008948:	080088c5 	.word	0x080088c5
 800894c:	080089f3 	.word	0x080089f3
 8008950:	08008a87 	.word	0x08008a87
 8008954:	080088c5 	.word	0x080088c5
 8008958:	080089a1 	.word	0x080089a1
 800895c:	080089dd 	.word	0x080089dd
 8008960:	080089dd 	.word	0x080089dd
 8008964:	080089dd 	.word	0x080089dd
 8008968:	080089dd 	.word	0x080089dd
 800896c:	080089dd 	.word	0x080089dd
 8008970:	080089dd 	.word	0x080089dd
 8008974:	080089dd 	.word	0x080089dd
 8008978:	080089dd 	.word	0x080089dd
 800897c:	080089dd 	.word	0x080089dd
 8008980:	2b6e      	cmp	r3, #110	; 0x6e
 8008982:	d809      	bhi.n	8008998 <_scanf_float+0x138>
 8008984:	2b60      	cmp	r3, #96	; 0x60
 8008986:	d8b2      	bhi.n	80088ee <_scanf_float+0x8e>
 8008988:	2b54      	cmp	r3, #84	; 0x54
 800898a:	d077      	beq.n	8008a7c <_scanf_float+0x21c>
 800898c:	2b59      	cmp	r3, #89	; 0x59
 800898e:	d199      	bne.n	80088c4 <_scanf_float+0x64>
 8008990:	2d07      	cmp	r5, #7
 8008992:	d197      	bne.n	80088c4 <_scanf_float+0x64>
 8008994:	2508      	movs	r5, #8
 8008996:	e029      	b.n	80089ec <_scanf_float+0x18c>
 8008998:	2b74      	cmp	r3, #116	; 0x74
 800899a:	d06f      	beq.n	8008a7c <_scanf_float+0x21c>
 800899c:	2b79      	cmp	r3, #121	; 0x79
 800899e:	e7f6      	b.n	800898e <_scanf_float+0x12e>
 80089a0:	6821      	ldr	r1, [r4, #0]
 80089a2:	05c8      	lsls	r0, r1, #23
 80089a4:	d51a      	bpl.n	80089dc <_scanf_float+0x17c>
 80089a6:	9b02      	ldr	r3, [sp, #8]
 80089a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089ac:	6021      	str	r1, [r4, #0]
 80089ae:	f109 0901 	add.w	r9, r9, #1
 80089b2:	b11b      	cbz	r3, 80089bc <_scanf_float+0x15c>
 80089b4:	3b01      	subs	r3, #1
 80089b6:	3201      	adds	r2, #1
 80089b8:	9302      	str	r3, [sp, #8]
 80089ba:	60a2      	str	r2, [r4, #8]
 80089bc:	68a3      	ldr	r3, [r4, #8]
 80089be:	3b01      	subs	r3, #1
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	3301      	adds	r3, #1
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	607b      	str	r3, [r7, #4]
 80089d0:	f340 8084 	ble.w	8008adc <_scanf_float+0x27c>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	3301      	adds	r3, #1
 80089d8:	603b      	str	r3, [r7, #0]
 80089da:	e766      	b.n	80088aa <_scanf_float+0x4a>
 80089dc:	eb1a 0f05 	cmn.w	sl, r5
 80089e0:	f47f af70 	bne.w	80088c4 <_scanf_float+0x64>
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089ea:	6022      	str	r2, [r4, #0]
 80089ec:	f806 3b01 	strb.w	r3, [r6], #1
 80089f0:	e7e4      	b.n	80089bc <_scanf_float+0x15c>
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	0610      	lsls	r0, r2, #24
 80089f6:	f57f af65 	bpl.w	80088c4 <_scanf_float+0x64>
 80089fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089fe:	e7f4      	b.n	80089ea <_scanf_float+0x18a>
 8008a00:	f1ba 0f00 	cmp.w	sl, #0
 8008a04:	d10e      	bne.n	8008a24 <_scanf_float+0x1c4>
 8008a06:	f1b9 0f00 	cmp.w	r9, #0
 8008a0a:	d10e      	bne.n	8008a2a <_scanf_float+0x1ca>
 8008a0c:	6822      	ldr	r2, [r4, #0]
 8008a0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a16:	d108      	bne.n	8008a2a <_scanf_float+0x1ca>
 8008a18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a1c:	f04f 0a01 	mov.w	sl, #1
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	e7e3      	b.n	80089ec <_scanf_float+0x18c>
 8008a24:	f1ba 0f02 	cmp.w	sl, #2
 8008a28:	d055      	beq.n	8008ad6 <_scanf_float+0x276>
 8008a2a:	2d01      	cmp	r5, #1
 8008a2c:	d002      	beq.n	8008a34 <_scanf_float+0x1d4>
 8008a2e:	2d04      	cmp	r5, #4
 8008a30:	f47f af48 	bne.w	80088c4 <_scanf_float+0x64>
 8008a34:	3501      	adds	r5, #1
 8008a36:	b2ed      	uxtb	r5, r5
 8008a38:	e7d8      	b.n	80089ec <_scanf_float+0x18c>
 8008a3a:	f1ba 0f01 	cmp.w	sl, #1
 8008a3e:	f47f af41 	bne.w	80088c4 <_scanf_float+0x64>
 8008a42:	f04f 0a02 	mov.w	sl, #2
 8008a46:	e7d1      	b.n	80089ec <_scanf_float+0x18c>
 8008a48:	b97d      	cbnz	r5, 8008a6a <_scanf_float+0x20a>
 8008a4a:	f1b9 0f00 	cmp.w	r9, #0
 8008a4e:	f47f af3c 	bne.w	80088ca <_scanf_float+0x6a>
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a5c:	f47f af39 	bne.w	80088d2 <_scanf_float+0x72>
 8008a60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a64:	2501      	movs	r5, #1
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	e7c0      	b.n	80089ec <_scanf_float+0x18c>
 8008a6a:	2d03      	cmp	r5, #3
 8008a6c:	d0e2      	beq.n	8008a34 <_scanf_float+0x1d4>
 8008a6e:	2d05      	cmp	r5, #5
 8008a70:	e7de      	b.n	8008a30 <_scanf_float+0x1d0>
 8008a72:	2d02      	cmp	r5, #2
 8008a74:	f47f af26 	bne.w	80088c4 <_scanf_float+0x64>
 8008a78:	2503      	movs	r5, #3
 8008a7a:	e7b7      	b.n	80089ec <_scanf_float+0x18c>
 8008a7c:	2d06      	cmp	r5, #6
 8008a7e:	f47f af21 	bne.w	80088c4 <_scanf_float+0x64>
 8008a82:	2507      	movs	r5, #7
 8008a84:	e7b2      	b.n	80089ec <_scanf_float+0x18c>
 8008a86:	6822      	ldr	r2, [r4, #0]
 8008a88:	0591      	lsls	r1, r2, #22
 8008a8a:	f57f af1b 	bpl.w	80088c4 <_scanf_float+0x64>
 8008a8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a92:	6022      	str	r2, [r4, #0]
 8008a94:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a98:	e7a8      	b.n	80089ec <_scanf_float+0x18c>
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008aa0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008aa4:	d006      	beq.n	8008ab4 <_scanf_float+0x254>
 8008aa6:	0550      	lsls	r0, r2, #21
 8008aa8:	f57f af0c 	bpl.w	80088c4 <_scanf_float+0x64>
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	f43f af0f 	beq.w	80088d2 <_scanf_float+0x72>
 8008ab4:	0591      	lsls	r1, r2, #22
 8008ab6:	bf58      	it	pl
 8008ab8:	9901      	ldrpl	r1, [sp, #4]
 8008aba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008abe:	bf58      	it	pl
 8008ac0:	eba9 0101 	subpl.w	r1, r9, r1
 8008ac4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ac8:	f04f 0900 	mov.w	r9, #0
 8008acc:	bf58      	it	pl
 8008ace:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ad2:	6022      	str	r2, [r4, #0]
 8008ad4:	e78a      	b.n	80089ec <_scanf_float+0x18c>
 8008ad6:	f04f 0a03 	mov.w	sl, #3
 8008ada:	e787      	b.n	80089ec <_scanf_float+0x18c>
 8008adc:	4639      	mov	r1, r7
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ae4:	4798      	blx	r3
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	f43f aedf 	beq.w	80088aa <_scanf_float+0x4a>
 8008aec:	e6ea      	b.n	80088c4 <_scanf_float+0x64>
 8008aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008af2:	463a      	mov	r2, r7
 8008af4:	4640      	mov	r0, r8
 8008af6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008afa:	4798      	blx	r3
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	6123      	str	r3, [r4, #16]
 8008b02:	e6ec      	b.n	80088de <_scanf_float+0x7e>
 8008b04:	1e6b      	subs	r3, r5, #1
 8008b06:	2b06      	cmp	r3, #6
 8008b08:	d825      	bhi.n	8008b56 <_scanf_float+0x2f6>
 8008b0a:	2d02      	cmp	r5, #2
 8008b0c:	d836      	bhi.n	8008b7c <_scanf_float+0x31c>
 8008b0e:	455e      	cmp	r6, fp
 8008b10:	f67f aee8 	bls.w	80088e4 <_scanf_float+0x84>
 8008b14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b18:	463a      	mov	r2, r7
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b20:	4798      	blx	r3
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	e7f1      	b.n	8008b0e <_scanf_float+0x2ae>
 8008b2a:	9802      	ldr	r0, [sp, #8]
 8008b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b34:	463a      	mov	r2, r7
 8008b36:	9002      	str	r0, [sp, #8]
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4798      	blx	r3
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b46:	fa5f fa8a 	uxtb.w	sl, sl
 8008b4a:	f1ba 0f02 	cmp.w	sl, #2
 8008b4e:	d1ec      	bne.n	8008b2a <_scanf_float+0x2ca>
 8008b50:	3d03      	subs	r5, #3
 8008b52:	b2ed      	uxtb	r5, r5
 8008b54:	1b76      	subs	r6, r6, r5
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	05da      	lsls	r2, r3, #23
 8008b5a:	d52f      	bpl.n	8008bbc <_scanf_float+0x35c>
 8008b5c:	055b      	lsls	r3, r3, #21
 8008b5e:	d510      	bpl.n	8008b82 <_scanf_float+0x322>
 8008b60:	455e      	cmp	r6, fp
 8008b62:	f67f aebf 	bls.w	80088e4 <_scanf_float+0x84>
 8008b66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b72:	4798      	blx	r3
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	e7f1      	b.n	8008b60 <_scanf_float+0x300>
 8008b7c:	46aa      	mov	sl, r5
 8008b7e:	9602      	str	r6, [sp, #8]
 8008b80:	e7df      	b.n	8008b42 <_scanf_float+0x2e2>
 8008b82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	2965      	cmp	r1, #101	; 0x65
 8008b8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	d00c      	beq.n	8008bb0 <_scanf_float+0x350>
 8008b96:	2945      	cmp	r1, #69	; 0x45
 8008b98:	d00a      	beq.n	8008bb0 <_scanf_float+0x350>
 8008b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b9e:	463a      	mov	r2, r7
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4798      	blx	r3
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	1eb5      	subs	r5, r6, #2
 8008bae:	6123      	str	r3, [r4, #16]
 8008bb0:	463a      	mov	r2, r7
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bb8:	4798      	blx	r3
 8008bba:	462e      	mov	r6, r5
 8008bbc:	6825      	ldr	r5, [r4, #0]
 8008bbe:	f015 0510 	ands.w	r5, r5, #16
 8008bc2:	d155      	bne.n	8008c70 <_scanf_float+0x410>
 8008bc4:	7035      	strb	r5, [r6, #0]
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bd0:	d11b      	bne.n	8008c0a <_scanf_float+0x3aa>
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	454b      	cmp	r3, r9
 8008bd6:	eba3 0209 	sub.w	r2, r3, r9
 8008bda:	d123      	bne.n	8008c24 <_scanf_float+0x3c4>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4659      	mov	r1, fp
 8008be0:	4640      	mov	r0, r8
 8008be2:	f000 fe79 	bl	80098d8 <_strtod_r>
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	f012 0f02 	tst.w	r2, #2
 8008bee:	4606      	mov	r6, r0
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	d021      	beq.n	8008c3a <_scanf_float+0x3da>
 8008bf6:	1d1a      	adds	r2, r3, #4
 8008bf8:	9903      	ldr	r1, [sp, #12]
 8008bfa:	600a      	str	r2, [r1, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	e9c3 6700 	strd	r6, r7, [r3]
 8008c02:	68e3      	ldr	r3, [r4, #12]
 8008c04:	3301      	adds	r3, #1
 8008c06:	60e3      	str	r3, [r4, #12]
 8008c08:	e66d      	b.n	80088e6 <_scanf_float+0x86>
 8008c0a:	9b04      	ldr	r3, [sp, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0e5      	beq.n	8008bdc <_scanf_float+0x37c>
 8008c10:	9905      	ldr	r1, [sp, #20]
 8008c12:	230a      	movs	r3, #10
 8008c14:	462a      	mov	r2, r5
 8008c16:	4640      	mov	r0, r8
 8008c18:	3101      	adds	r1, #1
 8008c1a:	f000 fedf 	bl	80099dc <_strtol_r>
 8008c1e:	9b04      	ldr	r3, [sp, #16]
 8008c20:	9e05      	ldr	r6, [sp, #20]
 8008c22:	1ac2      	subs	r2, r0, r3
 8008c24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c28:	429e      	cmp	r6, r3
 8008c2a:	bf28      	it	cs
 8008c2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c30:	4630      	mov	r0, r6
 8008c32:	4910      	ldr	r1, [pc, #64]	; (8008c74 <_scanf_float+0x414>)
 8008c34:	f000 f826 	bl	8008c84 <siprintf>
 8008c38:	e7d0      	b.n	8008bdc <_scanf_float+0x37c>
 8008c3a:	f012 0f04 	tst.w	r2, #4
 8008c3e:	f103 0204 	add.w	r2, r3, #4
 8008c42:	d1d9      	bne.n	8008bf8 <_scanf_float+0x398>
 8008c44:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008c48:	f8cc 2000 	str.w	r2, [ip]
 8008c4c:	f8d3 8000 	ldr.w	r8, [r3]
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	f7f7 feda 	bl	8000a0c <__aeabi_dcmpun>
 8008c58:	b128      	cbz	r0, 8008c66 <_scanf_float+0x406>
 8008c5a:	4807      	ldr	r0, [pc, #28]	; (8008c78 <_scanf_float+0x418>)
 8008c5c:	f000 f80e 	bl	8008c7c <nanf>
 8008c60:	f8c8 0000 	str.w	r0, [r8]
 8008c64:	e7cd      	b.n	8008c02 <_scanf_float+0x3a2>
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 ff2d 	bl	8000ac8 <__aeabi_d2f>
 8008c6e:	e7f7      	b.n	8008c60 <_scanf_float+0x400>
 8008c70:	2500      	movs	r5, #0
 8008c72:	e638      	b.n	80088e6 <_scanf_float+0x86>
 8008c74:	0800d08c 	.word	0x0800d08c
 8008c78:	0800d498 	.word	0x0800d498

08008c7c <nanf>:
 8008c7c:	4800      	ldr	r0, [pc, #0]	; (8008c80 <nanf+0x4>)
 8008c7e:	4770      	bx	lr
 8008c80:	7fc00000 	.word	0x7fc00000

08008c84 <siprintf>:
 8008c84:	b40e      	push	{r1, r2, r3}
 8008c86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c8a:	b500      	push	{lr}
 8008c8c:	b09c      	sub	sp, #112	; 0x70
 8008c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c90:	9002      	str	r0, [sp, #8]
 8008c92:	9006      	str	r0, [sp, #24]
 8008c94:	9107      	str	r1, [sp, #28]
 8008c96:	9104      	str	r1, [sp, #16]
 8008c98:	4808      	ldr	r0, [pc, #32]	; (8008cbc <siprintf+0x38>)
 8008c9a:	4909      	ldr	r1, [pc, #36]	; (8008cc0 <siprintf+0x3c>)
 8008c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca0:	9105      	str	r1, [sp, #20]
 8008ca2:	6800      	ldr	r0, [r0, #0]
 8008ca4:	a902      	add	r1, sp, #8
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	f002 feb8 	bl	800ba1c <_svfiprintf_r>
 8008cac:	2200      	movs	r2, #0
 8008cae:	9b02      	ldr	r3, [sp, #8]
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	b01c      	add	sp, #112	; 0x70
 8008cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cb8:	b003      	add	sp, #12
 8008cba:	4770      	bx	lr
 8008cbc:	20000034 	.word	0x20000034
 8008cc0:	ffff0208 	.word	0xffff0208

08008cc4 <sulp>:
 8008cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	460f      	mov	r7, r1
 8008cca:	4690      	mov	r8, r2
 8008ccc:	f002 fc12 	bl	800b4f4 <__ulp>
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	f1b8 0f00 	cmp.w	r8, #0
 8008cd8:	d011      	beq.n	8008cfe <sulp+0x3a>
 8008cda:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008cde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dd0b      	ble.n	8008cfe <sulp+0x3a>
 8008ce6:	2400      	movs	r4, #0
 8008ce8:	051b      	lsls	r3, r3, #20
 8008cea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	f7f7 fbef 	bl	80004d8 <__aeabi_dmul>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	460d      	mov	r5, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008d08 <_strtod_l>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	469b      	mov	fp, r3
 8008d0e:	2300      	movs	r3, #0
 8008d10:	b09f      	sub	sp, #124	; 0x7c
 8008d12:	931a      	str	r3, [sp, #104]	; 0x68
 8008d14:	4b9e      	ldr	r3, [pc, #632]	; (8008f90 <_strtod_l+0x288>)
 8008d16:	4682      	mov	sl, r0
 8008d18:	681f      	ldr	r7, [r3, #0]
 8008d1a:	460e      	mov	r6, r1
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	9215      	str	r2, [sp, #84]	; 0x54
 8008d20:	f7f7 fa16 	bl	8000150 <strlen>
 8008d24:	f04f 0800 	mov.w	r8, #0
 8008d28:	4604      	mov	r4, r0
 8008d2a:	f04f 0900 	mov.w	r9, #0
 8008d2e:	9619      	str	r6, [sp, #100]	; 0x64
 8008d30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d32:	781a      	ldrb	r2, [r3, #0]
 8008d34:	2a2b      	cmp	r2, #43	; 0x2b
 8008d36:	d04c      	beq.n	8008dd2 <_strtod_l+0xca>
 8008d38:	d83a      	bhi.n	8008db0 <_strtod_l+0xa8>
 8008d3a:	2a0d      	cmp	r2, #13
 8008d3c:	d833      	bhi.n	8008da6 <_strtod_l+0x9e>
 8008d3e:	2a08      	cmp	r2, #8
 8008d40:	d833      	bhi.n	8008daa <_strtod_l+0xa2>
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	d03d      	beq.n	8008dc2 <_strtod_l+0xba>
 8008d46:	2300      	movs	r3, #0
 8008d48:	930a      	str	r3, [sp, #40]	; 0x28
 8008d4a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008d4c:	782b      	ldrb	r3, [r5, #0]
 8008d4e:	2b30      	cmp	r3, #48	; 0x30
 8008d50:	f040 80aa 	bne.w	8008ea8 <_strtod_l+0x1a0>
 8008d54:	786b      	ldrb	r3, [r5, #1]
 8008d56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d5a:	2b58      	cmp	r3, #88	; 0x58
 8008d5c:	d166      	bne.n	8008e2c <_strtod_l+0x124>
 8008d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d60:	4650      	mov	r0, sl
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	ab1a      	add	r3, sp, #104	; 0x68
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	4a8a      	ldr	r2, [pc, #552]	; (8008f94 <_strtod_l+0x28c>)
 8008d6a:	f8cd b008 	str.w	fp, [sp, #8]
 8008d6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d70:	a919      	add	r1, sp, #100	; 0x64
 8008d72:	f001 fd17 	bl	800a7a4 <__gethex>
 8008d76:	f010 0607 	ands.w	r6, r0, #7
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	d005      	beq.n	8008d8a <_strtod_l+0x82>
 8008d7e:	2e06      	cmp	r6, #6
 8008d80:	d129      	bne.n	8008dd6 <_strtod_l+0xce>
 8008d82:	2300      	movs	r3, #0
 8008d84:	3501      	adds	r5, #1
 8008d86:	9519      	str	r5, [sp, #100]	; 0x64
 8008d88:	930a      	str	r3, [sp, #40]	; 0x28
 8008d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 858a 	bne.w	80098a6 <_strtod_l+0xb9e>
 8008d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d94:	b1d3      	cbz	r3, 8008dcc <_strtod_l+0xc4>
 8008d96:	4642      	mov	r2, r8
 8008d98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	b01f      	add	sp, #124	; 0x7c
 8008da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da6:	2a20      	cmp	r2, #32
 8008da8:	d1cd      	bne.n	8008d46 <_strtod_l+0x3e>
 8008daa:	3301      	adds	r3, #1
 8008dac:	9319      	str	r3, [sp, #100]	; 0x64
 8008dae:	e7bf      	b.n	8008d30 <_strtod_l+0x28>
 8008db0:	2a2d      	cmp	r2, #45	; 0x2d
 8008db2:	d1c8      	bne.n	8008d46 <_strtod_l+0x3e>
 8008db4:	2201      	movs	r2, #1
 8008db6:	920a      	str	r2, [sp, #40]	; 0x28
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	9219      	str	r2, [sp, #100]	; 0x64
 8008dbc:	785b      	ldrb	r3, [r3, #1]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1c3      	bne.n	8008d4a <_strtod_l+0x42>
 8008dc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dc4:	9619      	str	r6, [sp, #100]	; 0x64
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f040 856b 	bne.w	80098a2 <_strtod_l+0xb9a>
 8008dcc:	4642      	mov	r2, r8
 8008dce:	464b      	mov	r3, r9
 8008dd0:	e7e4      	b.n	8008d9c <_strtod_l+0x94>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	e7ef      	b.n	8008db6 <_strtod_l+0xae>
 8008dd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008dd8:	b13a      	cbz	r2, 8008dea <_strtod_l+0xe2>
 8008dda:	2135      	movs	r1, #53	; 0x35
 8008ddc:	a81c      	add	r0, sp, #112	; 0x70
 8008dde:	f002 fc8d 	bl	800b6fc <__copybits>
 8008de2:	4650      	mov	r0, sl
 8008de4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008de6:	f002 f855 	bl	800ae94 <_Bfree>
 8008dea:	3e01      	subs	r6, #1
 8008dec:	2e04      	cmp	r6, #4
 8008dee:	d806      	bhi.n	8008dfe <_strtod_l+0xf6>
 8008df0:	e8df f006 	tbb	[pc, r6]
 8008df4:	1714030a 	.word	0x1714030a
 8008df8:	0a          	.byte	0x0a
 8008df9:	00          	.byte	0x00
 8008dfa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008dfe:	0721      	lsls	r1, r4, #28
 8008e00:	d5c3      	bpl.n	8008d8a <_strtod_l+0x82>
 8008e02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008e06:	e7c0      	b.n	8008d8a <_strtod_l+0x82>
 8008e08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008e0a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008e0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e16:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008e1a:	e7f0      	b.n	8008dfe <_strtod_l+0xf6>
 8008e1c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f98 <_strtod_l+0x290>
 8008e20:	e7ed      	b.n	8008dfe <_strtod_l+0xf6>
 8008e22:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008e26:	f04f 38ff 	mov.w	r8, #4294967295
 8008e2a:	e7e8      	b.n	8008dfe <_strtod_l+0xf6>
 8008e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	9219      	str	r2, [sp, #100]	; 0x64
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	2b30      	cmp	r3, #48	; 0x30
 8008e36:	d0f9      	beq.n	8008e2c <_strtod_l+0x124>
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0a6      	beq.n	8008d8a <_strtod_l+0x82>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	9307      	str	r3, [sp, #28]
 8008e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e42:	220a      	movs	r2, #10
 8008e44:	9308      	str	r3, [sp, #32]
 8008e46:	2300      	movs	r3, #0
 8008e48:	469b      	mov	fp, r3
 8008e4a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008e4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008e50:	7805      	ldrb	r5, [r0, #0]
 8008e52:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008e56:	b2d9      	uxtb	r1, r3
 8008e58:	2909      	cmp	r1, #9
 8008e5a:	d927      	bls.n	8008eac <_strtod_l+0x1a4>
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f002 fef2 	bl	800bc48 <strncmp>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d033      	beq.n	8008ed0 <_strtod_l+0x1c8>
 8008e68:	2000      	movs	r0, #0
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	465c      	mov	r4, fp
 8008e6e:	4603      	mov	r3, r0
 8008e70:	9004      	str	r0, [sp, #16]
 8008e72:	2a65      	cmp	r2, #101	; 0x65
 8008e74:	d001      	beq.n	8008e7a <_strtod_l+0x172>
 8008e76:	2a45      	cmp	r2, #69	; 0x45
 8008e78:	d114      	bne.n	8008ea4 <_strtod_l+0x19c>
 8008e7a:	b91c      	cbnz	r4, 8008e84 <_strtod_l+0x17c>
 8008e7c:	9a07      	ldr	r2, [sp, #28]
 8008e7e:	4302      	orrs	r2, r0
 8008e80:	d09f      	beq.n	8008dc2 <_strtod_l+0xba>
 8008e82:	2400      	movs	r4, #0
 8008e84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008e86:	1c72      	adds	r2, r6, #1
 8008e88:	9219      	str	r2, [sp, #100]	; 0x64
 8008e8a:	7872      	ldrb	r2, [r6, #1]
 8008e8c:	2a2b      	cmp	r2, #43	; 0x2b
 8008e8e:	d079      	beq.n	8008f84 <_strtod_l+0x27c>
 8008e90:	2a2d      	cmp	r2, #45	; 0x2d
 8008e92:	f000 8083 	beq.w	8008f9c <_strtod_l+0x294>
 8008e96:	2700      	movs	r7, #0
 8008e98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e9c:	2909      	cmp	r1, #9
 8008e9e:	f240 8083 	bls.w	8008fa8 <_strtod_l+0x2a0>
 8008ea2:	9619      	str	r6, [sp, #100]	; 0x64
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	e09f      	b.n	8008fe8 <_strtod_l+0x2e0>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e7c8      	b.n	8008e3e <_strtod_l+0x136>
 8008eac:	f1bb 0f08 	cmp.w	fp, #8
 8008eb0:	bfd5      	itete	le
 8008eb2:	9906      	ldrle	r1, [sp, #24]
 8008eb4:	9905      	ldrgt	r1, [sp, #20]
 8008eb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008eba:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ebe:	f100 0001 	add.w	r0, r0, #1
 8008ec2:	bfd4      	ite	le
 8008ec4:	9306      	strle	r3, [sp, #24]
 8008ec6:	9305      	strgt	r3, [sp, #20]
 8008ec8:	f10b 0b01 	add.w	fp, fp, #1
 8008ecc:	9019      	str	r0, [sp, #100]	; 0x64
 8008ece:	e7be      	b.n	8008e4e <_strtod_l+0x146>
 8008ed0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ed2:	191a      	adds	r2, r3, r4
 8008ed4:	9219      	str	r2, [sp, #100]	; 0x64
 8008ed6:	5d1a      	ldrb	r2, [r3, r4]
 8008ed8:	f1bb 0f00 	cmp.w	fp, #0
 8008edc:	d036      	beq.n	8008f4c <_strtod_l+0x244>
 8008ede:	465c      	mov	r4, fp
 8008ee0:	9004      	str	r0, [sp, #16]
 8008ee2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d912      	bls.n	8008f10 <_strtod_l+0x208>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e7c1      	b.n	8008e72 <_strtod_l+0x16a>
 8008eee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	9219      	str	r2, [sp, #100]	; 0x64
 8008ef6:	785a      	ldrb	r2, [r3, #1]
 8008ef8:	2a30      	cmp	r2, #48	; 0x30
 8008efa:	d0f8      	beq.n	8008eee <_strtod_l+0x1e6>
 8008efc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	f200 84d5 	bhi.w	80098b0 <_strtod_l+0xba8>
 8008f06:	9004      	str	r0, [sp, #16]
 8008f08:	2000      	movs	r0, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f0e:	9308      	str	r3, [sp, #32]
 8008f10:	3a30      	subs	r2, #48	; 0x30
 8008f12:	f100 0301 	add.w	r3, r0, #1
 8008f16:	d013      	beq.n	8008f40 <_strtod_l+0x238>
 8008f18:	9904      	ldr	r1, [sp, #16]
 8008f1a:	1905      	adds	r5, r0, r4
 8008f1c:	4419      	add	r1, r3
 8008f1e:	9104      	str	r1, [sp, #16]
 8008f20:	4623      	mov	r3, r4
 8008f22:	210a      	movs	r1, #10
 8008f24:	42ab      	cmp	r3, r5
 8008f26:	d113      	bne.n	8008f50 <_strtod_l+0x248>
 8008f28:	1823      	adds	r3, r4, r0
 8008f2a:	2b08      	cmp	r3, #8
 8008f2c:	f104 0401 	add.w	r4, r4, #1
 8008f30:	4404      	add	r4, r0
 8008f32:	dc1b      	bgt.n	8008f6c <_strtod_l+0x264>
 8008f34:	230a      	movs	r3, #10
 8008f36:	9906      	ldr	r1, [sp, #24]
 8008f38:	fb03 2301 	mla	r3, r3, r1, r2
 8008f3c:	9306      	str	r3, [sp, #24]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f42:	4618      	mov	r0, r3
 8008f44:	1c51      	adds	r1, r2, #1
 8008f46:	9119      	str	r1, [sp, #100]	; 0x64
 8008f48:	7852      	ldrb	r2, [r2, #1]
 8008f4a:	e7ca      	b.n	8008ee2 <_strtod_l+0x1da>
 8008f4c:	4658      	mov	r0, fp
 8008f4e:	e7d3      	b.n	8008ef8 <_strtod_l+0x1f0>
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	dc04      	bgt.n	8008f5e <_strtod_l+0x256>
 8008f54:	9f06      	ldr	r7, [sp, #24]
 8008f56:	434f      	muls	r7, r1
 8008f58:	9706      	str	r7, [sp, #24]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	e7e2      	b.n	8008f24 <_strtod_l+0x21c>
 8008f5e:	1c5f      	adds	r7, r3, #1
 8008f60:	2f10      	cmp	r7, #16
 8008f62:	bfde      	ittt	le
 8008f64:	9f05      	ldrle	r7, [sp, #20]
 8008f66:	434f      	mulle	r7, r1
 8008f68:	9705      	strle	r7, [sp, #20]
 8008f6a:	e7f6      	b.n	8008f5a <_strtod_l+0x252>
 8008f6c:	2c10      	cmp	r4, #16
 8008f6e:	bfdf      	itttt	le
 8008f70:	230a      	movle	r3, #10
 8008f72:	9905      	ldrle	r1, [sp, #20]
 8008f74:	fb03 2301 	mlale	r3, r3, r1, r2
 8008f78:	9305      	strle	r3, [sp, #20]
 8008f7a:	e7e0      	b.n	8008f3e <_strtod_l+0x236>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	2301      	movs	r3, #1
 8008f82:	e77b      	b.n	8008e7c <_strtod_l+0x174>
 8008f84:	2700      	movs	r7, #0
 8008f86:	1cb2      	adds	r2, r6, #2
 8008f88:	9219      	str	r2, [sp, #100]	; 0x64
 8008f8a:	78b2      	ldrb	r2, [r6, #2]
 8008f8c:	e784      	b.n	8008e98 <_strtod_l+0x190>
 8008f8e:	bf00      	nop
 8008f90:	0800d2e0 	.word	0x0800d2e0
 8008f94:	0800d094 	.word	0x0800d094
 8008f98:	7ff00000 	.word	0x7ff00000
 8008f9c:	2701      	movs	r7, #1
 8008f9e:	e7f2      	b.n	8008f86 <_strtod_l+0x27e>
 8008fa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fa2:	1c51      	adds	r1, r2, #1
 8008fa4:	9119      	str	r1, [sp, #100]	; 0x64
 8008fa6:	7852      	ldrb	r2, [r2, #1]
 8008fa8:	2a30      	cmp	r2, #48	; 0x30
 8008faa:	d0f9      	beq.n	8008fa0 <_strtod_l+0x298>
 8008fac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008fb0:	2908      	cmp	r1, #8
 8008fb2:	f63f af77 	bhi.w	8008ea4 <_strtod_l+0x19c>
 8008fb6:	f04f 0e0a 	mov.w	lr, #10
 8008fba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008fbe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fc4:	1c51      	adds	r1, r2, #1
 8008fc6:	9119      	str	r1, [sp, #100]	; 0x64
 8008fc8:	7852      	ldrb	r2, [r2, #1]
 8008fca:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008fce:	2d09      	cmp	r5, #9
 8008fd0:	d935      	bls.n	800903e <_strtod_l+0x336>
 8008fd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fd4:	1b49      	subs	r1, r1, r5
 8008fd6:	2908      	cmp	r1, #8
 8008fd8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008fdc:	dc02      	bgt.n	8008fe4 <_strtod_l+0x2dc>
 8008fde:	4565      	cmp	r5, ip
 8008fe0:	bfa8      	it	ge
 8008fe2:	4665      	movge	r5, ip
 8008fe4:	b107      	cbz	r7, 8008fe8 <_strtod_l+0x2e0>
 8008fe6:	426d      	negs	r5, r5
 8008fe8:	2c00      	cmp	r4, #0
 8008fea:	d14c      	bne.n	8009086 <_strtod_l+0x37e>
 8008fec:	9907      	ldr	r1, [sp, #28]
 8008fee:	4301      	orrs	r1, r0
 8008ff0:	f47f aecb 	bne.w	8008d8a <_strtod_l+0x82>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f47f aee4 	bne.w	8008dc2 <_strtod_l+0xba>
 8008ffa:	2a69      	cmp	r2, #105	; 0x69
 8008ffc:	d026      	beq.n	800904c <_strtod_l+0x344>
 8008ffe:	dc23      	bgt.n	8009048 <_strtod_l+0x340>
 8009000:	2a49      	cmp	r2, #73	; 0x49
 8009002:	d023      	beq.n	800904c <_strtod_l+0x344>
 8009004:	2a4e      	cmp	r2, #78	; 0x4e
 8009006:	f47f aedc 	bne.w	8008dc2 <_strtod_l+0xba>
 800900a:	499d      	ldr	r1, [pc, #628]	; (8009280 <_strtod_l+0x578>)
 800900c:	a819      	add	r0, sp, #100	; 0x64
 800900e:	f001 fe17 	bl	800ac40 <__match>
 8009012:	2800      	cmp	r0, #0
 8009014:	f43f aed5 	beq.w	8008dc2 <_strtod_l+0xba>
 8009018:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b28      	cmp	r3, #40	; 0x28
 800901e:	d12c      	bne.n	800907a <_strtod_l+0x372>
 8009020:	4998      	ldr	r1, [pc, #608]	; (8009284 <_strtod_l+0x57c>)
 8009022:	aa1c      	add	r2, sp, #112	; 0x70
 8009024:	a819      	add	r0, sp, #100	; 0x64
 8009026:	f001 fe1f 	bl	800ac68 <__hexnan>
 800902a:	2805      	cmp	r0, #5
 800902c:	d125      	bne.n	800907a <_strtod_l+0x372>
 800902e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009030:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009034:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009038:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800903c:	e6a5      	b.n	8008d8a <_strtod_l+0x82>
 800903e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009042:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009046:	e7bc      	b.n	8008fc2 <_strtod_l+0x2ba>
 8009048:	2a6e      	cmp	r2, #110	; 0x6e
 800904a:	e7dc      	b.n	8009006 <_strtod_l+0x2fe>
 800904c:	498e      	ldr	r1, [pc, #568]	; (8009288 <_strtod_l+0x580>)
 800904e:	a819      	add	r0, sp, #100	; 0x64
 8009050:	f001 fdf6 	bl	800ac40 <__match>
 8009054:	2800      	cmp	r0, #0
 8009056:	f43f aeb4 	beq.w	8008dc2 <_strtod_l+0xba>
 800905a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800905c:	498b      	ldr	r1, [pc, #556]	; (800928c <_strtod_l+0x584>)
 800905e:	3b01      	subs	r3, #1
 8009060:	a819      	add	r0, sp, #100	; 0x64
 8009062:	9319      	str	r3, [sp, #100]	; 0x64
 8009064:	f001 fdec 	bl	800ac40 <__match>
 8009068:	b910      	cbnz	r0, 8009070 <_strtod_l+0x368>
 800906a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800906c:	3301      	adds	r3, #1
 800906e:	9319      	str	r3, [sp, #100]	; 0x64
 8009070:	f04f 0800 	mov.w	r8, #0
 8009074:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009290 <_strtod_l+0x588>
 8009078:	e687      	b.n	8008d8a <_strtod_l+0x82>
 800907a:	4886      	ldr	r0, [pc, #536]	; (8009294 <_strtod_l+0x58c>)
 800907c:	f002 fdce 	bl	800bc1c <nan>
 8009080:	4680      	mov	r8, r0
 8009082:	4689      	mov	r9, r1
 8009084:	e681      	b.n	8008d8a <_strtod_l+0x82>
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	f1bb 0f00 	cmp.w	fp, #0
 800908c:	bf08      	it	eq
 800908e:	46a3      	moveq	fp, r4
 8009090:	1aeb      	subs	r3, r5, r3
 8009092:	2c10      	cmp	r4, #16
 8009094:	9806      	ldr	r0, [sp, #24]
 8009096:	4626      	mov	r6, r4
 8009098:	9307      	str	r3, [sp, #28]
 800909a:	bfa8      	it	ge
 800909c:	2610      	movge	r6, #16
 800909e:	f7f7 f9a1 	bl	80003e4 <__aeabi_ui2d>
 80090a2:	2c09      	cmp	r4, #9
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	dd13      	ble.n	80090d2 <_strtod_l+0x3ca>
 80090aa:	4b7b      	ldr	r3, [pc, #492]	; (8009298 <_strtod_l+0x590>)
 80090ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090b0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090b4:	f7f7 fa10 	bl	80004d8 <__aeabi_dmul>
 80090b8:	4680      	mov	r8, r0
 80090ba:	9805      	ldr	r0, [sp, #20]
 80090bc:	4689      	mov	r9, r1
 80090be:	f7f7 f991 	bl	80003e4 <__aeabi_ui2d>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4640      	mov	r0, r8
 80090c8:	4649      	mov	r1, r9
 80090ca:	f7f7 f84f 	bl	800016c <__adddf3>
 80090ce:	4680      	mov	r8, r0
 80090d0:	4689      	mov	r9, r1
 80090d2:	2c0f      	cmp	r4, #15
 80090d4:	dc36      	bgt.n	8009144 <_strtod_l+0x43c>
 80090d6:	9b07      	ldr	r3, [sp, #28]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f43f ae56 	beq.w	8008d8a <_strtod_l+0x82>
 80090de:	dd22      	ble.n	8009126 <_strtod_l+0x41e>
 80090e0:	2b16      	cmp	r3, #22
 80090e2:	dc09      	bgt.n	80090f8 <_strtod_l+0x3f0>
 80090e4:	496c      	ldr	r1, [pc, #432]	; (8009298 <_strtod_l+0x590>)
 80090e6:	4642      	mov	r2, r8
 80090e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090ec:	464b      	mov	r3, r9
 80090ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f2:	f7f7 f9f1 	bl	80004d8 <__aeabi_dmul>
 80090f6:	e7c3      	b.n	8009080 <_strtod_l+0x378>
 80090f8:	9a07      	ldr	r2, [sp, #28]
 80090fa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80090fe:	4293      	cmp	r3, r2
 8009100:	db20      	blt.n	8009144 <_strtod_l+0x43c>
 8009102:	4d65      	ldr	r5, [pc, #404]	; (8009298 <_strtod_l+0x590>)
 8009104:	f1c4 040f 	rsb	r4, r4, #15
 8009108:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800910c:	4642      	mov	r2, r8
 800910e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009112:	464b      	mov	r3, r9
 8009114:	f7f7 f9e0 	bl	80004d8 <__aeabi_dmul>
 8009118:	9b07      	ldr	r3, [sp, #28]
 800911a:	1b1c      	subs	r4, r3, r4
 800911c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009120:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009124:	e7e5      	b.n	80090f2 <_strtod_l+0x3ea>
 8009126:	9b07      	ldr	r3, [sp, #28]
 8009128:	3316      	adds	r3, #22
 800912a:	db0b      	blt.n	8009144 <_strtod_l+0x43c>
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	4640      	mov	r0, r8
 8009130:	1b5d      	subs	r5, r3, r5
 8009132:	4b59      	ldr	r3, [pc, #356]	; (8009298 <_strtod_l+0x590>)
 8009134:	4649      	mov	r1, r9
 8009136:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800913a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800913e:	f7f7 faf5 	bl	800072c <__aeabi_ddiv>
 8009142:	e79d      	b.n	8009080 <_strtod_l+0x378>
 8009144:	9b07      	ldr	r3, [sp, #28]
 8009146:	1ba6      	subs	r6, r4, r6
 8009148:	441e      	add	r6, r3
 800914a:	2e00      	cmp	r6, #0
 800914c:	dd74      	ble.n	8009238 <_strtod_l+0x530>
 800914e:	f016 030f 	ands.w	r3, r6, #15
 8009152:	d00a      	beq.n	800916a <_strtod_l+0x462>
 8009154:	4950      	ldr	r1, [pc, #320]	; (8009298 <_strtod_l+0x590>)
 8009156:	4642      	mov	r2, r8
 8009158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800915c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009160:	464b      	mov	r3, r9
 8009162:	f7f7 f9b9 	bl	80004d8 <__aeabi_dmul>
 8009166:	4680      	mov	r8, r0
 8009168:	4689      	mov	r9, r1
 800916a:	f036 060f 	bics.w	r6, r6, #15
 800916e:	d052      	beq.n	8009216 <_strtod_l+0x50e>
 8009170:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009174:	dd27      	ble.n	80091c6 <_strtod_l+0x4be>
 8009176:	f04f 0b00 	mov.w	fp, #0
 800917a:	f8cd b010 	str.w	fp, [sp, #16]
 800917e:	f8cd b020 	str.w	fp, [sp, #32]
 8009182:	f8cd b018 	str.w	fp, [sp, #24]
 8009186:	2322      	movs	r3, #34	; 0x22
 8009188:	f04f 0800 	mov.w	r8, #0
 800918c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009290 <_strtod_l+0x588>
 8009190:	f8ca 3000 	str.w	r3, [sl]
 8009194:	9b08      	ldr	r3, [sp, #32]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f43f adf7 	beq.w	8008d8a <_strtod_l+0x82>
 800919c:	4650      	mov	r0, sl
 800919e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80091a0:	f001 fe78 	bl	800ae94 <_Bfree>
 80091a4:	4650      	mov	r0, sl
 80091a6:	9906      	ldr	r1, [sp, #24]
 80091a8:	f001 fe74 	bl	800ae94 <_Bfree>
 80091ac:	4650      	mov	r0, sl
 80091ae:	9904      	ldr	r1, [sp, #16]
 80091b0:	f001 fe70 	bl	800ae94 <_Bfree>
 80091b4:	4650      	mov	r0, sl
 80091b6:	9908      	ldr	r1, [sp, #32]
 80091b8:	f001 fe6c 	bl	800ae94 <_Bfree>
 80091bc:	4659      	mov	r1, fp
 80091be:	4650      	mov	r0, sl
 80091c0:	f001 fe68 	bl	800ae94 <_Bfree>
 80091c4:	e5e1      	b.n	8008d8a <_strtod_l+0x82>
 80091c6:	4b35      	ldr	r3, [pc, #212]	; (800929c <_strtod_l+0x594>)
 80091c8:	4640      	mov	r0, r8
 80091ca:	9305      	str	r3, [sp, #20]
 80091cc:	2300      	movs	r3, #0
 80091ce:	4649      	mov	r1, r9
 80091d0:	461f      	mov	r7, r3
 80091d2:	1136      	asrs	r6, r6, #4
 80091d4:	2e01      	cmp	r6, #1
 80091d6:	dc21      	bgt.n	800921c <_strtod_l+0x514>
 80091d8:	b10b      	cbz	r3, 80091de <_strtod_l+0x4d6>
 80091da:	4680      	mov	r8, r0
 80091dc:	4689      	mov	r9, r1
 80091de:	4b2f      	ldr	r3, [pc, #188]	; (800929c <_strtod_l+0x594>)
 80091e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80091e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80091e8:	4642      	mov	r2, r8
 80091ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091ee:	464b      	mov	r3, r9
 80091f0:	f7f7 f972 	bl	80004d8 <__aeabi_dmul>
 80091f4:	4b26      	ldr	r3, [pc, #152]	; (8009290 <_strtod_l+0x588>)
 80091f6:	460a      	mov	r2, r1
 80091f8:	400b      	ands	r3, r1
 80091fa:	4929      	ldr	r1, [pc, #164]	; (80092a0 <_strtod_l+0x598>)
 80091fc:	4680      	mov	r8, r0
 80091fe:	428b      	cmp	r3, r1
 8009200:	d8b9      	bhi.n	8009176 <_strtod_l+0x46e>
 8009202:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009206:	428b      	cmp	r3, r1
 8009208:	bf86      	itte	hi
 800920a:	f04f 38ff 	movhi.w	r8, #4294967295
 800920e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80092a4 <_strtod_l+0x59c>
 8009212:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009216:	2300      	movs	r3, #0
 8009218:	9305      	str	r3, [sp, #20]
 800921a:	e07f      	b.n	800931c <_strtod_l+0x614>
 800921c:	07f2      	lsls	r2, r6, #31
 800921e:	d505      	bpl.n	800922c <_strtod_l+0x524>
 8009220:	9b05      	ldr	r3, [sp, #20]
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	f7f7 f957 	bl	80004d8 <__aeabi_dmul>
 800922a:	2301      	movs	r3, #1
 800922c:	9a05      	ldr	r2, [sp, #20]
 800922e:	3701      	adds	r7, #1
 8009230:	3208      	adds	r2, #8
 8009232:	1076      	asrs	r6, r6, #1
 8009234:	9205      	str	r2, [sp, #20]
 8009236:	e7cd      	b.n	80091d4 <_strtod_l+0x4cc>
 8009238:	d0ed      	beq.n	8009216 <_strtod_l+0x50e>
 800923a:	4276      	negs	r6, r6
 800923c:	f016 020f 	ands.w	r2, r6, #15
 8009240:	d00a      	beq.n	8009258 <_strtod_l+0x550>
 8009242:	4b15      	ldr	r3, [pc, #84]	; (8009298 <_strtod_l+0x590>)
 8009244:	4640      	mov	r0, r8
 8009246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800924a:	4649      	mov	r1, r9
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f7 fa6c 	bl	800072c <__aeabi_ddiv>
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	1136      	asrs	r6, r6, #4
 800925a:	d0dc      	beq.n	8009216 <_strtod_l+0x50e>
 800925c:	2e1f      	cmp	r6, #31
 800925e:	dd23      	ble.n	80092a8 <_strtod_l+0x5a0>
 8009260:	f04f 0b00 	mov.w	fp, #0
 8009264:	f8cd b010 	str.w	fp, [sp, #16]
 8009268:	f8cd b020 	str.w	fp, [sp, #32]
 800926c:	f8cd b018 	str.w	fp, [sp, #24]
 8009270:	2322      	movs	r3, #34	; 0x22
 8009272:	f04f 0800 	mov.w	r8, #0
 8009276:	f04f 0900 	mov.w	r9, #0
 800927a:	f8ca 3000 	str.w	r3, [sl]
 800927e:	e789      	b.n	8009194 <_strtod_l+0x48c>
 8009280:	0800d065 	.word	0x0800d065
 8009284:	0800d0a8 	.word	0x0800d0a8
 8009288:	0800d05d 	.word	0x0800d05d
 800928c:	0800d1ec 	.word	0x0800d1ec
 8009290:	7ff00000 	.word	0x7ff00000
 8009294:	0800d498 	.word	0x0800d498
 8009298:	0800d378 	.word	0x0800d378
 800929c:	0800d350 	.word	0x0800d350
 80092a0:	7ca00000 	.word	0x7ca00000
 80092a4:	7fefffff 	.word	0x7fefffff
 80092a8:	f016 0310 	ands.w	r3, r6, #16
 80092ac:	bf18      	it	ne
 80092ae:	236a      	movne	r3, #106	; 0x6a
 80092b0:	4640      	mov	r0, r8
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	4649      	mov	r1, r9
 80092b6:	2300      	movs	r3, #0
 80092b8:	4fb0      	ldr	r7, [pc, #704]	; (800957c <_strtod_l+0x874>)
 80092ba:	07f2      	lsls	r2, r6, #31
 80092bc:	d504      	bpl.n	80092c8 <_strtod_l+0x5c0>
 80092be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c2:	f7f7 f909 	bl	80004d8 <__aeabi_dmul>
 80092c6:	2301      	movs	r3, #1
 80092c8:	1076      	asrs	r6, r6, #1
 80092ca:	f107 0708 	add.w	r7, r7, #8
 80092ce:	d1f4      	bne.n	80092ba <_strtod_l+0x5b2>
 80092d0:	b10b      	cbz	r3, 80092d6 <_strtod_l+0x5ce>
 80092d2:	4680      	mov	r8, r0
 80092d4:	4689      	mov	r9, r1
 80092d6:	9b05      	ldr	r3, [sp, #20]
 80092d8:	b1c3      	cbz	r3, 800930c <_strtod_l+0x604>
 80092da:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80092de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	4649      	mov	r1, r9
 80092e6:	dd11      	ble.n	800930c <_strtod_l+0x604>
 80092e8:	2b1f      	cmp	r3, #31
 80092ea:	f340 8127 	ble.w	800953c <_strtod_l+0x834>
 80092ee:	2b34      	cmp	r3, #52	; 0x34
 80092f0:	bfd8      	it	le
 80092f2:	f04f 33ff 	movle.w	r3, #4294967295
 80092f6:	f04f 0800 	mov.w	r8, #0
 80092fa:	bfcf      	iteee	gt
 80092fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009300:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009304:	fa03 f202 	lslle.w	r2, r3, r2
 8009308:	ea02 0901 	andle.w	r9, r2, r1
 800930c:	2200      	movs	r2, #0
 800930e:	2300      	movs	r3, #0
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	f7f7 fb48 	bl	80009a8 <__aeabi_dcmpeq>
 8009318:	2800      	cmp	r0, #0
 800931a:	d1a1      	bne.n	8009260 <_strtod_l+0x558>
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	465a      	mov	r2, fp
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	4650      	mov	r0, sl
 8009324:	4623      	mov	r3, r4
 8009326:	9908      	ldr	r1, [sp, #32]
 8009328:	f001 fe1c 	bl	800af64 <__s2b>
 800932c:	9008      	str	r0, [sp, #32]
 800932e:	2800      	cmp	r0, #0
 8009330:	f43f af21 	beq.w	8009176 <_strtod_l+0x46e>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	f04f 0b00 	mov.w	fp, #0
 800933a:	1b5d      	subs	r5, r3, r5
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	f8cd b010 	str.w	fp, [sp, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	bfb4      	ite	lt
 8009346:	462b      	movlt	r3, r5
 8009348:	2300      	movge	r3, #0
 800934a:	930e      	str	r3, [sp, #56]	; 0x38
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009352:	9314      	str	r3, [sp, #80]	; 0x50
 8009354:	9b08      	ldr	r3, [sp, #32]
 8009356:	4650      	mov	r0, sl
 8009358:	6859      	ldr	r1, [r3, #4]
 800935a:	f001 fd5b 	bl	800ae14 <_Balloc>
 800935e:	9006      	str	r0, [sp, #24]
 8009360:	2800      	cmp	r0, #0
 8009362:	f43f af10 	beq.w	8009186 <_strtod_l+0x47e>
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	300c      	adds	r0, #12
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	f103 010c 	add.w	r1, r3, #12
 8009370:	3202      	adds	r2, #2
 8009372:	0092      	lsls	r2, r2, #2
 8009374:	f001 fd40 	bl	800adf8 <memcpy>
 8009378:	ab1c      	add	r3, sp, #112	; 0x70
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	ab1b      	add	r3, sp, #108	; 0x6c
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	4642      	mov	r2, r8
 8009382:	464b      	mov	r3, r9
 8009384:	4650      	mov	r0, sl
 8009386:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800938a:	f002 f92d 	bl	800b5e8 <__d2b>
 800938e:	901a      	str	r0, [sp, #104]	; 0x68
 8009390:	2800      	cmp	r0, #0
 8009392:	f43f aef8 	beq.w	8009186 <_strtod_l+0x47e>
 8009396:	2101      	movs	r1, #1
 8009398:	4650      	mov	r0, sl
 800939a:	f001 fe7b 	bl	800b094 <__i2b>
 800939e:	4603      	mov	r3, r0
 80093a0:	9004      	str	r0, [sp, #16]
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f43f aeef 	beq.w	8009186 <_strtod_l+0x47e>
 80093a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80093aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	bfab      	itete	ge
 80093b0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80093b2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80093b4:	18ee      	addge	r6, r5, r3
 80093b6:	1b5c      	sublt	r4, r3, r5
 80093b8:	9b05      	ldr	r3, [sp, #20]
 80093ba:	bfa8      	it	ge
 80093bc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80093be:	eba5 0503 	sub.w	r5, r5, r3
 80093c2:	4415      	add	r5, r2
 80093c4:	4b6e      	ldr	r3, [pc, #440]	; (8009580 <_strtod_l+0x878>)
 80093c6:	f105 35ff 	add.w	r5, r5, #4294967295
 80093ca:	bfb8      	it	lt
 80093cc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80093ce:	429d      	cmp	r5, r3
 80093d0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80093d4:	f280 80c4 	bge.w	8009560 <_strtod_l+0x858>
 80093d8:	1b5b      	subs	r3, r3, r5
 80093da:	2b1f      	cmp	r3, #31
 80093dc:	f04f 0701 	mov.w	r7, #1
 80093e0:	eba2 0203 	sub.w	r2, r2, r3
 80093e4:	f300 80b1 	bgt.w	800954a <_strtod_l+0x842>
 80093e8:	2500      	movs	r5, #0
 80093ea:	fa07 f303 	lsl.w	r3, r7, r3
 80093ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80093f0:	18b7      	adds	r7, r6, r2
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	42be      	cmp	r6, r7
 80093f6:	4414      	add	r4, r2
 80093f8:	441c      	add	r4, r3
 80093fa:	4633      	mov	r3, r6
 80093fc:	bfa8      	it	ge
 80093fe:	463b      	movge	r3, r7
 8009400:	42a3      	cmp	r3, r4
 8009402:	bfa8      	it	ge
 8009404:	4623      	movge	r3, r4
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfc2      	ittt	gt
 800940a:	1aff      	subgt	r7, r7, r3
 800940c:	1ae4      	subgt	r4, r4, r3
 800940e:	1af6      	subgt	r6, r6, r3
 8009410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009412:	2b00      	cmp	r3, #0
 8009414:	dd17      	ble.n	8009446 <_strtod_l+0x73e>
 8009416:	461a      	mov	r2, r3
 8009418:	4650      	mov	r0, sl
 800941a:	9904      	ldr	r1, [sp, #16]
 800941c:	f001 fef8 	bl	800b210 <__pow5mult>
 8009420:	9004      	str	r0, [sp, #16]
 8009422:	2800      	cmp	r0, #0
 8009424:	f43f aeaf 	beq.w	8009186 <_strtod_l+0x47e>
 8009428:	4601      	mov	r1, r0
 800942a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800942c:	4650      	mov	r0, sl
 800942e:	f001 fe47 	bl	800b0c0 <__multiply>
 8009432:	9009      	str	r0, [sp, #36]	; 0x24
 8009434:	2800      	cmp	r0, #0
 8009436:	f43f aea6 	beq.w	8009186 <_strtod_l+0x47e>
 800943a:	4650      	mov	r0, sl
 800943c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800943e:	f001 fd29 	bl	800ae94 <_Bfree>
 8009442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009444:	931a      	str	r3, [sp, #104]	; 0x68
 8009446:	2f00      	cmp	r7, #0
 8009448:	f300 808e 	bgt.w	8009568 <_strtod_l+0x860>
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	2b00      	cmp	r3, #0
 8009450:	dd08      	ble.n	8009464 <_strtod_l+0x75c>
 8009452:	4650      	mov	r0, sl
 8009454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009456:	9906      	ldr	r1, [sp, #24]
 8009458:	f001 feda 	bl	800b210 <__pow5mult>
 800945c:	9006      	str	r0, [sp, #24]
 800945e:	2800      	cmp	r0, #0
 8009460:	f43f ae91 	beq.w	8009186 <_strtod_l+0x47e>
 8009464:	2c00      	cmp	r4, #0
 8009466:	dd08      	ble.n	800947a <_strtod_l+0x772>
 8009468:	4622      	mov	r2, r4
 800946a:	4650      	mov	r0, sl
 800946c:	9906      	ldr	r1, [sp, #24]
 800946e:	f001 ff29 	bl	800b2c4 <__lshift>
 8009472:	9006      	str	r0, [sp, #24]
 8009474:	2800      	cmp	r0, #0
 8009476:	f43f ae86 	beq.w	8009186 <_strtod_l+0x47e>
 800947a:	2e00      	cmp	r6, #0
 800947c:	dd08      	ble.n	8009490 <_strtod_l+0x788>
 800947e:	4632      	mov	r2, r6
 8009480:	4650      	mov	r0, sl
 8009482:	9904      	ldr	r1, [sp, #16]
 8009484:	f001 ff1e 	bl	800b2c4 <__lshift>
 8009488:	9004      	str	r0, [sp, #16]
 800948a:	2800      	cmp	r0, #0
 800948c:	f43f ae7b 	beq.w	8009186 <_strtod_l+0x47e>
 8009490:	4650      	mov	r0, sl
 8009492:	9a06      	ldr	r2, [sp, #24]
 8009494:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009496:	f001 ffa1 	bl	800b3dc <__mdiff>
 800949a:	4683      	mov	fp, r0
 800949c:	2800      	cmp	r0, #0
 800949e:	f43f ae72 	beq.w	8009186 <_strtod_l+0x47e>
 80094a2:	2400      	movs	r4, #0
 80094a4:	68c3      	ldr	r3, [r0, #12]
 80094a6:	9904      	ldr	r1, [sp, #16]
 80094a8:	60c4      	str	r4, [r0, #12]
 80094aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ac:	f001 ff7a 	bl	800b3a4 <__mcmp>
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	da6b      	bge.n	800958c <_strtod_l+0x884>
 80094b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b6:	ea53 0308 	orrs.w	r3, r3, r8
 80094ba:	f040 8091 	bne.w	80095e0 <_strtod_l+0x8d8>
 80094be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f040 808c 	bne.w	80095e0 <_strtod_l+0x8d8>
 80094c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094cc:	0d1b      	lsrs	r3, r3, #20
 80094ce:	051b      	lsls	r3, r3, #20
 80094d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80094d4:	f240 8084 	bls.w	80095e0 <_strtod_l+0x8d8>
 80094d8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80094dc:	b91b      	cbnz	r3, 80094e6 <_strtod_l+0x7de>
 80094de:	f8db 3010 	ldr.w	r3, [fp, #16]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	dd7c      	ble.n	80095e0 <_strtod_l+0x8d8>
 80094e6:	4659      	mov	r1, fp
 80094e8:	2201      	movs	r2, #1
 80094ea:	4650      	mov	r0, sl
 80094ec:	f001 feea 	bl	800b2c4 <__lshift>
 80094f0:	9904      	ldr	r1, [sp, #16]
 80094f2:	4683      	mov	fp, r0
 80094f4:	f001 ff56 	bl	800b3a4 <__mcmp>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	dd71      	ble.n	80095e0 <_strtod_l+0x8d8>
 80094fc:	9905      	ldr	r1, [sp, #20]
 80094fe:	464b      	mov	r3, r9
 8009500:	4a20      	ldr	r2, [pc, #128]	; (8009584 <_strtod_l+0x87c>)
 8009502:	2900      	cmp	r1, #0
 8009504:	f000 808c 	beq.w	8009620 <_strtod_l+0x918>
 8009508:	ea02 0109 	and.w	r1, r2, r9
 800950c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009510:	f300 8086 	bgt.w	8009620 <_strtod_l+0x918>
 8009514:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009518:	f77f aeaa 	ble.w	8009270 <_strtod_l+0x568>
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	4b19      	ldr	r3, [pc, #100]	; (8009588 <_strtod_l+0x880>)
 8009522:	2200      	movs	r2, #0
 8009524:	f7f6 ffd8 	bl	80004d8 <__aeabi_dmul>
 8009528:	460b      	mov	r3, r1
 800952a:	4303      	orrs	r3, r0
 800952c:	bf08      	it	eq
 800952e:	2322      	moveq	r3, #34	; 0x22
 8009530:	4680      	mov	r8, r0
 8009532:	4689      	mov	r9, r1
 8009534:	bf08      	it	eq
 8009536:	f8ca 3000 	streq.w	r3, [sl]
 800953a:	e62f      	b.n	800919c <_strtod_l+0x494>
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	ea03 0808 	and.w	r8, r3, r8
 8009548:	e6e0      	b.n	800930c <_strtod_l+0x604>
 800954a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800954e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009552:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009556:	35e2      	adds	r5, #226	; 0xe2
 8009558:	fa07 f505 	lsl.w	r5, r7, r5
 800955c:	970f      	str	r7, [sp, #60]	; 0x3c
 800955e:	e747      	b.n	80093f0 <_strtod_l+0x6e8>
 8009560:	2301      	movs	r3, #1
 8009562:	2500      	movs	r5, #0
 8009564:	930f      	str	r3, [sp, #60]	; 0x3c
 8009566:	e743      	b.n	80093f0 <_strtod_l+0x6e8>
 8009568:	463a      	mov	r2, r7
 800956a:	4650      	mov	r0, sl
 800956c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800956e:	f001 fea9 	bl	800b2c4 <__lshift>
 8009572:	901a      	str	r0, [sp, #104]	; 0x68
 8009574:	2800      	cmp	r0, #0
 8009576:	f47f af69 	bne.w	800944c <_strtod_l+0x744>
 800957a:	e604      	b.n	8009186 <_strtod_l+0x47e>
 800957c:	0800d0c0 	.word	0x0800d0c0
 8009580:	fffffc02 	.word	0xfffffc02
 8009584:	7ff00000 	.word	0x7ff00000
 8009588:	39500000 	.word	0x39500000
 800958c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009590:	d165      	bne.n	800965e <_strtod_l+0x956>
 8009592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009598:	b35a      	cbz	r2, 80095f2 <_strtod_l+0x8ea>
 800959a:	4a99      	ldr	r2, [pc, #612]	; (8009800 <_strtod_l+0xaf8>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d12b      	bne.n	80095f8 <_strtod_l+0x8f0>
 80095a0:	9b05      	ldr	r3, [sp, #20]
 80095a2:	4641      	mov	r1, r8
 80095a4:	b303      	cbz	r3, 80095e8 <_strtod_l+0x8e0>
 80095a6:	464a      	mov	r2, r9
 80095a8:	4b96      	ldr	r3, [pc, #600]	; (8009804 <_strtod_l+0xafc>)
 80095aa:	4013      	ands	r3, r2
 80095ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095b0:	f04f 32ff 	mov.w	r2, #4294967295
 80095b4:	d81b      	bhi.n	80095ee <_strtod_l+0x8e6>
 80095b6:	0d1b      	lsrs	r3, r3, #20
 80095b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095bc:	fa02 f303 	lsl.w	r3, r2, r3
 80095c0:	4299      	cmp	r1, r3
 80095c2:	d119      	bne.n	80095f8 <_strtod_l+0x8f0>
 80095c4:	4b90      	ldr	r3, [pc, #576]	; (8009808 <_strtod_l+0xb00>)
 80095c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d102      	bne.n	80095d2 <_strtod_l+0x8ca>
 80095cc:	3101      	adds	r1, #1
 80095ce:	f43f adda 	beq.w	8009186 <_strtod_l+0x47e>
 80095d2:	f04f 0800 	mov.w	r8, #0
 80095d6:	4b8b      	ldr	r3, [pc, #556]	; (8009804 <_strtod_l+0xafc>)
 80095d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095da:	401a      	ands	r2, r3
 80095dc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80095e0:	9b05      	ldr	r3, [sp, #20]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d19a      	bne.n	800951c <_strtod_l+0x814>
 80095e6:	e5d9      	b.n	800919c <_strtod_l+0x494>
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ec:	e7e8      	b.n	80095c0 <_strtod_l+0x8b8>
 80095ee:	4613      	mov	r3, r2
 80095f0:	e7e6      	b.n	80095c0 <_strtod_l+0x8b8>
 80095f2:	ea53 0308 	orrs.w	r3, r3, r8
 80095f6:	d081      	beq.n	80094fc <_strtod_l+0x7f4>
 80095f8:	b1e5      	cbz	r5, 8009634 <_strtod_l+0x92c>
 80095fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fc:	421d      	tst	r5, r3
 80095fe:	d0ef      	beq.n	80095e0 <_strtod_l+0x8d8>
 8009600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009602:	4640      	mov	r0, r8
 8009604:	4649      	mov	r1, r9
 8009606:	9a05      	ldr	r2, [sp, #20]
 8009608:	b1c3      	cbz	r3, 800963c <_strtod_l+0x934>
 800960a:	f7ff fb5b 	bl	8008cc4 <sulp>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009616:	f7f6 fda9 	bl	800016c <__adddf3>
 800961a:	4680      	mov	r8, r0
 800961c:	4689      	mov	r9, r1
 800961e:	e7df      	b.n	80095e0 <_strtod_l+0x8d8>
 8009620:	4013      	ands	r3, r2
 8009622:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009626:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800962a:	f04f 38ff 	mov.w	r8, #4294967295
 800962e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009632:	e7d5      	b.n	80095e0 <_strtod_l+0x8d8>
 8009634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009636:	ea13 0f08 	tst.w	r3, r8
 800963a:	e7e0      	b.n	80095fe <_strtod_l+0x8f6>
 800963c:	f7ff fb42 	bl	8008cc4 <sulp>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009648:	f7f6 fd8e 	bl	8000168 <__aeabi_dsub>
 800964c:	2200      	movs	r2, #0
 800964e:	2300      	movs	r3, #0
 8009650:	4680      	mov	r8, r0
 8009652:	4689      	mov	r9, r1
 8009654:	f7f7 f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 8009658:	2800      	cmp	r0, #0
 800965a:	d0c1      	beq.n	80095e0 <_strtod_l+0x8d8>
 800965c:	e608      	b.n	8009270 <_strtod_l+0x568>
 800965e:	4658      	mov	r0, fp
 8009660:	9904      	ldr	r1, [sp, #16]
 8009662:	f002 f81d 	bl	800b6a0 <__ratio>
 8009666:	2200      	movs	r2, #0
 8009668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800966c:	4606      	mov	r6, r0
 800966e:	460f      	mov	r7, r1
 8009670:	f7f7 f9ae 	bl	80009d0 <__aeabi_dcmple>
 8009674:	2800      	cmp	r0, #0
 8009676:	d070      	beq.n	800975a <_strtod_l+0xa52>
 8009678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800967a:	2b00      	cmp	r3, #0
 800967c:	d042      	beq.n	8009704 <_strtod_l+0x9fc>
 800967e:	2600      	movs	r6, #0
 8009680:	4f62      	ldr	r7, [pc, #392]	; (800980c <_strtod_l+0xb04>)
 8009682:	4d62      	ldr	r5, [pc, #392]	; (800980c <_strtod_l+0xb04>)
 8009684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800968a:	0d1b      	lsrs	r3, r3, #20
 800968c:	051b      	lsls	r3, r3, #20
 800968e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009692:	4b5f      	ldr	r3, [pc, #380]	; (8009810 <_strtod_l+0xb08>)
 8009694:	429a      	cmp	r2, r3
 8009696:	f040 80c3 	bne.w	8009820 <_strtod_l+0xb18>
 800969a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969c:	4640      	mov	r0, r8
 800969e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80096a2:	4649      	mov	r1, r9
 80096a4:	f001 ff26 	bl	800b4f4 <__ulp>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4630      	mov	r0, r6
 80096ae:	4639      	mov	r1, r7
 80096b0:	f7f6 ff12 	bl	80004d8 <__aeabi_dmul>
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	f7f6 fd58 	bl	800016c <__adddf3>
 80096bc:	460b      	mov	r3, r1
 80096be:	4951      	ldr	r1, [pc, #324]	; (8009804 <_strtod_l+0xafc>)
 80096c0:	4a54      	ldr	r2, [pc, #336]	; (8009814 <_strtod_l+0xb0c>)
 80096c2:	4019      	ands	r1, r3
 80096c4:	4291      	cmp	r1, r2
 80096c6:	4680      	mov	r8, r0
 80096c8:	d95d      	bls.n	8009786 <_strtod_l+0xa7e>
 80096ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096cc:	4b4e      	ldr	r3, [pc, #312]	; (8009808 <_strtod_l+0xb00>)
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d103      	bne.n	80096da <_strtod_l+0x9d2>
 80096d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d4:	3301      	adds	r3, #1
 80096d6:	f43f ad56 	beq.w	8009186 <_strtod_l+0x47e>
 80096da:	f04f 38ff 	mov.w	r8, #4294967295
 80096de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009808 <_strtod_l+0xb00>
 80096e2:	4650      	mov	r0, sl
 80096e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096e6:	f001 fbd5 	bl	800ae94 <_Bfree>
 80096ea:	4650      	mov	r0, sl
 80096ec:	9906      	ldr	r1, [sp, #24]
 80096ee:	f001 fbd1 	bl	800ae94 <_Bfree>
 80096f2:	4650      	mov	r0, sl
 80096f4:	9904      	ldr	r1, [sp, #16]
 80096f6:	f001 fbcd 	bl	800ae94 <_Bfree>
 80096fa:	4659      	mov	r1, fp
 80096fc:	4650      	mov	r0, sl
 80096fe:	f001 fbc9 	bl	800ae94 <_Bfree>
 8009702:	e627      	b.n	8009354 <_strtod_l+0x64c>
 8009704:	f1b8 0f00 	cmp.w	r8, #0
 8009708:	d119      	bne.n	800973e <_strtod_l+0xa36>
 800970a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009710:	b9e3      	cbnz	r3, 800974c <_strtod_l+0xa44>
 8009712:	2200      	movs	r2, #0
 8009714:	4630      	mov	r0, r6
 8009716:	4639      	mov	r1, r7
 8009718:	4b3c      	ldr	r3, [pc, #240]	; (800980c <_strtod_l+0xb04>)
 800971a:	f7f7 f94f 	bl	80009bc <__aeabi_dcmplt>
 800971e:	b9c8      	cbnz	r0, 8009754 <_strtod_l+0xa4c>
 8009720:	2200      	movs	r2, #0
 8009722:	4630      	mov	r0, r6
 8009724:	4639      	mov	r1, r7
 8009726:	4b3c      	ldr	r3, [pc, #240]	; (8009818 <_strtod_l+0xb10>)
 8009728:	f7f6 fed6 	bl	80004d8 <__aeabi_dmul>
 800972c:	4604      	mov	r4, r0
 800972e:	460d      	mov	r5, r1
 8009730:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009734:	9416      	str	r4, [sp, #88]	; 0x58
 8009736:	9317      	str	r3, [sp, #92]	; 0x5c
 8009738:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800973c:	e7a2      	b.n	8009684 <_strtod_l+0x97c>
 800973e:	f1b8 0f01 	cmp.w	r8, #1
 8009742:	d103      	bne.n	800974c <_strtod_l+0xa44>
 8009744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	f43f ad92 	beq.w	8009270 <_strtod_l+0x568>
 800974c:	2600      	movs	r6, #0
 800974e:	2400      	movs	r4, #0
 8009750:	4f32      	ldr	r7, [pc, #200]	; (800981c <_strtod_l+0xb14>)
 8009752:	e796      	b.n	8009682 <_strtod_l+0x97a>
 8009754:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009756:	4d30      	ldr	r5, [pc, #192]	; (8009818 <_strtod_l+0xb10>)
 8009758:	e7ea      	b.n	8009730 <_strtod_l+0xa28>
 800975a:	4b2f      	ldr	r3, [pc, #188]	; (8009818 <_strtod_l+0xb10>)
 800975c:	2200      	movs	r2, #0
 800975e:	4630      	mov	r0, r6
 8009760:	4639      	mov	r1, r7
 8009762:	f7f6 feb9 	bl	80004d8 <__aeabi_dmul>
 8009766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	b933      	cbnz	r3, 800977c <_strtod_l+0xa74>
 800976e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009772:	9010      	str	r0, [sp, #64]	; 0x40
 8009774:	9311      	str	r3, [sp, #68]	; 0x44
 8009776:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800977a:	e783      	b.n	8009684 <_strtod_l+0x97c>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009784:	e7f7      	b.n	8009776 <_strtod_l+0xa6e>
 8009786:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800978a:	9b05      	ldr	r3, [sp, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1a8      	bne.n	80096e2 <_strtod_l+0x9da>
 8009790:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009796:	0d1b      	lsrs	r3, r3, #20
 8009798:	051b      	lsls	r3, r3, #20
 800979a:	429a      	cmp	r2, r3
 800979c:	d1a1      	bne.n	80096e2 <_strtod_l+0x9da>
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f7 fcfb 	bl	800119c <__aeabi_d2lz>
 80097a6:	f7f6 fe69 	bl	800047c <__aeabi_l2d>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4620      	mov	r0, r4
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7f6 fcd9 	bl	8000168 <__aeabi_dsub>
 80097b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097bc:	ea43 0308 	orr.w	r3, r3, r8
 80097c0:	4313      	orrs	r3, r2
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	d066      	beq.n	8009896 <_strtod_l+0xb8e>
 80097c8:	a309      	add	r3, pc, #36	; (adr r3, 80097f0 <_strtod_l+0xae8>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f7f7 f8f5 	bl	80009bc <__aeabi_dcmplt>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f47f ace2 	bne.w	800919c <_strtod_l+0x494>
 80097d8:	a307      	add	r3, pc, #28	; (adr r3, 80097f8 <_strtod_l+0xaf0>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f909 	bl	80009f8 <__aeabi_dcmpgt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f43f af7b 	beq.w	80096e2 <_strtod_l+0x9da>
 80097ec:	e4d6      	b.n	800919c <_strtod_l+0x494>
 80097ee:	bf00      	nop
 80097f0:	94a03595 	.word	0x94a03595
 80097f4:	3fdfffff 	.word	0x3fdfffff
 80097f8:	35afe535 	.word	0x35afe535
 80097fc:	3fe00000 	.word	0x3fe00000
 8009800:	000fffff 	.word	0x000fffff
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	7fefffff 	.word	0x7fefffff
 800980c:	3ff00000 	.word	0x3ff00000
 8009810:	7fe00000 	.word	0x7fe00000
 8009814:	7c9fffff 	.word	0x7c9fffff
 8009818:	3fe00000 	.word	0x3fe00000
 800981c:	bff00000 	.word	0xbff00000
 8009820:	9b05      	ldr	r3, [sp, #20]
 8009822:	b313      	cbz	r3, 800986a <_strtod_l+0xb62>
 8009824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009826:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800982a:	d81e      	bhi.n	800986a <_strtod_l+0xb62>
 800982c:	a326      	add	r3, pc, #152	; (adr r3, 80098c8 <_strtod_l+0xbc0>)
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	f7f7 f8cb 	bl	80009d0 <__aeabi_dcmple>
 800983a:	b190      	cbz	r0, 8009862 <_strtod_l+0xb5a>
 800983c:	4629      	mov	r1, r5
 800983e:	4620      	mov	r0, r4
 8009840:	f7f7 f922 	bl	8000a88 <__aeabi_d2uiz>
 8009844:	2801      	cmp	r0, #1
 8009846:	bf38      	it	cc
 8009848:	2001      	movcc	r0, #1
 800984a:	f7f6 fdcb 	bl	80003e4 <__aeabi_ui2d>
 800984e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009850:	4604      	mov	r4, r0
 8009852:	460d      	mov	r5, r1
 8009854:	b9d3      	cbnz	r3, 800988c <_strtod_l+0xb84>
 8009856:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800985a:	9012      	str	r0, [sp, #72]	; 0x48
 800985c:	9313      	str	r3, [sp, #76]	; 0x4c
 800985e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009864:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009868:	1a9f      	subs	r7, r3, r2
 800986a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800986e:	f001 fe41 	bl	800b4f4 <__ulp>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4630      	mov	r0, r6
 8009878:	4639      	mov	r1, r7
 800987a:	f7f6 fe2d 	bl	80004d8 <__aeabi_dmul>
 800987e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009882:	f7f6 fc73 	bl	800016c <__adddf3>
 8009886:	4680      	mov	r8, r0
 8009888:	4689      	mov	r9, r1
 800988a:	e77e      	b.n	800978a <_strtod_l+0xa82>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009894:	e7e3      	b.n	800985e <_strtod_l+0xb56>
 8009896:	a30e      	add	r3, pc, #56	; (adr r3, 80098d0 <_strtod_l+0xbc8>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f7 f88e 	bl	80009bc <__aeabi_dcmplt>
 80098a0:	e7a1      	b.n	80097e6 <_strtod_l+0xade>
 80098a2:	2300      	movs	r3, #0
 80098a4:	930a      	str	r3, [sp, #40]	; 0x28
 80098a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	f7ff ba71 	b.w	8008d92 <_strtod_l+0x8a>
 80098b0:	2a65      	cmp	r2, #101	; 0x65
 80098b2:	f43f ab63 	beq.w	8008f7c <_strtod_l+0x274>
 80098b6:	2a45      	cmp	r2, #69	; 0x45
 80098b8:	f43f ab60 	beq.w	8008f7c <_strtod_l+0x274>
 80098bc:	2301      	movs	r3, #1
 80098be:	f7ff bb95 	b.w	8008fec <_strtod_l+0x2e4>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	ffc00000 	.word	0xffc00000
 80098cc:	41dfffff 	.word	0x41dfffff
 80098d0:	94a03595 	.word	0x94a03595
 80098d4:	3fcfffff 	.word	0x3fcfffff

080098d8 <_strtod_r>:
 80098d8:	4b01      	ldr	r3, [pc, #4]	; (80098e0 <_strtod_r+0x8>)
 80098da:	f7ff ba15 	b.w	8008d08 <_strtod_l>
 80098de:	bf00      	nop
 80098e0:	2000009c 	.word	0x2000009c

080098e4 <_strtol_l.constprop.0>:
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ea:	4680      	mov	r8, r0
 80098ec:	d001      	beq.n	80098f2 <_strtol_l.constprop.0+0xe>
 80098ee:	2b24      	cmp	r3, #36	; 0x24
 80098f0:	d906      	bls.n	8009900 <_strtol_l.constprop.0+0x1c>
 80098f2:	f7fe fb23 	bl	8007f3c <__errno>
 80098f6:	2316      	movs	r3, #22
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	2000      	movs	r0, #0
 80098fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009900:	460d      	mov	r5, r1
 8009902:	4f35      	ldr	r7, [pc, #212]	; (80099d8 <_strtol_l.constprop.0+0xf4>)
 8009904:	4628      	mov	r0, r5
 8009906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800990a:	5de6      	ldrb	r6, [r4, r7]
 800990c:	f016 0608 	ands.w	r6, r6, #8
 8009910:	d1f8      	bne.n	8009904 <_strtol_l.constprop.0+0x20>
 8009912:	2c2d      	cmp	r4, #45	; 0x2d
 8009914:	d12f      	bne.n	8009976 <_strtol_l.constprop.0+0x92>
 8009916:	2601      	movs	r6, #1
 8009918:	782c      	ldrb	r4, [r5, #0]
 800991a:	1c85      	adds	r5, r0, #2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d057      	beq.n	80099d0 <_strtol_l.constprop.0+0xec>
 8009920:	2b10      	cmp	r3, #16
 8009922:	d109      	bne.n	8009938 <_strtol_l.constprop.0+0x54>
 8009924:	2c30      	cmp	r4, #48	; 0x30
 8009926:	d107      	bne.n	8009938 <_strtol_l.constprop.0+0x54>
 8009928:	7828      	ldrb	r0, [r5, #0]
 800992a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800992e:	2858      	cmp	r0, #88	; 0x58
 8009930:	d149      	bne.n	80099c6 <_strtol_l.constprop.0+0xe2>
 8009932:	2310      	movs	r3, #16
 8009934:	786c      	ldrb	r4, [r5, #1]
 8009936:	3502      	adds	r5, #2
 8009938:	2700      	movs	r7, #0
 800993a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800993e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009942:	fbbe f9f3 	udiv	r9, lr, r3
 8009946:	4638      	mov	r0, r7
 8009948:	fb03 ea19 	mls	sl, r3, r9, lr
 800994c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009950:	f1bc 0f09 	cmp.w	ip, #9
 8009954:	d814      	bhi.n	8009980 <_strtol_l.constprop.0+0x9c>
 8009956:	4664      	mov	r4, ip
 8009958:	42a3      	cmp	r3, r4
 800995a:	dd22      	ble.n	80099a2 <_strtol_l.constprop.0+0xbe>
 800995c:	2f00      	cmp	r7, #0
 800995e:	db1d      	blt.n	800999c <_strtol_l.constprop.0+0xb8>
 8009960:	4581      	cmp	r9, r0
 8009962:	d31b      	bcc.n	800999c <_strtol_l.constprop.0+0xb8>
 8009964:	d101      	bne.n	800996a <_strtol_l.constprop.0+0x86>
 8009966:	45a2      	cmp	sl, r4
 8009968:	db18      	blt.n	800999c <_strtol_l.constprop.0+0xb8>
 800996a:	2701      	movs	r7, #1
 800996c:	fb00 4003 	mla	r0, r0, r3, r4
 8009970:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009974:	e7ea      	b.n	800994c <_strtol_l.constprop.0+0x68>
 8009976:	2c2b      	cmp	r4, #43	; 0x2b
 8009978:	bf04      	itt	eq
 800997a:	782c      	ldrbeq	r4, [r5, #0]
 800997c:	1c85      	addeq	r5, r0, #2
 800997e:	e7cd      	b.n	800991c <_strtol_l.constprop.0+0x38>
 8009980:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009984:	f1bc 0f19 	cmp.w	ip, #25
 8009988:	d801      	bhi.n	800998e <_strtol_l.constprop.0+0xaa>
 800998a:	3c37      	subs	r4, #55	; 0x37
 800998c:	e7e4      	b.n	8009958 <_strtol_l.constprop.0+0x74>
 800998e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009992:	f1bc 0f19 	cmp.w	ip, #25
 8009996:	d804      	bhi.n	80099a2 <_strtol_l.constprop.0+0xbe>
 8009998:	3c57      	subs	r4, #87	; 0x57
 800999a:	e7dd      	b.n	8009958 <_strtol_l.constprop.0+0x74>
 800999c:	f04f 37ff 	mov.w	r7, #4294967295
 80099a0:	e7e6      	b.n	8009970 <_strtol_l.constprop.0+0x8c>
 80099a2:	2f00      	cmp	r7, #0
 80099a4:	da07      	bge.n	80099b6 <_strtol_l.constprop.0+0xd2>
 80099a6:	2322      	movs	r3, #34	; 0x22
 80099a8:	4670      	mov	r0, lr
 80099aa:	f8c8 3000 	str.w	r3, [r8]
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	d0a4      	beq.n	80098fc <_strtol_l.constprop.0+0x18>
 80099b2:	1e69      	subs	r1, r5, #1
 80099b4:	e005      	b.n	80099c2 <_strtol_l.constprop.0+0xde>
 80099b6:	b106      	cbz	r6, 80099ba <_strtol_l.constprop.0+0xd6>
 80099b8:	4240      	negs	r0, r0
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	d09e      	beq.n	80098fc <_strtol_l.constprop.0+0x18>
 80099be:	2f00      	cmp	r7, #0
 80099c0:	d1f7      	bne.n	80099b2 <_strtol_l.constprop.0+0xce>
 80099c2:	6011      	str	r1, [r2, #0]
 80099c4:	e79a      	b.n	80098fc <_strtol_l.constprop.0+0x18>
 80099c6:	2430      	movs	r4, #48	; 0x30
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1b5      	bne.n	8009938 <_strtol_l.constprop.0+0x54>
 80099cc:	2308      	movs	r3, #8
 80099ce:	e7b3      	b.n	8009938 <_strtol_l.constprop.0+0x54>
 80099d0:	2c30      	cmp	r4, #48	; 0x30
 80099d2:	d0a9      	beq.n	8009928 <_strtol_l.constprop.0+0x44>
 80099d4:	230a      	movs	r3, #10
 80099d6:	e7af      	b.n	8009938 <_strtol_l.constprop.0+0x54>
 80099d8:	0800d0e9 	.word	0x0800d0e9

080099dc <_strtol_r>:
 80099dc:	f7ff bf82 	b.w	80098e4 <_strtol_l.constprop.0>

080099e0 <quorem>:
 80099e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	6903      	ldr	r3, [r0, #16]
 80099e6:	690c      	ldr	r4, [r1, #16]
 80099e8:	4607      	mov	r7, r0
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	f2c0 8082 	blt.w	8009af4 <quorem+0x114>
 80099f0:	3c01      	subs	r4, #1
 80099f2:	f100 0514 	add.w	r5, r0, #20
 80099f6:	f101 0814 	add.w	r8, r1, #20
 80099fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a18:	d331      	bcc.n	8009a7e <quorem+0x9e>
 8009a1a:	f04f 0e00 	mov.w	lr, #0
 8009a1e:	4640      	mov	r0, r8
 8009a20:	46ac      	mov	ip, r5
 8009a22:	46f2      	mov	sl, lr
 8009a24:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a28:	b293      	uxth	r3, r2
 8009a2a:	fb06 e303 	mla	r3, r6, r3, lr
 8009a2e:	0c12      	lsrs	r2, r2, #16
 8009a30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	fb06 e202 	mla	r2, r6, r2, lr
 8009a3a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a3e:	f8dc a000 	ldr.w	sl, [ip]
 8009a42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a46:	fa1f fa8a 	uxth.w	sl, sl
 8009a4a:	4453      	add	r3, sl
 8009a4c:	f8dc a000 	ldr.w	sl, [ip]
 8009a50:	b292      	uxth	r2, r2
 8009a52:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a60:	4581      	cmp	r9, r0
 8009a62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a66:	f84c 3b04 	str.w	r3, [ip], #4
 8009a6a:	d2db      	bcs.n	8009a24 <quorem+0x44>
 8009a6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a70:	b92b      	cbnz	r3, 8009a7e <quorem+0x9e>
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	3b04      	subs	r3, #4
 8009a76:	429d      	cmp	r5, r3
 8009a78:	461a      	mov	r2, r3
 8009a7a:	d32f      	bcc.n	8009adc <quorem+0xfc>
 8009a7c:	613c      	str	r4, [r7, #16]
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f001 fc90 	bl	800b3a4 <__mcmp>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	db25      	blt.n	8009ad4 <quorem+0xf4>
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f04f 0c00 	mov.w	ip, #0
 8009a8e:	3601      	adds	r6, #1
 8009a90:	f858 1b04 	ldr.w	r1, [r8], #4
 8009a94:	f8d0 e000 	ldr.w	lr, [r0]
 8009a98:	b28b      	uxth	r3, r1
 8009a9a:	ebac 0303 	sub.w	r3, ip, r3
 8009a9e:	fa1f f28e 	uxth.w	r2, lr
 8009aa2:	4413      	add	r3, r2
 8009aa4:	0c0a      	lsrs	r2, r1, #16
 8009aa6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009aaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ab4:	45c1      	cmp	r9, r8
 8009ab6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009aba:	f840 3b04 	str.w	r3, [r0], #4
 8009abe:	d2e7      	bcs.n	8009a90 <quorem+0xb0>
 8009ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ac4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ac8:	b922      	cbnz	r2, 8009ad4 <quorem+0xf4>
 8009aca:	3b04      	subs	r3, #4
 8009acc:	429d      	cmp	r5, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	d30a      	bcc.n	8009ae8 <quorem+0x108>
 8009ad2:	613c      	str	r4, [r7, #16]
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	b003      	add	sp, #12
 8009ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009adc:	6812      	ldr	r2, [r2, #0]
 8009ade:	3b04      	subs	r3, #4
 8009ae0:	2a00      	cmp	r2, #0
 8009ae2:	d1cb      	bne.n	8009a7c <quorem+0x9c>
 8009ae4:	3c01      	subs	r4, #1
 8009ae6:	e7c6      	b.n	8009a76 <quorem+0x96>
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	3b04      	subs	r3, #4
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	d1f0      	bne.n	8009ad2 <quorem+0xf2>
 8009af0:	3c01      	subs	r4, #1
 8009af2:	e7eb      	b.n	8009acc <quorem+0xec>
 8009af4:	2000      	movs	r0, #0
 8009af6:	e7ee      	b.n	8009ad6 <quorem+0xf6>

08009af8 <_dtoa_r>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	4616      	mov	r6, r2
 8009afe:	461f      	mov	r7, r3
 8009b00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b02:	b099      	sub	sp, #100	; 0x64
 8009b04:	4605      	mov	r5, r0
 8009b06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009b0e:	b974      	cbnz	r4, 8009b2e <_dtoa_r+0x36>
 8009b10:	2010      	movs	r0, #16
 8009b12:	f001 f949 	bl	800ada8 <malloc>
 8009b16:	4602      	mov	r2, r0
 8009b18:	6268      	str	r0, [r5, #36]	; 0x24
 8009b1a:	b920      	cbnz	r0, 8009b26 <_dtoa_r+0x2e>
 8009b1c:	21ea      	movs	r1, #234	; 0xea
 8009b1e:	4ba8      	ldr	r3, [pc, #672]	; (8009dc0 <_dtoa_r+0x2c8>)
 8009b20:	48a8      	ldr	r0, [pc, #672]	; (8009dc4 <_dtoa_r+0x2cc>)
 8009b22:	f002 f8b3 	bl	800bc8c <__assert_func>
 8009b26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b2a:	6004      	str	r4, [r0, #0]
 8009b2c:	60c4      	str	r4, [r0, #12]
 8009b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	b151      	cbz	r1, 8009b4a <_dtoa_r+0x52>
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	2301      	movs	r3, #1
 8009b38:	4093      	lsls	r3, r2
 8009b3a:	604a      	str	r2, [r1, #4]
 8009b3c:	608b      	str	r3, [r1, #8]
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f001 f9a8 	bl	800ae94 <_Bfree>
 8009b44:	2200      	movs	r2, #0
 8009b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	1e3b      	subs	r3, r7, #0
 8009b4c:	bfaf      	iteee	ge
 8009b4e:	2300      	movge	r3, #0
 8009b50:	2201      	movlt	r2, #1
 8009b52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b56:	9305      	strlt	r3, [sp, #20]
 8009b58:	bfa8      	it	ge
 8009b5a:	f8c8 3000 	strge.w	r3, [r8]
 8009b5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009b62:	4b99      	ldr	r3, [pc, #612]	; (8009dc8 <_dtoa_r+0x2d0>)
 8009b64:	bfb8      	it	lt
 8009b66:	f8c8 2000 	strlt.w	r2, [r8]
 8009b6a:	ea33 0309 	bics.w	r3, r3, r9
 8009b6e:	d119      	bne.n	8009ba4 <_dtoa_r+0xac>
 8009b70:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b7c:	4333      	orrs	r3, r6
 8009b7e:	f000 857f 	beq.w	800a680 <_dtoa_r+0xb88>
 8009b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b84:	b953      	cbnz	r3, 8009b9c <_dtoa_r+0xa4>
 8009b86:	4b91      	ldr	r3, [pc, #580]	; (8009dcc <_dtoa_r+0x2d4>)
 8009b88:	e022      	b.n	8009bd0 <_dtoa_r+0xd8>
 8009b8a:	4b91      	ldr	r3, [pc, #580]	; (8009dd0 <_dtoa_r+0x2d8>)
 8009b8c:	9303      	str	r3, [sp, #12]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	9803      	ldr	r0, [sp, #12]
 8009b96:	b019      	add	sp, #100	; 0x64
 8009b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	4b8b      	ldr	r3, [pc, #556]	; (8009dcc <_dtoa_r+0x2d4>)
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	3303      	adds	r3, #3
 8009ba2:	e7f5      	b.n	8009b90 <_dtoa_r+0x98>
 8009ba4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009ba8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f7f6 fef8 	bl	80009a8 <__aeabi_dcmpeq>
 8009bb8:	4680      	mov	r8, r0
 8009bba:	b158      	cbz	r0, 8009bd4 <_dtoa_r+0xdc>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8558 	beq.w	800a67a <_dtoa_r+0xb82>
 8009bca:	4882      	ldr	r0, [pc, #520]	; (8009dd4 <_dtoa_r+0x2dc>)
 8009bcc:	6018      	str	r0, [r3, #0]
 8009bce:	1e43      	subs	r3, r0, #1
 8009bd0:	9303      	str	r3, [sp, #12]
 8009bd2:	e7df      	b.n	8009b94 <_dtoa_r+0x9c>
 8009bd4:	ab16      	add	r3, sp, #88	; 0x58
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	ab17      	add	r3, sp, #92	; 0x5c
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4628      	mov	r0, r5
 8009bde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009be2:	f001 fd01 	bl	800b5e8 <__d2b>
 8009be6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bea:	4683      	mov	fp, r0
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	d07f      	beq.n	8009cf0 <_dtoa_r+0x1f8>
 8009bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bf6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bfe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009c02:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009c06:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4b72      	ldr	r3, [pc, #456]	; (8009dd8 <_dtoa_r+0x2e0>)
 8009c0e:	f7f6 faab 	bl	8000168 <__aeabi_dsub>
 8009c12:	a365      	add	r3, pc, #404	; (adr r3, 8009da8 <_dtoa_r+0x2b0>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f7f6 fc5e 	bl	80004d8 <__aeabi_dmul>
 8009c1c:	a364      	add	r3, pc, #400	; (adr r3, 8009db0 <_dtoa_r+0x2b8>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f7f6 faa3 	bl	800016c <__adddf3>
 8009c26:	4606      	mov	r6, r0
 8009c28:	4620      	mov	r0, r4
 8009c2a:	460f      	mov	r7, r1
 8009c2c:	f7f6 fbea 	bl	8000404 <__aeabi_i2d>
 8009c30:	a361      	add	r3, pc, #388	; (adr r3, 8009db8 <_dtoa_r+0x2c0>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fc4f 	bl	80004d8 <__aeabi_dmul>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4630      	mov	r0, r6
 8009c40:	4639      	mov	r1, r7
 8009c42:	f7f6 fa93 	bl	800016c <__adddf3>
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	f7f6 fef5 	bl	8000a38 <__aeabi_d2iz>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4682      	mov	sl, r0
 8009c52:	2300      	movs	r3, #0
 8009c54:	4630      	mov	r0, r6
 8009c56:	4639      	mov	r1, r7
 8009c58:	f7f6 feb0 	bl	80009bc <__aeabi_dcmplt>
 8009c5c:	b148      	cbz	r0, 8009c72 <_dtoa_r+0x17a>
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f7f6 fbd0 	bl	8000404 <__aeabi_i2d>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	f7f6 fe9e 	bl	80009a8 <__aeabi_dcmpeq>
 8009c6c:	b908      	cbnz	r0, 8009c72 <_dtoa_r+0x17a>
 8009c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c72:	f1ba 0f16 	cmp.w	sl, #22
 8009c76:	d858      	bhi.n	8009d2a <_dtoa_r+0x232>
 8009c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c7c:	4b57      	ldr	r3, [pc, #348]	; (8009ddc <_dtoa_r+0x2e4>)
 8009c7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f7f6 fe99 	bl	80009bc <__aeabi_dcmplt>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d04f      	beq.n	8009d2e <_dtoa_r+0x236>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c94:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c98:	1b1c      	subs	r4, r3, r4
 8009c9a:	1e63      	subs	r3, r4, #1
 8009c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c9e:	bf49      	itett	mi
 8009ca0:	f1c4 0301 	rsbmi	r3, r4, #1
 8009ca4:	2300      	movpl	r3, #0
 8009ca6:	9306      	strmi	r3, [sp, #24]
 8009ca8:	2300      	movmi	r3, #0
 8009caa:	bf54      	ite	pl
 8009cac:	9306      	strpl	r3, [sp, #24]
 8009cae:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009cb0:	f1ba 0f00 	cmp.w	sl, #0
 8009cb4:	db3d      	blt.n	8009d32 <_dtoa_r+0x23a>
 8009cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009cbc:	4453      	add	r3, sl
 8009cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cc6:	2b09      	cmp	r3, #9
 8009cc8:	f200 808c 	bhi.w	8009de4 <_dtoa_r+0x2ec>
 8009ccc:	2b05      	cmp	r3, #5
 8009cce:	bfc4      	itt	gt
 8009cd0:	3b04      	subgt	r3, #4
 8009cd2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009cd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cd6:	bfc8      	it	gt
 8009cd8:	2400      	movgt	r4, #0
 8009cda:	f1a3 0302 	sub.w	r3, r3, #2
 8009cde:	bfd8      	it	le
 8009ce0:	2401      	movle	r4, #1
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	f200 808a 	bhi.w	8009dfc <_dtoa_r+0x304>
 8009ce8:	e8df f003 	tbb	[pc, r3]
 8009cec:	5b4d4f2d 	.word	0x5b4d4f2d
 8009cf0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009cf4:	441c      	add	r4, r3
 8009cf6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	bfc3      	ittte	gt
 8009cfe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d02:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009d06:	fa09 f303 	lslgt.w	r3, r9, r3
 8009d0a:	f1c3 0320 	rsble	r3, r3, #32
 8009d0e:	bfc6      	itte	gt
 8009d10:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d14:	4318      	orrgt	r0, r3
 8009d16:	fa06 f003 	lslle.w	r0, r6, r3
 8009d1a:	f7f6 fb63 	bl	80003e4 <__aeabi_ui2d>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009d24:	3c01      	subs	r4, #1
 8009d26:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d28:	e76f      	b.n	8009c0a <_dtoa_r+0x112>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e7b2      	b.n	8009c94 <_dtoa_r+0x19c>
 8009d2e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d30:	e7b1      	b.n	8009c96 <_dtoa_r+0x19e>
 8009d32:	9b06      	ldr	r3, [sp, #24]
 8009d34:	eba3 030a 	sub.w	r3, r3, sl
 8009d38:	9306      	str	r3, [sp, #24]
 8009d3a:	f1ca 0300 	rsb	r3, sl, #0
 8009d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d40:	2300      	movs	r3, #0
 8009d42:	930e      	str	r3, [sp, #56]	; 0x38
 8009d44:	e7be      	b.n	8009cc4 <_dtoa_r+0x1cc>
 8009d46:	2300      	movs	r3, #0
 8009d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dc58      	bgt.n	8009e02 <_dtoa_r+0x30a>
 8009d50:	f04f 0901 	mov.w	r9, #1
 8009d54:	464b      	mov	r3, r9
 8009d56:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d5a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009d62:	6042      	str	r2, [r0, #4]
 8009d64:	2204      	movs	r2, #4
 8009d66:	f102 0614 	add.w	r6, r2, #20
 8009d6a:	429e      	cmp	r6, r3
 8009d6c:	6841      	ldr	r1, [r0, #4]
 8009d6e:	d94e      	bls.n	8009e0e <_dtoa_r+0x316>
 8009d70:	4628      	mov	r0, r5
 8009d72:	f001 f84f 	bl	800ae14 <_Balloc>
 8009d76:	9003      	str	r0, [sp, #12]
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d14c      	bne.n	8009e16 <_dtoa_r+0x31e>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d82:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <_dtoa_r+0x2e8>)
 8009d84:	e6cc      	b.n	8009b20 <_dtoa_r+0x28>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e7de      	b.n	8009d48 <_dtoa_r+0x250>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d90:	eb0a 0903 	add.w	r9, sl, r3
 8009d94:	f109 0301 	add.w	r3, r9, #1
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	9308      	str	r3, [sp, #32]
 8009d9c:	bfb8      	it	lt
 8009d9e:	2301      	movlt	r3, #1
 8009da0:	e7dd      	b.n	8009d5e <_dtoa_r+0x266>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e7f2      	b.n	8009d8c <_dtoa_r+0x294>
 8009da6:	bf00      	nop
 8009da8:	636f4361 	.word	0x636f4361
 8009dac:	3fd287a7 	.word	0x3fd287a7
 8009db0:	8b60c8b3 	.word	0x8b60c8b3
 8009db4:	3fc68a28 	.word	0x3fc68a28
 8009db8:	509f79fb 	.word	0x509f79fb
 8009dbc:	3fd34413 	.word	0x3fd34413
 8009dc0:	0800d1f6 	.word	0x0800d1f6
 8009dc4:	0800d20d 	.word	0x0800d20d
 8009dc8:	7ff00000 	.word	0x7ff00000
 8009dcc:	0800d1f2 	.word	0x0800d1f2
 8009dd0:	0800d1e9 	.word	0x0800d1e9
 8009dd4:	0800d069 	.word	0x0800d069
 8009dd8:	3ff80000 	.word	0x3ff80000
 8009ddc:	0800d378 	.word	0x0800d378
 8009de0:	0800d268 	.word	0x0800d268
 8009de4:	2401      	movs	r4, #1
 8009de6:	2300      	movs	r3, #0
 8009de8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009dea:	9322      	str	r3, [sp, #136]	; 0x88
 8009dec:	f04f 39ff 	mov.w	r9, #4294967295
 8009df0:	2200      	movs	r2, #0
 8009df2:	2312      	movs	r3, #18
 8009df4:	f8cd 9020 	str.w	r9, [sp, #32]
 8009df8:	9223      	str	r2, [sp, #140]	; 0x8c
 8009dfa:	e7b0      	b.n	8009d5e <_dtoa_r+0x266>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e00:	e7f4      	b.n	8009dec <_dtoa_r+0x2f4>
 8009e02:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009e06:	464b      	mov	r3, r9
 8009e08:	f8cd 9020 	str.w	r9, [sp, #32]
 8009e0c:	e7a7      	b.n	8009d5e <_dtoa_r+0x266>
 8009e0e:	3101      	adds	r1, #1
 8009e10:	6041      	str	r1, [r0, #4]
 8009e12:	0052      	lsls	r2, r2, #1
 8009e14:	e7a7      	b.n	8009d66 <_dtoa_r+0x26e>
 8009e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e18:	9a03      	ldr	r2, [sp, #12]
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	9b08      	ldr	r3, [sp, #32]
 8009e1e:	2b0e      	cmp	r3, #14
 8009e20:	f200 80a8 	bhi.w	8009f74 <_dtoa_r+0x47c>
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	f000 80a5 	beq.w	8009f74 <_dtoa_r+0x47c>
 8009e2a:	f1ba 0f00 	cmp.w	sl, #0
 8009e2e:	dd34      	ble.n	8009e9a <_dtoa_r+0x3a2>
 8009e30:	4a9a      	ldr	r2, [pc, #616]	; (800a09c <_dtoa_r+0x5a4>)
 8009e32:	f00a 030f 	and.w	r3, sl, #15
 8009e36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e3a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009e3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009e46:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009e4a:	d016      	beq.n	8009e7a <_dtoa_r+0x382>
 8009e4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e50:	4b93      	ldr	r3, [pc, #588]	; (800a0a0 <_dtoa_r+0x5a8>)
 8009e52:	2703      	movs	r7, #3
 8009e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e58:	f7f6 fc68 	bl	800072c <__aeabi_ddiv>
 8009e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e60:	f004 040f 	and.w	r4, r4, #15
 8009e64:	4e8e      	ldr	r6, [pc, #568]	; (800a0a0 <_dtoa_r+0x5a8>)
 8009e66:	b954      	cbnz	r4, 8009e7e <_dtoa_r+0x386>
 8009e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e70:	f7f6 fc5c 	bl	800072c <__aeabi_ddiv>
 8009e74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e78:	e029      	b.n	8009ece <_dtoa_r+0x3d6>
 8009e7a:	2702      	movs	r7, #2
 8009e7c:	e7f2      	b.n	8009e64 <_dtoa_r+0x36c>
 8009e7e:	07e1      	lsls	r1, r4, #31
 8009e80:	d508      	bpl.n	8009e94 <_dtoa_r+0x39c>
 8009e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e8a:	f7f6 fb25 	bl	80004d8 <__aeabi_dmul>
 8009e8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e92:	3701      	adds	r7, #1
 8009e94:	1064      	asrs	r4, r4, #1
 8009e96:	3608      	adds	r6, #8
 8009e98:	e7e5      	b.n	8009e66 <_dtoa_r+0x36e>
 8009e9a:	f000 80a5 	beq.w	8009fe8 <_dtoa_r+0x4f0>
 8009e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ea2:	f1ca 0400 	rsb	r4, sl, #0
 8009ea6:	4b7d      	ldr	r3, [pc, #500]	; (800a09c <_dtoa_r+0x5a4>)
 8009ea8:	f004 020f 	and.w	r2, r4, #15
 8009eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	f7f6 fb10 	bl	80004d8 <__aeabi_dmul>
 8009eb8:	2702      	movs	r7, #2
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ec0:	4e77      	ldr	r6, [pc, #476]	; (800a0a0 <_dtoa_r+0x5a8>)
 8009ec2:	1124      	asrs	r4, r4, #4
 8009ec4:	2c00      	cmp	r4, #0
 8009ec6:	f040 8084 	bne.w	8009fd2 <_dtoa_r+0x4da>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1d2      	bne.n	8009e74 <_dtoa_r+0x37c>
 8009ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 808b 	beq.w	8009fec <_dtoa_r+0x4f4>
 8009ed6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009eda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ede:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	4b6f      	ldr	r3, [pc, #444]	; (800a0a4 <_dtoa_r+0x5ac>)
 8009ee6:	f7f6 fd69 	bl	80009bc <__aeabi_dcmplt>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d07e      	beq.n	8009fec <_dtoa_r+0x4f4>
 8009eee:	9b08      	ldr	r3, [sp, #32]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d07b      	beq.n	8009fec <_dtoa_r+0x4f4>
 8009ef4:	f1b9 0f00 	cmp.w	r9, #0
 8009ef8:	dd38      	ble.n	8009f6c <_dtoa_r+0x474>
 8009efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009efe:	2200      	movs	r2, #0
 8009f00:	4b69      	ldr	r3, [pc, #420]	; (800a0a8 <_dtoa_r+0x5b0>)
 8009f02:	f7f6 fae9 	bl	80004d8 <__aeabi_dmul>
 8009f06:	464c      	mov	r4, r9
 8009f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f0c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009f10:	3701      	adds	r7, #1
 8009f12:	4638      	mov	r0, r7
 8009f14:	f7f6 fa76 	bl	8000404 <__aeabi_i2d>
 8009f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f1c:	f7f6 fadc 	bl	80004d8 <__aeabi_dmul>
 8009f20:	2200      	movs	r2, #0
 8009f22:	4b62      	ldr	r3, [pc, #392]	; (800a0ac <_dtoa_r+0x5b4>)
 8009f24:	f7f6 f922 	bl	800016c <__adddf3>
 8009f28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f30:	9611      	str	r6, [sp, #68]	; 0x44
 8009f32:	2c00      	cmp	r4, #0
 8009f34:	d15d      	bne.n	8009ff2 <_dtoa_r+0x4fa>
 8009f36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4b5c      	ldr	r3, [pc, #368]	; (800a0b0 <_dtoa_r+0x5b8>)
 8009f3e:	f7f6 f913 	bl	8000168 <__aeabi_dsub>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f4a:	4633      	mov	r3, r6
 8009f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f4e:	f7f6 fd53 	bl	80009f8 <__aeabi_dcmpgt>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f040 829c 	bne.w	800a490 <_dtoa_r+0x998>
 8009f58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f5e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f62:	f7f6 fd2b 	bl	80009bc <__aeabi_dcmplt>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f040 8290 	bne.w	800a48c <_dtoa_r+0x994>
 8009f6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009f70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f2c0 8152 	blt.w	800a220 <_dtoa_r+0x728>
 8009f7c:	f1ba 0f0e 	cmp.w	sl, #14
 8009f80:	f300 814e 	bgt.w	800a220 <_dtoa_r+0x728>
 8009f84:	4b45      	ldr	r3, [pc, #276]	; (800a09c <_dtoa_r+0x5a4>)
 8009f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f280 80db 	bge.w	800a150 <_dtoa_r+0x658>
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f300 80d7 	bgt.w	800a150 <_dtoa_r+0x658>
 8009fa2:	f040 8272 	bne.w	800a48a <_dtoa_r+0x992>
 8009fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009faa:	2200      	movs	r2, #0
 8009fac:	4b40      	ldr	r3, [pc, #256]	; (800a0b0 <_dtoa_r+0x5b8>)
 8009fae:	f7f6 fa93 	bl	80004d8 <__aeabi_dmul>
 8009fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fb6:	f7f6 fd15 	bl	80009e4 <__aeabi_dcmpge>
 8009fba:	9c08      	ldr	r4, [sp, #32]
 8009fbc:	4626      	mov	r6, r4
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	f040 8248 	bne.w	800a454 <_dtoa_r+0x95c>
 8009fc4:	2331      	movs	r3, #49	; 0x31
 8009fc6:	9f03      	ldr	r7, [sp, #12]
 8009fc8:	f10a 0a01 	add.w	sl, sl, #1
 8009fcc:	f807 3b01 	strb.w	r3, [r7], #1
 8009fd0:	e244      	b.n	800a45c <_dtoa_r+0x964>
 8009fd2:	07e2      	lsls	r2, r4, #31
 8009fd4:	d505      	bpl.n	8009fe2 <_dtoa_r+0x4ea>
 8009fd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fda:	f7f6 fa7d 	bl	80004d8 <__aeabi_dmul>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	3701      	adds	r7, #1
 8009fe2:	1064      	asrs	r4, r4, #1
 8009fe4:	3608      	adds	r6, #8
 8009fe6:	e76d      	b.n	8009ec4 <_dtoa_r+0x3cc>
 8009fe8:	2702      	movs	r7, #2
 8009fea:	e770      	b.n	8009ece <_dtoa_r+0x3d6>
 8009fec:	46d0      	mov	r8, sl
 8009fee:	9c08      	ldr	r4, [sp, #32]
 8009ff0:	e78f      	b.n	8009f12 <_dtoa_r+0x41a>
 8009ff2:	9903      	ldr	r1, [sp, #12]
 8009ff4:	4b29      	ldr	r3, [pc, #164]	; (800a09c <_dtoa_r+0x5a4>)
 8009ff6:	4421      	add	r1, r4
 8009ff8:	9112      	str	r1, [sp, #72]	; 0x48
 8009ffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ffc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a000:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a004:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a008:	2900      	cmp	r1, #0
 800a00a:	d055      	beq.n	800a0b8 <_dtoa_r+0x5c0>
 800a00c:	2000      	movs	r0, #0
 800a00e:	4929      	ldr	r1, [pc, #164]	; (800a0b4 <_dtoa_r+0x5bc>)
 800a010:	f7f6 fb8c 	bl	800072c <__aeabi_ddiv>
 800a014:	463b      	mov	r3, r7
 800a016:	4632      	mov	r2, r6
 800a018:	f7f6 f8a6 	bl	8000168 <__aeabi_dsub>
 800a01c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a020:	9f03      	ldr	r7, [sp, #12]
 800a022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a026:	f7f6 fd07 	bl	8000a38 <__aeabi_d2iz>
 800a02a:	4604      	mov	r4, r0
 800a02c:	f7f6 f9ea 	bl	8000404 <__aeabi_i2d>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a038:	f7f6 f896 	bl	8000168 <__aeabi_dsub>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	3430      	adds	r4, #48	; 0x30
 800a042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a046:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a04a:	f807 4b01 	strb.w	r4, [r7], #1
 800a04e:	f7f6 fcb5 	bl	80009bc <__aeabi_dcmplt>
 800a052:	2800      	cmp	r0, #0
 800a054:	d174      	bne.n	800a140 <_dtoa_r+0x648>
 800a056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05a:	2000      	movs	r0, #0
 800a05c:	4911      	ldr	r1, [pc, #68]	; (800a0a4 <_dtoa_r+0x5ac>)
 800a05e:	f7f6 f883 	bl	8000168 <__aeabi_dsub>
 800a062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a066:	f7f6 fca9 	bl	80009bc <__aeabi_dcmplt>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	f040 80b7 	bne.w	800a1de <_dtoa_r+0x6e6>
 800a070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a072:	429f      	cmp	r7, r3
 800a074:	f43f af7a 	beq.w	8009f6c <_dtoa_r+0x474>
 800a078:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a07c:	2200      	movs	r2, #0
 800a07e:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <_dtoa_r+0x5b0>)
 800a080:	f7f6 fa2a 	bl	80004d8 <__aeabi_dmul>
 800a084:	2200      	movs	r2, #0
 800a086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a08a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a08e:	4b06      	ldr	r3, [pc, #24]	; (800a0a8 <_dtoa_r+0x5b0>)
 800a090:	f7f6 fa22 	bl	80004d8 <__aeabi_dmul>
 800a094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a098:	e7c3      	b.n	800a022 <_dtoa_r+0x52a>
 800a09a:	bf00      	nop
 800a09c:	0800d378 	.word	0x0800d378
 800a0a0:	0800d350 	.word	0x0800d350
 800a0a4:	3ff00000 	.word	0x3ff00000
 800a0a8:	40240000 	.word	0x40240000
 800a0ac:	401c0000 	.word	0x401c0000
 800a0b0:	40140000 	.word	0x40140000
 800a0b4:	3fe00000 	.word	0x3fe00000
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 fa0c 	bl	80004d8 <__aeabi_dmul>
 800a0c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0c6:	9c03      	ldr	r4, [sp, #12]
 800a0c8:	9314      	str	r3, [sp, #80]	; 0x50
 800a0ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0ce:	f7f6 fcb3 	bl	8000a38 <__aeabi_d2iz>
 800a0d2:	9015      	str	r0, [sp, #84]	; 0x54
 800a0d4:	f7f6 f996 	bl	8000404 <__aeabi_i2d>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0e0:	f7f6 f842 	bl	8000168 <__aeabi_dsub>
 800a0e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	3330      	adds	r3, #48	; 0x30
 800a0ea:	f804 3b01 	strb.w	r3, [r4], #1
 800a0ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0f0:	460f      	mov	r7, r1
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	d124      	bne.n	800a144 <_dtoa_r+0x64c>
 800a0fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0fe:	4bb0      	ldr	r3, [pc, #704]	; (800a3c0 <_dtoa_r+0x8c8>)
 800a100:	f7f6 f834 	bl	800016c <__adddf3>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fc74 	bl	80009f8 <__aeabi_dcmpgt>
 800a110:	2800      	cmp	r0, #0
 800a112:	d163      	bne.n	800a1dc <_dtoa_r+0x6e4>
 800a114:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a118:	2000      	movs	r0, #0
 800a11a:	49a9      	ldr	r1, [pc, #676]	; (800a3c0 <_dtoa_r+0x8c8>)
 800a11c:	f7f6 f824 	bl	8000168 <__aeabi_dsub>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 fc48 	bl	80009bc <__aeabi_dcmplt>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	f43f af1d 	beq.w	8009f6c <_dtoa_r+0x474>
 800a132:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a134:	1e7b      	subs	r3, r7, #1
 800a136:	9314      	str	r3, [sp, #80]	; 0x50
 800a138:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a13c:	2b30      	cmp	r3, #48	; 0x30
 800a13e:	d0f8      	beq.n	800a132 <_dtoa_r+0x63a>
 800a140:	46c2      	mov	sl, r8
 800a142:	e03b      	b.n	800a1bc <_dtoa_r+0x6c4>
 800a144:	4b9f      	ldr	r3, [pc, #636]	; (800a3c4 <_dtoa_r+0x8cc>)
 800a146:	f7f6 f9c7 	bl	80004d8 <__aeabi_dmul>
 800a14a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a14e:	e7bc      	b.n	800a0ca <_dtoa_r+0x5d2>
 800a150:	9f03      	ldr	r7, [sp, #12]
 800a152:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a15a:	4640      	mov	r0, r8
 800a15c:	4649      	mov	r1, r9
 800a15e:	f7f6 fae5 	bl	800072c <__aeabi_ddiv>
 800a162:	f7f6 fc69 	bl	8000a38 <__aeabi_d2iz>
 800a166:	4604      	mov	r4, r0
 800a168:	f7f6 f94c 	bl	8000404 <__aeabi_i2d>
 800a16c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a170:	f7f6 f9b2 	bl	80004d8 <__aeabi_dmul>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4640      	mov	r0, r8
 800a17a:	4649      	mov	r1, r9
 800a17c:	f7f5 fff4 	bl	8000168 <__aeabi_dsub>
 800a180:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a184:	f807 6b01 	strb.w	r6, [r7], #1
 800a188:	9e03      	ldr	r6, [sp, #12]
 800a18a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a18e:	1bbe      	subs	r6, r7, r6
 800a190:	45b4      	cmp	ip, r6
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	d136      	bne.n	800a206 <_dtoa_r+0x70e>
 800a198:	f7f5 ffe8 	bl	800016c <__adddf3>
 800a19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1a0:	4680      	mov	r8, r0
 800a1a2:	4689      	mov	r9, r1
 800a1a4:	f7f6 fc28 	bl	80009f8 <__aeabi_dcmpgt>
 800a1a8:	bb58      	cbnz	r0, 800a202 <_dtoa_r+0x70a>
 800a1aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	f7f6 fbf9 	bl	80009a8 <__aeabi_dcmpeq>
 800a1b6:	b108      	cbz	r0, 800a1bc <_dtoa_r+0x6c4>
 800a1b8:	07e1      	lsls	r1, r4, #31
 800a1ba:	d422      	bmi.n	800a202 <_dtoa_r+0x70a>
 800a1bc:	4628      	mov	r0, r5
 800a1be:	4659      	mov	r1, fp
 800a1c0:	f000 fe68 	bl	800ae94 <_Bfree>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	703b      	strb	r3, [r7, #0]
 800a1c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1ca:	f10a 0001 	add.w	r0, sl, #1
 800a1ce:	6018      	str	r0, [r3, #0]
 800a1d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f43f acde 	beq.w	8009b94 <_dtoa_r+0x9c>
 800a1d8:	601f      	str	r7, [r3, #0]
 800a1da:	e4db      	b.n	8009b94 <_dtoa_r+0x9c>
 800a1dc:	4627      	mov	r7, r4
 800a1de:	463b      	mov	r3, r7
 800a1e0:	461f      	mov	r7, r3
 800a1e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1e6:	2a39      	cmp	r2, #57	; 0x39
 800a1e8:	d107      	bne.n	800a1fa <_dtoa_r+0x702>
 800a1ea:	9a03      	ldr	r2, [sp, #12]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d1f7      	bne.n	800a1e0 <_dtoa_r+0x6e8>
 800a1f0:	2230      	movs	r2, #48	; 0x30
 800a1f2:	9903      	ldr	r1, [sp, #12]
 800a1f4:	f108 0801 	add.w	r8, r8, #1
 800a1f8:	700a      	strb	r2, [r1, #0]
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	3201      	adds	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	e79e      	b.n	800a140 <_dtoa_r+0x648>
 800a202:	46d0      	mov	r8, sl
 800a204:	e7eb      	b.n	800a1de <_dtoa_r+0x6e6>
 800a206:	2200      	movs	r2, #0
 800a208:	4b6e      	ldr	r3, [pc, #440]	; (800a3c4 <_dtoa_r+0x8cc>)
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	2200      	movs	r2, #0
 800a210:	2300      	movs	r3, #0
 800a212:	4680      	mov	r8, r0
 800a214:	4689      	mov	r9, r1
 800a216:	f7f6 fbc7 	bl	80009a8 <__aeabi_dcmpeq>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d09b      	beq.n	800a156 <_dtoa_r+0x65e>
 800a21e:	e7cd      	b.n	800a1bc <_dtoa_r+0x6c4>
 800a220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a222:	2a00      	cmp	r2, #0
 800a224:	f000 80d0 	beq.w	800a3c8 <_dtoa_r+0x8d0>
 800a228:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a22a:	2a01      	cmp	r2, #1
 800a22c:	f300 80ae 	bgt.w	800a38c <_dtoa_r+0x894>
 800a230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a232:	2a00      	cmp	r2, #0
 800a234:	f000 80a6 	beq.w	800a384 <_dtoa_r+0x88c>
 800a238:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a23c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a23e:	9f06      	ldr	r7, [sp, #24]
 800a240:	9a06      	ldr	r2, [sp, #24]
 800a242:	2101      	movs	r1, #1
 800a244:	441a      	add	r2, r3
 800a246:	9206      	str	r2, [sp, #24]
 800a248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a24a:	4628      	mov	r0, r5
 800a24c:	441a      	add	r2, r3
 800a24e:	9209      	str	r2, [sp, #36]	; 0x24
 800a250:	f000 ff20 	bl	800b094 <__i2b>
 800a254:	4606      	mov	r6, r0
 800a256:	2f00      	cmp	r7, #0
 800a258:	dd0c      	ble.n	800a274 <_dtoa_r+0x77c>
 800a25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dd09      	ble.n	800a274 <_dtoa_r+0x77c>
 800a260:	42bb      	cmp	r3, r7
 800a262:	bfa8      	it	ge
 800a264:	463b      	movge	r3, r7
 800a266:	9a06      	ldr	r2, [sp, #24]
 800a268:	1aff      	subs	r7, r7, r3
 800a26a:	1ad2      	subs	r2, r2, r3
 800a26c:	9206      	str	r2, [sp, #24]
 800a26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	9309      	str	r3, [sp, #36]	; 0x24
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	b1f3      	cbz	r3, 800a2b6 <_dtoa_r+0x7be>
 800a278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80a8 	beq.w	800a3d0 <_dtoa_r+0x8d8>
 800a280:	2c00      	cmp	r4, #0
 800a282:	dd10      	ble.n	800a2a6 <_dtoa_r+0x7ae>
 800a284:	4631      	mov	r1, r6
 800a286:	4622      	mov	r2, r4
 800a288:	4628      	mov	r0, r5
 800a28a:	f000 ffc1 	bl	800b210 <__pow5mult>
 800a28e:	465a      	mov	r2, fp
 800a290:	4601      	mov	r1, r0
 800a292:	4606      	mov	r6, r0
 800a294:	4628      	mov	r0, r5
 800a296:	f000 ff13 	bl	800b0c0 <__multiply>
 800a29a:	4680      	mov	r8, r0
 800a29c:	4659      	mov	r1, fp
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 fdf8 	bl	800ae94 <_Bfree>
 800a2a4:	46c3      	mov	fp, r8
 800a2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a8:	1b1a      	subs	r2, r3, r4
 800a2aa:	d004      	beq.n	800a2b6 <_dtoa_r+0x7be>
 800a2ac:	4659      	mov	r1, fp
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 ffae 	bl	800b210 <__pow5mult>
 800a2b4:	4683      	mov	fp, r0
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f000 feeb 	bl	800b094 <__i2b>
 800a2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f340 8086 	ble.w	800a3d4 <_dtoa_r+0x8dc>
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f000 ff9f 	bl	800b210 <__pow5mult>
 800a2d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	dd7f      	ble.n	800a3da <_dtoa_r+0x8e2>
 800a2da:	f04f 0800 	mov.w	r8, #0
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2e4:	6918      	ldr	r0, [r3, #16]
 800a2e6:	f000 fe87 	bl	800aff8 <__hi0bits>
 800a2ea:	f1c0 0020 	rsb	r0, r0, #32
 800a2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f0:	4418      	add	r0, r3
 800a2f2:	f010 001f 	ands.w	r0, r0, #31
 800a2f6:	f000 8092 	beq.w	800a41e <_dtoa_r+0x926>
 800a2fa:	f1c0 0320 	rsb	r3, r0, #32
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	f340 808a 	ble.w	800a418 <_dtoa_r+0x920>
 800a304:	f1c0 001c 	rsb	r0, r0, #28
 800a308:	9b06      	ldr	r3, [sp, #24]
 800a30a:	4407      	add	r7, r0
 800a30c:	4403      	add	r3, r0
 800a30e:	9306      	str	r3, [sp, #24]
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	4403      	add	r3, r0
 800a314:	9309      	str	r3, [sp, #36]	; 0x24
 800a316:	9b06      	ldr	r3, [sp, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd05      	ble.n	800a328 <_dtoa_r+0x830>
 800a31c:	4659      	mov	r1, fp
 800a31e:	461a      	mov	r2, r3
 800a320:	4628      	mov	r0, r5
 800a322:	f000 ffcf 	bl	800b2c4 <__lshift>
 800a326:	4683      	mov	fp, r0
 800a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	dd05      	ble.n	800a33a <_dtoa_r+0x842>
 800a32e:	4621      	mov	r1, r4
 800a330:	461a      	mov	r2, r3
 800a332:	4628      	mov	r0, r5
 800a334:	f000 ffc6 	bl	800b2c4 <__lshift>
 800a338:	4604      	mov	r4, r0
 800a33a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d070      	beq.n	800a422 <_dtoa_r+0x92a>
 800a340:	4621      	mov	r1, r4
 800a342:	4658      	mov	r0, fp
 800a344:	f001 f82e 	bl	800b3a4 <__mcmp>
 800a348:	2800      	cmp	r0, #0
 800a34a:	da6a      	bge.n	800a422 <_dtoa_r+0x92a>
 800a34c:	2300      	movs	r3, #0
 800a34e:	4659      	mov	r1, fp
 800a350:	220a      	movs	r2, #10
 800a352:	4628      	mov	r0, r5
 800a354:	f000 fdc0 	bl	800aed8 <__multadd>
 800a358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a35a:	4683      	mov	fp, r0
 800a35c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 8194 	beq.w	800a68e <_dtoa_r+0xb96>
 800a366:	4631      	mov	r1, r6
 800a368:	2300      	movs	r3, #0
 800a36a:	220a      	movs	r2, #10
 800a36c:	4628      	mov	r0, r5
 800a36e:	f000 fdb3 	bl	800aed8 <__multadd>
 800a372:	f1b9 0f00 	cmp.w	r9, #0
 800a376:	4606      	mov	r6, r0
 800a378:	f300 8093 	bgt.w	800a4a2 <_dtoa_r+0x9aa>
 800a37c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a37e:	2b02      	cmp	r3, #2
 800a380:	dc57      	bgt.n	800a432 <_dtoa_r+0x93a>
 800a382:	e08e      	b.n	800a4a2 <_dtoa_r+0x9aa>
 800a384:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a38a:	e757      	b.n	800a23c <_dtoa_r+0x744>
 800a38c:	9b08      	ldr	r3, [sp, #32]
 800a38e:	1e5c      	subs	r4, r3, #1
 800a390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a392:	42a3      	cmp	r3, r4
 800a394:	bfb7      	itett	lt
 800a396:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a398:	1b1c      	subge	r4, r3, r4
 800a39a:	1ae2      	sublt	r2, r4, r3
 800a39c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a39e:	bfbe      	ittt	lt
 800a3a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a3a2:	189b      	addlt	r3, r3, r2
 800a3a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a3a6:	9b08      	ldr	r3, [sp, #32]
 800a3a8:	bfb8      	it	lt
 800a3aa:	2400      	movlt	r4, #0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bfbb      	ittet	lt
 800a3b0:	9b06      	ldrlt	r3, [sp, #24]
 800a3b2:	9a08      	ldrlt	r2, [sp, #32]
 800a3b4:	9f06      	ldrge	r7, [sp, #24]
 800a3b6:	1a9f      	sublt	r7, r3, r2
 800a3b8:	bfac      	ite	ge
 800a3ba:	9b08      	ldrge	r3, [sp, #32]
 800a3bc:	2300      	movlt	r3, #0
 800a3be:	e73f      	b.n	800a240 <_dtoa_r+0x748>
 800a3c0:	3fe00000 	.word	0x3fe00000
 800a3c4:	40240000 	.word	0x40240000
 800a3c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3ca:	9f06      	ldr	r7, [sp, #24]
 800a3cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a3ce:	e742      	b.n	800a256 <_dtoa_r+0x75e>
 800a3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3d2:	e76b      	b.n	800a2ac <_dtoa_r+0x7b4>
 800a3d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	dc19      	bgt.n	800a40e <_dtoa_r+0x916>
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	b9bb      	cbnz	r3, 800a40e <_dtoa_r+0x916>
 800a3de:	9b05      	ldr	r3, [sp, #20]
 800a3e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3e4:	b99b      	cbnz	r3, 800a40e <_dtoa_r+0x916>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3ec:	0d1b      	lsrs	r3, r3, #20
 800a3ee:	051b      	lsls	r3, r3, #20
 800a3f0:	b183      	cbz	r3, 800a414 <_dtoa_r+0x91c>
 800a3f2:	f04f 0801 	mov.w	r8, #1
 800a3f6:	9b06      	ldr	r3, [sp, #24]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	9306      	str	r3, [sp, #24]
 800a3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fe:	3301      	adds	r3, #1
 800a400:	9309      	str	r3, [sp, #36]	; 0x24
 800a402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a404:	2b00      	cmp	r3, #0
 800a406:	f47f af6a 	bne.w	800a2de <_dtoa_r+0x7e6>
 800a40a:	2001      	movs	r0, #1
 800a40c:	e76f      	b.n	800a2ee <_dtoa_r+0x7f6>
 800a40e:	f04f 0800 	mov.w	r8, #0
 800a412:	e7f6      	b.n	800a402 <_dtoa_r+0x90a>
 800a414:	4698      	mov	r8, r3
 800a416:	e7f4      	b.n	800a402 <_dtoa_r+0x90a>
 800a418:	f43f af7d 	beq.w	800a316 <_dtoa_r+0x81e>
 800a41c:	4618      	mov	r0, r3
 800a41e:	301c      	adds	r0, #28
 800a420:	e772      	b.n	800a308 <_dtoa_r+0x810>
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	2b00      	cmp	r3, #0
 800a426:	dc36      	bgt.n	800a496 <_dtoa_r+0x99e>
 800a428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	dd33      	ble.n	800a496 <_dtoa_r+0x99e>
 800a42e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a432:	f1b9 0f00 	cmp.w	r9, #0
 800a436:	d10d      	bne.n	800a454 <_dtoa_r+0x95c>
 800a438:	4621      	mov	r1, r4
 800a43a:	464b      	mov	r3, r9
 800a43c:	2205      	movs	r2, #5
 800a43e:	4628      	mov	r0, r5
 800a440:	f000 fd4a 	bl	800aed8 <__multadd>
 800a444:	4601      	mov	r1, r0
 800a446:	4604      	mov	r4, r0
 800a448:	4658      	mov	r0, fp
 800a44a:	f000 ffab 	bl	800b3a4 <__mcmp>
 800a44e:	2800      	cmp	r0, #0
 800a450:	f73f adb8 	bgt.w	8009fc4 <_dtoa_r+0x4cc>
 800a454:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a456:	9f03      	ldr	r7, [sp, #12]
 800a458:	ea6f 0a03 	mvn.w	sl, r3
 800a45c:	f04f 0800 	mov.w	r8, #0
 800a460:	4621      	mov	r1, r4
 800a462:	4628      	mov	r0, r5
 800a464:	f000 fd16 	bl	800ae94 <_Bfree>
 800a468:	2e00      	cmp	r6, #0
 800a46a:	f43f aea7 	beq.w	800a1bc <_dtoa_r+0x6c4>
 800a46e:	f1b8 0f00 	cmp.w	r8, #0
 800a472:	d005      	beq.n	800a480 <_dtoa_r+0x988>
 800a474:	45b0      	cmp	r8, r6
 800a476:	d003      	beq.n	800a480 <_dtoa_r+0x988>
 800a478:	4641      	mov	r1, r8
 800a47a:	4628      	mov	r0, r5
 800a47c:	f000 fd0a 	bl	800ae94 <_Bfree>
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	f000 fd06 	bl	800ae94 <_Bfree>
 800a488:	e698      	b.n	800a1bc <_dtoa_r+0x6c4>
 800a48a:	2400      	movs	r4, #0
 800a48c:	4626      	mov	r6, r4
 800a48e:	e7e1      	b.n	800a454 <_dtoa_r+0x95c>
 800a490:	46c2      	mov	sl, r8
 800a492:	4626      	mov	r6, r4
 800a494:	e596      	b.n	8009fc4 <_dtoa_r+0x4cc>
 800a496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80fd 	beq.w	800a69c <_dtoa_r+0xba4>
 800a4a2:	2f00      	cmp	r7, #0
 800a4a4:	dd05      	ble.n	800a4b2 <_dtoa_r+0x9ba>
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	463a      	mov	r2, r7
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f000 ff0a 	bl	800b2c4 <__lshift>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	f1b8 0f00 	cmp.w	r8, #0
 800a4b6:	d05c      	beq.n	800a572 <_dtoa_r+0xa7a>
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	6871      	ldr	r1, [r6, #4]
 800a4bc:	f000 fcaa 	bl	800ae14 <_Balloc>
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	b928      	cbnz	r0, 800a4d0 <_dtoa_r+0x9d8>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4ca:	4b7f      	ldr	r3, [pc, #508]	; (800a6c8 <_dtoa_r+0xbd0>)
 800a4cc:	f7ff bb28 	b.w	8009b20 <_dtoa_r+0x28>
 800a4d0:	6932      	ldr	r2, [r6, #16]
 800a4d2:	f106 010c 	add.w	r1, r6, #12
 800a4d6:	3202      	adds	r2, #2
 800a4d8:	0092      	lsls	r2, r2, #2
 800a4da:	300c      	adds	r0, #12
 800a4dc:	f000 fc8c 	bl	800adf8 <memcpy>
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f000 feed 	bl	800b2c4 <__lshift>
 800a4ea:	46b0      	mov	r8, r6
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	9308      	str	r3, [sp, #32]
 800a4f4:	9b03      	ldr	r3, [sp, #12]
 800a4f6:	444b      	add	r3, r9
 800a4f8:	930a      	str	r3, [sp, #40]	; 0x28
 800a4fa:	9b04      	ldr	r3, [sp, #16]
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	9309      	str	r3, [sp, #36]	; 0x24
 800a502:	9b08      	ldr	r3, [sp, #32]
 800a504:	4621      	mov	r1, r4
 800a506:	3b01      	subs	r3, #1
 800a508:	4658      	mov	r0, fp
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	f7ff fa68 	bl	80099e0 <quorem>
 800a510:	4603      	mov	r3, r0
 800a512:	4641      	mov	r1, r8
 800a514:	3330      	adds	r3, #48	; 0x30
 800a516:	9006      	str	r0, [sp, #24]
 800a518:	4658      	mov	r0, fp
 800a51a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51c:	f000 ff42 	bl	800b3a4 <__mcmp>
 800a520:	4632      	mov	r2, r6
 800a522:	4681      	mov	r9, r0
 800a524:	4621      	mov	r1, r4
 800a526:	4628      	mov	r0, r5
 800a528:	f000 ff58 	bl	800b3dc <__mdiff>
 800a52c:	68c2      	ldr	r2, [r0, #12]
 800a52e:	4607      	mov	r7, r0
 800a530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a532:	bb02      	cbnz	r2, 800a576 <_dtoa_r+0xa7e>
 800a534:	4601      	mov	r1, r0
 800a536:	4658      	mov	r0, fp
 800a538:	f000 ff34 	bl	800b3a4 <__mcmp>
 800a53c:	4602      	mov	r2, r0
 800a53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a540:	4639      	mov	r1, r7
 800a542:	4628      	mov	r0, r5
 800a544:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a548:	f000 fca4 	bl	800ae94 <_Bfree>
 800a54c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a54e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a550:	9f08      	ldr	r7, [sp, #32]
 800a552:	ea43 0102 	orr.w	r1, r3, r2
 800a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a558:	430b      	orrs	r3, r1
 800a55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a55c:	d10d      	bne.n	800a57a <_dtoa_r+0xa82>
 800a55e:	2b39      	cmp	r3, #57	; 0x39
 800a560:	d029      	beq.n	800a5b6 <_dtoa_r+0xabe>
 800a562:	f1b9 0f00 	cmp.w	r9, #0
 800a566:	dd01      	ble.n	800a56c <_dtoa_r+0xa74>
 800a568:	9b06      	ldr	r3, [sp, #24]
 800a56a:	3331      	adds	r3, #49	; 0x31
 800a56c:	9a04      	ldr	r2, [sp, #16]
 800a56e:	7013      	strb	r3, [r2, #0]
 800a570:	e776      	b.n	800a460 <_dtoa_r+0x968>
 800a572:	4630      	mov	r0, r6
 800a574:	e7b9      	b.n	800a4ea <_dtoa_r+0x9f2>
 800a576:	2201      	movs	r2, #1
 800a578:	e7e2      	b.n	800a540 <_dtoa_r+0xa48>
 800a57a:	f1b9 0f00 	cmp.w	r9, #0
 800a57e:	db06      	blt.n	800a58e <_dtoa_r+0xa96>
 800a580:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a582:	ea41 0909 	orr.w	r9, r1, r9
 800a586:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a588:	ea59 0101 	orrs.w	r1, r9, r1
 800a58c:	d120      	bne.n	800a5d0 <_dtoa_r+0xad8>
 800a58e:	2a00      	cmp	r2, #0
 800a590:	ddec      	ble.n	800a56c <_dtoa_r+0xa74>
 800a592:	4659      	mov	r1, fp
 800a594:	2201      	movs	r2, #1
 800a596:	4628      	mov	r0, r5
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	f000 fe93 	bl	800b2c4 <__lshift>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4683      	mov	fp, r0
 800a5a2:	f000 feff 	bl	800b3a4 <__mcmp>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	9b08      	ldr	r3, [sp, #32]
 800a5aa:	dc02      	bgt.n	800a5b2 <_dtoa_r+0xaba>
 800a5ac:	d1de      	bne.n	800a56c <_dtoa_r+0xa74>
 800a5ae:	07da      	lsls	r2, r3, #31
 800a5b0:	d5dc      	bpl.n	800a56c <_dtoa_r+0xa74>
 800a5b2:	2b39      	cmp	r3, #57	; 0x39
 800a5b4:	d1d8      	bne.n	800a568 <_dtoa_r+0xa70>
 800a5b6:	2339      	movs	r3, #57	; 0x39
 800a5b8:	9a04      	ldr	r2, [sp, #16]
 800a5ba:	7013      	strb	r3, [r2, #0]
 800a5bc:	463b      	mov	r3, r7
 800a5be:	461f      	mov	r7, r3
 800a5c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	2a39      	cmp	r2, #57	; 0x39
 800a5c8:	d050      	beq.n	800a66c <_dtoa_r+0xb74>
 800a5ca:	3201      	adds	r2, #1
 800a5cc:	701a      	strb	r2, [r3, #0]
 800a5ce:	e747      	b.n	800a460 <_dtoa_r+0x968>
 800a5d0:	2a00      	cmp	r2, #0
 800a5d2:	dd03      	ble.n	800a5dc <_dtoa_r+0xae4>
 800a5d4:	2b39      	cmp	r3, #57	; 0x39
 800a5d6:	d0ee      	beq.n	800a5b6 <_dtoa_r+0xabe>
 800a5d8:	3301      	adds	r3, #1
 800a5da:	e7c7      	b.n	800a56c <_dtoa_r+0xa74>
 800a5dc:	9a08      	ldr	r2, [sp, #32]
 800a5de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a5e4:	428a      	cmp	r2, r1
 800a5e6:	d02a      	beq.n	800a63e <_dtoa_r+0xb46>
 800a5e8:	4659      	mov	r1, fp
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	220a      	movs	r2, #10
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 fc72 	bl	800aed8 <__multadd>
 800a5f4:	45b0      	cmp	r8, r6
 800a5f6:	4683      	mov	fp, r0
 800a5f8:	f04f 0300 	mov.w	r3, #0
 800a5fc:	f04f 020a 	mov.w	r2, #10
 800a600:	4641      	mov	r1, r8
 800a602:	4628      	mov	r0, r5
 800a604:	d107      	bne.n	800a616 <_dtoa_r+0xb1e>
 800a606:	f000 fc67 	bl	800aed8 <__multadd>
 800a60a:	4680      	mov	r8, r0
 800a60c:	4606      	mov	r6, r0
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	3301      	adds	r3, #1
 800a612:	9308      	str	r3, [sp, #32]
 800a614:	e775      	b.n	800a502 <_dtoa_r+0xa0a>
 800a616:	f000 fc5f 	bl	800aed8 <__multadd>
 800a61a:	4631      	mov	r1, r6
 800a61c:	4680      	mov	r8, r0
 800a61e:	2300      	movs	r3, #0
 800a620:	220a      	movs	r2, #10
 800a622:	4628      	mov	r0, r5
 800a624:	f000 fc58 	bl	800aed8 <__multadd>
 800a628:	4606      	mov	r6, r0
 800a62a:	e7f0      	b.n	800a60e <_dtoa_r+0xb16>
 800a62c:	f1b9 0f00 	cmp.w	r9, #0
 800a630:	bfcc      	ite	gt
 800a632:	464f      	movgt	r7, r9
 800a634:	2701      	movle	r7, #1
 800a636:	f04f 0800 	mov.w	r8, #0
 800a63a:	9a03      	ldr	r2, [sp, #12]
 800a63c:	4417      	add	r7, r2
 800a63e:	4659      	mov	r1, fp
 800a640:	2201      	movs	r2, #1
 800a642:	4628      	mov	r0, r5
 800a644:	9308      	str	r3, [sp, #32]
 800a646:	f000 fe3d 	bl	800b2c4 <__lshift>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4683      	mov	fp, r0
 800a64e:	f000 fea9 	bl	800b3a4 <__mcmp>
 800a652:	2800      	cmp	r0, #0
 800a654:	dcb2      	bgt.n	800a5bc <_dtoa_r+0xac4>
 800a656:	d102      	bne.n	800a65e <_dtoa_r+0xb66>
 800a658:	9b08      	ldr	r3, [sp, #32]
 800a65a:	07db      	lsls	r3, r3, #31
 800a65c:	d4ae      	bmi.n	800a5bc <_dtoa_r+0xac4>
 800a65e:	463b      	mov	r3, r7
 800a660:	461f      	mov	r7, r3
 800a662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a666:	2a30      	cmp	r2, #48	; 0x30
 800a668:	d0fa      	beq.n	800a660 <_dtoa_r+0xb68>
 800a66a:	e6f9      	b.n	800a460 <_dtoa_r+0x968>
 800a66c:	9a03      	ldr	r2, [sp, #12]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d1a5      	bne.n	800a5be <_dtoa_r+0xac6>
 800a672:	2331      	movs	r3, #49	; 0x31
 800a674:	f10a 0a01 	add.w	sl, sl, #1
 800a678:	e779      	b.n	800a56e <_dtoa_r+0xa76>
 800a67a:	4b14      	ldr	r3, [pc, #80]	; (800a6cc <_dtoa_r+0xbd4>)
 800a67c:	f7ff baa8 	b.w	8009bd0 <_dtoa_r+0xd8>
 800a680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a682:	2b00      	cmp	r3, #0
 800a684:	f47f aa81 	bne.w	8009b8a <_dtoa_r+0x92>
 800a688:	4b11      	ldr	r3, [pc, #68]	; (800a6d0 <_dtoa_r+0xbd8>)
 800a68a:	f7ff baa1 	b.w	8009bd0 <_dtoa_r+0xd8>
 800a68e:	f1b9 0f00 	cmp.w	r9, #0
 800a692:	dc03      	bgt.n	800a69c <_dtoa_r+0xba4>
 800a694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a696:	2b02      	cmp	r3, #2
 800a698:	f73f aecb 	bgt.w	800a432 <_dtoa_r+0x93a>
 800a69c:	9f03      	ldr	r7, [sp, #12]
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4658      	mov	r0, fp
 800a6a2:	f7ff f99d 	bl	80099e0 <quorem>
 800a6a6:	9a03      	ldr	r2, [sp, #12]
 800a6a8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a6ac:	f807 3b01 	strb.w	r3, [r7], #1
 800a6b0:	1aba      	subs	r2, r7, r2
 800a6b2:	4591      	cmp	r9, r2
 800a6b4:	ddba      	ble.n	800a62c <_dtoa_r+0xb34>
 800a6b6:	4659      	mov	r1, fp
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	220a      	movs	r2, #10
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f000 fc0b 	bl	800aed8 <__multadd>
 800a6c2:	4683      	mov	fp, r0
 800a6c4:	e7eb      	b.n	800a69e <_dtoa_r+0xba6>
 800a6c6:	bf00      	nop
 800a6c8:	0800d268 	.word	0x0800d268
 800a6cc:	0800d068 	.word	0x0800d068
 800a6d0:	0800d1e9 	.word	0x0800d1e9

0800a6d4 <rshift>:
 800a6d4:	6903      	ldr	r3, [r0, #16]
 800a6d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6de:	f100 0414 	add.w	r4, r0, #20
 800a6e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6e6:	dd46      	ble.n	800a776 <rshift+0xa2>
 800a6e8:	f011 011f 	ands.w	r1, r1, #31
 800a6ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6f4:	d10c      	bne.n	800a710 <rshift+0x3c>
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f100 0710 	add.w	r7, r0, #16
 800a6fc:	42b1      	cmp	r1, r6
 800a6fe:	d335      	bcc.n	800a76c <rshift+0x98>
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	1eea      	subs	r2, r5, #3
 800a706:	4296      	cmp	r6, r2
 800a708:	bf38      	it	cc
 800a70a:	2300      	movcc	r3, #0
 800a70c:	4423      	add	r3, r4
 800a70e:	e015      	b.n	800a73c <rshift+0x68>
 800a710:	46a1      	mov	r9, r4
 800a712:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a716:	f1c1 0820 	rsb	r8, r1, #32
 800a71a:	40cf      	lsrs	r7, r1
 800a71c:	f105 0e04 	add.w	lr, r5, #4
 800a720:	4576      	cmp	r6, lr
 800a722:	46f4      	mov	ip, lr
 800a724:	d816      	bhi.n	800a754 <rshift+0x80>
 800a726:	1a9a      	subs	r2, r3, r2
 800a728:	0092      	lsls	r2, r2, #2
 800a72a:	3a04      	subs	r2, #4
 800a72c:	3501      	adds	r5, #1
 800a72e:	42ae      	cmp	r6, r5
 800a730:	bf38      	it	cc
 800a732:	2200      	movcc	r2, #0
 800a734:	18a3      	adds	r3, r4, r2
 800a736:	50a7      	str	r7, [r4, r2]
 800a738:	b107      	cbz	r7, 800a73c <rshift+0x68>
 800a73a:	3304      	adds	r3, #4
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	eba3 0204 	sub.w	r2, r3, r4
 800a742:	bf08      	it	eq
 800a744:	2300      	moveq	r3, #0
 800a746:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a74a:	6102      	str	r2, [r0, #16]
 800a74c:	bf08      	it	eq
 800a74e:	6143      	streq	r3, [r0, #20]
 800a750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a754:	f8dc c000 	ldr.w	ip, [ip]
 800a758:	fa0c fc08 	lsl.w	ip, ip, r8
 800a75c:	ea4c 0707 	orr.w	r7, ip, r7
 800a760:	f849 7b04 	str.w	r7, [r9], #4
 800a764:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a768:	40cf      	lsrs	r7, r1
 800a76a:	e7d9      	b.n	800a720 <rshift+0x4c>
 800a76c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a770:	f847 cf04 	str.w	ip, [r7, #4]!
 800a774:	e7c2      	b.n	800a6fc <rshift+0x28>
 800a776:	4623      	mov	r3, r4
 800a778:	e7e0      	b.n	800a73c <rshift+0x68>

0800a77a <__hexdig_fun>:
 800a77a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a77e:	2b09      	cmp	r3, #9
 800a780:	d802      	bhi.n	800a788 <__hexdig_fun+0xe>
 800a782:	3820      	subs	r0, #32
 800a784:	b2c0      	uxtb	r0, r0
 800a786:	4770      	bx	lr
 800a788:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a78c:	2b05      	cmp	r3, #5
 800a78e:	d801      	bhi.n	800a794 <__hexdig_fun+0x1a>
 800a790:	3847      	subs	r0, #71	; 0x47
 800a792:	e7f7      	b.n	800a784 <__hexdig_fun+0xa>
 800a794:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a798:	2b05      	cmp	r3, #5
 800a79a:	d801      	bhi.n	800a7a0 <__hexdig_fun+0x26>
 800a79c:	3827      	subs	r0, #39	; 0x27
 800a79e:	e7f1      	b.n	800a784 <__hexdig_fun+0xa>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	4770      	bx	lr

0800a7a4 <__gethex>:
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	b08b      	sub	sp, #44	; 0x2c
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	4bb2      	ldr	r3, [pc, #712]	; (800aa78 <__gethex+0x2d4>)
 800a7ae:	9002      	str	r0, [sp, #8]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	468b      	mov	fp, r1
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	4690      	mov	r8, r2
 800a7b8:	9303      	str	r3, [sp, #12]
 800a7ba:	f7f5 fcc9 	bl	8000150 <strlen>
 800a7be:	4682      	mov	sl, r0
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	f8db 2000 	ldr.w	r2, [fp]
 800a7c6:	4403      	add	r3, r0
 800a7c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a7cc:	9306      	str	r3, [sp, #24]
 800a7ce:	1c93      	adds	r3, r2, #2
 800a7d0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a7d4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a7d8:	32fe      	adds	r2, #254	; 0xfe
 800a7da:	18d1      	adds	r1, r2, r3
 800a7dc:	461f      	mov	r7, r3
 800a7de:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7e2:	9101      	str	r1, [sp, #4]
 800a7e4:	2830      	cmp	r0, #48	; 0x30
 800a7e6:	d0f8      	beq.n	800a7da <__gethex+0x36>
 800a7e8:	f7ff ffc7 	bl	800a77a <__hexdig_fun>
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d13a      	bne.n	800a868 <__gethex+0xc4>
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	9903      	ldr	r1, [sp, #12]
 800a7f8:	f001 fa26 	bl	800bc48 <strncmp>
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d166      	bne.n	800a8d0 <__gethex+0x12c>
 800a802:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a806:	eb07 060a 	add.w	r6, r7, sl
 800a80a:	f7ff ffb6 	bl	800a77a <__hexdig_fun>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d060      	beq.n	800a8d4 <__gethex+0x130>
 800a812:	4633      	mov	r3, r6
 800a814:	7818      	ldrb	r0, [r3, #0]
 800a816:	461f      	mov	r7, r3
 800a818:	2830      	cmp	r0, #48	; 0x30
 800a81a:	f103 0301 	add.w	r3, r3, #1
 800a81e:	d0f9      	beq.n	800a814 <__gethex+0x70>
 800a820:	f7ff ffab 	bl	800a77a <__hexdig_fun>
 800a824:	2301      	movs	r3, #1
 800a826:	fab0 f480 	clz	r4, r0
 800a82a:	4635      	mov	r5, r6
 800a82c:	0964      	lsrs	r4, r4, #5
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	463a      	mov	r2, r7
 800a832:	4616      	mov	r6, r2
 800a834:	7830      	ldrb	r0, [r6, #0]
 800a836:	3201      	adds	r2, #1
 800a838:	f7ff ff9f 	bl	800a77a <__hexdig_fun>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d1f8      	bne.n	800a832 <__gethex+0x8e>
 800a840:	4652      	mov	r2, sl
 800a842:	4630      	mov	r0, r6
 800a844:	9903      	ldr	r1, [sp, #12]
 800a846:	f001 f9ff 	bl	800bc48 <strncmp>
 800a84a:	b980      	cbnz	r0, 800a86e <__gethex+0xca>
 800a84c:	b94d      	cbnz	r5, 800a862 <__gethex+0xbe>
 800a84e:	eb06 050a 	add.w	r5, r6, sl
 800a852:	462a      	mov	r2, r5
 800a854:	4616      	mov	r6, r2
 800a856:	7830      	ldrb	r0, [r6, #0]
 800a858:	3201      	adds	r2, #1
 800a85a:	f7ff ff8e 	bl	800a77a <__hexdig_fun>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d1f8      	bne.n	800a854 <__gethex+0xb0>
 800a862:	1bad      	subs	r5, r5, r6
 800a864:	00ad      	lsls	r5, r5, #2
 800a866:	e004      	b.n	800a872 <__gethex+0xce>
 800a868:	2400      	movs	r4, #0
 800a86a:	4625      	mov	r5, r4
 800a86c:	e7e0      	b.n	800a830 <__gethex+0x8c>
 800a86e:	2d00      	cmp	r5, #0
 800a870:	d1f7      	bne.n	800a862 <__gethex+0xbe>
 800a872:	7833      	ldrb	r3, [r6, #0]
 800a874:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a878:	2b50      	cmp	r3, #80	; 0x50
 800a87a:	d139      	bne.n	800a8f0 <__gethex+0x14c>
 800a87c:	7873      	ldrb	r3, [r6, #1]
 800a87e:	2b2b      	cmp	r3, #43	; 0x2b
 800a880:	d02a      	beq.n	800a8d8 <__gethex+0x134>
 800a882:	2b2d      	cmp	r3, #45	; 0x2d
 800a884:	d02c      	beq.n	800a8e0 <__gethex+0x13c>
 800a886:	f04f 0900 	mov.w	r9, #0
 800a88a:	1c71      	adds	r1, r6, #1
 800a88c:	7808      	ldrb	r0, [r1, #0]
 800a88e:	f7ff ff74 	bl	800a77a <__hexdig_fun>
 800a892:	1e43      	subs	r3, r0, #1
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b18      	cmp	r3, #24
 800a898:	d82a      	bhi.n	800a8f0 <__gethex+0x14c>
 800a89a:	f1a0 0210 	sub.w	r2, r0, #16
 800a89e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a8a2:	f7ff ff6a 	bl	800a77a <__hexdig_fun>
 800a8a6:	1e43      	subs	r3, r0, #1
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b18      	cmp	r3, #24
 800a8ac:	d91b      	bls.n	800a8e6 <__gethex+0x142>
 800a8ae:	f1b9 0f00 	cmp.w	r9, #0
 800a8b2:	d000      	beq.n	800a8b6 <__gethex+0x112>
 800a8b4:	4252      	negs	r2, r2
 800a8b6:	4415      	add	r5, r2
 800a8b8:	f8cb 1000 	str.w	r1, [fp]
 800a8bc:	b1d4      	cbz	r4, 800a8f4 <__gethex+0x150>
 800a8be:	9b01      	ldr	r3, [sp, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	bf14      	ite	ne
 800a8c4:	2700      	movne	r7, #0
 800a8c6:	2706      	moveq	r7, #6
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	b00b      	add	sp, #44	; 0x2c
 800a8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d0:	463e      	mov	r6, r7
 800a8d2:	4625      	mov	r5, r4
 800a8d4:	2401      	movs	r4, #1
 800a8d6:	e7cc      	b.n	800a872 <__gethex+0xce>
 800a8d8:	f04f 0900 	mov.w	r9, #0
 800a8dc:	1cb1      	adds	r1, r6, #2
 800a8de:	e7d5      	b.n	800a88c <__gethex+0xe8>
 800a8e0:	f04f 0901 	mov.w	r9, #1
 800a8e4:	e7fa      	b.n	800a8dc <__gethex+0x138>
 800a8e6:	230a      	movs	r3, #10
 800a8e8:	fb03 0202 	mla	r2, r3, r2, r0
 800a8ec:	3a10      	subs	r2, #16
 800a8ee:	e7d6      	b.n	800a89e <__gethex+0xfa>
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	e7e1      	b.n	800a8b8 <__gethex+0x114>
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	1bf3      	subs	r3, r6, r7
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	2b07      	cmp	r3, #7
 800a8fc:	dc0a      	bgt.n	800a914 <__gethex+0x170>
 800a8fe:	9802      	ldr	r0, [sp, #8]
 800a900:	f000 fa88 	bl	800ae14 <_Balloc>
 800a904:	4604      	mov	r4, r0
 800a906:	b940      	cbnz	r0, 800a91a <__gethex+0x176>
 800a908:	4602      	mov	r2, r0
 800a90a:	21de      	movs	r1, #222	; 0xde
 800a90c:	4b5b      	ldr	r3, [pc, #364]	; (800aa7c <__gethex+0x2d8>)
 800a90e:	485c      	ldr	r0, [pc, #368]	; (800aa80 <__gethex+0x2dc>)
 800a910:	f001 f9bc 	bl	800bc8c <__assert_func>
 800a914:	3101      	adds	r1, #1
 800a916:	105b      	asrs	r3, r3, #1
 800a918:	e7ef      	b.n	800a8fa <__gethex+0x156>
 800a91a:	f04f 0b00 	mov.w	fp, #0
 800a91e:	f100 0914 	add.w	r9, r0, #20
 800a922:	f1ca 0301 	rsb	r3, sl, #1
 800a926:	f8cd 9010 	str.w	r9, [sp, #16]
 800a92a:	f8cd b004 	str.w	fp, [sp, #4]
 800a92e:	9308      	str	r3, [sp, #32]
 800a930:	42b7      	cmp	r7, r6
 800a932:	d33f      	bcc.n	800a9b4 <__gethex+0x210>
 800a934:	9f04      	ldr	r7, [sp, #16]
 800a936:	9b01      	ldr	r3, [sp, #4]
 800a938:	f847 3b04 	str.w	r3, [r7], #4
 800a93c:	eba7 0709 	sub.w	r7, r7, r9
 800a940:	10bf      	asrs	r7, r7, #2
 800a942:	6127      	str	r7, [r4, #16]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fb57 	bl	800aff8 <__hi0bits>
 800a94a:	017f      	lsls	r7, r7, #5
 800a94c:	f8d8 6000 	ldr.w	r6, [r8]
 800a950:	1a3f      	subs	r7, r7, r0
 800a952:	42b7      	cmp	r7, r6
 800a954:	dd62      	ble.n	800aa1c <__gethex+0x278>
 800a956:	1bbf      	subs	r7, r7, r6
 800a958:	4639      	mov	r1, r7
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 fef1 	bl	800b742 <__any_on>
 800a960:	4682      	mov	sl, r0
 800a962:	b1a8      	cbz	r0, 800a990 <__gethex+0x1ec>
 800a964:	f04f 0a01 	mov.w	sl, #1
 800a968:	1e7b      	subs	r3, r7, #1
 800a96a:	1159      	asrs	r1, r3, #5
 800a96c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a970:	f003 021f 	and.w	r2, r3, #31
 800a974:	fa0a f202 	lsl.w	r2, sl, r2
 800a978:	420a      	tst	r2, r1
 800a97a:	d009      	beq.n	800a990 <__gethex+0x1ec>
 800a97c:	4553      	cmp	r3, sl
 800a97e:	dd05      	ble.n	800a98c <__gethex+0x1e8>
 800a980:	4620      	mov	r0, r4
 800a982:	1eb9      	subs	r1, r7, #2
 800a984:	f000 fedd 	bl	800b742 <__any_on>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d144      	bne.n	800aa16 <__gethex+0x272>
 800a98c:	f04f 0a02 	mov.w	sl, #2
 800a990:	4639      	mov	r1, r7
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff fe9e 	bl	800a6d4 <rshift>
 800a998:	443d      	add	r5, r7
 800a99a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a99e:	42ab      	cmp	r3, r5
 800a9a0:	da4a      	bge.n	800aa38 <__gethex+0x294>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	9802      	ldr	r0, [sp, #8]
 800a9a6:	f000 fa75 	bl	800ae94 <_Bfree>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9ae:	27a3      	movs	r7, #163	; 0xa3
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	e789      	b.n	800a8c8 <__gethex+0x124>
 800a9b4:	1e73      	subs	r3, r6, #1
 800a9b6:	9a06      	ldr	r2, [sp, #24]
 800a9b8:	9307      	str	r3, [sp, #28]
 800a9ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d019      	beq.n	800a9f6 <__gethex+0x252>
 800a9c2:	f1bb 0f20 	cmp.w	fp, #32
 800a9c6:	d107      	bne.n	800a9d8 <__gethex+0x234>
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	9a01      	ldr	r2, [sp, #4]
 800a9cc:	f843 2b04 	str.w	r2, [r3], #4
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	469b      	mov	fp, r3
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a9dc:	f7ff fecd 	bl	800a77a <__hexdig_fun>
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	f000 000f 	and.w	r0, r0, #15
 800a9e6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a9ea:	4303      	orrs	r3, r0
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	f10b 0b04 	add.w	fp, fp, #4
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	e00d      	b.n	800aa12 <__gethex+0x26e>
 800a9f6:	9a08      	ldr	r2, [sp, #32]
 800a9f8:	1e73      	subs	r3, r6, #1
 800a9fa:	4413      	add	r3, r2
 800a9fc:	42bb      	cmp	r3, r7
 800a9fe:	d3e0      	bcc.n	800a9c2 <__gethex+0x21e>
 800aa00:	4618      	mov	r0, r3
 800aa02:	4652      	mov	r2, sl
 800aa04:	9903      	ldr	r1, [sp, #12]
 800aa06:	9309      	str	r3, [sp, #36]	; 0x24
 800aa08:	f001 f91e 	bl	800bc48 <strncmp>
 800aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d1d7      	bne.n	800a9c2 <__gethex+0x21e>
 800aa12:	461e      	mov	r6, r3
 800aa14:	e78c      	b.n	800a930 <__gethex+0x18c>
 800aa16:	f04f 0a03 	mov.w	sl, #3
 800aa1a:	e7b9      	b.n	800a990 <__gethex+0x1ec>
 800aa1c:	da09      	bge.n	800aa32 <__gethex+0x28e>
 800aa1e:	1bf7      	subs	r7, r6, r7
 800aa20:	4621      	mov	r1, r4
 800aa22:	463a      	mov	r2, r7
 800aa24:	9802      	ldr	r0, [sp, #8]
 800aa26:	f000 fc4d 	bl	800b2c4 <__lshift>
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	1bed      	subs	r5, r5, r7
 800aa2e:	f100 0914 	add.w	r9, r0, #20
 800aa32:	f04f 0a00 	mov.w	sl, #0
 800aa36:	e7b0      	b.n	800a99a <__gethex+0x1f6>
 800aa38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aa3c:	42a8      	cmp	r0, r5
 800aa3e:	dd72      	ble.n	800ab26 <__gethex+0x382>
 800aa40:	1b45      	subs	r5, r0, r5
 800aa42:	42ae      	cmp	r6, r5
 800aa44:	dc35      	bgt.n	800aab2 <__gethex+0x30e>
 800aa46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d029      	beq.n	800aaa2 <__gethex+0x2fe>
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d02b      	beq.n	800aaaa <__gethex+0x306>
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d11c      	bne.n	800aa90 <__gethex+0x2ec>
 800aa56:	42ae      	cmp	r6, r5
 800aa58:	d11a      	bne.n	800aa90 <__gethex+0x2ec>
 800aa5a:	2e01      	cmp	r6, #1
 800aa5c:	d112      	bne.n	800aa84 <__gethex+0x2e0>
 800aa5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa62:	9a05      	ldr	r2, [sp, #20]
 800aa64:	2762      	movs	r7, #98	; 0x62
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	2301      	movs	r3, #1
 800aa6a:	6123      	str	r3, [r4, #16]
 800aa6c:	f8c9 3000 	str.w	r3, [r9]
 800aa70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa72:	601c      	str	r4, [r3, #0]
 800aa74:	e728      	b.n	800a8c8 <__gethex+0x124>
 800aa76:	bf00      	nop
 800aa78:	0800d2e0 	.word	0x0800d2e0
 800aa7c:	0800d268 	.word	0x0800d268
 800aa80:	0800d279 	.word	0x0800d279
 800aa84:	4620      	mov	r0, r4
 800aa86:	1e71      	subs	r1, r6, #1
 800aa88:	f000 fe5b 	bl	800b742 <__any_on>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d1e6      	bne.n	800aa5e <__gethex+0x2ba>
 800aa90:	4621      	mov	r1, r4
 800aa92:	9802      	ldr	r0, [sp, #8]
 800aa94:	f000 f9fe 	bl	800ae94 <_Bfree>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa9c:	2750      	movs	r7, #80	; 0x50
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	e712      	b.n	800a8c8 <__gethex+0x124>
 800aaa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f3      	bne.n	800aa90 <__gethex+0x2ec>
 800aaa8:	e7d9      	b.n	800aa5e <__gethex+0x2ba>
 800aaaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1d6      	bne.n	800aa5e <__gethex+0x2ba>
 800aab0:	e7ee      	b.n	800aa90 <__gethex+0x2ec>
 800aab2:	1e6f      	subs	r7, r5, #1
 800aab4:	f1ba 0f00 	cmp.w	sl, #0
 800aab8:	d132      	bne.n	800ab20 <__gethex+0x37c>
 800aaba:	b127      	cbz	r7, 800aac6 <__gethex+0x322>
 800aabc:	4639      	mov	r1, r7
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 fe3f 	bl	800b742 <__any_on>
 800aac4:	4682      	mov	sl, r0
 800aac6:	2101      	movs	r1, #1
 800aac8:	117b      	asrs	r3, r7, #5
 800aaca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aace:	f007 071f 	and.w	r7, r7, #31
 800aad2:	fa01 f707 	lsl.w	r7, r1, r7
 800aad6:	421f      	tst	r7, r3
 800aad8:	f04f 0702 	mov.w	r7, #2
 800aadc:	4629      	mov	r1, r5
 800aade:	4620      	mov	r0, r4
 800aae0:	bf18      	it	ne
 800aae2:	f04a 0a02 	orrne.w	sl, sl, #2
 800aae6:	1b76      	subs	r6, r6, r5
 800aae8:	f7ff fdf4 	bl	800a6d4 <rshift>
 800aaec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aaf0:	f1ba 0f00 	cmp.w	sl, #0
 800aaf4:	d048      	beq.n	800ab88 <__gethex+0x3e4>
 800aaf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d015      	beq.n	800ab2a <__gethex+0x386>
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d017      	beq.n	800ab32 <__gethex+0x38e>
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d109      	bne.n	800ab1a <__gethex+0x376>
 800ab06:	f01a 0f02 	tst.w	sl, #2
 800ab0a:	d006      	beq.n	800ab1a <__gethex+0x376>
 800ab0c:	f8d9 0000 	ldr.w	r0, [r9]
 800ab10:	ea4a 0a00 	orr.w	sl, sl, r0
 800ab14:	f01a 0f01 	tst.w	sl, #1
 800ab18:	d10e      	bne.n	800ab38 <__gethex+0x394>
 800ab1a:	f047 0710 	orr.w	r7, r7, #16
 800ab1e:	e033      	b.n	800ab88 <__gethex+0x3e4>
 800ab20:	f04f 0a01 	mov.w	sl, #1
 800ab24:	e7cf      	b.n	800aac6 <__gethex+0x322>
 800ab26:	2701      	movs	r7, #1
 800ab28:	e7e2      	b.n	800aaf0 <__gethex+0x34c>
 800ab2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab2c:	f1c3 0301 	rsb	r3, r3, #1
 800ab30:	9315      	str	r3, [sp, #84]	; 0x54
 800ab32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d0f0      	beq.n	800ab1a <__gethex+0x376>
 800ab38:	f04f 0c00 	mov.w	ip, #0
 800ab3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab40:	f104 0314 	add.w	r3, r4, #20
 800ab44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab52:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab56:	d01c      	beq.n	800ab92 <__gethex+0x3ee>
 800ab58:	3201      	adds	r2, #1
 800ab5a:	6002      	str	r2, [r0, #0]
 800ab5c:	2f02      	cmp	r7, #2
 800ab5e:	f104 0314 	add.w	r3, r4, #20
 800ab62:	d13d      	bne.n	800abe0 <__gethex+0x43c>
 800ab64:	f8d8 2000 	ldr.w	r2, [r8]
 800ab68:	3a01      	subs	r2, #1
 800ab6a:	42b2      	cmp	r2, r6
 800ab6c:	d10a      	bne.n	800ab84 <__gethex+0x3e0>
 800ab6e:	2201      	movs	r2, #1
 800ab70:	1171      	asrs	r1, r6, #5
 800ab72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab76:	f006 061f 	and.w	r6, r6, #31
 800ab7a:	fa02 f606 	lsl.w	r6, r2, r6
 800ab7e:	421e      	tst	r6, r3
 800ab80:	bf18      	it	ne
 800ab82:	4617      	movne	r7, r2
 800ab84:	f047 0720 	orr.w	r7, r7, #32
 800ab88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab8a:	601c      	str	r4, [r3, #0]
 800ab8c:	9b05      	ldr	r3, [sp, #20]
 800ab8e:	601d      	str	r5, [r3, #0]
 800ab90:	e69a      	b.n	800a8c8 <__gethex+0x124>
 800ab92:	4299      	cmp	r1, r3
 800ab94:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab98:	d8d8      	bhi.n	800ab4c <__gethex+0x3a8>
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	459b      	cmp	fp, r3
 800ab9e:	db17      	blt.n	800abd0 <__gethex+0x42c>
 800aba0:	6861      	ldr	r1, [r4, #4]
 800aba2:	9802      	ldr	r0, [sp, #8]
 800aba4:	3101      	adds	r1, #1
 800aba6:	f000 f935 	bl	800ae14 <_Balloc>
 800abaa:	4681      	mov	r9, r0
 800abac:	b918      	cbnz	r0, 800abb6 <__gethex+0x412>
 800abae:	4602      	mov	r2, r0
 800abb0:	2184      	movs	r1, #132	; 0x84
 800abb2:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <__gethex+0x474>)
 800abb4:	e6ab      	b.n	800a90e <__gethex+0x16a>
 800abb6:	6922      	ldr	r2, [r4, #16]
 800abb8:	f104 010c 	add.w	r1, r4, #12
 800abbc:	3202      	adds	r2, #2
 800abbe:	0092      	lsls	r2, r2, #2
 800abc0:	300c      	adds	r0, #12
 800abc2:	f000 f919 	bl	800adf8 <memcpy>
 800abc6:	4621      	mov	r1, r4
 800abc8:	9802      	ldr	r0, [sp, #8]
 800abca:	f000 f963 	bl	800ae94 <_Bfree>
 800abce:	464c      	mov	r4, r9
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	6122      	str	r2, [r4, #16]
 800abd6:	2201      	movs	r2, #1
 800abd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abdc:	615a      	str	r2, [r3, #20]
 800abde:	e7bd      	b.n	800ab5c <__gethex+0x3b8>
 800abe0:	6922      	ldr	r2, [r4, #16]
 800abe2:	455a      	cmp	r2, fp
 800abe4:	dd0b      	ble.n	800abfe <__gethex+0x45a>
 800abe6:	2101      	movs	r1, #1
 800abe8:	4620      	mov	r0, r4
 800abea:	f7ff fd73 	bl	800a6d4 <rshift>
 800abee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abf2:	3501      	adds	r5, #1
 800abf4:	42ab      	cmp	r3, r5
 800abf6:	f6ff aed4 	blt.w	800a9a2 <__gethex+0x1fe>
 800abfa:	2701      	movs	r7, #1
 800abfc:	e7c2      	b.n	800ab84 <__gethex+0x3e0>
 800abfe:	f016 061f 	ands.w	r6, r6, #31
 800ac02:	d0fa      	beq.n	800abfa <__gethex+0x456>
 800ac04:	4453      	add	r3, sl
 800ac06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac0a:	f000 f9f5 	bl	800aff8 <__hi0bits>
 800ac0e:	f1c6 0620 	rsb	r6, r6, #32
 800ac12:	42b0      	cmp	r0, r6
 800ac14:	dbe7      	blt.n	800abe6 <__gethex+0x442>
 800ac16:	e7f0      	b.n	800abfa <__gethex+0x456>
 800ac18:	0800d268 	.word	0x0800d268

0800ac1c <L_shift>:
 800ac1c:	f1c2 0208 	rsb	r2, r2, #8
 800ac20:	0092      	lsls	r2, r2, #2
 800ac22:	b570      	push	{r4, r5, r6, lr}
 800ac24:	f1c2 0620 	rsb	r6, r2, #32
 800ac28:	6843      	ldr	r3, [r0, #4]
 800ac2a:	6804      	ldr	r4, [r0, #0]
 800ac2c:	fa03 f506 	lsl.w	r5, r3, r6
 800ac30:	432c      	orrs	r4, r5
 800ac32:	40d3      	lsrs	r3, r2
 800ac34:	6004      	str	r4, [r0, #0]
 800ac36:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac3a:	4288      	cmp	r0, r1
 800ac3c:	d3f4      	bcc.n	800ac28 <L_shift+0xc>
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}

0800ac40 <__match>:
 800ac40:	b530      	push	{r4, r5, lr}
 800ac42:	6803      	ldr	r3, [r0, #0]
 800ac44:	3301      	adds	r3, #1
 800ac46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac4a:	b914      	cbnz	r4, 800ac52 <__match+0x12>
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	2001      	movs	r0, #1
 800ac50:	bd30      	pop	{r4, r5, pc}
 800ac52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac5a:	2d19      	cmp	r5, #25
 800ac5c:	bf98      	it	ls
 800ac5e:	3220      	addls	r2, #32
 800ac60:	42a2      	cmp	r2, r4
 800ac62:	d0f0      	beq.n	800ac46 <__match+0x6>
 800ac64:	2000      	movs	r0, #0
 800ac66:	e7f3      	b.n	800ac50 <__match+0x10>

0800ac68 <__hexnan>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	2500      	movs	r5, #0
 800ac6e:	680b      	ldr	r3, [r1, #0]
 800ac70:	4682      	mov	sl, r0
 800ac72:	115e      	asrs	r6, r3, #5
 800ac74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac78:	f013 031f 	ands.w	r3, r3, #31
 800ac7c:	bf18      	it	ne
 800ac7e:	3604      	addne	r6, #4
 800ac80:	1f37      	subs	r7, r6, #4
 800ac82:	46b9      	mov	r9, r7
 800ac84:	463c      	mov	r4, r7
 800ac86:	46ab      	mov	fp, r5
 800ac88:	b087      	sub	sp, #28
 800ac8a:	4690      	mov	r8, r2
 800ac8c:	6802      	ldr	r2, [r0, #0]
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac94:	9502      	str	r5, [sp, #8]
 800ac96:	7851      	ldrb	r1, [r2, #1]
 800ac98:	1c53      	adds	r3, r2, #1
 800ac9a:	9303      	str	r3, [sp, #12]
 800ac9c:	b341      	cbz	r1, 800acf0 <__hexnan+0x88>
 800ac9e:	4608      	mov	r0, r1
 800aca0:	9205      	str	r2, [sp, #20]
 800aca2:	9104      	str	r1, [sp, #16]
 800aca4:	f7ff fd69 	bl	800a77a <__hexdig_fun>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d14f      	bne.n	800ad4c <__hexnan+0xe4>
 800acac:	9904      	ldr	r1, [sp, #16]
 800acae:	9a05      	ldr	r2, [sp, #20]
 800acb0:	2920      	cmp	r1, #32
 800acb2:	d818      	bhi.n	800ace6 <__hexnan+0x7e>
 800acb4:	9b02      	ldr	r3, [sp, #8]
 800acb6:	459b      	cmp	fp, r3
 800acb8:	dd13      	ble.n	800ace2 <__hexnan+0x7a>
 800acba:	454c      	cmp	r4, r9
 800acbc:	d206      	bcs.n	800accc <__hexnan+0x64>
 800acbe:	2d07      	cmp	r5, #7
 800acc0:	dc04      	bgt.n	800accc <__hexnan+0x64>
 800acc2:	462a      	mov	r2, r5
 800acc4:	4649      	mov	r1, r9
 800acc6:	4620      	mov	r0, r4
 800acc8:	f7ff ffa8 	bl	800ac1c <L_shift>
 800accc:	4544      	cmp	r4, r8
 800acce:	d950      	bls.n	800ad72 <__hexnan+0x10a>
 800acd0:	2300      	movs	r3, #0
 800acd2:	f1a4 0904 	sub.w	r9, r4, #4
 800acd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800acda:	461d      	mov	r5, r3
 800acdc:	464c      	mov	r4, r9
 800acde:	f8cd b008 	str.w	fp, [sp, #8]
 800ace2:	9a03      	ldr	r2, [sp, #12]
 800ace4:	e7d7      	b.n	800ac96 <__hexnan+0x2e>
 800ace6:	2929      	cmp	r1, #41	; 0x29
 800ace8:	d156      	bne.n	800ad98 <__hexnan+0x130>
 800acea:	3202      	adds	r2, #2
 800acec:	f8ca 2000 	str.w	r2, [sl]
 800acf0:	f1bb 0f00 	cmp.w	fp, #0
 800acf4:	d050      	beq.n	800ad98 <__hexnan+0x130>
 800acf6:	454c      	cmp	r4, r9
 800acf8:	d206      	bcs.n	800ad08 <__hexnan+0xa0>
 800acfa:	2d07      	cmp	r5, #7
 800acfc:	dc04      	bgt.n	800ad08 <__hexnan+0xa0>
 800acfe:	462a      	mov	r2, r5
 800ad00:	4649      	mov	r1, r9
 800ad02:	4620      	mov	r0, r4
 800ad04:	f7ff ff8a 	bl	800ac1c <L_shift>
 800ad08:	4544      	cmp	r4, r8
 800ad0a:	d934      	bls.n	800ad76 <__hexnan+0x10e>
 800ad0c:	4623      	mov	r3, r4
 800ad0e:	f1a8 0204 	sub.w	r2, r8, #4
 800ad12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad16:	429f      	cmp	r7, r3
 800ad18:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad1c:	d2f9      	bcs.n	800ad12 <__hexnan+0xaa>
 800ad1e:	1b3b      	subs	r3, r7, r4
 800ad20:	f023 0303 	bic.w	r3, r3, #3
 800ad24:	3304      	adds	r3, #4
 800ad26:	3401      	adds	r4, #1
 800ad28:	3e03      	subs	r6, #3
 800ad2a:	42b4      	cmp	r4, r6
 800ad2c:	bf88      	it	hi
 800ad2e:	2304      	movhi	r3, #4
 800ad30:	2200      	movs	r2, #0
 800ad32:	4443      	add	r3, r8
 800ad34:	f843 2b04 	str.w	r2, [r3], #4
 800ad38:	429f      	cmp	r7, r3
 800ad3a:	d2fb      	bcs.n	800ad34 <__hexnan+0xcc>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	b91b      	cbnz	r3, 800ad48 <__hexnan+0xe0>
 800ad40:	4547      	cmp	r7, r8
 800ad42:	d127      	bne.n	800ad94 <__hexnan+0x12c>
 800ad44:	2301      	movs	r3, #1
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	2005      	movs	r0, #5
 800ad4a:	e026      	b.n	800ad9a <__hexnan+0x132>
 800ad4c:	3501      	adds	r5, #1
 800ad4e:	2d08      	cmp	r5, #8
 800ad50:	f10b 0b01 	add.w	fp, fp, #1
 800ad54:	dd06      	ble.n	800ad64 <__hexnan+0xfc>
 800ad56:	4544      	cmp	r4, r8
 800ad58:	d9c3      	bls.n	800ace2 <__hexnan+0x7a>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	2501      	movs	r5, #1
 800ad5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad62:	3c04      	subs	r4, #4
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	f000 000f 	and.w	r0, r0, #15
 800ad6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad6e:	6022      	str	r2, [r4, #0]
 800ad70:	e7b7      	b.n	800ace2 <__hexnan+0x7a>
 800ad72:	2508      	movs	r5, #8
 800ad74:	e7b5      	b.n	800ace2 <__hexnan+0x7a>
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0df      	beq.n	800ad3c <__hexnan+0xd4>
 800ad7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad80:	f1c3 0320 	rsb	r3, r3, #32
 800ad84:	fa22 f303 	lsr.w	r3, r2, r3
 800ad88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad8c:	401a      	ands	r2, r3
 800ad8e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad92:	e7d3      	b.n	800ad3c <__hexnan+0xd4>
 800ad94:	3f04      	subs	r7, #4
 800ad96:	e7d1      	b.n	800ad3c <__hexnan+0xd4>
 800ad98:	2004      	movs	r0, #4
 800ad9a:	b007      	add	sp, #28
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ada0 <_localeconv_r>:
 800ada0:	4800      	ldr	r0, [pc, #0]	; (800ada4 <_localeconv_r+0x4>)
 800ada2:	4770      	bx	lr
 800ada4:	2000018c 	.word	0x2000018c

0800ada8 <malloc>:
 800ada8:	4b02      	ldr	r3, [pc, #8]	; (800adb4 <malloc+0xc>)
 800adaa:	4601      	mov	r1, r0
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	f000 bd65 	b.w	800b87c <_malloc_r>
 800adb2:	bf00      	nop
 800adb4:	20000034 	.word	0x20000034

0800adb8 <__ascii_mbtowc>:
 800adb8:	b082      	sub	sp, #8
 800adba:	b901      	cbnz	r1, 800adbe <__ascii_mbtowc+0x6>
 800adbc:	a901      	add	r1, sp, #4
 800adbe:	b142      	cbz	r2, 800add2 <__ascii_mbtowc+0x1a>
 800adc0:	b14b      	cbz	r3, 800add6 <__ascii_mbtowc+0x1e>
 800adc2:	7813      	ldrb	r3, [r2, #0]
 800adc4:	600b      	str	r3, [r1, #0]
 800adc6:	7812      	ldrb	r2, [r2, #0]
 800adc8:	1e10      	subs	r0, r2, #0
 800adca:	bf18      	it	ne
 800adcc:	2001      	movne	r0, #1
 800adce:	b002      	add	sp, #8
 800add0:	4770      	bx	lr
 800add2:	4610      	mov	r0, r2
 800add4:	e7fb      	b.n	800adce <__ascii_mbtowc+0x16>
 800add6:	f06f 0001 	mvn.w	r0, #1
 800adda:	e7f8      	b.n	800adce <__ascii_mbtowc+0x16>

0800addc <memchr>:
 800addc:	4603      	mov	r3, r0
 800adde:	b510      	push	{r4, lr}
 800ade0:	b2c9      	uxtb	r1, r1
 800ade2:	4402      	add	r2, r0
 800ade4:	4293      	cmp	r3, r2
 800ade6:	4618      	mov	r0, r3
 800ade8:	d101      	bne.n	800adee <memchr+0x12>
 800adea:	2000      	movs	r0, #0
 800adec:	e003      	b.n	800adf6 <memchr+0x1a>
 800adee:	7804      	ldrb	r4, [r0, #0]
 800adf0:	3301      	adds	r3, #1
 800adf2:	428c      	cmp	r4, r1
 800adf4:	d1f6      	bne.n	800ade4 <memchr+0x8>
 800adf6:	bd10      	pop	{r4, pc}

0800adf8 <memcpy>:
 800adf8:	440a      	add	r2, r1
 800adfa:	4291      	cmp	r1, r2
 800adfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae00:	d100      	bne.n	800ae04 <memcpy+0xc>
 800ae02:	4770      	bx	lr
 800ae04:	b510      	push	{r4, lr}
 800ae06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae0a:	4291      	cmp	r1, r2
 800ae0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae10:	d1f9      	bne.n	800ae06 <memcpy+0xe>
 800ae12:	bd10      	pop	{r4, pc}

0800ae14 <_Balloc>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae18:	4604      	mov	r4, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	b976      	cbnz	r6, 800ae3c <_Balloc+0x28>
 800ae1e:	2010      	movs	r0, #16
 800ae20:	f7ff ffc2 	bl	800ada8 <malloc>
 800ae24:	4602      	mov	r2, r0
 800ae26:	6260      	str	r0, [r4, #36]	; 0x24
 800ae28:	b920      	cbnz	r0, 800ae34 <_Balloc+0x20>
 800ae2a:	2166      	movs	r1, #102	; 0x66
 800ae2c:	4b17      	ldr	r3, [pc, #92]	; (800ae8c <_Balloc+0x78>)
 800ae2e:	4818      	ldr	r0, [pc, #96]	; (800ae90 <_Balloc+0x7c>)
 800ae30:	f000 ff2c 	bl	800bc8c <__assert_func>
 800ae34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae38:	6006      	str	r6, [r0, #0]
 800ae3a:	60c6      	str	r6, [r0, #12]
 800ae3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae3e:	68f3      	ldr	r3, [r6, #12]
 800ae40:	b183      	cbz	r3, 800ae64 <_Balloc+0x50>
 800ae42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae4a:	b9b8      	cbnz	r0, 800ae7c <_Balloc+0x68>
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ae52:	1d72      	adds	r2, r6, #5
 800ae54:	4620      	mov	r0, r4
 800ae56:	0092      	lsls	r2, r2, #2
 800ae58:	f000 fc94 	bl	800b784 <_calloc_r>
 800ae5c:	b160      	cbz	r0, 800ae78 <_Balloc+0x64>
 800ae5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae62:	e00e      	b.n	800ae82 <_Balloc+0x6e>
 800ae64:	2221      	movs	r2, #33	; 0x21
 800ae66:	2104      	movs	r1, #4
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 fc8b 	bl	800b784 <_calloc_r>
 800ae6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae70:	60f0      	str	r0, [r6, #12]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e4      	bne.n	800ae42 <_Balloc+0x2e>
 800ae78:	2000      	movs	r0, #0
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	6802      	ldr	r2, [r0, #0]
 800ae7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae82:	2300      	movs	r3, #0
 800ae84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae88:	e7f7      	b.n	800ae7a <_Balloc+0x66>
 800ae8a:	bf00      	nop
 800ae8c:	0800d1f6 	.word	0x0800d1f6
 800ae90:	0800d2f4 	.word	0x0800d2f4

0800ae94 <_Bfree>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae98:	4605      	mov	r5, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b976      	cbnz	r6, 800aebc <_Bfree+0x28>
 800ae9e:	2010      	movs	r0, #16
 800aea0:	f7ff ff82 	bl	800ada8 <malloc>
 800aea4:	4602      	mov	r2, r0
 800aea6:	6268      	str	r0, [r5, #36]	; 0x24
 800aea8:	b920      	cbnz	r0, 800aeb4 <_Bfree+0x20>
 800aeaa:	218a      	movs	r1, #138	; 0x8a
 800aeac:	4b08      	ldr	r3, [pc, #32]	; (800aed0 <_Bfree+0x3c>)
 800aeae:	4809      	ldr	r0, [pc, #36]	; (800aed4 <_Bfree+0x40>)
 800aeb0:	f000 feec 	bl	800bc8c <__assert_func>
 800aeb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeb8:	6006      	str	r6, [r0, #0]
 800aeba:	60c6      	str	r6, [r0, #12]
 800aebc:	b13c      	cbz	r4, 800aece <_Bfree+0x3a>
 800aebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aec0:	6862      	ldr	r2, [r4, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aec8:	6021      	str	r1, [r4, #0]
 800aeca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	0800d1f6 	.word	0x0800d1f6
 800aed4:	0800d2f4 	.word	0x0800d2f4

0800aed8 <__multadd>:
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	4607      	mov	r7, r0
 800aede:	460c      	mov	r4, r1
 800aee0:	461e      	mov	r6, r3
 800aee2:	2000      	movs	r0, #0
 800aee4:	690d      	ldr	r5, [r1, #16]
 800aee6:	f101 0c14 	add.w	ip, r1, #20
 800aeea:	f8dc 3000 	ldr.w	r3, [ip]
 800aeee:	3001      	adds	r0, #1
 800aef0:	b299      	uxth	r1, r3
 800aef2:	fb02 6101 	mla	r1, r2, r1, r6
 800aef6:	0c1e      	lsrs	r6, r3, #16
 800aef8:	0c0b      	lsrs	r3, r1, #16
 800aefa:	fb02 3306 	mla	r3, r2, r6, r3
 800aefe:	b289      	uxth	r1, r1
 800af00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af04:	4285      	cmp	r5, r0
 800af06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af0a:	f84c 1b04 	str.w	r1, [ip], #4
 800af0e:	dcec      	bgt.n	800aeea <__multadd+0x12>
 800af10:	b30e      	cbz	r6, 800af56 <__multadd+0x7e>
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	42ab      	cmp	r3, r5
 800af16:	dc19      	bgt.n	800af4c <__multadd+0x74>
 800af18:	6861      	ldr	r1, [r4, #4]
 800af1a:	4638      	mov	r0, r7
 800af1c:	3101      	adds	r1, #1
 800af1e:	f7ff ff79 	bl	800ae14 <_Balloc>
 800af22:	4680      	mov	r8, r0
 800af24:	b928      	cbnz	r0, 800af32 <__multadd+0x5a>
 800af26:	4602      	mov	r2, r0
 800af28:	21b5      	movs	r1, #181	; 0xb5
 800af2a:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <__multadd+0x84>)
 800af2c:	480c      	ldr	r0, [pc, #48]	; (800af60 <__multadd+0x88>)
 800af2e:	f000 fead 	bl	800bc8c <__assert_func>
 800af32:	6922      	ldr	r2, [r4, #16]
 800af34:	f104 010c 	add.w	r1, r4, #12
 800af38:	3202      	adds	r2, #2
 800af3a:	0092      	lsls	r2, r2, #2
 800af3c:	300c      	adds	r0, #12
 800af3e:	f7ff ff5b 	bl	800adf8 <memcpy>
 800af42:	4621      	mov	r1, r4
 800af44:	4638      	mov	r0, r7
 800af46:	f7ff ffa5 	bl	800ae94 <_Bfree>
 800af4a:	4644      	mov	r4, r8
 800af4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af50:	3501      	adds	r5, #1
 800af52:	615e      	str	r6, [r3, #20]
 800af54:	6125      	str	r5, [r4, #16]
 800af56:	4620      	mov	r0, r4
 800af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5c:	0800d268 	.word	0x0800d268
 800af60:	0800d2f4 	.word	0x0800d2f4

0800af64 <__s2b>:
 800af64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af68:	4615      	mov	r5, r2
 800af6a:	2209      	movs	r2, #9
 800af6c:	461f      	mov	r7, r3
 800af6e:	3308      	adds	r3, #8
 800af70:	460c      	mov	r4, r1
 800af72:	fb93 f3f2 	sdiv	r3, r3, r2
 800af76:	4606      	mov	r6, r0
 800af78:	2201      	movs	r2, #1
 800af7a:	2100      	movs	r1, #0
 800af7c:	429a      	cmp	r2, r3
 800af7e:	db09      	blt.n	800af94 <__s2b+0x30>
 800af80:	4630      	mov	r0, r6
 800af82:	f7ff ff47 	bl	800ae14 <_Balloc>
 800af86:	b940      	cbnz	r0, 800af9a <__s2b+0x36>
 800af88:	4602      	mov	r2, r0
 800af8a:	21ce      	movs	r1, #206	; 0xce
 800af8c:	4b18      	ldr	r3, [pc, #96]	; (800aff0 <__s2b+0x8c>)
 800af8e:	4819      	ldr	r0, [pc, #100]	; (800aff4 <__s2b+0x90>)
 800af90:	f000 fe7c 	bl	800bc8c <__assert_func>
 800af94:	0052      	lsls	r2, r2, #1
 800af96:	3101      	adds	r1, #1
 800af98:	e7f0      	b.n	800af7c <__s2b+0x18>
 800af9a:	9b08      	ldr	r3, [sp, #32]
 800af9c:	2d09      	cmp	r5, #9
 800af9e:	6143      	str	r3, [r0, #20]
 800afa0:	f04f 0301 	mov.w	r3, #1
 800afa4:	6103      	str	r3, [r0, #16]
 800afa6:	dd16      	ble.n	800afd6 <__s2b+0x72>
 800afa8:	f104 0909 	add.w	r9, r4, #9
 800afac:	46c8      	mov	r8, r9
 800afae:	442c      	add	r4, r5
 800afb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afb4:	4601      	mov	r1, r0
 800afb6:	220a      	movs	r2, #10
 800afb8:	4630      	mov	r0, r6
 800afba:	3b30      	subs	r3, #48	; 0x30
 800afbc:	f7ff ff8c 	bl	800aed8 <__multadd>
 800afc0:	45a0      	cmp	r8, r4
 800afc2:	d1f5      	bne.n	800afb0 <__s2b+0x4c>
 800afc4:	f1a5 0408 	sub.w	r4, r5, #8
 800afc8:	444c      	add	r4, r9
 800afca:	1b2d      	subs	r5, r5, r4
 800afcc:	1963      	adds	r3, r4, r5
 800afce:	42bb      	cmp	r3, r7
 800afd0:	db04      	blt.n	800afdc <__s2b+0x78>
 800afd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd6:	2509      	movs	r5, #9
 800afd8:	340a      	adds	r4, #10
 800afda:	e7f6      	b.n	800afca <__s2b+0x66>
 800afdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afe0:	4601      	mov	r1, r0
 800afe2:	220a      	movs	r2, #10
 800afe4:	4630      	mov	r0, r6
 800afe6:	3b30      	subs	r3, #48	; 0x30
 800afe8:	f7ff ff76 	bl	800aed8 <__multadd>
 800afec:	e7ee      	b.n	800afcc <__s2b+0x68>
 800afee:	bf00      	nop
 800aff0:	0800d268 	.word	0x0800d268
 800aff4:	0800d2f4 	.word	0x0800d2f4

0800aff8 <__hi0bits>:
 800aff8:	0c02      	lsrs	r2, r0, #16
 800affa:	0412      	lsls	r2, r2, #16
 800affc:	4603      	mov	r3, r0
 800affe:	b9ca      	cbnz	r2, 800b034 <__hi0bits+0x3c>
 800b000:	0403      	lsls	r3, r0, #16
 800b002:	2010      	movs	r0, #16
 800b004:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b008:	bf04      	itt	eq
 800b00a:	021b      	lsleq	r3, r3, #8
 800b00c:	3008      	addeq	r0, #8
 800b00e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b012:	bf04      	itt	eq
 800b014:	011b      	lsleq	r3, r3, #4
 800b016:	3004      	addeq	r0, #4
 800b018:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b01c:	bf04      	itt	eq
 800b01e:	009b      	lsleq	r3, r3, #2
 800b020:	3002      	addeq	r0, #2
 800b022:	2b00      	cmp	r3, #0
 800b024:	db05      	blt.n	800b032 <__hi0bits+0x3a>
 800b026:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b02a:	f100 0001 	add.w	r0, r0, #1
 800b02e:	bf08      	it	eq
 800b030:	2020      	moveq	r0, #32
 800b032:	4770      	bx	lr
 800b034:	2000      	movs	r0, #0
 800b036:	e7e5      	b.n	800b004 <__hi0bits+0xc>

0800b038 <__lo0bits>:
 800b038:	6803      	ldr	r3, [r0, #0]
 800b03a:	4602      	mov	r2, r0
 800b03c:	f013 0007 	ands.w	r0, r3, #7
 800b040:	d00b      	beq.n	800b05a <__lo0bits+0x22>
 800b042:	07d9      	lsls	r1, r3, #31
 800b044:	d421      	bmi.n	800b08a <__lo0bits+0x52>
 800b046:	0798      	lsls	r0, r3, #30
 800b048:	bf49      	itett	mi
 800b04a:	085b      	lsrmi	r3, r3, #1
 800b04c:	089b      	lsrpl	r3, r3, #2
 800b04e:	2001      	movmi	r0, #1
 800b050:	6013      	strmi	r3, [r2, #0]
 800b052:	bf5c      	itt	pl
 800b054:	2002      	movpl	r0, #2
 800b056:	6013      	strpl	r3, [r2, #0]
 800b058:	4770      	bx	lr
 800b05a:	b299      	uxth	r1, r3
 800b05c:	b909      	cbnz	r1, 800b062 <__lo0bits+0x2a>
 800b05e:	2010      	movs	r0, #16
 800b060:	0c1b      	lsrs	r3, r3, #16
 800b062:	b2d9      	uxtb	r1, r3
 800b064:	b909      	cbnz	r1, 800b06a <__lo0bits+0x32>
 800b066:	3008      	adds	r0, #8
 800b068:	0a1b      	lsrs	r3, r3, #8
 800b06a:	0719      	lsls	r1, r3, #28
 800b06c:	bf04      	itt	eq
 800b06e:	091b      	lsreq	r3, r3, #4
 800b070:	3004      	addeq	r0, #4
 800b072:	0799      	lsls	r1, r3, #30
 800b074:	bf04      	itt	eq
 800b076:	089b      	lsreq	r3, r3, #2
 800b078:	3002      	addeq	r0, #2
 800b07a:	07d9      	lsls	r1, r3, #31
 800b07c:	d403      	bmi.n	800b086 <__lo0bits+0x4e>
 800b07e:	085b      	lsrs	r3, r3, #1
 800b080:	f100 0001 	add.w	r0, r0, #1
 800b084:	d003      	beq.n	800b08e <__lo0bits+0x56>
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	4770      	bx	lr
 800b08a:	2000      	movs	r0, #0
 800b08c:	4770      	bx	lr
 800b08e:	2020      	movs	r0, #32
 800b090:	4770      	bx	lr
	...

0800b094 <__i2b>:
 800b094:	b510      	push	{r4, lr}
 800b096:	460c      	mov	r4, r1
 800b098:	2101      	movs	r1, #1
 800b09a:	f7ff febb 	bl	800ae14 <_Balloc>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	b928      	cbnz	r0, 800b0ae <__i2b+0x1a>
 800b0a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0a6:	4b04      	ldr	r3, [pc, #16]	; (800b0b8 <__i2b+0x24>)
 800b0a8:	4804      	ldr	r0, [pc, #16]	; (800b0bc <__i2b+0x28>)
 800b0aa:	f000 fdef 	bl	800bc8c <__assert_func>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	6144      	str	r4, [r0, #20]
 800b0b2:	6103      	str	r3, [r0, #16]
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0800d268 	.word	0x0800d268
 800b0bc:	0800d2f4 	.word	0x0800d2f4

0800b0c0 <__multiply>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	4691      	mov	r9, r2
 800b0c6:	690a      	ldr	r2, [r1, #16]
 800b0c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	bfbe      	ittt	lt
 800b0d2:	460b      	movlt	r3, r1
 800b0d4:	464c      	movlt	r4, r9
 800b0d6:	4699      	movlt	r9, r3
 800b0d8:	6927      	ldr	r7, [r4, #16]
 800b0da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	6861      	ldr	r1, [r4, #4]
 800b0e2:	eb07 060a 	add.w	r6, r7, sl
 800b0e6:	42b3      	cmp	r3, r6
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	bfb8      	it	lt
 800b0ec:	3101      	addlt	r1, #1
 800b0ee:	f7ff fe91 	bl	800ae14 <_Balloc>
 800b0f2:	b930      	cbnz	r0, 800b102 <__multiply+0x42>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f240 115d 	movw	r1, #349	; 0x15d
 800b0fa:	4b43      	ldr	r3, [pc, #268]	; (800b208 <__multiply+0x148>)
 800b0fc:	4843      	ldr	r0, [pc, #268]	; (800b20c <__multiply+0x14c>)
 800b0fe:	f000 fdc5 	bl	800bc8c <__assert_func>
 800b102:	f100 0514 	add.w	r5, r0, #20
 800b106:	462b      	mov	r3, r5
 800b108:	2200      	movs	r2, #0
 800b10a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b10e:	4543      	cmp	r3, r8
 800b110:	d321      	bcc.n	800b156 <__multiply+0x96>
 800b112:	f104 0314 	add.w	r3, r4, #20
 800b116:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b11a:	f109 0314 	add.w	r3, r9, #20
 800b11e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b122:	9202      	str	r2, [sp, #8]
 800b124:	1b3a      	subs	r2, r7, r4
 800b126:	3a15      	subs	r2, #21
 800b128:	f022 0203 	bic.w	r2, r2, #3
 800b12c:	3204      	adds	r2, #4
 800b12e:	f104 0115 	add.w	r1, r4, #21
 800b132:	428f      	cmp	r7, r1
 800b134:	bf38      	it	cc
 800b136:	2204      	movcc	r2, #4
 800b138:	9201      	str	r2, [sp, #4]
 800b13a:	9a02      	ldr	r2, [sp, #8]
 800b13c:	9303      	str	r3, [sp, #12]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d80c      	bhi.n	800b15c <__multiply+0x9c>
 800b142:	2e00      	cmp	r6, #0
 800b144:	dd03      	ble.n	800b14e <__multiply+0x8e>
 800b146:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d059      	beq.n	800b202 <__multiply+0x142>
 800b14e:	6106      	str	r6, [r0, #16]
 800b150:	b005      	add	sp, #20
 800b152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b156:	f843 2b04 	str.w	r2, [r3], #4
 800b15a:	e7d8      	b.n	800b10e <__multiply+0x4e>
 800b15c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b160:	f1ba 0f00 	cmp.w	sl, #0
 800b164:	d023      	beq.n	800b1ae <__multiply+0xee>
 800b166:	46a9      	mov	r9, r5
 800b168:	f04f 0c00 	mov.w	ip, #0
 800b16c:	f104 0e14 	add.w	lr, r4, #20
 800b170:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b174:	f8d9 1000 	ldr.w	r1, [r9]
 800b178:	fa1f fb82 	uxth.w	fp, r2
 800b17c:	b289      	uxth	r1, r1
 800b17e:	fb0a 110b 	mla	r1, sl, fp, r1
 800b182:	4461      	add	r1, ip
 800b184:	f8d9 c000 	ldr.w	ip, [r9]
 800b188:	0c12      	lsrs	r2, r2, #16
 800b18a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b18e:	fb0a c202 	mla	r2, sl, r2, ip
 800b192:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b196:	b289      	uxth	r1, r1
 800b198:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b19c:	4577      	cmp	r7, lr
 800b19e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1a2:	f849 1b04 	str.w	r1, [r9], #4
 800b1a6:	d8e3      	bhi.n	800b170 <__multiply+0xb0>
 800b1a8:	9a01      	ldr	r2, [sp, #4]
 800b1aa:	f845 c002 	str.w	ip, [r5, r2]
 800b1ae:	9a03      	ldr	r2, [sp, #12]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1b6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ba:	d020      	beq.n	800b1fe <__multiply+0x13e>
 800b1bc:	46ae      	mov	lr, r5
 800b1be:	f04f 0a00 	mov.w	sl, #0
 800b1c2:	6829      	ldr	r1, [r5, #0]
 800b1c4:	f104 0c14 	add.w	ip, r4, #20
 800b1c8:	f8bc b000 	ldrh.w	fp, [ip]
 800b1cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1d0:	b289      	uxth	r1, r1
 800b1d2:	fb09 220b 	mla	r2, r9, fp, r2
 800b1d6:	4492      	add	sl, r2
 800b1d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1dc:	f84e 1b04 	str.w	r1, [lr], #4
 800b1e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1e4:	f8be 1000 	ldrh.w	r1, [lr]
 800b1e8:	0c12      	lsrs	r2, r2, #16
 800b1ea:	fb09 1102 	mla	r1, r9, r2, r1
 800b1ee:	4567      	cmp	r7, ip
 800b1f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1f8:	d8e6      	bhi.n	800b1c8 <__multiply+0x108>
 800b1fa:	9a01      	ldr	r2, [sp, #4]
 800b1fc:	50a9      	str	r1, [r5, r2]
 800b1fe:	3504      	adds	r5, #4
 800b200:	e79b      	b.n	800b13a <__multiply+0x7a>
 800b202:	3e01      	subs	r6, #1
 800b204:	e79d      	b.n	800b142 <__multiply+0x82>
 800b206:	bf00      	nop
 800b208:	0800d268 	.word	0x0800d268
 800b20c:	0800d2f4 	.word	0x0800d2f4

0800b210 <__pow5mult>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	4615      	mov	r5, r2
 800b216:	f012 0203 	ands.w	r2, r2, #3
 800b21a:	4606      	mov	r6, r0
 800b21c:	460f      	mov	r7, r1
 800b21e:	d007      	beq.n	800b230 <__pow5mult+0x20>
 800b220:	4c25      	ldr	r4, [pc, #148]	; (800b2b8 <__pow5mult+0xa8>)
 800b222:	3a01      	subs	r2, #1
 800b224:	2300      	movs	r3, #0
 800b226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b22a:	f7ff fe55 	bl	800aed8 <__multadd>
 800b22e:	4607      	mov	r7, r0
 800b230:	10ad      	asrs	r5, r5, #2
 800b232:	d03d      	beq.n	800b2b0 <__pow5mult+0xa0>
 800b234:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b236:	b97c      	cbnz	r4, 800b258 <__pow5mult+0x48>
 800b238:	2010      	movs	r0, #16
 800b23a:	f7ff fdb5 	bl	800ada8 <malloc>
 800b23e:	4602      	mov	r2, r0
 800b240:	6270      	str	r0, [r6, #36]	; 0x24
 800b242:	b928      	cbnz	r0, 800b250 <__pow5mult+0x40>
 800b244:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b248:	4b1c      	ldr	r3, [pc, #112]	; (800b2bc <__pow5mult+0xac>)
 800b24a:	481d      	ldr	r0, [pc, #116]	; (800b2c0 <__pow5mult+0xb0>)
 800b24c:	f000 fd1e 	bl	800bc8c <__assert_func>
 800b250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b254:	6004      	str	r4, [r0, #0]
 800b256:	60c4      	str	r4, [r0, #12]
 800b258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b25c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b260:	b94c      	cbnz	r4, 800b276 <__pow5mult+0x66>
 800b262:	f240 2171 	movw	r1, #625	; 0x271
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ff14 	bl	800b094 <__i2b>
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	f8c8 0008 	str.w	r0, [r8, #8]
 800b274:	6003      	str	r3, [r0, #0]
 800b276:	f04f 0900 	mov.w	r9, #0
 800b27a:	07eb      	lsls	r3, r5, #31
 800b27c:	d50a      	bpl.n	800b294 <__pow5mult+0x84>
 800b27e:	4639      	mov	r1, r7
 800b280:	4622      	mov	r2, r4
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ff1c 	bl	800b0c0 <__multiply>
 800b288:	4680      	mov	r8, r0
 800b28a:	4639      	mov	r1, r7
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff fe01 	bl	800ae94 <_Bfree>
 800b292:	4647      	mov	r7, r8
 800b294:	106d      	asrs	r5, r5, #1
 800b296:	d00b      	beq.n	800b2b0 <__pow5mult+0xa0>
 800b298:	6820      	ldr	r0, [r4, #0]
 800b29a:	b938      	cbnz	r0, 800b2ac <__pow5mult+0x9c>
 800b29c:	4622      	mov	r2, r4
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ff0d 	bl	800b0c0 <__multiply>
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f8c0 9000 	str.w	r9, [r0]
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	e7e4      	b.n	800b27a <__pow5mult+0x6a>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b6:	bf00      	nop
 800b2b8:	0800d440 	.word	0x0800d440
 800b2bc:	0800d1f6 	.word	0x0800d1f6
 800b2c0:	0800d2f4 	.word	0x0800d2f4

0800b2c4 <__lshift>:
 800b2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	4691      	mov	r9, r2
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	6849      	ldr	r1, [r1, #4]
 800b2d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2dc:	f108 0601 	add.w	r6, r8, #1
 800b2e0:	42b3      	cmp	r3, r6
 800b2e2:	db0b      	blt.n	800b2fc <__lshift+0x38>
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff fd95 	bl	800ae14 <_Balloc>
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b948      	cbnz	r0, 800b302 <__lshift+0x3e>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2f4:	4b29      	ldr	r3, [pc, #164]	; (800b39c <__lshift+0xd8>)
 800b2f6:	482a      	ldr	r0, [pc, #168]	; (800b3a0 <__lshift+0xdc>)
 800b2f8:	f000 fcc8 	bl	800bc8c <__assert_func>
 800b2fc:	3101      	adds	r1, #1
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	e7ee      	b.n	800b2e0 <__lshift+0x1c>
 800b302:	2300      	movs	r3, #0
 800b304:	f100 0114 	add.w	r1, r0, #20
 800b308:	f100 0210 	add.w	r2, r0, #16
 800b30c:	4618      	mov	r0, r3
 800b30e:	4553      	cmp	r3, sl
 800b310:	db37      	blt.n	800b382 <__lshift+0xbe>
 800b312:	6920      	ldr	r0, [r4, #16]
 800b314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b318:	f104 0314 	add.w	r3, r4, #20
 800b31c:	f019 091f 	ands.w	r9, r9, #31
 800b320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b324:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b328:	d02f      	beq.n	800b38a <__lshift+0xc6>
 800b32a:	468a      	mov	sl, r1
 800b32c:	f04f 0c00 	mov.w	ip, #0
 800b330:	f1c9 0e20 	rsb	lr, r9, #32
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	fa02 f209 	lsl.w	r2, r2, r9
 800b33a:	ea42 020c 	orr.w	r2, r2, ip
 800b33e:	f84a 2b04 	str.w	r2, [sl], #4
 800b342:	f853 2b04 	ldr.w	r2, [r3], #4
 800b346:	4298      	cmp	r0, r3
 800b348:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b34c:	d8f2      	bhi.n	800b334 <__lshift+0x70>
 800b34e:	1b03      	subs	r3, r0, r4
 800b350:	3b15      	subs	r3, #21
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	3304      	adds	r3, #4
 800b358:	f104 0215 	add.w	r2, r4, #21
 800b35c:	4290      	cmp	r0, r2
 800b35e:	bf38      	it	cc
 800b360:	2304      	movcc	r3, #4
 800b362:	f841 c003 	str.w	ip, [r1, r3]
 800b366:	f1bc 0f00 	cmp.w	ip, #0
 800b36a:	d001      	beq.n	800b370 <__lshift+0xac>
 800b36c:	f108 0602 	add.w	r6, r8, #2
 800b370:	3e01      	subs	r6, #1
 800b372:	4638      	mov	r0, r7
 800b374:	4621      	mov	r1, r4
 800b376:	612e      	str	r6, [r5, #16]
 800b378:	f7ff fd8c 	bl	800ae94 <_Bfree>
 800b37c:	4628      	mov	r0, r5
 800b37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b382:	f842 0f04 	str.w	r0, [r2, #4]!
 800b386:	3301      	adds	r3, #1
 800b388:	e7c1      	b.n	800b30e <__lshift+0x4a>
 800b38a:	3904      	subs	r1, #4
 800b38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b390:	4298      	cmp	r0, r3
 800b392:	f841 2f04 	str.w	r2, [r1, #4]!
 800b396:	d8f9      	bhi.n	800b38c <__lshift+0xc8>
 800b398:	e7ea      	b.n	800b370 <__lshift+0xac>
 800b39a:	bf00      	nop
 800b39c:	0800d268 	.word	0x0800d268
 800b3a0:	0800d2f4 	.word	0x0800d2f4

0800b3a4 <__mcmp>:
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	690a      	ldr	r2, [r1, #16]
 800b3a8:	6900      	ldr	r0, [r0, #16]
 800b3aa:	b530      	push	{r4, r5, lr}
 800b3ac:	1a80      	subs	r0, r0, r2
 800b3ae:	d10d      	bne.n	800b3cc <__mcmp+0x28>
 800b3b0:	3314      	adds	r3, #20
 800b3b2:	3114      	adds	r1, #20
 800b3b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3c4:	4295      	cmp	r5, r2
 800b3c6:	d002      	beq.n	800b3ce <__mcmp+0x2a>
 800b3c8:	d304      	bcc.n	800b3d4 <__mcmp+0x30>
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	bd30      	pop	{r4, r5, pc}
 800b3ce:	42a3      	cmp	r3, r4
 800b3d0:	d3f4      	bcc.n	800b3bc <__mcmp+0x18>
 800b3d2:	e7fb      	b.n	800b3cc <__mcmp+0x28>
 800b3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d8:	e7f8      	b.n	800b3cc <__mcmp+0x28>
	...

0800b3dc <__mdiff>:
 800b3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	4614      	mov	r4, r2
 800b3ea:	f7ff ffdb 	bl	800b3a4 <__mcmp>
 800b3ee:	1e06      	subs	r6, r0, #0
 800b3f0:	d111      	bne.n	800b416 <__mdiff+0x3a>
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f7ff fd0d 	bl	800ae14 <_Balloc>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	b928      	cbnz	r0, 800b40a <__mdiff+0x2e>
 800b3fe:	f240 2132 	movw	r1, #562	; 0x232
 800b402:	4b3a      	ldr	r3, [pc, #232]	; (800b4ec <__mdiff+0x110>)
 800b404:	483a      	ldr	r0, [pc, #232]	; (800b4f0 <__mdiff+0x114>)
 800b406:	f000 fc41 	bl	800bc8c <__assert_func>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b410:	4610      	mov	r0, r2
 800b412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b416:	bfa4      	itt	ge
 800b418:	4623      	movge	r3, r4
 800b41a:	462c      	movge	r4, r5
 800b41c:	4638      	mov	r0, r7
 800b41e:	6861      	ldr	r1, [r4, #4]
 800b420:	bfa6      	itte	ge
 800b422:	461d      	movge	r5, r3
 800b424:	2600      	movge	r6, #0
 800b426:	2601      	movlt	r6, #1
 800b428:	f7ff fcf4 	bl	800ae14 <_Balloc>
 800b42c:	4602      	mov	r2, r0
 800b42e:	b918      	cbnz	r0, 800b438 <__mdiff+0x5c>
 800b430:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b434:	4b2d      	ldr	r3, [pc, #180]	; (800b4ec <__mdiff+0x110>)
 800b436:	e7e5      	b.n	800b404 <__mdiff+0x28>
 800b438:	f102 0814 	add.w	r8, r2, #20
 800b43c:	46c2      	mov	sl, r8
 800b43e:	f04f 0c00 	mov.w	ip, #0
 800b442:	6927      	ldr	r7, [r4, #16]
 800b444:	60c6      	str	r6, [r0, #12]
 800b446:	692e      	ldr	r6, [r5, #16]
 800b448:	f104 0014 	add.w	r0, r4, #20
 800b44c:	f105 0914 	add.w	r9, r5, #20
 800b450:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b454:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b458:	3410      	adds	r4, #16
 800b45a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b45e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b462:	fa1f f18b 	uxth.w	r1, fp
 800b466:	448c      	add	ip, r1
 800b468:	b299      	uxth	r1, r3
 800b46a:	0c1b      	lsrs	r3, r3, #16
 800b46c:	ebac 0101 	sub.w	r1, ip, r1
 800b470:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b474:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b478:	b289      	uxth	r1, r1
 800b47a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b47e:	454e      	cmp	r6, r9
 800b480:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b484:	f84a 3b04 	str.w	r3, [sl], #4
 800b488:	d8e7      	bhi.n	800b45a <__mdiff+0x7e>
 800b48a:	1b73      	subs	r3, r6, r5
 800b48c:	3b15      	subs	r3, #21
 800b48e:	f023 0303 	bic.w	r3, r3, #3
 800b492:	3515      	adds	r5, #21
 800b494:	3304      	adds	r3, #4
 800b496:	42ae      	cmp	r6, r5
 800b498:	bf38      	it	cc
 800b49a:	2304      	movcc	r3, #4
 800b49c:	4418      	add	r0, r3
 800b49e:	4443      	add	r3, r8
 800b4a0:	461e      	mov	r6, r3
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	4575      	cmp	r5, lr
 800b4a6:	d30e      	bcc.n	800b4c6 <__mdiff+0xea>
 800b4a8:	f10e 0103 	add.w	r1, lr, #3
 800b4ac:	1a09      	subs	r1, r1, r0
 800b4ae:	f021 0103 	bic.w	r1, r1, #3
 800b4b2:	3803      	subs	r0, #3
 800b4b4:	4586      	cmp	lr, r0
 800b4b6:	bf38      	it	cc
 800b4b8:	2100      	movcc	r1, #0
 800b4ba:	4419      	add	r1, r3
 800b4bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b4c0:	b18b      	cbz	r3, 800b4e6 <__mdiff+0x10a>
 800b4c2:	6117      	str	r7, [r2, #16]
 800b4c4:	e7a4      	b.n	800b410 <__mdiff+0x34>
 800b4c6:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4ca:	fa1f f188 	uxth.w	r1, r8
 800b4ce:	4461      	add	r1, ip
 800b4d0:	140c      	asrs	r4, r1, #16
 800b4d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4d6:	b289      	uxth	r1, r1
 800b4d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b4dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b4e0:	f846 1b04 	str.w	r1, [r6], #4
 800b4e4:	e7de      	b.n	800b4a4 <__mdiff+0xc8>
 800b4e6:	3f01      	subs	r7, #1
 800b4e8:	e7e8      	b.n	800b4bc <__mdiff+0xe0>
 800b4ea:	bf00      	nop
 800b4ec:	0800d268 	.word	0x0800d268
 800b4f0:	0800d2f4 	.word	0x0800d2f4

0800b4f4 <__ulp>:
 800b4f4:	4b11      	ldr	r3, [pc, #68]	; (800b53c <__ulp+0x48>)
 800b4f6:	400b      	ands	r3, r1
 800b4f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dd02      	ble.n	800b506 <__ulp+0x12>
 800b500:	2000      	movs	r0, #0
 800b502:	4619      	mov	r1, r3
 800b504:	4770      	bx	lr
 800b506:	425b      	negs	r3, r3
 800b508:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b50c:	f04f 0000 	mov.w	r0, #0
 800b510:	f04f 0100 	mov.w	r1, #0
 800b514:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b518:	da04      	bge.n	800b524 <__ulp+0x30>
 800b51a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b51e:	fa43 f102 	asr.w	r1, r3, r2
 800b522:	4770      	bx	lr
 800b524:	f1a2 0314 	sub.w	r3, r2, #20
 800b528:	2b1e      	cmp	r3, #30
 800b52a:	bfd6      	itet	le
 800b52c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b530:	2301      	movgt	r3, #1
 800b532:	fa22 f303 	lsrle.w	r3, r2, r3
 800b536:	4618      	mov	r0, r3
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	7ff00000 	.word	0x7ff00000

0800b540 <__b2d>:
 800b540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b544:	6907      	ldr	r7, [r0, #16]
 800b546:	f100 0914 	add.w	r9, r0, #20
 800b54a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b54e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b552:	f1a7 0804 	sub.w	r8, r7, #4
 800b556:	4630      	mov	r0, r6
 800b558:	f7ff fd4e 	bl	800aff8 <__hi0bits>
 800b55c:	f1c0 0320 	rsb	r3, r0, #32
 800b560:	280a      	cmp	r0, #10
 800b562:	600b      	str	r3, [r1, #0]
 800b564:	491f      	ldr	r1, [pc, #124]	; (800b5e4 <__b2d+0xa4>)
 800b566:	dc17      	bgt.n	800b598 <__b2d+0x58>
 800b568:	45c1      	cmp	r9, r8
 800b56a:	bf28      	it	cs
 800b56c:	2200      	movcs	r2, #0
 800b56e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b572:	fa26 f30c 	lsr.w	r3, r6, ip
 800b576:	bf38      	it	cc
 800b578:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b57c:	ea43 0501 	orr.w	r5, r3, r1
 800b580:	f100 0315 	add.w	r3, r0, #21
 800b584:	fa06 f303 	lsl.w	r3, r6, r3
 800b588:	fa22 f20c 	lsr.w	r2, r2, ip
 800b58c:	ea43 0402 	orr.w	r4, r3, r2
 800b590:	4620      	mov	r0, r4
 800b592:	4629      	mov	r1, r5
 800b594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b598:	45c1      	cmp	r9, r8
 800b59a:	bf2e      	itee	cs
 800b59c:	2200      	movcs	r2, #0
 800b59e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b5a2:	f1a7 0808 	subcc.w	r8, r7, #8
 800b5a6:	f1b0 030b 	subs.w	r3, r0, #11
 800b5aa:	d016      	beq.n	800b5da <__b2d+0x9a>
 800b5ac:	f1c3 0720 	rsb	r7, r3, #32
 800b5b0:	fa22 f107 	lsr.w	r1, r2, r7
 800b5b4:	45c8      	cmp	r8, r9
 800b5b6:	fa06 f603 	lsl.w	r6, r6, r3
 800b5ba:	ea46 0601 	orr.w	r6, r6, r1
 800b5be:	bf94      	ite	ls
 800b5c0:	2100      	movls	r1, #0
 800b5c2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b5c6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b5ca:	fa02 f003 	lsl.w	r0, r2, r3
 800b5ce:	40f9      	lsrs	r1, r7
 800b5d0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5d4:	ea40 0401 	orr.w	r4, r0, r1
 800b5d8:	e7da      	b.n	800b590 <__b2d+0x50>
 800b5da:	4614      	mov	r4, r2
 800b5dc:	ea46 0501 	orr.w	r5, r6, r1
 800b5e0:	e7d6      	b.n	800b590 <__b2d+0x50>
 800b5e2:	bf00      	nop
 800b5e4:	3ff00000 	.word	0x3ff00000

0800b5e8 <__d2b>:
 800b5e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b5f2:	4690      	mov	r8, r2
 800b5f4:	461d      	mov	r5, r3
 800b5f6:	f7ff fc0d 	bl	800ae14 <_Balloc>
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	b930      	cbnz	r0, 800b60c <__d2b+0x24>
 800b5fe:	4602      	mov	r2, r0
 800b600:	f240 310a 	movw	r1, #778	; 0x30a
 800b604:	4b24      	ldr	r3, [pc, #144]	; (800b698 <__d2b+0xb0>)
 800b606:	4825      	ldr	r0, [pc, #148]	; (800b69c <__d2b+0xb4>)
 800b608:	f000 fb40 	bl	800bc8c <__assert_func>
 800b60c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b610:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b614:	bb2d      	cbnz	r5, 800b662 <__d2b+0x7a>
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	f1b8 0300 	subs.w	r3, r8, #0
 800b61c:	d026      	beq.n	800b66c <__d2b+0x84>
 800b61e:	4668      	mov	r0, sp
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	f7ff fd09 	bl	800b038 <__lo0bits>
 800b626:	9900      	ldr	r1, [sp, #0]
 800b628:	b1f0      	cbz	r0, 800b668 <__d2b+0x80>
 800b62a:	9a01      	ldr	r2, [sp, #4]
 800b62c:	f1c0 0320 	rsb	r3, r0, #32
 800b630:	fa02 f303 	lsl.w	r3, r2, r3
 800b634:	430b      	orrs	r3, r1
 800b636:	40c2      	lsrs	r2, r0
 800b638:	6163      	str	r3, [r4, #20]
 800b63a:	9201      	str	r2, [sp, #4]
 800b63c:	9b01      	ldr	r3, [sp, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	bf14      	ite	ne
 800b642:	2102      	movne	r1, #2
 800b644:	2101      	moveq	r1, #1
 800b646:	61a3      	str	r3, [r4, #24]
 800b648:	6121      	str	r1, [r4, #16]
 800b64a:	b1c5      	cbz	r5, 800b67e <__d2b+0x96>
 800b64c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b650:	4405      	add	r5, r0
 800b652:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b656:	603d      	str	r5, [r7, #0]
 800b658:	6030      	str	r0, [r6, #0]
 800b65a:	4620      	mov	r0, r4
 800b65c:	b002      	add	sp, #8
 800b65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b666:	e7d6      	b.n	800b616 <__d2b+0x2e>
 800b668:	6161      	str	r1, [r4, #20]
 800b66a:	e7e7      	b.n	800b63c <__d2b+0x54>
 800b66c:	a801      	add	r0, sp, #4
 800b66e:	f7ff fce3 	bl	800b038 <__lo0bits>
 800b672:	2101      	movs	r1, #1
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	6121      	str	r1, [r4, #16]
 800b678:	6163      	str	r3, [r4, #20]
 800b67a:	3020      	adds	r0, #32
 800b67c:	e7e5      	b.n	800b64a <__d2b+0x62>
 800b67e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b682:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b686:	6038      	str	r0, [r7, #0]
 800b688:	6918      	ldr	r0, [r3, #16]
 800b68a:	f7ff fcb5 	bl	800aff8 <__hi0bits>
 800b68e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b692:	6031      	str	r1, [r6, #0]
 800b694:	e7e1      	b.n	800b65a <__d2b+0x72>
 800b696:	bf00      	nop
 800b698:	0800d268 	.word	0x0800d268
 800b69c:	0800d2f4 	.word	0x0800d2f4

0800b6a0 <__ratio>:
 800b6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	4688      	mov	r8, r1
 800b6a6:	4669      	mov	r1, sp
 800b6a8:	4681      	mov	r9, r0
 800b6aa:	f7ff ff49 	bl	800b540 <__b2d>
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	a901      	add	r1, sp, #4
 800b6b8:	f7ff ff42 	bl	800b540 <__b2d>
 800b6bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6c4:	468b      	mov	fp, r1
 800b6c6:	eba3 0c02 	sub.w	ip, r3, r2
 800b6ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6ce:	1a9b      	subs	r3, r3, r2
 800b6d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bfd5      	itete	le
 800b6d8:	460a      	movle	r2, r1
 800b6da:	462a      	movgt	r2, r5
 800b6dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6e0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6e4:	bfd8      	it	le
 800b6e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b6ea:	465b      	mov	r3, fp
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7f5 f81b 	bl	800072c <__aeabi_ddiv>
 800b6f6:	b003      	add	sp, #12
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6fc <__copybits>:
 800b6fc:	3901      	subs	r1, #1
 800b6fe:	b570      	push	{r4, r5, r6, lr}
 800b700:	1149      	asrs	r1, r1, #5
 800b702:	6914      	ldr	r4, [r2, #16]
 800b704:	3101      	adds	r1, #1
 800b706:	f102 0314 	add.w	r3, r2, #20
 800b70a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b70e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b712:	1f05      	subs	r5, r0, #4
 800b714:	42a3      	cmp	r3, r4
 800b716:	d30c      	bcc.n	800b732 <__copybits+0x36>
 800b718:	1aa3      	subs	r3, r4, r2
 800b71a:	3b11      	subs	r3, #17
 800b71c:	f023 0303 	bic.w	r3, r3, #3
 800b720:	3211      	adds	r2, #17
 800b722:	42a2      	cmp	r2, r4
 800b724:	bf88      	it	hi
 800b726:	2300      	movhi	r3, #0
 800b728:	4418      	add	r0, r3
 800b72a:	2300      	movs	r3, #0
 800b72c:	4288      	cmp	r0, r1
 800b72e:	d305      	bcc.n	800b73c <__copybits+0x40>
 800b730:	bd70      	pop	{r4, r5, r6, pc}
 800b732:	f853 6b04 	ldr.w	r6, [r3], #4
 800b736:	f845 6f04 	str.w	r6, [r5, #4]!
 800b73a:	e7eb      	b.n	800b714 <__copybits+0x18>
 800b73c:	f840 3b04 	str.w	r3, [r0], #4
 800b740:	e7f4      	b.n	800b72c <__copybits+0x30>

0800b742 <__any_on>:
 800b742:	f100 0214 	add.w	r2, r0, #20
 800b746:	6900      	ldr	r0, [r0, #16]
 800b748:	114b      	asrs	r3, r1, #5
 800b74a:	4298      	cmp	r0, r3
 800b74c:	b510      	push	{r4, lr}
 800b74e:	db11      	blt.n	800b774 <__any_on+0x32>
 800b750:	dd0a      	ble.n	800b768 <__any_on+0x26>
 800b752:	f011 011f 	ands.w	r1, r1, #31
 800b756:	d007      	beq.n	800b768 <__any_on+0x26>
 800b758:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b75c:	fa24 f001 	lsr.w	r0, r4, r1
 800b760:	fa00 f101 	lsl.w	r1, r0, r1
 800b764:	428c      	cmp	r4, r1
 800b766:	d10b      	bne.n	800b780 <__any_on+0x3e>
 800b768:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d803      	bhi.n	800b778 <__any_on+0x36>
 800b770:	2000      	movs	r0, #0
 800b772:	bd10      	pop	{r4, pc}
 800b774:	4603      	mov	r3, r0
 800b776:	e7f7      	b.n	800b768 <__any_on+0x26>
 800b778:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b77c:	2900      	cmp	r1, #0
 800b77e:	d0f5      	beq.n	800b76c <__any_on+0x2a>
 800b780:	2001      	movs	r0, #1
 800b782:	e7f6      	b.n	800b772 <__any_on+0x30>

0800b784 <_calloc_r>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	fba1 5402 	umull	r5, r4, r1, r2
 800b78a:	b934      	cbnz	r4, 800b79a <_calloc_r+0x16>
 800b78c:	4629      	mov	r1, r5
 800b78e:	f000 f875 	bl	800b87c <_malloc_r>
 800b792:	4606      	mov	r6, r0
 800b794:	b928      	cbnz	r0, 800b7a2 <_calloc_r+0x1e>
 800b796:	4630      	mov	r0, r6
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	220c      	movs	r2, #12
 800b79c:	2600      	movs	r6, #0
 800b79e:	6002      	str	r2, [r0, #0]
 800b7a0:	e7f9      	b.n	800b796 <_calloc_r+0x12>
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	f7fc fbf3 	bl	8007f90 <memset>
 800b7aa:	e7f4      	b.n	800b796 <_calloc_r+0x12>

0800b7ac <_free_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	2900      	cmp	r1, #0
 800b7b2:	d040      	beq.n	800b836 <_free_r+0x8a>
 800b7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7b8:	1f0c      	subs	r4, r1, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	bfb8      	it	lt
 800b7be:	18e4      	addlt	r4, r4, r3
 800b7c0:	f000 faae 	bl	800bd20 <__malloc_lock>
 800b7c4:	4a1c      	ldr	r2, [pc, #112]	; (800b838 <_free_r+0x8c>)
 800b7c6:	6813      	ldr	r3, [r2, #0]
 800b7c8:	b933      	cbnz	r3, 800b7d8 <_free_r+0x2c>
 800b7ca:	6063      	str	r3, [r4, #4]
 800b7cc:	6014      	str	r4, [r2, #0]
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7d4:	f000 baaa 	b.w	800bd2c <__malloc_unlock>
 800b7d8:	42a3      	cmp	r3, r4
 800b7da:	d908      	bls.n	800b7ee <_free_r+0x42>
 800b7dc:	6820      	ldr	r0, [r4, #0]
 800b7de:	1821      	adds	r1, r4, r0
 800b7e0:	428b      	cmp	r3, r1
 800b7e2:	bf01      	itttt	eq
 800b7e4:	6819      	ldreq	r1, [r3, #0]
 800b7e6:	685b      	ldreq	r3, [r3, #4]
 800b7e8:	1809      	addeq	r1, r1, r0
 800b7ea:	6021      	streq	r1, [r4, #0]
 800b7ec:	e7ed      	b.n	800b7ca <_free_r+0x1e>
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	b10b      	cbz	r3, 800b7f8 <_free_r+0x4c>
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	d9fa      	bls.n	800b7ee <_free_r+0x42>
 800b7f8:	6811      	ldr	r1, [r2, #0]
 800b7fa:	1850      	adds	r0, r2, r1
 800b7fc:	42a0      	cmp	r0, r4
 800b7fe:	d10b      	bne.n	800b818 <_free_r+0x6c>
 800b800:	6820      	ldr	r0, [r4, #0]
 800b802:	4401      	add	r1, r0
 800b804:	1850      	adds	r0, r2, r1
 800b806:	4283      	cmp	r3, r0
 800b808:	6011      	str	r1, [r2, #0]
 800b80a:	d1e0      	bne.n	800b7ce <_free_r+0x22>
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	4401      	add	r1, r0
 800b812:	6011      	str	r1, [r2, #0]
 800b814:	6053      	str	r3, [r2, #4]
 800b816:	e7da      	b.n	800b7ce <_free_r+0x22>
 800b818:	d902      	bls.n	800b820 <_free_r+0x74>
 800b81a:	230c      	movs	r3, #12
 800b81c:	602b      	str	r3, [r5, #0]
 800b81e:	e7d6      	b.n	800b7ce <_free_r+0x22>
 800b820:	6820      	ldr	r0, [r4, #0]
 800b822:	1821      	adds	r1, r4, r0
 800b824:	428b      	cmp	r3, r1
 800b826:	bf01      	itttt	eq
 800b828:	6819      	ldreq	r1, [r3, #0]
 800b82a:	685b      	ldreq	r3, [r3, #4]
 800b82c:	1809      	addeq	r1, r1, r0
 800b82e:	6021      	streq	r1, [r4, #0]
 800b830:	6063      	str	r3, [r4, #4]
 800b832:	6054      	str	r4, [r2, #4]
 800b834:	e7cb      	b.n	800b7ce <_free_r+0x22>
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	20002828 	.word	0x20002828

0800b83c <sbrk_aligned>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	4e0e      	ldr	r6, [pc, #56]	; (800b878 <sbrk_aligned+0x3c>)
 800b840:	460c      	mov	r4, r1
 800b842:	6831      	ldr	r1, [r6, #0]
 800b844:	4605      	mov	r5, r0
 800b846:	b911      	cbnz	r1, 800b84e <sbrk_aligned+0x12>
 800b848:	f000 f9ee 	bl	800bc28 <_sbrk_r>
 800b84c:	6030      	str	r0, [r6, #0]
 800b84e:	4621      	mov	r1, r4
 800b850:	4628      	mov	r0, r5
 800b852:	f000 f9e9 	bl	800bc28 <_sbrk_r>
 800b856:	1c43      	adds	r3, r0, #1
 800b858:	d00a      	beq.n	800b870 <sbrk_aligned+0x34>
 800b85a:	1cc4      	adds	r4, r0, #3
 800b85c:	f024 0403 	bic.w	r4, r4, #3
 800b860:	42a0      	cmp	r0, r4
 800b862:	d007      	beq.n	800b874 <sbrk_aligned+0x38>
 800b864:	1a21      	subs	r1, r4, r0
 800b866:	4628      	mov	r0, r5
 800b868:	f000 f9de 	bl	800bc28 <_sbrk_r>
 800b86c:	3001      	adds	r0, #1
 800b86e:	d101      	bne.n	800b874 <sbrk_aligned+0x38>
 800b870:	f04f 34ff 	mov.w	r4, #4294967295
 800b874:	4620      	mov	r0, r4
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	2000282c 	.word	0x2000282c

0800b87c <_malloc_r>:
 800b87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b880:	1ccd      	adds	r5, r1, #3
 800b882:	f025 0503 	bic.w	r5, r5, #3
 800b886:	3508      	adds	r5, #8
 800b888:	2d0c      	cmp	r5, #12
 800b88a:	bf38      	it	cc
 800b88c:	250c      	movcc	r5, #12
 800b88e:	2d00      	cmp	r5, #0
 800b890:	4607      	mov	r7, r0
 800b892:	db01      	blt.n	800b898 <_malloc_r+0x1c>
 800b894:	42a9      	cmp	r1, r5
 800b896:	d905      	bls.n	800b8a4 <_malloc_r+0x28>
 800b898:	230c      	movs	r3, #12
 800b89a:	2600      	movs	r6, #0
 800b89c:	603b      	str	r3, [r7, #0]
 800b89e:	4630      	mov	r0, r6
 800b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a4:	4e2e      	ldr	r6, [pc, #184]	; (800b960 <_malloc_r+0xe4>)
 800b8a6:	f000 fa3b 	bl	800bd20 <__malloc_lock>
 800b8aa:	6833      	ldr	r3, [r6, #0]
 800b8ac:	461c      	mov	r4, r3
 800b8ae:	bb34      	cbnz	r4, 800b8fe <_malloc_r+0x82>
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4638      	mov	r0, r7
 800b8b4:	f7ff ffc2 	bl	800b83c <sbrk_aligned>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	d14d      	bne.n	800b95a <_malloc_r+0xde>
 800b8be:	6834      	ldr	r4, [r6, #0]
 800b8c0:	4626      	mov	r6, r4
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	d140      	bne.n	800b948 <_malloc_r+0xcc>
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	eb04 0803 	add.w	r8, r4, r3
 800b8d0:	f000 f9aa 	bl	800bc28 <_sbrk_r>
 800b8d4:	4580      	cmp	r8, r0
 800b8d6:	d13a      	bne.n	800b94e <_malloc_r+0xd2>
 800b8d8:	6821      	ldr	r1, [r4, #0]
 800b8da:	3503      	adds	r5, #3
 800b8dc:	1a6d      	subs	r5, r5, r1
 800b8de:	f025 0503 	bic.w	r5, r5, #3
 800b8e2:	3508      	adds	r5, #8
 800b8e4:	2d0c      	cmp	r5, #12
 800b8e6:	bf38      	it	cc
 800b8e8:	250c      	movcc	r5, #12
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	f7ff ffa5 	bl	800b83c <sbrk_aligned>
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	d02b      	beq.n	800b94e <_malloc_r+0xd2>
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	442b      	add	r3, r5
 800b8fa:	6023      	str	r3, [r4, #0]
 800b8fc:	e00e      	b.n	800b91c <_malloc_r+0xa0>
 800b8fe:	6822      	ldr	r2, [r4, #0]
 800b900:	1b52      	subs	r2, r2, r5
 800b902:	d41e      	bmi.n	800b942 <_malloc_r+0xc6>
 800b904:	2a0b      	cmp	r2, #11
 800b906:	d916      	bls.n	800b936 <_malloc_r+0xba>
 800b908:	1961      	adds	r1, r4, r5
 800b90a:	42a3      	cmp	r3, r4
 800b90c:	6025      	str	r5, [r4, #0]
 800b90e:	bf18      	it	ne
 800b910:	6059      	strne	r1, [r3, #4]
 800b912:	6863      	ldr	r3, [r4, #4]
 800b914:	bf08      	it	eq
 800b916:	6031      	streq	r1, [r6, #0]
 800b918:	5162      	str	r2, [r4, r5]
 800b91a:	604b      	str	r3, [r1, #4]
 800b91c:	4638      	mov	r0, r7
 800b91e:	f104 060b 	add.w	r6, r4, #11
 800b922:	f000 fa03 	bl	800bd2c <__malloc_unlock>
 800b926:	f026 0607 	bic.w	r6, r6, #7
 800b92a:	1d23      	adds	r3, r4, #4
 800b92c:	1af2      	subs	r2, r6, r3
 800b92e:	d0b6      	beq.n	800b89e <_malloc_r+0x22>
 800b930:	1b9b      	subs	r3, r3, r6
 800b932:	50a3      	str	r3, [r4, r2]
 800b934:	e7b3      	b.n	800b89e <_malloc_r+0x22>
 800b936:	6862      	ldr	r2, [r4, #4]
 800b938:	42a3      	cmp	r3, r4
 800b93a:	bf0c      	ite	eq
 800b93c:	6032      	streq	r2, [r6, #0]
 800b93e:	605a      	strne	r2, [r3, #4]
 800b940:	e7ec      	b.n	800b91c <_malloc_r+0xa0>
 800b942:	4623      	mov	r3, r4
 800b944:	6864      	ldr	r4, [r4, #4]
 800b946:	e7b2      	b.n	800b8ae <_malloc_r+0x32>
 800b948:	4634      	mov	r4, r6
 800b94a:	6876      	ldr	r6, [r6, #4]
 800b94c:	e7b9      	b.n	800b8c2 <_malloc_r+0x46>
 800b94e:	230c      	movs	r3, #12
 800b950:	4638      	mov	r0, r7
 800b952:	603b      	str	r3, [r7, #0]
 800b954:	f000 f9ea 	bl	800bd2c <__malloc_unlock>
 800b958:	e7a1      	b.n	800b89e <_malloc_r+0x22>
 800b95a:	6025      	str	r5, [r4, #0]
 800b95c:	e7de      	b.n	800b91c <_malloc_r+0xa0>
 800b95e:	bf00      	nop
 800b960:	20002828 	.word	0x20002828

0800b964 <__ssputs_r>:
 800b964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b968:	688e      	ldr	r6, [r1, #8]
 800b96a:	4682      	mov	sl, r0
 800b96c:	429e      	cmp	r6, r3
 800b96e:	460c      	mov	r4, r1
 800b970:	4690      	mov	r8, r2
 800b972:	461f      	mov	r7, r3
 800b974:	d838      	bhi.n	800b9e8 <__ssputs_r+0x84>
 800b976:	898a      	ldrh	r2, [r1, #12]
 800b978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b97c:	d032      	beq.n	800b9e4 <__ssputs_r+0x80>
 800b97e:	6825      	ldr	r5, [r4, #0]
 800b980:	6909      	ldr	r1, [r1, #16]
 800b982:	3301      	adds	r3, #1
 800b984:	eba5 0901 	sub.w	r9, r5, r1
 800b988:	6965      	ldr	r5, [r4, #20]
 800b98a:	444b      	add	r3, r9
 800b98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b994:	106d      	asrs	r5, r5, #1
 800b996:	429d      	cmp	r5, r3
 800b998:	bf38      	it	cc
 800b99a:	461d      	movcc	r5, r3
 800b99c:	0553      	lsls	r3, r2, #21
 800b99e:	d531      	bpl.n	800ba04 <__ssputs_r+0xa0>
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7ff ff6b 	bl	800b87c <_malloc_r>
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	b950      	cbnz	r0, 800b9c0 <__ssputs_r+0x5c>
 800b9aa:	230c      	movs	r3, #12
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	f8ca 3000 	str.w	r3, [sl]
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c0:	464a      	mov	r2, r9
 800b9c2:	6921      	ldr	r1, [r4, #16]
 800b9c4:	f7ff fa18 	bl	800adf8 <memcpy>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	6126      	str	r6, [r4, #16]
 800b9d6:	444e      	add	r6, r9
 800b9d8:	6026      	str	r6, [r4, #0]
 800b9da:	463e      	mov	r6, r7
 800b9dc:	6165      	str	r5, [r4, #20]
 800b9de:	eba5 0509 	sub.w	r5, r5, r9
 800b9e2:	60a5      	str	r5, [r4, #8]
 800b9e4:	42be      	cmp	r6, r7
 800b9e6:	d900      	bls.n	800b9ea <__ssputs_r+0x86>
 800b9e8:	463e      	mov	r6, r7
 800b9ea:	4632      	mov	r2, r6
 800b9ec:	4641      	mov	r1, r8
 800b9ee:	6820      	ldr	r0, [r4, #0]
 800b9f0:	f000 f97c 	bl	800bcec <memmove>
 800b9f4:	68a3      	ldr	r3, [r4, #8]
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	1b9b      	subs	r3, r3, r6
 800b9fa:	60a3      	str	r3, [r4, #8]
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	4433      	add	r3, r6
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	e7db      	b.n	800b9bc <__ssputs_r+0x58>
 800ba04:	462a      	mov	r2, r5
 800ba06:	f000 f997 	bl	800bd38 <_realloc_r>
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d1e1      	bne.n	800b9d4 <__ssputs_r+0x70>
 800ba10:	4650      	mov	r0, sl
 800ba12:	6921      	ldr	r1, [r4, #16]
 800ba14:	f7ff feca 	bl	800b7ac <_free_r>
 800ba18:	e7c7      	b.n	800b9aa <__ssputs_r+0x46>
	...

0800ba1c <_svfiprintf_r>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	4698      	mov	r8, r3
 800ba22:	898b      	ldrh	r3, [r1, #12]
 800ba24:	4607      	mov	r7, r0
 800ba26:	061b      	lsls	r3, r3, #24
 800ba28:	460d      	mov	r5, r1
 800ba2a:	4614      	mov	r4, r2
 800ba2c:	b09d      	sub	sp, #116	; 0x74
 800ba2e:	d50e      	bpl.n	800ba4e <_svfiprintf_r+0x32>
 800ba30:	690b      	ldr	r3, [r1, #16]
 800ba32:	b963      	cbnz	r3, 800ba4e <_svfiprintf_r+0x32>
 800ba34:	2140      	movs	r1, #64	; 0x40
 800ba36:	f7ff ff21 	bl	800b87c <_malloc_r>
 800ba3a:	6028      	str	r0, [r5, #0]
 800ba3c:	6128      	str	r0, [r5, #16]
 800ba3e:	b920      	cbnz	r0, 800ba4a <_svfiprintf_r+0x2e>
 800ba40:	230c      	movs	r3, #12
 800ba42:	603b      	str	r3, [r7, #0]
 800ba44:	f04f 30ff 	mov.w	r0, #4294967295
 800ba48:	e0d1      	b.n	800bbee <_svfiprintf_r+0x1d2>
 800ba4a:	2340      	movs	r3, #64	; 0x40
 800ba4c:	616b      	str	r3, [r5, #20]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	9309      	str	r3, [sp, #36]	; 0x24
 800ba52:	2320      	movs	r3, #32
 800ba54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba58:	2330      	movs	r3, #48	; 0x30
 800ba5a:	f04f 0901 	mov.w	r9, #1
 800ba5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc08 <_svfiprintf_r+0x1ec>
 800ba66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba6a:	4623      	mov	r3, r4
 800ba6c:	469a      	mov	sl, r3
 800ba6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba72:	b10a      	cbz	r2, 800ba78 <_svfiprintf_r+0x5c>
 800ba74:	2a25      	cmp	r2, #37	; 0x25
 800ba76:	d1f9      	bne.n	800ba6c <_svfiprintf_r+0x50>
 800ba78:	ebba 0b04 	subs.w	fp, sl, r4
 800ba7c:	d00b      	beq.n	800ba96 <_svfiprintf_r+0x7a>
 800ba7e:	465b      	mov	r3, fp
 800ba80:	4622      	mov	r2, r4
 800ba82:	4629      	mov	r1, r5
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff ff6d 	bl	800b964 <__ssputs_r>
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f000 80aa 	beq.w	800bbe4 <_svfiprintf_r+0x1c8>
 800ba90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba92:	445a      	add	r2, fp
 800ba94:	9209      	str	r2, [sp, #36]	; 0x24
 800ba96:	f89a 3000 	ldrb.w	r3, [sl]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 80a2 	beq.w	800bbe4 <_svfiprintf_r+0x1c8>
 800baa0:	2300      	movs	r3, #0
 800baa2:	f04f 32ff 	mov.w	r2, #4294967295
 800baa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baaa:	f10a 0a01 	add.w	sl, sl, #1
 800baae:	9304      	str	r3, [sp, #16]
 800bab0:	9307      	str	r3, [sp, #28]
 800bab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bab6:	931a      	str	r3, [sp, #104]	; 0x68
 800bab8:	4654      	mov	r4, sl
 800baba:	2205      	movs	r2, #5
 800babc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac0:	4851      	ldr	r0, [pc, #324]	; (800bc08 <_svfiprintf_r+0x1ec>)
 800bac2:	f7ff f98b 	bl	800addc <memchr>
 800bac6:	9a04      	ldr	r2, [sp, #16]
 800bac8:	b9d8      	cbnz	r0, 800bb02 <_svfiprintf_r+0xe6>
 800baca:	06d0      	lsls	r0, r2, #27
 800bacc:	bf44      	itt	mi
 800bace:	2320      	movmi	r3, #32
 800bad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bad4:	0711      	lsls	r1, r2, #28
 800bad6:	bf44      	itt	mi
 800bad8:	232b      	movmi	r3, #43	; 0x2b
 800bada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bade:	f89a 3000 	ldrb.w	r3, [sl]
 800bae2:	2b2a      	cmp	r3, #42	; 0x2a
 800bae4:	d015      	beq.n	800bb12 <_svfiprintf_r+0xf6>
 800bae6:	4654      	mov	r4, sl
 800bae8:	2000      	movs	r0, #0
 800baea:	f04f 0c0a 	mov.w	ip, #10
 800baee:	9a07      	ldr	r2, [sp, #28]
 800baf0:	4621      	mov	r1, r4
 800baf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baf6:	3b30      	subs	r3, #48	; 0x30
 800baf8:	2b09      	cmp	r3, #9
 800bafa:	d94e      	bls.n	800bb9a <_svfiprintf_r+0x17e>
 800bafc:	b1b0      	cbz	r0, 800bb2c <_svfiprintf_r+0x110>
 800bafe:	9207      	str	r2, [sp, #28]
 800bb00:	e014      	b.n	800bb2c <_svfiprintf_r+0x110>
 800bb02:	eba0 0308 	sub.w	r3, r0, r8
 800bb06:	fa09 f303 	lsl.w	r3, r9, r3
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	46a2      	mov	sl, r4
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	e7d2      	b.n	800bab8 <_svfiprintf_r+0x9c>
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	1d19      	adds	r1, r3, #4
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	9103      	str	r1, [sp, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	bfbb      	ittet	lt
 800bb1e:	425b      	neglt	r3, r3
 800bb20:	f042 0202 	orrlt.w	r2, r2, #2
 800bb24:	9307      	strge	r3, [sp, #28]
 800bb26:	9307      	strlt	r3, [sp, #28]
 800bb28:	bfb8      	it	lt
 800bb2a:	9204      	strlt	r2, [sp, #16]
 800bb2c:	7823      	ldrb	r3, [r4, #0]
 800bb2e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb30:	d10c      	bne.n	800bb4c <_svfiprintf_r+0x130>
 800bb32:	7863      	ldrb	r3, [r4, #1]
 800bb34:	2b2a      	cmp	r3, #42	; 0x2a
 800bb36:	d135      	bne.n	800bba4 <_svfiprintf_r+0x188>
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	3402      	adds	r4, #2
 800bb3c:	1d1a      	adds	r2, r3, #4
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	9203      	str	r2, [sp, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	bfb8      	it	lt
 800bb46:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bc0c <_svfiprintf_r+0x1f0>
 800bb50:	2203      	movs	r2, #3
 800bb52:	4650      	mov	r0, sl
 800bb54:	7821      	ldrb	r1, [r4, #0]
 800bb56:	f7ff f941 	bl	800addc <memchr>
 800bb5a:	b140      	cbz	r0, 800bb6e <_svfiprintf_r+0x152>
 800bb5c:	2340      	movs	r3, #64	; 0x40
 800bb5e:	eba0 000a 	sub.w	r0, r0, sl
 800bb62:	fa03 f000 	lsl.w	r0, r3, r0
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	3401      	adds	r4, #1
 800bb6a:	4303      	orrs	r3, r0
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb72:	2206      	movs	r2, #6
 800bb74:	4826      	ldr	r0, [pc, #152]	; (800bc10 <_svfiprintf_r+0x1f4>)
 800bb76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb7a:	f7ff f92f 	bl	800addc <memchr>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d038      	beq.n	800bbf4 <_svfiprintf_r+0x1d8>
 800bb82:	4b24      	ldr	r3, [pc, #144]	; (800bc14 <_svfiprintf_r+0x1f8>)
 800bb84:	bb1b      	cbnz	r3, 800bbce <_svfiprintf_r+0x1b2>
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	3307      	adds	r3, #7
 800bb8a:	f023 0307 	bic.w	r3, r3, #7
 800bb8e:	3308      	adds	r3, #8
 800bb90:	9303      	str	r3, [sp, #12]
 800bb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb94:	4433      	add	r3, r6
 800bb96:	9309      	str	r3, [sp, #36]	; 0x24
 800bb98:	e767      	b.n	800ba6a <_svfiprintf_r+0x4e>
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bba2:	e7a5      	b.n	800baf0 <_svfiprintf_r+0xd4>
 800bba4:	2300      	movs	r3, #0
 800bba6:	f04f 0c0a 	mov.w	ip, #10
 800bbaa:	4619      	mov	r1, r3
 800bbac:	3401      	adds	r4, #1
 800bbae:	9305      	str	r3, [sp, #20]
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbb6:	3a30      	subs	r2, #48	; 0x30
 800bbb8:	2a09      	cmp	r2, #9
 800bbba:	d903      	bls.n	800bbc4 <_svfiprintf_r+0x1a8>
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d0c5      	beq.n	800bb4c <_svfiprintf_r+0x130>
 800bbc0:	9105      	str	r1, [sp, #20]
 800bbc2:	e7c3      	b.n	800bb4c <_svfiprintf_r+0x130>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbcc:	e7f0      	b.n	800bbb0 <_svfiprintf_r+0x194>
 800bbce:	ab03      	add	r3, sp, #12
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	4b10      	ldr	r3, [pc, #64]	; (800bc18 <_svfiprintf_r+0x1fc>)
 800bbd8:	a904      	add	r1, sp, #16
 800bbda:	f7fc fa7f 	bl	80080dc <_printf_float>
 800bbde:	1c42      	adds	r2, r0, #1
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	d1d6      	bne.n	800bb92 <_svfiprintf_r+0x176>
 800bbe4:	89ab      	ldrh	r3, [r5, #12]
 800bbe6:	065b      	lsls	r3, r3, #25
 800bbe8:	f53f af2c 	bmi.w	800ba44 <_svfiprintf_r+0x28>
 800bbec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbee:	b01d      	add	sp, #116	; 0x74
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	ab03      	add	r3, sp, #12
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <_svfiprintf_r+0x1fc>)
 800bbfe:	a904      	add	r1, sp, #16
 800bc00:	f7fc fd08 	bl	8008614 <_printf_i>
 800bc04:	e7eb      	b.n	800bbde <_svfiprintf_r+0x1c2>
 800bc06:	bf00      	nop
 800bc08:	0800d44c 	.word	0x0800d44c
 800bc0c:	0800d452 	.word	0x0800d452
 800bc10:	0800d456 	.word	0x0800d456
 800bc14:	080080dd 	.word	0x080080dd
 800bc18:	0800b965 	.word	0x0800b965

0800bc1c <nan>:
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	4901      	ldr	r1, [pc, #4]	; (800bc24 <nan+0x8>)
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	7ff80000 	.word	0x7ff80000

0800bc28 <_sbrk_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	4d05      	ldr	r5, [pc, #20]	; (800bc44 <_sbrk_r+0x1c>)
 800bc2e:	4604      	mov	r4, r0
 800bc30:	4608      	mov	r0, r1
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	f7f6 fdb0 	bl	8002798 <_sbrk>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d102      	bne.n	800bc42 <_sbrk_r+0x1a>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	b103      	cbz	r3, 800bc42 <_sbrk_r+0x1a>
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	20002830 	.word	0x20002830

0800bc48 <strncmp>:
 800bc48:	4603      	mov	r3, r0
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	b172      	cbz	r2, 800bc6c <strncmp+0x24>
 800bc4e:	3901      	subs	r1, #1
 800bc50:	1884      	adds	r4, r0, r2
 800bc52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc5a:	4290      	cmp	r0, r2
 800bc5c:	d101      	bne.n	800bc62 <strncmp+0x1a>
 800bc5e:	42a3      	cmp	r3, r4
 800bc60:	d101      	bne.n	800bc66 <strncmp+0x1e>
 800bc62:	1a80      	subs	r0, r0, r2
 800bc64:	bd10      	pop	{r4, pc}
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d1f3      	bne.n	800bc52 <strncmp+0xa>
 800bc6a:	e7fa      	b.n	800bc62 <strncmp+0x1a>
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	e7f9      	b.n	800bc64 <strncmp+0x1c>

0800bc70 <__ascii_wctomb>:
 800bc70:	4603      	mov	r3, r0
 800bc72:	4608      	mov	r0, r1
 800bc74:	b141      	cbz	r1, 800bc88 <__ascii_wctomb+0x18>
 800bc76:	2aff      	cmp	r2, #255	; 0xff
 800bc78:	d904      	bls.n	800bc84 <__ascii_wctomb+0x14>
 800bc7a:	228a      	movs	r2, #138	; 0x8a
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	4770      	bx	lr
 800bc84:	2001      	movs	r0, #1
 800bc86:	700a      	strb	r2, [r1, #0]
 800bc88:	4770      	bx	lr
	...

0800bc8c <__assert_func>:
 800bc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc8e:	4614      	mov	r4, r2
 800bc90:	461a      	mov	r2, r3
 800bc92:	4b09      	ldr	r3, [pc, #36]	; (800bcb8 <__assert_func+0x2c>)
 800bc94:	4605      	mov	r5, r0
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68d8      	ldr	r0, [r3, #12]
 800bc9a:	b14c      	cbz	r4, 800bcb0 <__assert_func+0x24>
 800bc9c:	4b07      	ldr	r3, [pc, #28]	; (800bcbc <__assert_func+0x30>)
 800bc9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bca2:	9100      	str	r1, [sp, #0]
 800bca4:	462b      	mov	r3, r5
 800bca6:	4906      	ldr	r1, [pc, #24]	; (800bcc0 <__assert_func+0x34>)
 800bca8:	f000 f80e 	bl	800bcc8 <fiprintf>
 800bcac:	f000 fa8a 	bl	800c1c4 <abort>
 800bcb0:	4b04      	ldr	r3, [pc, #16]	; (800bcc4 <__assert_func+0x38>)
 800bcb2:	461c      	mov	r4, r3
 800bcb4:	e7f3      	b.n	800bc9e <__assert_func+0x12>
 800bcb6:	bf00      	nop
 800bcb8:	20000034 	.word	0x20000034
 800bcbc:	0800d45d 	.word	0x0800d45d
 800bcc0:	0800d46a 	.word	0x0800d46a
 800bcc4:	0800d498 	.word	0x0800d498

0800bcc8 <fiprintf>:
 800bcc8:	b40e      	push	{r1, r2, r3}
 800bcca:	b503      	push	{r0, r1, lr}
 800bccc:	4601      	mov	r1, r0
 800bcce:	ab03      	add	r3, sp, #12
 800bcd0:	4805      	ldr	r0, [pc, #20]	; (800bce8 <fiprintf+0x20>)
 800bcd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd6:	6800      	ldr	r0, [r0, #0]
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	f000 f883 	bl	800bde4 <_vfiprintf_r>
 800bcde:	b002      	add	sp, #8
 800bce0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bce4:	b003      	add	sp, #12
 800bce6:	4770      	bx	lr
 800bce8:	20000034 	.word	0x20000034

0800bcec <memmove>:
 800bcec:	4288      	cmp	r0, r1
 800bcee:	b510      	push	{r4, lr}
 800bcf0:	eb01 0402 	add.w	r4, r1, r2
 800bcf4:	d902      	bls.n	800bcfc <memmove+0x10>
 800bcf6:	4284      	cmp	r4, r0
 800bcf8:	4623      	mov	r3, r4
 800bcfa:	d807      	bhi.n	800bd0c <memmove+0x20>
 800bcfc:	1e43      	subs	r3, r0, #1
 800bcfe:	42a1      	cmp	r1, r4
 800bd00:	d008      	beq.n	800bd14 <memmove+0x28>
 800bd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd0a:	e7f8      	b.n	800bcfe <memmove+0x12>
 800bd0c:	4601      	mov	r1, r0
 800bd0e:	4402      	add	r2, r0
 800bd10:	428a      	cmp	r2, r1
 800bd12:	d100      	bne.n	800bd16 <memmove+0x2a>
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd1e:	e7f7      	b.n	800bd10 <memmove+0x24>

0800bd20 <__malloc_lock>:
 800bd20:	4801      	ldr	r0, [pc, #4]	; (800bd28 <__malloc_lock+0x8>)
 800bd22:	f000 bc0b 	b.w	800c53c <__retarget_lock_acquire_recursive>
 800bd26:	bf00      	nop
 800bd28:	20002834 	.word	0x20002834

0800bd2c <__malloc_unlock>:
 800bd2c:	4801      	ldr	r0, [pc, #4]	; (800bd34 <__malloc_unlock+0x8>)
 800bd2e:	f000 bc06 	b.w	800c53e <__retarget_lock_release_recursive>
 800bd32:	bf00      	nop
 800bd34:	20002834 	.word	0x20002834

0800bd38 <_realloc_r>:
 800bd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4614      	mov	r4, r2
 800bd40:	460e      	mov	r6, r1
 800bd42:	b921      	cbnz	r1, 800bd4e <_realloc_r+0x16>
 800bd44:	4611      	mov	r1, r2
 800bd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4a:	f7ff bd97 	b.w	800b87c <_malloc_r>
 800bd4e:	b92a      	cbnz	r2, 800bd5c <_realloc_r+0x24>
 800bd50:	f7ff fd2c 	bl	800b7ac <_free_r>
 800bd54:	4625      	mov	r5, r4
 800bd56:	4628      	mov	r0, r5
 800bd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5c:	f000 fc56 	bl	800c60c <_malloc_usable_size_r>
 800bd60:	4284      	cmp	r4, r0
 800bd62:	4607      	mov	r7, r0
 800bd64:	d802      	bhi.n	800bd6c <_realloc_r+0x34>
 800bd66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd6a:	d812      	bhi.n	800bd92 <_realloc_r+0x5a>
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	4640      	mov	r0, r8
 800bd70:	f7ff fd84 	bl	800b87c <_malloc_r>
 800bd74:	4605      	mov	r5, r0
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d0ed      	beq.n	800bd56 <_realloc_r+0x1e>
 800bd7a:	42bc      	cmp	r4, r7
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	4631      	mov	r1, r6
 800bd80:	bf28      	it	cs
 800bd82:	463a      	movcs	r2, r7
 800bd84:	f7ff f838 	bl	800adf8 <memcpy>
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	f7ff fd0e 	bl	800b7ac <_free_r>
 800bd90:	e7e1      	b.n	800bd56 <_realloc_r+0x1e>
 800bd92:	4635      	mov	r5, r6
 800bd94:	e7df      	b.n	800bd56 <_realloc_r+0x1e>

0800bd96 <__sfputc_r>:
 800bd96:	6893      	ldr	r3, [r2, #8]
 800bd98:	b410      	push	{r4}
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	6093      	str	r3, [r2, #8]
 800bda0:	da07      	bge.n	800bdb2 <__sfputc_r+0x1c>
 800bda2:	6994      	ldr	r4, [r2, #24]
 800bda4:	42a3      	cmp	r3, r4
 800bda6:	db01      	blt.n	800bdac <__sfputc_r+0x16>
 800bda8:	290a      	cmp	r1, #10
 800bdaa:	d102      	bne.n	800bdb2 <__sfputc_r+0x1c>
 800bdac:	bc10      	pop	{r4}
 800bdae:	f000 b949 	b.w	800c044 <__swbuf_r>
 800bdb2:	6813      	ldr	r3, [r2, #0]
 800bdb4:	1c58      	adds	r0, r3, #1
 800bdb6:	6010      	str	r0, [r2, #0]
 800bdb8:	7019      	strb	r1, [r3, #0]
 800bdba:	4608      	mov	r0, r1
 800bdbc:	bc10      	pop	{r4}
 800bdbe:	4770      	bx	lr

0800bdc0 <__sfputs_r>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	4614      	mov	r4, r2
 800bdc8:	18d5      	adds	r5, r2, r3
 800bdca:	42ac      	cmp	r4, r5
 800bdcc:	d101      	bne.n	800bdd2 <__sfputs_r+0x12>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	e007      	b.n	800bde2 <__sfputs_r+0x22>
 800bdd2:	463a      	mov	r2, r7
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdda:	f7ff ffdc 	bl	800bd96 <__sfputc_r>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	d1f3      	bne.n	800bdca <__sfputs_r+0xa>
 800bde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bde4 <_vfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	460d      	mov	r5, r1
 800bdea:	4614      	mov	r4, r2
 800bdec:	4698      	mov	r8, r3
 800bdee:	4606      	mov	r6, r0
 800bdf0:	b09d      	sub	sp, #116	; 0x74
 800bdf2:	b118      	cbz	r0, 800bdfc <_vfiprintf_r+0x18>
 800bdf4:	6983      	ldr	r3, [r0, #24]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x18>
 800bdf8:	f000 fb02 	bl	800c400 <__sinit>
 800bdfc:	4b89      	ldr	r3, [pc, #548]	; (800c024 <_vfiprintf_r+0x240>)
 800bdfe:	429d      	cmp	r5, r3
 800be00:	d11b      	bne.n	800be3a <_vfiprintf_r+0x56>
 800be02:	6875      	ldr	r5, [r6, #4]
 800be04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be06:	07d9      	lsls	r1, r3, #31
 800be08:	d405      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	059a      	lsls	r2, r3, #22
 800be0e:	d402      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be12:	f000 fb93 	bl	800c53c <__retarget_lock_acquire_recursive>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	071b      	lsls	r3, r3, #28
 800be1a:	d501      	bpl.n	800be20 <_vfiprintf_r+0x3c>
 800be1c:	692b      	ldr	r3, [r5, #16]
 800be1e:	b9eb      	cbnz	r3, 800be5c <_vfiprintf_r+0x78>
 800be20:	4629      	mov	r1, r5
 800be22:	4630      	mov	r0, r6
 800be24:	f000 f960 	bl	800c0e8 <__swsetup_r>
 800be28:	b1c0      	cbz	r0, 800be5c <_vfiprintf_r+0x78>
 800be2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be2c:	07dc      	lsls	r4, r3, #31
 800be2e:	d50e      	bpl.n	800be4e <_vfiprintf_r+0x6a>
 800be30:	f04f 30ff 	mov.w	r0, #4294967295
 800be34:	b01d      	add	sp, #116	; 0x74
 800be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	4b7b      	ldr	r3, [pc, #492]	; (800c028 <_vfiprintf_r+0x244>)
 800be3c:	429d      	cmp	r5, r3
 800be3e:	d101      	bne.n	800be44 <_vfiprintf_r+0x60>
 800be40:	68b5      	ldr	r5, [r6, #8]
 800be42:	e7df      	b.n	800be04 <_vfiprintf_r+0x20>
 800be44:	4b79      	ldr	r3, [pc, #484]	; (800c02c <_vfiprintf_r+0x248>)
 800be46:	429d      	cmp	r5, r3
 800be48:	bf08      	it	eq
 800be4a:	68f5      	ldreq	r5, [r6, #12]
 800be4c:	e7da      	b.n	800be04 <_vfiprintf_r+0x20>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	0598      	lsls	r0, r3, #22
 800be52:	d4ed      	bmi.n	800be30 <_vfiprintf_r+0x4c>
 800be54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be56:	f000 fb72 	bl	800c53e <__retarget_lock_release_recursive>
 800be5a:	e7e9      	b.n	800be30 <_vfiprintf_r+0x4c>
 800be5c:	2300      	movs	r3, #0
 800be5e:	9309      	str	r3, [sp, #36]	; 0x24
 800be60:	2320      	movs	r3, #32
 800be62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be66:	2330      	movs	r3, #48	; 0x30
 800be68:	f04f 0901 	mov.w	r9, #1
 800be6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c030 <_vfiprintf_r+0x24c>
 800be74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be78:	4623      	mov	r3, r4
 800be7a:	469a      	mov	sl, r3
 800be7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be80:	b10a      	cbz	r2, 800be86 <_vfiprintf_r+0xa2>
 800be82:	2a25      	cmp	r2, #37	; 0x25
 800be84:	d1f9      	bne.n	800be7a <_vfiprintf_r+0x96>
 800be86:	ebba 0b04 	subs.w	fp, sl, r4
 800be8a:	d00b      	beq.n	800bea4 <_vfiprintf_r+0xc0>
 800be8c:	465b      	mov	r3, fp
 800be8e:	4622      	mov	r2, r4
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ff94 	bl	800bdc0 <__sfputs_r>
 800be98:	3001      	adds	r0, #1
 800be9a:	f000 80aa 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800be9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea0:	445a      	add	r2, fp
 800bea2:	9209      	str	r2, [sp, #36]	; 0x24
 800bea4:	f89a 3000 	ldrb.w	r3, [sl]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80a2 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800beae:	2300      	movs	r3, #0
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beb8:	f10a 0a01 	add.w	sl, sl, #1
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bec4:	931a      	str	r3, [sp, #104]	; 0x68
 800bec6:	4654      	mov	r4, sl
 800bec8:	2205      	movs	r2, #5
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4858      	ldr	r0, [pc, #352]	; (800c030 <_vfiprintf_r+0x24c>)
 800bed0:	f7fe ff84 	bl	800addc <memchr>
 800bed4:	9a04      	ldr	r2, [sp, #16]
 800bed6:	b9d8      	cbnz	r0, 800bf10 <_vfiprintf_r+0x12c>
 800bed8:	06d1      	lsls	r1, r2, #27
 800beda:	bf44      	itt	mi
 800bedc:	2320      	movmi	r3, #32
 800bede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee2:	0713      	lsls	r3, r2, #28
 800bee4:	bf44      	itt	mi
 800bee6:	232b      	movmi	r3, #43	; 0x2b
 800bee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beec:	f89a 3000 	ldrb.w	r3, [sl]
 800bef0:	2b2a      	cmp	r3, #42	; 0x2a
 800bef2:	d015      	beq.n	800bf20 <_vfiprintf_r+0x13c>
 800bef4:	4654      	mov	r4, sl
 800bef6:	2000      	movs	r0, #0
 800bef8:	f04f 0c0a 	mov.w	ip, #10
 800befc:	9a07      	ldr	r2, [sp, #28]
 800befe:	4621      	mov	r1, r4
 800bf00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf04:	3b30      	subs	r3, #48	; 0x30
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d94e      	bls.n	800bfa8 <_vfiprintf_r+0x1c4>
 800bf0a:	b1b0      	cbz	r0, 800bf3a <_vfiprintf_r+0x156>
 800bf0c:	9207      	str	r2, [sp, #28]
 800bf0e:	e014      	b.n	800bf3a <_vfiprintf_r+0x156>
 800bf10:	eba0 0308 	sub.w	r3, r0, r8
 800bf14:	fa09 f303 	lsl.w	r3, r9, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	46a2      	mov	sl, r4
 800bf1c:	9304      	str	r3, [sp, #16]
 800bf1e:	e7d2      	b.n	800bec6 <_vfiprintf_r+0xe2>
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	1d19      	adds	r1, r3, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	9103      	str	r1, [sp, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	bfbb      	ittet	lt
 800bf2c:	425b      	neglt	r3, r3
 800bf2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf32:	9307      	strge	r3, [sp, #28]
 800bf34:	9307      	strlt	r3, [sp, #28]
 800bf36:	bfb8      	it	lt
 800bf38:	9204      	strlt	r2, [sp, #16]
 800bf3a:	7823      	ldrb	r3, [r4, #0]
 800bf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3e:	d10c      	bne.n	800bf5a <_vfiprintf_r+0x176>
 800bf40:	7863      	ldrb	r3, [r4, #1]
 800bf42:	2b2a      	cmp	r3, #42	; 0x2a
 800bf44:	d135      	bne.n	800bfb2 <_vfiprintf_r+0x1ce>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	3402      	adds	r4, #2
 800bf4a:	1d1a      	adds	r2, r3, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	9203      	str	r2, [sp, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bfb8      	it	lt
 800bf54:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c034 <_vfiprintf_r+0x250>
 800bf5e:	2203      	movs	r2, #3
 800bf60:	4650      	mov	r0, sl
 800bf62:	7821      	ldrb	r1, [r4, #0]
 800bf64:	f7fe ff3a 	bl	800addc <memchr>
 800bf68:	b140      	cbz	r0, 800bf7c <_vfiprintf_r+0x198>
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	eba0 000a 	sub.w	r0, r0, sl
 800bf70:	fa03 f000 	lsl.w	r0, r3, r0
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	3401      	adds	r4, #1
 800bf78:	4303      	orrs	r3, r0
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf80:	2206      	movs	r2, #6
 800bf82:	482d      	ldr	r0, [pc, #180]	; (800c038 <_vfiprintf_r+0x254>)
 800bf84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf88:	f7fe ff28 	bl	800addc <memchr>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d03f      	beq.n	800c010 <_vfiprintf_r+0x22c>
 800bf90:	4b2a      	ldr	r3, [pc, #168]	; (800c03c <_vfiprintf_r+0x258>)
 800bf92:	bb1b      	cbnz	r3, 800bfdc <_vfiprintf_r+0x1f8>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	3307      	adds	r3, #7
 800bf98:	f023 0307 	bic.w	r3, r3, #7
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	9303      	str	r3, [sp, #12]
 800bfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa2:	443b      	add	r3, r7
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	e767      	b.n	800be78 <_vfiprintf_r+0x94>
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	2001      	movs	r0, #1
 800bfac:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfb0:	e7a5      	b.n	800befe <_vfiprintf_r+0x11a>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f04f 0c0a 	mov.w	ip, #10
 800bfb8:	4619      	mov	r1, r3
 800bfba:	3401      	adds	r4, #1
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc4:	3a30      	subs	r2, #48	; 0x30
 800bfc6:	2a09      	cmp	r2, #9
 800bfc8:	d903      	bls.n	800bfd2 <_vfiprintf_r+0x1ee>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0c5      	beq.n	800bf5a <_vfiprintf_r+0x176>
 800bfce:	9105      	str	r1, [sp, #20]
 800bfd0:	e7c3      	b.n	800bf5a <_vfiprintf_r+0x176>
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfda:	e7f0      	b.n	800bfbe <_vfiprintf_r+0x1da>
 800bfdc:	ab03      	add	r3, sp, #12
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	462a      	mov	r2, r5
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	4b16      	ldr	r3, [pc, #88]	; (800c040 <_vfiprintf_r+0x25c>)
 800bfe6:	a904      	add	r1, sp, #16
 800bfe8:	f7fc f878 	bl	80080dc <_printf_float>
 800bfec:	4607      	mov	r7, r0
 800bfee:	1c78      	adds	r0, r7, #1
 800bff0:	d1d6      	bne.n	800bfa0 <_vfiprintf_r+0x1bc>
 800bff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff4:	07d9      	lsls	r1, r3, #31
 800bff6:	d405      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bff8:	89ab      	ldrh	r3, [r5, #12]
 800bffa:	059a      	lsls	r2, r3, #22
 800bffc:	d402      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c000:	f000 fa9d 	bl	800c53e <__retarget_lock_release_recursive>
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	065b      	lsls	r3, r3, #25
 800c008:	f53f af12 	bmi.w	800be30 <_vfiprintf_r+0x4c>
 800c00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00e:	e711      	b.n	800be34 <_vfiprintf_r+0x50>
 800c010:	ab03      	add	r3, sp, #12
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	462a      	mov	r2, r5
 800c016:	4630      	mov	r0, r6
 800c018:	4b09      	ldr	r3, [pc, #36]	; (800c040 <_vfiprintf_r+0x25c>)
 800c01a:	a904      	add	r1, sp, #16
 800c01c:	f7fc fafa 	bl	8008614 <_printf_i>
 800c020:	e7e4      	b.n	800bfec <_vfiprintf_r+0x208>
 800c022:	bf00      	nop
 800c024:	0800d4bc 	.word	0x0800d4bc
 800c028:	0800d4dc 	.word	0x0800d4dc
 800c02c:	0800d49c 	.word	0x0800d49c
 800c030:	0800d44c 	.word	0x0800d44c
 800c034:	0800d452 	.word	0x0800d452
 800c038:	0800d456 	.word	0x0800d456
 800c03c:	080080dd 	.word	0x080080dd
 800c040:	0800bdc1 	.word	0x0800bdc1

0800c044 <__swbuf_r>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	460e      	mov	r6, r1
 800c048:	4614      	mov	r4, r2
 800c04a:	4605      	mov	r5, r0
 800c04c:	b118      	cbz	r0, 800c056 <__swbuf_r+0x12>
 800c04e:	6983      	ldr	r3, [r0, #24]
 800c050:	b90b      	cbnz	r3, 800c056 <__swbuf_r+0x12>
 800c052:	f000 f9d5 	bl	800c400 <__sinit>
 800c056:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <__swbuf_r+0x98>)
 800c058:	429c      	cmp	r4, r3
 800c05a:	d12b      	bne.n	800c0b4 <__swbuf_r+0x70>
 800c05c:	686c      	ldr	r4, [r5, #4]
 800c05e:	69a3      	ldr	r3, [r4, #24]
 800c060:	60a3      	str	r3, [r4, #8]
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	071a      	lsls	r2, r3, #28
 800c066:	d52f      	bpl.n	800c0c8 <__swbuf_r+0x84>
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	b36b      	cbz	r3, 800c0c8 <__swbuf_r+0x84>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	6820      	ldr	r0, [r4, #0]
 800c070:	b2f6      	uxtb	r6, r6
 800c072:	1ac0      	subs	r0, r0, r3
 800c074:	6963      	ldr	r3, [r4, #20]
 800c076:	4637      	mov	r7, r6
 800c078:	4283      	cmp	r3, r0
 800c07a:	dc04      	bgt.n	800c086 <__swbuf_r+0x42>
 800c07c:	4621      	mov	r1, r4
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 f92a 	bl	800c2d8 <_fflush_r>
 800c084:	bb30      	cbnz	r0, 800c0d4 <__swbuf_r+0x90>
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	3001      	adds	r0, #1
 800c08a:	3b01      	subs	r3, #1
 800c08c:	60a3      	str	r3, [r4, #8]
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	6022      	str	r2, [r4, #0]
 800c094:	701e      	strb	r6, [r3, #0]
 800c096:	6963      	ldr	r3, [r4, #20]
 800c098:	4283      	cmp	r3, r0
 800c09a:	d004      	beq.n	800c0a6 <__swbuf_r+0x62>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	07db      	lsls	r3, r3, #31
 800c0a0:	d506      	bpl.n	800c0b0 <__swbuf_r+0x6c>
 800c0a2:	2e0a      	cmp	r6, #10
 800c0a4:	d104      	bne.n	800c0b0 <__swbuf_r+0x6c>
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f000 f915 	bl	800c2d8 <_fflush_r>
 800c0ae:	b988      	cbnz	r0, 800c0d4 <__swbuf_r+0x90>
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <__swbuf_r+0x9c>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d101      	bne.n	800c0be <__swbuf_r+0x7a>
 800c0ba:	68ac      	ldr	r4, [r5, #8]
 800c0bc:	e7cf      	b.n	800c05e <__swbuf_r+0x1a>
 800c0be:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <__swbuf_r+0xa0>)
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	bf08      	it	eq
 800c0c4:	68ec      	ldreq	r4, [r5, #12]
 800c0c6:	e7ca      	b.n	800c05e <__swbuf_r+0x1a>
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f000 f80c 	bl	800c0e8 <__swsetup_r>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d0cb      	beq.n	800c06c <__swbuf_r+0x28>
 800c0d4:	f04f 37ff 	mov.w	r7, #4294967295
 800c0d8:	e7ea      	b.n	800c0b0 <__swbuf_r+0x6c>
 800c0da:	bf00      	nop
 800c0dc:	0800d4bc 	.word	0x0800d4bc
 800c0e0:	0800d4dc 	.word	0x0800d4dc
 800c0e4:	0800d49c 	.word	0x0800d49c

0800c0e8 <__swsetup_r>:
 800c0e8:	4b32      	ldr	r3, [pc, #200]	; (800c1b4 <__swsetup_r+0xcc>)
 800c0ea:	b570      	push	{r4, r5, r6, lr}
 800c0ec:	681d      	ldr	r5, [r3, #0]
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	b125      	cbz	r5, 800c0fe <__swsetup_r+0x16>
 800c0f4:	69ab      	ldr	r3, [r5, #24]
 800c0f6:	b913      	cbnz	r3, 800c0fe <__swsetup_r+0x16>
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f000 f981 	bl	800c400 <__sinit>
 800c0fe:	4b2e      	ldr	r3, [pc, #184]	; (800c1b8 <__swsetup_r+0xd0>)
 800c100:	429c      	cmp	r4, r3
 800c102:	d10f      	bne.n	800c124 <__swsetup_r+0x3c>
 800c104:	686c      	ldr	r4, [r5, #4]
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c10c:	0719      	lsls	r1, r3, #28
 800c10e:	d42c      	bmi.n	800c16a <__swsetup_r+0x82>
 800c110:	06dd      	lsls	r5, r3, #27
 800c112:	d411      	bmi.n	800c138 <__swsetup_r+0x50>
 800c114:	2309      	movs	r3, #9
 800c116:	6033      	str	r3, [r6, #0]
 800c118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	e03e      	b.n	800c1a2 <__swsetup_r+0xba>
 800c124:	4b25      	ldr	r3, [pc, #148]	; (800c1bc <__swsetup_r+0xd4>)
 800c126:	429c      	cmp	r4, r3
 800c128:	d101      	bne.n	800c12e <__swsetup_r+0x46>
 800c12a:	68ac      	ldr	r4, [r5, #8]
 800c12c:	e7eb      	b.n	800c106 <__swsetup_r+0x1e>
 800c12e:	4b24      	ldr	r3, [pc, #144]	; (800c1c0 <__swsetup_r+0xd8>)
 800c130:	429c      	cmp	r4, r3
 800c132:	bf08      	it	eq
 800c134:	68ec      	ldreq	r4, [r5, #12]
 800c136:	e7e6      	b.n	800c106 <__swsetup_r+0x1e>
 800c138:	0758      	lsls	r0, r3, #29
 800c13a:	d512      	bpl.n	800c162 <__swsetup_r+0x7a>
 800c13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c13e:	b141      	cbz	r1, 800c152 <__swsetup_r+0x6a>
 800c140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c144:	4299      	cmp	r1, r3
 800c146:	d002      	beq.n	800c14e <__swsetup_r+0x66>
 800c148:	4630      	mov	r0, r6
 800c14a:	f7ff fb2f 	bl	800b7ac <_free_r>
 800c14e:	2300      	movs	r3, #0
 800c150:	6363      	str	r3, [r4, #52]	; 0x34
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	2300      	movs	r3, #0
 800c15c:	6063      	str	r3, [r4, #4]
 800c15e:	6923      	ldr	r3, [r4, #16]
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f043 0308 	orr.w	r3, r3, #8
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	b94b      	cbnz	r3, 800c182 <__swsetup_r+0x9a>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c178:	d003      	beq.n	800c182 <__swsetup_r+0x9a>
 800c17a:	4621      	mov	r1, r4
 800c17c:	4630      	mov	r0, r6
 800c17e:	f000 fa05 	bl	800c58c <__smakebuf_r>
 800c182:	89a0      	ldrh	r0, [r4, #12]
 800c184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c188:	f010 0301 	ands.w	r3, r0, #1
 800c18c:	d00a      	beq.n	800c1a4 <__swsetup_r+0xbc>
 800c18e:	2300      	movs	r3, #0
 800c190:	60a3      	str	r3, [r4, #8]
 800c192:	6963      	ldr	r3, [r4, #20]
 800c194:	425b      	negs	r3, r3
 800c196:	61a3      	str	r3, [r4, #24]
 800c198:	6923      	ldr	r3, [r4, #16]
 800c19a:	b943      	cbnz	r3, 800c1ae <__swsetup_r+0xc6>
 800c19c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1a0:	d1ba      	bne.n	800c118 <__swsetup_r+0x30>
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	0781      	lsls	r1, r0, #30
 800c1a6:	bf58      	it	pl
 800c1a8:	6963      	ldrpl	r3, [r4, #20]
 800c1aa:	60a3      	str	r3, [r4, #8]
 800c1ac:	e7f4      	b.n	800c198 <__swsetup_r+0xb0>
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	e7f7      	b.n	800c1a2 <__swsetup_r+0xba>
 800c1b2:	bf00      	nop
 800c1b4:	20000034 	.word	0x20000034
 800c1b8:	0800d4bc 	.word	0x0800d4bc
 800c1bc:	0800d4dc 	.word	0x0800d4dc
 800c1c0:	0800d49c 	.word	0x0800d49c

0800c1c4 <abort>:
 800c1c4:	2006      	movs	r0, #6
 800c1c6:	b508      	push	{r3, lr}
 800c1c8:	f000 fa50 	bl	800c66c <raise>
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	f7f6 fa70 	bl	80026b2 <_exit>
	...

0800c1d4 <__sflush_r>:
 800c1d4:	898a      	ldrh	r2, [r1, #12]
 800c1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d8:	4605      	mov	r5, r0
 800c1da:	0710      	lsls	r0, r2, #28
 800c1dc:	460c      	mov	r4, r1
 800c1de:	d457      	bmi.n	800c290 <__sflush_r+0xbc>
 800c1e0:	684b      	ldr	r3, [r1, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	dc04      	bgt.n	800c1f0 <__sflush_r+0x1c>
 800c1e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dc01      	bgt.n	800c1f0 <__sflush_r+0x1c>
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1f2:	2e00      	cmp	r6, #0
 800c1f4:	d0fa      	beq.n	800c1ec <__sflush_r+0x18>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1fc:	682f      	ldr	r7, [r5, #0]
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	d032      	beq.n	800c268 <__sflush_r+0x94>
 800c202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	075a      	lsls	r2, r3, #29
 800c208:	d505      	bpl.n	800c216 <__sflush_r+0x42>
 800c20a:	6863      	ldr	r3, [r4, #4]
 800c20c:	1ac0      	subs	r0, r0, r3
 800c20e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c210:	b10b      	cbz	r3, 800c216 <__sflush_r+0x42>
 800c212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c214:	1ac0      	subs	r0, r0, r3
 800c216:	2300      	movs	r3, #0
 800c218:	4602      	mov	r2, r0
 800c21a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c21c:	4628      	mov	r0, r5
 800c21e:	6a21      	ldr	r1, [r4, #32]
 800c220:	47b0      	blx	r6
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	d106      	bne.n	800c236 <__sflush_r+0x62>
 800c228:	6829      	ldr	r1, [r5, #0]
 800c22a:	291d      	cmp	r1, #29
 800c22c:	d82c      	bhi.n	800c288 <__sflush_r+0xb4>
 800c22e:	4a29      	ldr	r2, [pc, #164]	; (800c2d4 <__sflush_r+0x100>)
 800c230:	40ca      	lsrs	r2, r1
 800c232:	07d6      	lsls	r6, r2, #31
 800c234:	d528      	bpl.n	800c288 <__sflush_r+0xb4>
 800c236:	2200      	movs	r2, #0
 800c238:	6062      	str	r2, [r4, #4]
 800c23a:	6922      	ldr	r2, [r4, #16]
 800c23c:	04d9      	lsls	r1, r3, #19
 800c23e:	6022      	str	r2, [r4, #0]
 800c240:	d504      	bpl.n	800c24c <__sflush_r+0x78>
 800c242:	1c42      	adds	r2, r0, #1
 800c244:	d101      	bne.n	800c24a <__sflush_r+0x76>
 800c246:	682b      	ldr	r3, [r5, #0]
 800c248:	b903      	cbnz	r3, 800c24c <__sflush_r+0x78>
 800c24a:	6560      	str	r0, [r4, #84]	; 0x54
 800c24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c24e:	602f      	str	r7, [r5, #0]
 800c250:	2900      	cmp	r1, #0
 800c252:	d0cb      	beq.n	800c1ec <__sflush_r+0x18>
 800c254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c258:	4299      	cmp	r1, r3
 800c25a:	d002      	beq.n	800c262 <__sflush_r+0x8e>
 800c25c:	4628      	mov	r0, r5
 800c25e:	f7ff faa5 	bl	800b7ac <_free_r>
 800c262:	2000      	movs	r0, #0
 800c264:	6360      	str	r0, [r4, #52]	; 0x34
 800c266:	e7c2      	b.n	800c1ee <__sflush_r+0x1a>
 800c268:	6a21      	ldr	r1, [r4, #32]
 800c26a:	2301      	movs	r3, #1
 800c26c:	4628      	mov	r0, r5
 800c26e:	47b0      	blx	r6
 800c270:	1c41      	adds	r1, r0, #1
 800c272:	d1c7      	bne.n	800c204 <__sflush_r+0x30>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0c4      	beq.n	800c204 <__sflush_r+0x30>
 800c27a:	2b1d      	cmp	r3, #29
 800c27c:	d001      	beq.n	800c282 <__sflush_r+0xae>
 800c27e:	2b16      	cmp	r3, #22
 800c280:	d101      	bne.n	800c286 <__sflush_r+0xb2>
 800c282:	602f      	str	r7, [r5, #0]
 800c284:	e7b2      	b.n	800c1ec <__sflush_r+0x18>
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	e7ae      	b.n	800c1ee <__sflush_r+0x1a>
 800c290:	690f      	ldr	r7, [r1, #16]
 800c292:	2f00      	cmp	r7, #0
 800c294:	d0aa      	beq.n	800c1ec <__sflush_r+0x18>
 800c296:	0793      	lsls	r3, r2, #30
 800c298:	bf18      	it	ne
 800c29a:	2300      	movne	r3, #0
 800c29c:	680e      	ldr	r6, [r1, #0]
 800c29e:	bf08      	it	eq
 800c2a0:	694b      	ldreq	r3, [r1, #20]
 800c2a2:	1bf6      	subs	r6, r6, r7
 800c2a4:	600f      	str	r7, [r1, #0]
 800c2a6:	608b      	str	r3, [r1, #8]
 800c2a8:	2e00      	cmp	r6, #0
 800c2aa:	dd9f      	ble.n	800c1ec <__sflush_r+0x18>
 800c2ac:	4633      	mov	r3, r6
 800c2ae:	463a      	mov	r2, r7
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	6a21      	ldr	r1, [r4, #32]
 800c2b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c2b8:	47e0      	blx	ip
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	dc06      	bgt.n	800c2cc <__sflush_r+0xf8>
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c8:	81a3      	strh	r3, [r4, #12]
 800c2ca:	e790      	b.n	800c1ee <__sflush_r+0x1a>
 800c2cc:	4407      	add	r7, r0
 800c2ce:	1a36      	subs	r6, r6, r0
 800c2d0:	e7ea      	b.n	800c2a8 <__sflush_r+0xd4>
 800c2d2:	bf00      	nop
 800c2d4:	20400001 	.word	0x20400001

0800c2d8 <_fflush_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	690b      	ldr	r3, [r1, #16]
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	b913      	cbnz	r3, 800c2e8 <_fflush_r+0x10>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	b118      	cbz	r0, 800c2f2 <_fflush_r+0x1a>
 800c2ea:	6983      	ldr	r3, [r0, #24]
 800c2ec:	b90b      	cbnz	r3, 800c2f2 <_fflush_r+0x1a>
 800c2ee:	f000 f887 	bl	800c400 <__sinit>
 800c2f2:	4b14      	ldr	r3, [pc, #80]	; (800c344 <_fflush_r+0x6c>)
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d11b      	bne.n	800c330 <_fflush_r+0x58>
 800c2f8:	686c      	ldr	r4, [r5, #4]
 800c2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0ef      	beq.n	800c2e2 <_fflush_r+0xa>
 800c302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c304:	07d0      	lsls	r0, r2, #31
 800c306:	d404      	bmi.n	800c312 <_fflush_r+0x3a>
 800c308:	0599      	lsls	r1, r3, #22
 800c30a:	d402      	bmi.n	800c312 <_fflush_r+0x3a>
 800c30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c30e:	f000 f915 	bl	800c53c <__retarget_lock_acquire_recursive>
 800c312:	4628      	mov	r0, r5
 800c314:	4621      	mov	r1, r4
 800c316:	f7ff ff5d 	bl	800c1d4 <__sflush_r>
 800c31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c31c:	4605      	mov	r5, r0
 800c31e:	07da      	lsls	r2, r3, #31
 800c320:	d4e0      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	059b      	lsls	r3, r3, #22
 800c326:	d4dd      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32a:	f000 f908 	bl	800c53e <__retarget_lock_release_recursive>
 800c32e:	e7d9      	b.n	800c2e4 <_fflush_r+0xc>
 800c330:	4b05      	ldr	r3, [pc, #20]	; (800c348 <_fflush_r+0x70>)
 800c332:	429c      	cmp	r4, r3
 800c334:	d101      	bne.n	800c33a <_fflush_r+0x62>
 800c336:	68ac      	ldr	r4, [r5, #8]
 800c338:	e7df      	b.n	800c2fa <_fflush_r+0x22>
 800c33a:	4b04      	ldr	r3, [pc, #16]	; (800c34c <_fflush_r+0x74>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	bf08      	it	eq
 800c340:	68ec      	ldreq	r4, [r5, #12]
 800c342:	e7da      	b.n	800c2fa <_fflush_r+0x22>
 800c344:	0800d4bc 	.word	0x0800d4bc
 800c348:	0800d4dc 	.word	0x0800d4dc
 800c34c:	0800d49c 	.word	0x0800d49c

0800c350 <std>:
 800c350:	2300      	movs	r3, #0
 800c352:	b510      	push	{r4, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	e9c0 3300 	strd	r3, r3, [r0]
 800c35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c35e:	6083      	str	r3, [r0, #8]
 800c360:	8181      	strh	r1, [r0, #12]
 800c362:	6643      	str	r3, [r0, #100]	; 0x64
 800c364:	81c2      	strh	r2, [r0, #14]
 800c366:	6183      	str	r3, [r0, #24]
 800c368:	4619      	mov	r1, r3
 800c36a:	2208      	movs	r2, #8
 800c36c:	305c      	adds	r0, #92	; 0x5c
 800c36e:	f7fb fe0f 	bl	8007f90 <memset>
 800c372:	4b05      	ldr	r3, [pc, #20]	; (800c388 <std+0x38>)
 800c374:	6224      	str	r4, [r4, #32]
 800c376:	6263      	str	r3, [r4, #36]	; 0x24
 800c378:	4b04      	ldr	r3, [pc, #16]	; (800c38c <std+0x3c>)
 800c37a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c37c:	4b04      	ldr	r3, [pc, #16]	; (800c390 <std+0x40>)
 800c37e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c380:	4b04      	ldr	r3, [pc, #16]	; (800c394 <std+0x44>)
 800c382:	6323      	str	r3, [r4, #48]	; 0x30
 800c384:	bd10      	pop	{r4, pc}
 800c386:	bf00      	nop
 800c388:	0800c6a5 	.word	0x0800c6a5
 800c38c:	0800c6c7 	.word	0x0800c6c7
 800c390:	0800c6ff 	.word	0x0800c6ff
 800c394:	0800c723 	.word	0x0800c723

0800c398 <_cleanup_r>:
 800c398:	4901      	ldr	r1, [pc, #4]	; (800c3a0 <_cleanup_r+0x8>)
 800c39a:	f000 b8af 	b.w	800c4fc <_fwalk_reent>
 800c39e:	bf00      	nop
 800c3a0:	0800c2d9 	.word	0x0800c2d9

0800c3a4 <__sfmoreglue>:
 800c3a4:	2268      	movs	r2, #104	; 0x68
 800c3a6:	b570      	push	{r4, r5, r6, lr}
 800c3a8:	1e4d      	subs	r5, r1, #1
 800c3aa:	4355      	muls	r5, r2
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3b2:	f7ff fa63 	bl	800b87c <_malloc_r>
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	b140      	cbz	r0, 800c3cc <__sfmoreglue+0x28>
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c0:	300c      	adds	r0, #12
 800c3c2:	60a0      	str	r0, [r4, #8]
 800c3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3c8:	f7fb fde2 	bl	8007f90 <memset>
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}

0800c3d0 <__sfp_lock_acquire>:
 800c3d0:	4801      	ldr	r0, [pc, #4]	; (800c3d8 <__sfp_lock_acquire+0x8>)
 800c3d2:	f000 b8b3 	b.w	800c53c <__retarget_lock_acquire_recursive>
 800c3d6:	bf00      	nop
 800c3d8:	20002835 	.word	0x20002835

0800c3dc <__sfp_lock_release>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	; (800c3e4 <__sfp_lock_release+0x8>)
 800c3de:	f000 b8ae 	b.w	800c53e <__retarget_lock_release_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	20002835 	.word	0x20002835

0800c3e8 <__sinit_lock_acquire>:
 800c3e8:	4801      	ldr	r0, [pc, #4]	; (800c3f0 <__sinit_lock_acquire+0x8>)
 800c3ea:	f000 b8a7 	b.w	800c53c <__retarget_lock_acquire_recursive>
 800c3ee:	bf00      	nop
 800c3f0:	20002836 	.word	0x20002836

0800c3f4 <__sinit_lock_release>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	; (800c3fc <__sinit_lock_release+0x8>)
 800c3f6:	f000 b8a2 	b.w	800c53e <__retarget_lock_release_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	20002836 	.word	0x20002836

0800c400 <__sinit>:
 800c400:	b510      	push	{r4, lr}
 800c402:	4604      	mov	r4, r0
 800c404:	f7ff fff0 	bl	800c3e8 <__sinit_lock_acquire>
 800c408:	69a3      	ldr	r3, [r4, #24]
 800c40a:	b11b      	cbz	r3, 800c414 <__sinit+0x14>
 800c40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c410:	f7ff bff0 	b.w	800c3f4 <__sinit_lock_release>
 800c414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c418:	6523      	str	r3, [r4, #80]	; 0x50
 800c41a:	4b13      	ldr	r3, [pc, #76]	; (800c468 <__sinit+0x68>)
 800c41c:	4a13      	ldr	r2, [pc, #76]	; (800c46c <__sinit+0x6c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	62a2      	str	r2, [r4, #40]	; 0x28
 800c422:	42a3      	cmp	r3, r4
 800c424:	bf08      	it	eq
 800c426:	2301      	moveq	r3, #1
 800c428:	4620      	mov	r0, r4
 800c42a:	bf08      	it	eq
 800c42c:	61a3      	streq	r3, [r4, #24]
 800c42e:	f000 f81f 	bl	800c470 <__sfp>
 800c432:	6060      	str	r0, [r4, #4]
 800c434:	4620      	mov	r0, r4
 800c436:	f000 f81b 	bl	800c470 <__sfp>
 800c43a:	60a0      	str	r0, [r4, #8]
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 f817 	bl	800c470 <__sfp>
 800c442:	2200      	movs	r2, #0
 800c444:	2104      	movs	r1, #4
 800c446:	60e0      	str	r0, [r4, #12]
 800c448:	6860      	ldr	r0, [r4, #4]
 800c44a:	f7ff ff81 	bl	800c350 <std>
 800c44e:	2201      	movs	r2, #1
 800c450:	2109      	movs	r1, #9
 800c452:	68a0      	ldr	r0, [r4, #8]
 800c454:	f7ff ff7c 	bl	800c350 <std>
 800c458:	2202      	movs	r2, #2
 800c45a:	2112      	movs	r1, #18
 800c45c:	68e0      	ldr	r0, [r4, #12]
 800c45e:	f7ff ff77 	bl	800c350 <std>
 800c462:	2301      	movs	r3, #1
 800c464:	61a3      	str	r3, [r4, #24]
 800c466:	e7d1      	b.n	800c40c <__sinit+0xc>
 800c468:	0800d054 	.word	0x0800d054
 800c46c:	0800c399 	.word	0x0800c399

0800c470 <__sfp>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	4607      	mov	r7, r0
 800c474:	f7ff ffac 	bl	800c3d0 <__sfp_lock_acquire>
 800c478:	4b1e      	ldr	r3, [pc, #120]	; (800c4f4 <__sfp+0x84>)
 800c47a:	681e      	ldr	r6, [r3, #0]
 800c47c:	69b3      	ldr	r3, [r6, #24]
 800c47e:	b913      	cbnz	r3, 800c486 <__sfp+0x16>
 800c480:	4630      	mov	r0, r6
 800c482:	f7ff ffbd 	bl	800c400 <__sinit>
 800c486:	3648      	adds	r6, #72	; 0x48
 800c488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c48c:	3b01      	subs	r3, #1
 800c48e:	d503      	bpl.n	800c498 <__sfp+0x28>
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	b30b      	cbz	r3, 800c4d8 <__sfp+0x68>
 800c494:	6836      	ldr	r6, [r6, #0]
 800c496:	e7f7      	b.n	800c488 <__sfp+0x18>
 800c498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c49c:	b9d5      	cbnz	r5, 800c4d4 <__sfp+0x64>
 800c49e:	4b16      	ldr	r3, [pc, #88]	; (800c4f8 <__sfp+0x88>)
 800c4a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4a4:	60e3      	str	r3, [r4, #12]
 800c4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c4a8:	f000 f847 	bl	800c53a <__retarget_lock_init_recursive>
 800c4ac:	f7ff ff96 	bl	800c3dc <__sfp_lock_release>
 800c4b0:	2208      	movs	r2, #8
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4bc:	6025      	str	r5, [r4, #0]
 800c4be:	61a5      	str	r5, [r4, #24]
 800c4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4c4:	f7fb fd64 	bl	8007f90 <memset>
 800c4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4d4:	3468      	adds	r4, #104	; 0x68
 800c4d6:	e7d9      	b.n	800c48c <__sfp+0x1c>
 800c4d8:	2104      	movs	r1, #4
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f7ff ff62 	bl	800c3a4 <__sfmoreglue>
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	6030      	str	r0, [r6, #0]
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d1d5      	bne.n	800c494 <__sfp+0x24>
 800c4e8:	f7ff ff78 	bl	800c3dc <__sfp_lock_release>
 800c4ec:	230c      	movs	r3, #12
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	e7ee      	b.n	800c4d0 <__sfp+0x60>
 800c4f2:	bf00      	nop
 800c4f4:	0800d054 	.word	0x0800d054
 800c4f8:	ffff0001 	.word	0xffff0001

0800c4fc <_fwalk_reent>:
 800c4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c500:	4606      	mov	r6, r0
 800c502:	4688      	mov	r8, r1
 800c504:	2700      	movs	r7, #0
 800c506:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c50e:	f1b9 0901 	subs.w	r9, r9, #1
 800c512:	d505      	bpl.n	800c520 <_fwalk_reent+0x24>
 800c514:	6824      	ldr	r4, [r4, #0]
 800c516:	2c00      	cmp	r4, #0
 800c518:	d1f7      	bne.n	800c50a <_fwalk_reent+0xe>
 800c51a:	4638      	mov	r0, r7
 800c51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c520:	89ab      	ldrh	r3, [r5, #12]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d907      	bls.n	800c536 <_fwalk_reent+0x3a>
 800c526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c52a:	3301      	adds	r3, #1
 800c52c:	d003      	beq.n	800c536 <_fwalk_reent+0x3a>
 800c52e:	4629      	mov	r1, r5
 800c530:	4630      	mov	r0, r6
 800c532:	47c0      	blx	r8
 800c534:	4307      	orrs	r7, r0
 800c536:	3568      	adds	r5, #104	; 0x68
 800c538:	e7e9      	b.n	800c50e <_fwalk_reent+0x12>

0800c53a <__retarget_lock_init_recursive>:
 800c53a:	4770      	bx	lr

0800c53c <__retarget_lock_acquire_recursive>:
 800c53c:	4770      	bx	lr

0800c53e <__retarget_lock_release_recursive>:
 800c53e:	4770      	bx	lr

0800c540 <__swhatbuf_r>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	460e      	mov	r6, r1
 800c544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c548:	4614      	mov	r4, r2
 800c54a:	2900      	cmp	r1, #0
 800c54c:	461d      	mov	r5, r3
 800c54e:	b096      	sub	sp, #88	; 0x58
 800c550:	da08      	bge.n	800c564 <__swhatbuf_r+0x24>
 800c552:	2200      	movs	r2, #0
 800c554:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c558:	602a      	str	r2, [r5, #0]
 800c55a:	061a      	lsls	r2, r3, #24
 800c55c:	d410      	bmi.n	800c580 <__swhatbuf_r+0x40>
 800c55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c562:	e00e      	b.n	800c582 <__swhatbuf_r+0x42>
 800c564:	466a      	mov	r2, sp
 800c566:	f000 f903 	bl	800c770 <_fstat_r>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	dbf1      	blt.n	800c552 <__swhatbuf_r+0x12>
 800c56e:	9a01      	ldr	r2, [sp, #4]
 800c570:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c574:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c578:	425a      	negs	r2, r3
 800c57a:	415a      	adcs	r2, r3
 800c57c:	602a      	str	r2, [r5, #0]
 800c57e:	e7ee      	b.n	800c55e <__swhatbuf_r+0x1e>
 800c580:	2340      	movs	r3, #64	; 0x40
 800c582:	2000      	movs	r0, #0
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	b016      	add	sp, #88	; 0x58
 800c588:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c58c <__smakebuf_r>:
 800c58c:	898b      	ldrh	r3, [r1, #12]
 800c58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c590:	079d      	lsls	r5, r3, #30
 800c592:	4606      	mov	r6, r0
 800c594:	460c      	mov	r4, r1
 800c596:	d507      	bpl.n	800c5a8 <__smakebuf_r+0x1c>
 800c598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	6163      	str	r3, [r4, #20]
 800c5a4:	b002      	add	sp, #8
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	466a      	mov	r2, sp
 800c5aa:	ab01      	add	r3, sp, #4
 800c5ac:	f7ff ffc8 	bl	800c540 <__swhatbuf_r>
 800c5b0:	9900      	ldr	r1, [sp, #0]
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f7ff f961 	bl	800b87c <_malloc_r>
 800c5ba:	b948      	cbnz	r0, 800c5d0 <__smakebuf_r+0x44>
 800c5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c0:	059a      	lsls	r2, r3, #22
 800c5c2:	d4ef      	bmi.n	800c5a4 <__smakebuf_r+0x18>
 800c5c4:	f023 0303 	bic.w	r3, r3, #3
 800c5c8:	f043 0302 	orr.w	r3, r3, #2
 800c5cc:	81a3      	strh	r3, [r4, #12]
 800c5ce:	e7e3      	b.n	800c598 <__smakebuf_r+0xc>
 800c5d0:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <__smakebuf_r+0x7c>)
 800c5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5dc:	81a3      	strh	r3, [r4, #12]
 800c5de:	9b00      	ldr	r3, [sp, #0]
 800c5e0:	6120      	str	r0, [r4, #16]
 800c5e2:	6163      	str	r3, [r4, #20]
 800c5e4:	9b01      	ldr	r3, [sp, #4]
 800c5e6:	b15b      	cbz	r3, 800c600 <__smakebuf_r+0x74>
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5ee:	f000 f8d1 	bl	800c794 <_isatty_r>
 800c5f2:	b128      	cbz	r0, 800c600 <__smakebuf_r+0x74>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	f043 0301 	orr.w	r3, r3, #1
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	89a0      	ldrh	r0, [r4, #12]
 800c602:	4305      	orrs	r5, r0
 800c604:	81a5      	strh	r5, [r4, #12]
 800c606:	e7cd      	b.n	800c5a4 <__smakebuf_r+0x18>
 800c608:	0800c399 	.word	0x0800c399

0800c60c <_malloc_usable_size_r>:
 800c60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c610:	1f18      	subs	r0, r3, #4
 800c612:	2b00      	cmp	r3, #0
 800c614:	bfbc      	itt	lt
 800c616:	580b      	ldrlt	r3, [r1, r0]
 800c618:	18c0      	addlt	r0, r0, r3
 800c61a:	4770      	bx	lr

0800c61c <_raise_r>:
 800c61c:	291f      	cmp	r1, #31
 800c61e:	b538      	push	{r3, r4, r5, lr}
 800c620:	4604      	mov	r4, r0
 800c622:	460d      	mov	r5, r1
 800c624:	d904      	bls.n	800c630 <_raise_r+0x14>
 800c626:	2316      	movs	r3, #22
 800c628:	6003      	str	r3, [r0, #0]
 800c62a:	f04f 30ff 	mov.w	r0, #4294967295
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c632:	b112      	cbz	r2, 800c63a <_raise_r+0x1e>
 800c634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c638:	b94b      	cbnz	r3, 800c64e <_raise_r+0x32>
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 f830 	bl	800c6a0 <_getpid_r>
 800c640:	462a      	mov	r2, r5
 800c642:	4601      	mov	r1, r0
 800c644:	4620      	mov	r0, r4
 800c646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c64a:	f000 b817 	b.w	800c67c <_kill_r>
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d00a      	beq.n	800c668 <_raise_r+0x4c>
 800c652:	1c59      	adds	r1, r3, #1
 800c654:	d103      	bne.n	800c65e <_raise_r+0x42>
 800c656:	2316      	movs	r3, #22
 800c658:	6003      	str	r3, [r0, #0]
 800c65a:	2001      	movs	r0, #1
 800c65c:	e7e7      	b.n	800c62e <_raise_r+0x12>
 800c65e:	2400      	movs	r4, #0
 800c660:	4628      	mov	r0, r5
 800c662:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c666:	4798      	blx	r3
 800c668:	2000      	movs	r0, #0
 800c66a:	e7e0      	b.n	800c62e <_raise_r+0x12>

0800c66c <raise>:
 800c66c:	4b02      	ldr	r3, [pc, #8]	; (800c678 <raise+0xc>)
 800c66e:	4601      	mov	r1, r0
 800c670:	6818      	ldr	r0, [r3, #0]
 800c672:	f7ff bfd3 	b.w	800c61c <_raise_r>
 800c676:	bf00      	nop
 800c678:	20000034 	.word	0x20000034

0800c67c <_kill_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	2300      	movs	r3, #0
 800c680:	4d06      	ldr	r5, [pc, #24]	; (800c69c <_kill_r+0x20>)
 800c682:	4604      	mov	r4, r0
 800c684:	4608      	mov	r0, r1
 800c686:	4611      	mov	r1, r2
 800c688:	602b      	str	r3, [r5, #0]
 800c68a:	f7f6 f802 	bl	8002692 <_kill>
 800c68e:	1c43      	adds	r3, r0, #1
 800c690:	d102      	bne.n	800c698 <_kill_r+0x1c>
 800c692:	682b      	ldr	r3, [r5, #0]
 800c694:	b103      	cbz	r3, 800c698 <_kill_r+0x1c>
 800c696:	6023      	str	r3, [r4, #0]
 800c698:	bd38      	pop	{r3, r4, r5, pc}
 800c69a:	bf00      	nop
 800c69c:	20002830 	.word	0x20002830

0800c6a0 <_getpid_r>:
 800c6a0:	f7f5 bff0 	b.w	8002684 <_getpid>

0800c6a4 <__sread>:
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ac:	f000 f894 	bl	800c7d8 <_read_r>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	bfab      	itete	ge
 800c6b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6b8:	181b      	addge	r3, r3, r0
 800c6ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6be:	bfac      	ite	ge
 800c6c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6c2:	81a3      	strhlt	r3, [r4, #12]
 800c6c4:	bd10      	pop	{r4, pc}

0800c6c6 <__swrite>:
 800c6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	898b      	ldrh	r3, [r1, #12]
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	05db      	lsls	r3, r3, #23
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	4616      	mov	r6, r2
 800c6d6:	d505      	bpl.n	800c6e4 <__swrite+0x1e>
 800c6d8:	2302      	movs	r3, #2
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e0:	f000 f868 	bl	800c7b4 <_lseek_r>
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	4632      	mov	r2, r6
 800c6e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6ec:	81a3      	strh	r3, [r4, #12]
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	463b      	mov	r3, r7
 800c6f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fa:	f000 b817 	b.w	800c72c <_write_r>

0800c6fe <__sseek>:
 800c6fe:	b510      	push	{r4, lr}
 800c700:	460c      	mov	r4, r1
 800c702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c706:	f000 f855 	bl	800c7b4 <_lseek_r>
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	bf15      	itete	ne
 800c710:	6560      	strne	r0, [r4, #84]	; 0x54
 800c712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c71a:	81a3      	strheq	r3, [r4, #12]
 800c71c:	bf18      	it	ne
 800c71e:	81a3      	strhne	r3, [r4, #12]
 800c720:	bd10      	pop	{r4, pc}

0800c722 <__sclose>:
 800c722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c726:	f000 b813 	b.w	800c750 <_close_r>
	...

0800c72c <_write_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4604      	mov	r4, r0
 800c730:	4608      	mov	r0, r1
 800c732:	4611      	mov	r1, r2
 800c734:	2200      	movs	r2, #0
 800c736:	4d05      	ldr	r5, [pc, #20]	; (800c74c <_write_r+0x20>)
 800c738:	602a      	str	r2, [r5, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	f7f5 ffe0 	bl	8002700 <_write>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d102      	bne.n	800c74a <_write_r+0x1e>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b103      	cbz	r3, 800c74a <_write_r+0x1e>
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	20002830 	.word	0x20002830

0800c750 <_close_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	2300      	movs	r3, #0
 800c754:	4d05      	ldr	r5, [pc, #20]	; (800c76c <_close_r+0x1c>)
 800c756:	4604      	mov	r4, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	602b      	str	r3, [r5, #0]
 800c75c:	f7f5 ffec 	bl	8002738 <_close>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_close_r+0x1a>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_close_r+0x1a>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	20002830 	.word	0x20002830

0800c770 <_fstat_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	2300      	movs	r3, #0
 800c774:	4d06      	ldr	r5, [pc, #24]	; (800c790 <_fstat_r+0x20>)
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	4611      	mov	r1, r2
 800c77c:	602b      	str	r3, [r5, #0]
 800c77e:	f7f5 ffe6 	bl	800274e <_fstat>
 800c782:	1c43      	adds	r3, r0, #1
 800c784:	d102      	bne.n	800c78c <_fstat_r+0x1c>
 800c786:	682b      	ldr	r3, [r5, #0]
 800c788:	b103      	cbz	r3, 800c78c <_fstat_r+0x1c>
 800c78a:	6023      	str	r3, [r4, #0]
 800c78c:	bd38      	pop	{r3, r4, r5, pc}
 800c78e:	bf00      	nop
 800c790:	20002830 	.word	0x20002830

0800c794 <_isatty_r>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	2300      	movs	r3, #0
 800c798:	4d05      	ldr	r5, [pc, #20]	; (800c7b0 <_isatty_r+0x1c>)
 800c79a:	4604      	mov	r4, r0
 800c79c:	4608      	mov	r0, r1
 800c79e:	602b      	str	r3, [r5, #0]
 800c7a0:	f7f5 ffe4 	bl	800276c <_isatty>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d102      	bne.n	800c7ae <_isatty_r+0x1a>
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	b103      	cbz	r3, 800c7ae <_isatty_r+0x1a>
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
 800c7b0:	20002830 	.word	0x20002830

0800c7b4 <_lseek_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4d05      	ldr	r5, [pc, #20]	; (800c7d4 <_lseek_r+0x20>)
 800c7c0:	602a      	str	r2, [r5, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	f7f5 ffdc 	bl	8002780 <_lseek>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	d102      	bne.n	800c7d2 <_lseek_r+0x1e>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	b103      	cbz	r3, 800c7d2 <_lseek_r+0x1e>
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	20002830 	.word	0x20002830

0800c7d8 <_read_r>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4d05      	ldr	r5, [pc, #20]	; (800c7f8 <_read_r+0x20>)
 800c7e4:	602a      	str	r2, [r5, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	f7f5 ff6d 	bl	80026c6 <_read>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d102      	bne.n	800c7f6 <_read_r+0x1e>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	b103      	cbz	r3, 800c7f6 <_read_r+0x1e>
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	20002830 	.word	0x20002830

0800c7fc <log>:
 800c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fe:	4604      	mov	r4, r0
 800c800:	460d      	mov	r5, r1
 800c802:	f000 f82d 	bl	800c860 <__ieee754_log>
 800c806:	4622      	mov	r2, r4
 800c808:	4606      	mov	r6, r0
 800c80a:	460f      	mov	r7, r1
 800c80c:	462b      	mov	r3, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	4629      	mov	r1, r5
 800c812:	f7f4 f8fb 	bl	8000a0c <__aeabi_dcmpun>
 800c816:	b998      	cbnz	r0, 800c840 <log+0x44>
 800c818:	2200      	movs	r2, #0
 800c81a:	2300      	movs	r3, #0
 800c81c:	4620      	mov	r0, r4
 800c81e:	4629      	mov	r1, r5
 800c820:	f7f4 f8ea 	bl	80009f8 <__aeabi_dcmpgt>
 800c824:	b960      	cbnz	r0, 800c840 <log+0x44>
 800c826:	2200      	movs	r2, #0
 800c828:	2300      	movs	r3, #0
 800c82a:	4620      	mov	r0, r4
 800c82c:	4629      	mov	r1, r5
 800c82e:	f7f4 f8bb 	bl	80009a8 <__aeabi_dcmpeq>
 800c832:	b140      	cbz	r0, 800c846 <log+0x4a>
 800c834:	f7fb fb82 	bl	8007f3c <__errno>
 800c838:	2322      	movs	r3, #34	; 0x22
 800c83a:	2600      	movs	r6, #0
 800c83c:	4f06      	ldr	r7, [pc, #24]	; (800c858 <log+0x5c>)
 800c83e:	6003      	str	r3, [r0, #0]
 800c840:	4630      	mov	r0, r6
 800c842:	4639      	mov	r1, r7
 800c844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c846:	f7fb fb79 	bl	8007f3c <__errno>
 800c84a:	2321      	movs	r3, #33	; 0x21
 800c84c:	6003      	str	r3, [r0, #0]
 800c84e:	4803      	ldr	r0, [pc, #12]	; (800c85c <log+0x60>)
 800c850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c854:	f7ff b9e2 	b.w	800bc1c <nan>
 800c858:	fff00000 	.word	0xfff00000
 800c85c:	0800d498 	.word	0x0800d498

0800c860 <__ieee754_log>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	460d      	mov	r5, r1
 800c86e:	b087      	sub	sp, #28
 800c870:	da24      	bge.n	800c8bc <__ieee754_log+0x5c>
 800c872:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c876:	4304      	orrs	r4, r0
 800c878:	d108      	bne.n	800c88c <__ieee754_log+0x2c>
 800c87a:	2200      	movs	r2, #0
 800c87c:	2300      	movs	r3, #0
 800c87e:	2000      	movs	r0, #0
 800c880:	49cb      	ldr	r1, [pc, #812]	; (800cbb0 <__ieee754_log+0x350>)
 800c882:	f7f3 ff53 	bl	800072c <__aeabi_ddiv>
 800c886:	b007      	add	sp, #28
 800c888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88c:	2900      	cmp	r1, #0
 800c88e:	da04      	bge.n	800c89a <__ieee754_log+0x3a>
 800c890:	f7f3 fc6a 	bl	8000168 <__aeabi_dsub>
 800c894:	2200      	movs	r2, #0
 800c896:	2300      	movs	r3, #0
 800c898:	e7f3      	b.n	800c882 <__ieee754_log+0x22>
 800c89a:	2200      	movs	r2, #0
 800c89c:	4bc5      	ldr	r3, [pc, #788]	; (800cbb4 <__ieee754_log+0x354>)
 800c89e:	f7f3 fe1b 	bl	80004d8 <__aeabi_dmul>
 800c8a2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	49c2      	ldr	r1, [pc, #776]	; (800cbb8 <__ieee754_log+0x358>)
 800c8ae:	428d      	cmp	r5, r1
 800c8b0:	dd06      	ble.n	800c8c0 <__ieee754_log+0x60>
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	f7f3 fc59 	bl	800016c <__adddf3>
 800c8ba:	e7e4      	b.n	800c886 <__ieee754_log+0x26>
 800c8bc:	2600      	movs	r6, #0
 800c8be:	e7f5      	b.n	800c8ac <__ieee754_log+0x4c>
 800c8c0:	152c      	asrs	r4, r5, #20
 800c8c2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c8c6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c8ca:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c8ce:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800c8d2:	4426      	add	r6, r4
 800c8d4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800c8d8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800c8dc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800c8e0:	ea41 0305 	orr.w	r3, r1, r5
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	4bb4      	ldr	r3, [pc, #720]	; (800cbbc <__ieee754_log+0x35c>)
 800c8ec:	f7f3 fc3c 	bl	8000168 <__aeabi_dsub>
 800c8f0:	1cab      	adds	r3, r5, #2
 800c8f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	468b      	mov	fp, r1
 800c8fc:	f04f 0200 	mov.w	r2, #0
 800c900:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800c904:	dc53      	bgt.n	800c9ae <__ieee754_log+0x14e>
 800c906:	2300      	movs	r3, #0
 800c908:	f7f4 f84e 	bl	80009a8 <__aeabi_dcmpeq>
 800c90c:	b1d0      	cbz	r0, 800c944 <__ieee754_log+0xe4>
 800c90e:	2c00      	cmp	r4, #0
 800c910:	f000 8122 	beq.w	800cb58 <__ieee754_log+0x2f8>
 800c914:	4620      	mov	r0, r4
 800c916:	f7f3 fd75 	bl	8000404 <__aeabi_i2d>
 800c91a:	a391      	add	r3, pc, #580	; (adr r3, 800cb60 <__ieee754_log+0x300>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	4606      	mov	r6, r0
 800c922:	460f      	mov	r7, r1
 800c924:	f7f3 fdd8 	bl	80004d8 <__aeabi_dmul>
 800c928:	a38f      	add	r3, pc, #572	; (adr r3, 800cb68 <__ieee754_log+0x308>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	4604      	mov	r4, r0
 800c930:	460d      	mov	r5, r1
 800c932:	4630      	mov	r0, r6
 800c934:	4639      	mov	r1, r7
 800c936:	f7f3 fdcf 	bl	80004d8 <__aeabi_dmul>
 800c93a:	4602      	mov	r2, r0
 800c93c:	460b      	mov	r3, r1
 800c93e:	4620      	mov	r0, r4
 800c940:	4629      	mov	r1, r5
 800c942:	e7b8      	b.n	800c8b6 <__ieee754_log+0x56>
 800c944:	a38a      	add	r3, pc, #552	; (adr r3, 800cb70 <__ieee754_log+0x310>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	4650      	mov	r0, sl
 800c94c:	4659      	mov	r1, fp
 800c94e:	f7f3 fdc3 	bl	80004d8 <__aeabi_dmul>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	2000      	movs	r0, #0
 800c958:	4999      	ldr	r1, [pc, #612]	; (800cbc0 <__ieee754_log+0x360>)
 800c95a:	f7f3 fc05 	bl	8000168 <__aeabi_dsub>
 800c95e:	4652      	mov	r2, sl
 800c960:	4606      	mov	r6, r0
 800c962:	460f      	mov	r7, r1
 800c964:	465b      	mov	r3, fp
 800c966:	4650      	mov	r0, sl
 800c968:	4659      	mov	r1, fp
 800c96a:	f7f3 fdb5 	bl	80004d8 <__aeabi_dmul>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4630      	mov	r0, r6
 800c974:	4639      	mov	r1, r7
 800c976:	f7f3 fdaf 	bl	80004d8 <__aeabi_dmul>
 800c97a:	4606      	mov	r6, r0
 800c97c:	460f      	mov	r7, r1
 800c97e:	b914      	cbnz	r4, 800c986 <__ieee754_log+0x126>
 800c980:	4632      	mov	r2, r6
 800c982:	463b      	mov	r3, r7
 800c984:	e0a2      	b.n	800cacc <__ieee754_log+0x26c>
 800c986:	4620      	mov	r0, r4
 800c988:	f7f3 fd3c 	bl	8000404 <__aeabi_i2d>
 800c98c:	a374      	add	r3, pc, #464	; (adr r3, 800cb60 <__ieee754_log+0x300>)
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	4680      	mov	r8, r0
 800c994:	4689      	mov	r9, r1
 800c996:	f7f3 fd9f 	bl	80004d8 <__aeabi_dmul>
 800c99a:	a373      	add	r3, pc, #460	; (adr r3, 800cb68 <__ieee754_log+0x308>)
 800c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	f7f3 fd96 	bl	80004d8 <__aeabi_dmul>
 800c9ac:	e0a7      	b.n	800cafe <__ieee754_log+0x29e>
 800c9ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9b2:	f7f3 fbdb 	bl	800016c <__adddf3>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4650      	mov	r0, sl
 800c9bc:	4659      	mov	r1, fp
 800c9be:	f7f3 feb5 	bl	800072c <__aeabi_ddiv>
 800c9c2:	e9cd 0100 	strd	r0, r1, [sp]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f7f3 fd1c 	bl	8000404 <__aeabi_i2d>
 800c9cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	f7f3 fd7e 	bl	80004d8 <__aeabi_dmul>
 800c9dc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c9e0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	9305      	str	r3, [sp, #20]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	460f      	mov	r7, r1
 800c9ee:	f7f3 fd73 	bl	80004d8 <__aeabi_dmul>
 800c9f2:	a361      	add	r3, pc, #388	; (adr r3, 800cb78 <__ieee754_log+0x318>)
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	4680      	mov	r8, r0
 800c9fa:	4689      	mov	r9, r1
 800c9fc:	f7f3 fd6c 	bl	80004d8 <__aeabi_dmul>
 800ca00:	a35f      	add	r3, pc, #380	; (adr r3, 800cb80 <__ieee754_log+0x320>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	f7f3 fbb1 	bl	800016c <__adddf3>
 800ca0a:	4642      	mov	r2, r8
 800ca0c:	464b      	mov	r3, r9
 800ca0e:	f7f3 fd63 	bl	80004d8 <__aeabi_dmul>
 800ca12:	a35d      	add	r3, pc, #372	; (adr r3, 800cb88 <__ieee754_log+0x328>)
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f7f3 fba8 	bl	800016c <__adddf3>
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	f7f3 fd5a 	bl	80004d8 <__aeabi_dmul>
 800ca24:	a35a      	add	r3, pc, #360	; (adr r3, 800cb90 <__ieee754_log+0x330>)
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	f7f3 fb9f 	bl	800016c <__adddf3>
 800ca2e:	4632      	mov	r2, r6
 800ca30:	463b      	mov	r3, r7
 800ca32:	f7f3 fd51 	bl	80004d8 <__aeabi_dmul>
 800ca36:	a358      	add	r3, pc, #352	; (adr r3, 800cb98 <__ieee754_log+0x338>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	460f      	mov	r7, r1
 800ca40:	4640      	mov	r0, r8
 800ca42:	4649      	mov	r1, r9
 800ca44:	f7f3 fd48 	bl	80004d8 <__aeabi_dmul>
 800ca48:	a355      	add	r3, pc, #340	; (adr r3, 800cba0 <__ieee754_log+0x340>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 fb8d 	bl	800016c <__adddf3>
 800ca52:	4642      	mov	r2, r8
 800ca54:	464b      	mov	r3, r9
 800ca56:	f7f3 fd3f 	bl	80004d8 <__aeabi_dmul>
 800ca5a:	a353      	add	r3, pc, #332	; (adr r3, 800cba8 <__ieee754_log+0x348>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	f7f3 fb84 	bl	800016c <__adddf3>
 800ca64:	4642      	mov	r2, r8
 800ca66:	464b      	mov	r3, r9
 800ca68:	f7f3 fd36 	bl	80004d8 <__aeabi_dmul>
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	4602      	mov	r2, r0
 800ca70:	4639      	mov	r1, r7
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7f3 fb7a 	bl	800016c <__adddf3>
 800ca78:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ca7c:	9b05      	ldr	r3, [sp, #20]
 800ca7e:	3551      	adds	r5, #81	; 0x51
 800ca80:	431d      	orrs	r5, r3
 800ca82:	2d00      	cmp	r5, #0
 800ca84:	4680      	mov	r8, r0
 800ca86:	4689      	mov	r9, r1
 800ca88:	dd48      	ble.n	800cb1c <__ieee754_log+0x2bc>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4b4c      	ldr	r3, [pc, #304]	; (800cbc0 <__ieee754_log+0x360>)
 800ca8e:	4650      	mov	r0, sl
 800ca90:	4659      	mov	r1, fp
 800ca92:	f7f3 fd21 	bl	80004d8 <__aeabi_dmul>
 800ca96:	4652      	mov	r2, sl
 800ca98:	465b      	mov	r3, fp
 800ca9a:	f7f3 fd1d 	bl	80004d8 <__aeabi_dmul>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4606      	mov	r6, r0
 800caa4:	460f      	mov	r7, r1
 800caa6:	4640      	mov	r0, r8
 800caa8:	4649      	mov	r1, r9
 800caaa:	f7f3 fb5f 	bl	800016c <__adddf3>
 800caae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cab2:	f7f3 fd11 	bl	80004d8 <__aeabi_dmul>
 800cab6:	4680      	mov	r8, r0
 800cab8:	4689      	mov	r9, r1
 800caba:	b964      	cbnz	r4, 800cad6 <__ieee754_log+0x276>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	4630      	mov	r0, r6
 800cac2:	4639      	mov	r1, r7
 800cac4:	f7f3 fb50 	bl	8000168 <__aeabi_dsub>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4650      	mov	r0, sl
 800cace:	4659      	mov	r1, fp
 800cad0:	f7f3 fb4a 	bl	8000168 <__aeabi_dsub>
 800cad4:	e6d7      	b.n	800c886 <__ieee754_log+0x26>
 800cad6:	a322      	add	r3, pc, #136	; (adr r3, 800cb60 <__ieee754_log+0x300>)
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae0:	f7f3 fcfa 	bl	80004d8 <__aeabi_dmul>
 800cae4:	a320      	add	r3, pc, #128	; (adr r3, 800cb68 <__ieee754_log+0x308>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	4604      	mov	r4, r0
 800caec:	460d      	mov	r5, r1
 800caee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf2:	f7f3 fcf1 	bl	80004d8 <__aeabi_dmul>
 800caf6:	4642      	mov	r2, r8
 800caf8:	464b      	mov	r3, r9
 800cafa:	f7f3 fb37 	bl	800016c <__adddf3>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4630      	mov	r0, r6
 800cb04:	4639      	mov	r1, r7
 800cb06:	f7f3 fb2f 	bl	8000168 <__aeabi_dsub>
 800cb0a:	4652      	mov	r2, sl
 800cb0c:	465b      	mov	r3, fp
 800cb0e:	f7f3 fb2b 	bl	8000168 <__aeabi_dsub>
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	4620      	mov	r0, r4
 800cb18:	4629      	mov	r1, r5
 800cb1a:	e7d9      	b.n	800cad0 <__ieee754_log+0x270>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4650      	mov	r0, sl
 800cb22:	4659      	mov	r1, fp
 800cb24:	f7f3 fb20 	bl	8000168 <__aeabi_dsub>
 800cb28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb2c:	f7f3 fcd4 	bl	80004d8 <__aeabi_dmul>
 800cb30:	4606      	mov	r6, r0
 800cb32:	460f      	mov	r7, r1
 800cb34:	2c00      	cmp	r4, #0
 800cb36:	f43f af23 	beq.w	800c980 <__ieee754_log+0x120>
 800cb3a:	a309      	add	r3, pc, #36	; (adr r3, 800cb60 <__ieee754_log+0x300>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb44:	f7f3 fcc8 	bl	80004d8 <__aeabi_dmul>
 800cb48:	a307      	add	r3, pc, #28	; (adr r3, 800cb68 <__ieee754_log+0x308>)
 800cb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4e:	4604      	mov	r4, r0
 800cb50:	460d      	mov	r5, r1
 800cb52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb56:	e727      	b.n	800c9a8 <__ieee754_log+0x148>
 800cb58:	2000      	movs	r0, #0
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	e693      	b.n	800c886 <__ieee754_log+0x26>
 800cb5e:	bf00      	nop
 800cb60:	fee00000 	.word	0xfee00000
 800cb64:	3fe62e42 	.word	0x3fe62e42
 800cb68:	35793c76 	.word	0x35793c76
 800cb6c:	3dea39ef 	.word	0x3dea39ef
 800cb70:	55555555 	.word	0x55555555
 800cb74:	3fd55555 	.word	0x3fd55555
 800cb78:	df3e5244 	.word	0xdf3e5244
 800cb7c:	3fc2f112 	.word	0x3fc2f112
 800cb80:	96cb03de 	.word	0x96cb03de
 800cb84:	3fc74664 	.word	0x3fc74664
 800cb88:	94229359 	.word	0x94229359
 800cb8c:	3fd24924 	.word	0x3fd24924
 800cb90:	55555593 	.word	0x55555593
 800cb94:	3fe55555 	.word	0x3fe55555
 800cb98:	d078c69f 	.word	0xd078c69f
 800cb9c:	3fc39a09 	.word	0x3fc39a09
 800cba0:	1d8e78af 	.word	0x1d8e78af
 800cba4:	3fcc71c5 	.word	0x3fcc71c5
 800cba8:	9997fa04 	.word	0x9997fa04
 800cbac:	3fd99999 	.word	0x3fd99999
 800cbb0:	c3500000 	.word	0xc3500000
 800cbb4:	43500000 	.word	0x43500000
 800cbb8:	7fefffff 	.word	0x7fefffff
 800cbbc:	3ff00000 	.word	0x3ff00000
 800cbc0:	3fe00000 	.word	0x3fe00000

0800cbc4 <_init>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	bf00      	nop
 800cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbca:	bc08      	pop	{r3}
 800cbcc:	469e      	mov	lr, r3
 800cbce:	4770      	bx	lr

0800cbd0 <_fini>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	bf00      	nop
 800cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd6:	bc08      	pop	{r3}
 800cbd8:	469e      	mov	lr, r3
 800cbda:	4770      	bx	lr
