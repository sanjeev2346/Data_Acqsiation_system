
DAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800e410  0800e410  0001e410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed24  0800ed24  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed24  0800ed24  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed24  0800ed24  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed24  0800ed24  0001ed24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed28  0800ed28  0001ed28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ed2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b6c  2000020c  0800ef38  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d78  0800ef38  00022d78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ecd  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003297  00000000  00000000  00036102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000393a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004460  00000000  00000000  0003ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018495  00000000  00000000  0003feb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009504e  00000000  00000000  00058345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac8  00000000  00000000  000ed3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e3f4 	.word	0x0800e3f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800e3f4 	.word	0x0800e3f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <ADC_Select_CH0>:
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void ADC_Select_CH0(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_0;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2301      	movs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <ADC_Select_CH0+0x38>)
 800122e:	f002 f92b 	bl	8003488 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 8001238:	f001 f950 	bl	80024dc <Error_Handler>
	  }

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20002284 	.word	0x20002284

08001248 <ADC_Select_CH1>:
void ADC_Select_CH1(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2301      	movs	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001260:	2301      	movs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <ADC_Select_CH1+0x38>)
 800126a:	f002 f90d 	bl	8003488 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8001274:	f001 f932 	bl	80024dc <Error_Handler>
	  }

}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20002284 	.word	0x20002284

08001284 <ADC_Select_CH2>:
void ADC_Select_CH2(void){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 8001294:	2302      	movs	r3, #2
 8001296:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800129c:	2301      	movs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <ADC_Select_CH2+0x38>)
 80012a6:	f002 f8ef 	bl	8003488 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 80012b0:	f001 f914 	bl	80024dc <Error_Handler>
	  }

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20002284 	.word	0x20002284

080012c0 <ADC_Select_CH3>:
void ADC_Select_CH3(void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80012d8:	2301      	movs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <ADC_Select_CH3+0x38>)
 80012e2:	f002 f8d1 	bl	8003488 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 80012ec:	f001 f8f6 	bl	80024dc <Error_Handler>
	  }

}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20002284 	.word	0x20002284

080012fc <lookupDoD>:
    // Default return value if voltage is out of range
    return 0;
}

// Function to look up DoD based on voltage and current
uint8_t lookupDoD(uint16_t voltage, uint16_t current) {
 80012fc:	b490      	push	{r4, r7}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	80bb      	strh	r3, [r7, #4]
    // Search the voltage and current table for the closest match
    for (int i = 0; i < TABLE_SIZE; i++) {
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e04b      	b.n	80013aa <lookupDoD+0xae>
        if (voltage >= voltage_table[i] && current >= current_table[i]) {
 8001312:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <lookupDoD+0xc0>)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	88fa      	ldrh	r2, [r7, #6]
 800131c:	429a      	cmp	r2, r3
 800131e:	d341      	bcc.n	80013a4 <lookupDoD+0xa8>
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <lookupDoD+0xc4>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001328:	88ba      	ldrh	r2, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d33a      	bcc.n	80013a4 <lookupDoD+0xa8>
            // Linear interpolation between two nearest points
            if (i == TABLE_SIZE - 1 || (voltage <= voltage_table[i + 1] && current <= current_table[i + 1])) {
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b0a      	cmp	r3, #10
 8001332:	d00f      	beq.n	8001354 <lookupDoD+0x58>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <lookupDoD+0xc0>)
 800133a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133e:	88fa      	ldrh	r2, [r7, #6]
 8001340:	429a      	cmp	r2, r3
 8001342:	d82f      	bhi.n	80013a4 <lookupDoD+0xa8>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <lookupDoD+0xc4>)
 800134a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134e:	88ba      	ldrh	r2, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	d827      	bhi.n	80013a4 <lookupDoD+0xa8>
                // Calculate DoD using linear interpolation
                uint8_t dod = dod_table[i] + (voltage - voltage_table[i]) * (dod_table[i + 1] - dod_table[i]) / (voltage_table[i + 1] - voltage_table[i]);
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <lookupDoD+0xc8>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <lookupDoD+0xc0>)
 8001360:	68f9      	ldr	r1, [r7, #12]
 8001362:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001366:	1a5b      	subs	r3, r3, r1
 8001368:	68f9      	ldr	r1, [r7, #12]
 800136a:	3101      	adds	r1, #1
 800136c:	4815      	ldr	r0, [pc, #84]	; (80013c4 <lookupDoD+0xc8>)
 800136e:	5c41      	ldrb	r1, [r0, r1]
 8001370:	460c      	mov	r4, r1
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <lookupDoD+0xc8>)
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	4401      	add	r1, r0
 8001378:	7809      	ldrb	r1, [r1, #0]
 800137a:	1a61      	subs	r1, r4, r1
 800137c:	fb03 f101 	mul.w	r1, r3, r1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <lookupDoD+0xc0>)
 8001386:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800138a:	461c      	mov	r4, r3
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <lookupDoD+0xc0>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001394:	1ae3      	subs	r3, r4, r3
 8001396:	fb91 f3f3 	sdiv	r3, r1, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	72fb      	strb	r3, [r7, #11]
                return dod;
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	e006      	b.n	80013b2 <lookupDoD+0xb6>
    for (int i = 0; i < TABLE_SIZE; i++) {
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b0a      	cmp	r3, #10
 80013ae:	ddb0      	ble.n	8001312 <lookupDoD+0x16>
            }
        }
    }
    // Default return value if voltage or current is out of range
    return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc90      	pop	{r4, r7}
 80013ba:	4770      	bx	lr
 80013bc:	0800e784 	.word	0x0800e784
 80013c0:	0800e79c 	.word	0x0800e79c
 80013c4:	0800e7b4 	.word	0x0800e7b4

080013c8 <calculateBatteryPercentage>:

uint8_t calculateBatteryPercentage(float voltage)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    // Calculate battery percentage
    float percentage = ((voltage - VOLTAGE_mins) / (VOLTAGE_MAX - VOLTAGE_mins)) * 100;
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <calculateBatteryPercentage+0x64>)
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fbcc 	bl	8000b70 <__aeabi_fsub>
 80013d8:	4603      	mov	r3, r0
 80013da:	4915      	ldr	r1, [pc, #84]	; (8001430 <calculateBatteryPercentage+0x68>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fd85 	bl	8000eec <__aeabi_fdiv>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4913      	ldr	r1, [pc, #76]	; (8001434 <calculateBatteryPercentage+0x6c>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fccc 	bl	8000d84 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60fb      	str	r3, [r7, #12]

    // Ensure percentage is within valid range (0 to 100)
    if (percentage < 0)
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff fe63 	bl	80010c0 <__aeabi_fcmplt>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <calculateBatteryPercentage+0x40>
    {
        percentage = 0;
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e008      	b.n	800141a <calculateBatteryPercentage+0x52>
    }
    else if (percentage > 100)
 8001408:	490a      	ldr	r1, [pc, #40]	; (8001434 <calculateBatteryPercentage+0x6c>)
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff fe76 	bl	80010fc <__aeabi_fcmpgt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <calculateBatteryPercentage+0x52>
    {
        percentage = 100;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <calculateBatteryPercentage+0x6c>)
 8001418:	60fb      	str	r3, [r7, #12]
    }

    return (uint8_t)percentage;
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff fe9e 	bl	800115c <__aeabi_f2uiz>
 8001420:	4603      	mov	r3, r0
 8001422:	b2db      	uxtb	r3, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	42580000 	.word	0x42580000
 8001430:	41f00000 	.word	0x41f00000
 8001434:	42c80000 	.word	0x42c80000

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800143c:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 8001440:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001442:	f001 fc05 	bl	8002c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001446:	f000 fded 	bl	8002024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144a:	f000 ffbf 	bl	80023cc <MX_GPIO_Init>
  MX_DMA_Init();
 800144e:	f000 ff9f 	bl	8002390 <MX_DMA_Init>
  MX_ADC1_Init();
 8001452:	f000 fe43 	bl	80020dc <MX_ADC1_Init>
  MX_SPI1_Init();
 8001456:	f000 fe71 	bl	800213c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800145a:	f000 ff45 	bl	80022e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800145e:	f000 ff6d 	bl	800233c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001462:	f000 fea1 	bl	80021a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001466:	f000 fef1 	bl	800224c <MX_TIM3_Init>
  MX_FATFS_Init();
 800146a:	f004 fe57 	bl	800611c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start_DMA(&hadc1,ADC_Value,4);
  //HAL_ADC_Start_DMA(&hadc1, value, 4);
  f_mount(&fs, "", 0);
 800146e:	2200      	movs	r2, #0
 8001470:	49c9      	ldr	r1, [pc, #804]	; (8001798 <main+0x360>)
 8001472:	48ca      	ldr	r0, [pc, #808]	; (800179c <main+0x364>)
 8001474:	f006 ff34 	bl	80082e0 <f_mount>
   	    f_open(&fil, "DAS.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001478:	2213      	movs	r2, #19
 800147a:	49c9      	ldr	r1, [pc, #804]	; (80017a0 <main+0x368>)
 800147c:	48c9      	ldr	r0, [pc, #804]	; (80017a4 <main+0x36c>)
 800147e:	f006 ff79 	bl	8008374 <f_open>
   	  	f_lseek(&fil, fil.fsize);
 8001482:	4bc8      	ldr	r3, [pc, #800]	; (80017a4 <main+0x36c>)
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4619      	mov	r1, r3
 800148c:	48c5      	ldr	r0, [pc, #788]	; (80017a4 <main+0x36c>)
 800148e:	f007 fda9 	bl	8008fe4 <f_lseek>
   	  	f_puts("Logging Vechicle Data...\n", &fil);
 8001492:	49c4      	ldr	r1, [pc, #784]	; (80017a4 <main+0x36c>)
 8001494:	48c4      	ldr	r0, [pc, #784]	; (80017a8 <main+0x370>)
 8001496:	f008 f8d3 	bl	8009640 <f_puts>
   	  	f_close(&fil);
 800149a:	48c2      	ldr	r0, [pc, #776]	; (80017a4 <main+0x36c>)
 800149c:	f007 fd77 	bl	8008f8e <f_close>

   	 Ringbuf_init();
 80014a0:	f001 fb0a 	bl	8002ab8 <Ringbuf_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ADC_Select_CH0();
 80014a4:	f7ff feb2 	bl	800120c <ADC_Select_CH0>
	  	  	  HAL_ADC_Start(&hadc1);
 80014a8:	48c0      	ldr	r0, [pc, #768]	; (80017ac <main+0x374>)
 80014aa:	f001 fd2f 	bl	8002f0c <HAL_ADC_Start>
	  	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80014ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014b2:	48be      	ldr	r0, [pc, #760]	; (80017ac <main+0x374>)
 80014b4:	f001 fe04 	bl	80030c0 <HAL_ADC_PollForConversion>

	  	  	 	  	 	 ADC_Valu0 = HAL_ADC_GetValue(&hadc1);
 80014b8:	48bc      	ldr	r0, [pc, #752]	; (80017ac <main+0x374>)
 80014ba:	f001 ff07 	bl	80032cc <HAL_ADC_GetValue>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4bbb      	ldr	r3, [pc, #748]	; (80017b0 <main+0x378>)
 80014c4:	601a      	str	r2, [r3, #0]


	  	  	 	        VBAT_Out_Raw_Voltage		=		(((ADC_Valu0)*3.3)/4095);
 80014c6:	4bba      	ldr	r3, [pc, #744]	; (80017b0 <main+0x378>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe ff9a 	bl	8000404 <__aeabi_i2d>
 80014d0:	a3a3      	add	r3, pc, #652	; (adr r3, 8001760 <main+0x328>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7fe ffff 	bl	80004d8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	a3a1      	add	r3, pc, #644	; (adr r3, 8001768 <main+0x330>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f920 	bl	800072c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fac8 	bl	8000a88 <__aeabi_d2uiz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4bad      	ldr	r3, [pc, #692]	; (80017b4 <main+0x37c>)
 80014fe:	801a      	strh	r2, [r3, #0]
	  	  	 	         VBAT_Out_Voltage			=		(((VBAT_Out_Raw_Voltage * (68+2.2))/2.2));
 8001500:	4bac      	ldr	r3, [pc, #688]	; (80017b4 <main+0x37c>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ff7d 	bl	8000404 <__aeabi_i2d>
 800150a:	a399      	add	r3, pc, #612	; (adr r3, 8001770 <main+0x338>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7fe ffe2 	bl	80004d8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	a396      	add	r3, pc, #600	; (adr r3, 8001778 <main+0x340>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f903 	bl	800072c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff faab 	bl	8000a88 <__aeabi_d2uiz>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	4ba0      	ldr	r3, [pc, #640]	; (80017b8 <main+0x380>)
 8001538:	801a      	strh	r2, [r3, #0]
	  	        HAL_ADC_Stop(&hadc1);
 800153a:	489c      	ldr	r0, [pc, #624]	; (80017ac <main+0x374>)
 800153c:	f001 fd94 	bl	8003068 <HAL_ADC_Stop>

	  	  	  ADC_Select_CH1();
 8001540:	f7ff fe82 	bl	8001248 <ADC_Select_CH1>
	  	  	  HAL_ADC_Start(&hadc1);
 8001544:	4899      	ldr	r0, [pc, #612]	; (80017ac <main+0x374>)
 8001546:	f001 fce1 	bl	8002f0c <HAL_ADC_Start>
	  	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800154a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800154e:	4897      	ldr	r0, [pc, #604]	; (80017ac <main+0x374>)
 8001550:	f001 fdb6 	bl	80030c0 <HAL_ADC_PollForConversion>
	  	  	 	         	ADC_Valu1 = HAL_ADC_GetValue(&hadc1);
 8001554:	4895      	ldr	r0, [pc, #596]	; (80017ac <main+0x374>)
 8001556:	f001 feb9 	bl	80032cc <HAL_ADC_GetValue>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b97      	ldr	r3, [pc, #604]	; (80017bc <main+0x384>)
 8001560:	601a      	str	r2, [r3, #0]

	  	  	 	         VBAT_Out_Raw_current		=		(((ADC_Valu1)*3.3)/4095);
 8001562:	4b96      	ldr	r3, [pc, #600]	; (80017bc <main+0x384>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ff4c 	bl	8000404 <__aeabi_i2d>
 800156c:	a37c      	add	r3, pc, #496	; (adr r3, 8001760 <main+0x328>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7fe ffb1 	bl	80004d8 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	a37a      	add	r3, pc, #488	; (adr r3, 8001768 <main+0x330>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f8d2 	bl	800072c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fa7a 	bl	8000a88 <__aeabi_d2uiz>
 8001594:	4603      	mov	r3, r0
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <main+0x388>)
 800159a:	801a      	strh	r2, [r3, #0]
	  	  	 	  	     VBAT_Out_current			=		((( VBAT_Out_Raw_current* (68+2.2))/2.2));
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <main+0x388>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff2f 	bl	8000404 <__aeabi_i2d>
 80015a6:	a372      	add	r3, pc, #456	; (adr r3, 8001770 <main+0x338>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe ff94 	bl	80004d8 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	a36f      	add	r3, pc, #444	; (adr r3, 8001778 <main+0x340>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f8b5 	bl	800072c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa5d 	bl	8000a88 <__aeabi_d2uiz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b7c      	ldr	r3, [pc, #496]	; (80017c4 <main+0x38c>)
 80015d4:	801a      	strh	r2, [r3, #0]
	  	  	 	  	     VBAT_current          =      VBAT_Out_current/0.75;
 80015d6:	4b7b      	ldr	r3, [pc, #492]	; (80017c4 <main+0x38c>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff12 	bl	8000404 <__aeabi_i2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <main+0x390>)
 80015e6:	f7ff f8a1 	bl	800072c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa49 	bl	8000a88 <__aeabi_d2uiz>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <main+0x394>)
 80015fc:	801a      	strh	r2, [r3, #0]
	  	  	  HAL_ADC_Stop(&hadc1);
 80015fe:	486b      	ldr	r0, [pc, #428]	; (80017ac <main+0x374>)
 8001600:	f001 fd32 	bl	8003068 <HAL_ADC_Stop>

	  	  	  ADC_Select_CH2();
 8001604:	f7ff fe3e 	bl	8001284 <ADC_Select_CH2>
	  	  	  HAL_ADC_Start(&hadc1);
 8001608:	4868      	ldr	r0, [pc, #416]	; (80017ac <main+0x374>)
 800160a:	f001 fc7f 	bl	8002f0c <HAL_ADC_Start>
	  	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800160e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001612:	4866      	ldr	r0, [pc, #408]	; (80017ac <main+0x374>)
 8001614:	f001 fd54 	bl	80030c0 <HAL_ADC_PollForConversion>
	  	  	 	  	     	 ADC_Valu2 = HAL_ADC_GetValue(&hadc1);
 8001618:	4864      	ldr	r0, [pc, #400]	; (80017ac <main+0x374>)
 800161a:	f001 fe57 	bl	80032cc <HAL_ADC_GetValue>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b6b      	ldr	r3, [pc, #428]	; (80017d0 <main+0x398>)
 8001624:	601a      	str	r2, [r3, #0]

	  	  	 	         V_Raw_speed		=		(((ADC_Valu2)*3.3)/4095);
 8001626:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <main+0x398>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe feea 	bl	8000404 <__aeabi_i2d>
 8001630:	a34b      	add	r3, pc, #300	; (adr r3, 8001760 <main+0x328>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ff4f 	bl	80004d8 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	a349      	add	r3, pc, #292	; (adr r3, 8001768 <main+0x330>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f870 	bl	800072c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fa18 	bl	8000a88 <__aeabi_d2uiz>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <main+0x39c>)
 800165e:	801a      	strh	r2, [r3, #0]
	  	  	 	  		 V_speed			=		(((V_Raw_speed* (51+4.7))/4.7)); //VBAT_Out_Voltage,VBAT_current,speed,contemp
 8001660:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <main+0x39c>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fecd 	bl	8000404 <__aeabi_i2d>
 800166a:	a345      	add	r3, pc, #276	; (adr r3, 8001780 <main+0x348>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ff32 	bl	80004d8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	a342      	add	r3, pc, #264	; (adr r3, 8001788 <main+0x350>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7ff f853 	bl	800072c <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff f9fb 	bl	8000a88 <__aeabi_d2uiz>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <main+0x3a0>)
 8001698:	801a      	strh	r2, [r3, #0]
	  	  	 	  		 rpm = (V_speed)*652;
 800169a:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <main+0x3a0>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	441a      	add	r2, r3
 80016a4:	4611      	mov	r1, r2
 80016a6:	00c8      	lsls	r0, r1, #3
 80016a8:	4611      	mov	r1, r2
 80016aa:	4602      	mov	r2, r0
 80016ac:	440a      	add	r2, r1
 80016ae:	0052      	lsls	r2, r2, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <main+0x3a4>)
 80016b8:	801a      	strh	r2, [r3, #0]
	  	  	 	  	     rphr = rpm*60;
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <main+0x3a4>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <main+0x3a8>)
 80016ca:	801a      	strh	r2, [r3, #0]
	  	  	 	  	     speed =0.001356*rphr;
 80016cc:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <main+0x3a8>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fe97 	bl	8000404 <__aeabi_i2d>
 80016d6:	a32e      	add	r3, pc, #184	; (adr r3, 8001790 <main+0x358>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe fefc 	bl	80004d8 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9ce 	bl	8000a88 <__aeabi_d2uiz>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <main+0x3ac>)
 80016f2:	801a      	strh	r2, [r3, #0]
	  	  	  HAL_ADC_Stop(&hadc1);
 80016f4:	482d      	ldr	r0, [pc, #180]	; (80017ac <main+0x374>)
 80016f6:	f001 fcb7 	bl	8003068 <HAL_ADC_Stop>

	  	  	  ADC_Select_CH3();
 80016fa:	f7ff fde1 	bl	80012c0 <ADC_Select_CH3>
	  	  	  HAL_ADC_Start(&hadc1);
 80016fe:	482b      	ldr	r0, [pc, #172]	; (80017ac <main+0x374>)
 8001700:	f001 fc04 	bl	8002f0c <HAL_ADC_Start>
	  	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001708:	4828      	ldr	r0, [pc, #160]	; (80017ac <main+0x374>)
 800170a:	f001 fcd9 	bl	80030c0 <HAL_ADC_PollForConversion>
	  	  	 	  	    	  ADC_Valu4 = HAL_ADC_GetValue(&hadc1);
 800170e:	4827      	ldr	r0, [pc, #156]	; (80017ac <main+0x374>)
 8001710:	f001 fddc 	bl	80032cc <HAL_ADC_GetValue>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <main+0x3b0>)
 800171a:	601a      	str	r2, [r3, #0]
	  	  	 	  	     VRT = (((ADC_Valu4)*3.3)/4095);      //Conversion to voltage
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <main+0x3b0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fe6f 	bl	8000404 <__aeabi_i2d>
 8001726:	a30e      	add	r3, pc, #56	; (adr r3, 8001760 <main+0x328>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fed4 	bl	80004d8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	a30b      	add	r3, pc, #44	; (adr r3, 8001768 <main+0x330>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe fff5 	bl	800072c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff f9bd 	bl	8000ac8 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <main+0x3b4>)
 8001752:	6013      	str	r3, [r2, #0]
	  	  	 	  		 VR = vcc - VRT;
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <main+0x3b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	e04c      	b.n	80017f4 <main+0x3bc>
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w
 8001760:	66666666 	.word	0x66666666
 8001764:	400a6666 	.word	0x400a6666
 8001768:	00000000 	.word	0x00000000
 800176c:	40affe00 	.word	0x40affe00
 8001770:	cccccccd 	.word	0xcccccccd
 8001774:	40518ccc 	.word	0x40518ccc
 8001778:	9999999a 	.word	0x9999999a
 800177c:	40019999 	.word	0x40019999
 8001780:	9999999a 	.word	0x9999999a
 8001784:	404bd999 	.word	0x404bd999
 8001788:	cccccccd 	.word	0xcccccccd
 800178c:	4012cccc 	.word	0x4012cccc
 8001790:	e9d0e992 	.word	0xe9d0e992
 8001794:	3f563779 	.word	0x3f563779
 8001798:	0800e410 	.word	0x0800e410
 800179c:	20000228 	.word	0x20000228
 80017a0:	0800e414 	.word	0x0800e414
 80017a4:	20001258 	.word	0x20001258
 80017a8:	0800e41c 	.word	0x0800e41c
 80017ac:	20002284 	.word	0x20002284
 80017b0:	200024a0 	.word	0x200024a0
 80017b4:	20002470 	.word	0x20002470
 80017b8:	20002472 	.word	0x20002472
 80017bc:	200024a4 	.word	0x200024a4
 80017c0:	20002474 	.word	0x20002474
 80017c4:	20002476 	.word	0x20002476
 80017c8:	3fe80000 	.word	0x3fe80000
 80017cc:	20002478 	.word	0x20002478
 80017d0:	200024a8 	.word	0x200024a8
 80017d4:	2000247a 	.word	0x2000247a
 80017d8:	2000247c 	.word	0x2000247c
 80017dc:	2000247e 	.word	0x2000247e
 80017e0:	20002480 	.word	0x20002480
 80017e4:	20002482 	.word	0x20002482
 80017e8:	200024ac 	.word	0x200024ac
 80017ec:	200024b4 	.word	0x200024b4
 80017f0:	20000008 	.word	0x20000008
 80017f4:	4aa4      	ldr	r2, [pc, #656]	; (8001a88 <main+0x650>)
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f9b8 	bl	8000b70 <__aeabi_fsub>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4ba1      	ldr	r3, [pc, #644]	; (8001a8c <main+0x654>)
 8001806:	601a      	str	r2, [r3, #0]
	  	  	 	     	 RT = VRT / (VR / R);               //Resistance of RT
 8001808:	4b9f      	ldr	r3, [pc, #636]	; (8001a88 <main+0x650>)
 800180a:	681c      	ldr	r4, [r3, #0]
 800180c:	4b9f      	ldr	r3, [pc, #636]	; (8001a8c <main+0x654>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a9f      	ldr	r2, [pc, #636]	; (8001a90 <main+0x658>)
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fb68 	bl	8000eec <__aeabi_fdiv>
 800181c:	4603      	mov	r3, r0
 800181e:	4619      	mov	r1, r3
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff fb63 	bl	8000eec <__aeabi_fdiv>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b9a      	ldr	r3, [pc, #616]	; (8001a94 <main+0x65c>)
 800182c:	601a      	str	r2, [r3, #0]

	  	  	 	  		 ln = log(RT / rto);
 800182e:	4b99      	ldr	r3, [pc, #612]	; (8001a94 <main+0x65c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a99      	ldr	r2, [pc, #612]	; (8001a98 <main+0x660>)
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb57 	bl	8000eec <__aeabi_fdiv>
 800183e:	4603      	mov	r3, r0
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fdf1 	bl	8000428 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f00c fbed 	bl	800e02c <log>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f935 	bl	8000ac8 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4a8e      	ldr	r2, [pc, #568]	; (8001a9c <main+0x664>)
 8001862:	6013      	str	r3, [r2, #0]
	  	  	 	  		 TX = (1 / ((ln / b) + (1 / T0))); //Temperature from thermistor
 8001864:	4b8d      	ldr	r3, [pc, #564]	; (8001a9c <main+0x664>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a8d      	ldr	r2, [pc, #564]	; (8001aa0 <main+0x668>)
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fb3c 	bl	8000eec <__aeabi_fdiv>
 8001874:	4603      	mov	r3, r0
 8001876:	461c      	mov	r4, r3
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <main+0x66c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001882:	f7ff fb33 	bl	8000eec <__aeabi_fdiv>
 8001886:	4603      	mov	r3, r0
 8001888:	4619      	mov	r1, r3
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff f972 	bl	8000b74 <__addsf3>
 8001890:	4603      	mov	r3, r0
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001898:	f7ff fb28 	bl	8000eec <__aeabi_fdiv>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b81      	ldr	r3, [pc, #516]	; (8001aa8 <main+0x670>)
 80018a2:	601a      	str	r2, [r3, #0]

	  	  	 	  		 contemp = TX - 273.15 - 110;
 80018a4:	4b80      	ldr	r3, [pc, #512]	; (8001aa8 <main+0x670>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fdbd 	bl	8000428 <__aeabi_f2d>
 80018ae:	a374      	add	r3, pc, #464	; (adr r3, 8001a80 <main+0x648>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fc58 	bl	8000168 <__aeabi_dsub>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b79      	ldr	r3, [pc, #484]	; (8001aac <main+0x674>)
 80018c6:	f7fe fc4f 	bl	8000168 <__aeabi_dsub>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff f8f9 	bl	8000ac8 <__aeabi_d2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <main+0x678>)
 80018da:	6013      	str	r3, [r2, #0]
	  	  	   HAL_ADC_Stop(&hadc1);
 80018dc:	4875      	ldr	r0, [pc, #468]	; (8001ab4 <main+0x67c>)
 80018de:	f001 fbc3 	bl	8003068 <HAL_ADC_Stop>


	  	  	 	  	    uint16_t voltage = VBAT_Out_Voltage;
 80018e2:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <main+0x680>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
	  	  	 	  	    uint16_t current =  VBAT_current;
 80018ea:	4b74      	ldr	r3, [pc, #464]	; (8001abc <main+0x684>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
	  	  	 	  	    uint8_t dod = lookupDoD(voltage, current);
 80018f2:	f8b7 241c 	ldrh.w	r2, [r7, #1052]	; 0x41c
 80018f6:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fcfd 	bl	80012fc <lookupDoD>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
	  	  	 	  	    uint8_t soc = 50;//lookupSOC(voltage);
 8001908:	2332      	movs	r3, #50	; 0x32
 800190a:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
	  	  	 	  	 // Calculate battery percentage
	  	  	 	  	    batteryPercentage = calculateBatteryPercentage(VBAT_Out_Voltage);
 800190e:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <main+0x680>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f9de 	bl	8000cd4 <__aeabi_ui2f>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fd54 	bl	80013c8 <calculateBatteryPercentage>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <main+0x688>)
 8001926:	701a      	strb	r2, [r3, #0]

	  	  	 	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192e:	4865      	ldr	r0, [pc, #404]	; (8001ac4 <main+0x68c>)
 8001930:	f002 fc03 	bl	800413a <HAL_GPIO_WritePin>




	  	  	 	  			  	 	  		   	 		if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3))  { //Check if button pressed
 8001934:	2108      	movs	r1, #8
 8001936:	4864      	ldr	r0, [pc, #400]	; (8001ac8 <main+0x690>)
 8001938:	f002 fbe8 	bl	800410c <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <main+0x512>

	  	  	 	  			  	 	  		   	 			 	  			 normal = 1; //vechicle normal mode
 8001942:	4b62      	ldr	r3, [pc, #392]	; (8001acc <main+0x694>)
 8001944:	2201      	movs	r2, #1
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	e002      	b.n	8001950 <main+0x518>


	  	  	 	  			  	 	  		   	 		}
	  	  	 	  			  	 	  		   	 		else{

	  	  	 	  			  	 	  		   	                              normal = 0;
 800194a:	4b60      	ldr	r3, [pc, #384]	; (8001acc <main+0x694>)
 800194c:	2200      	movs	r2, #0
 800194e:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		}

	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15))  { //Check if button pressed
 8001950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001954:	485e      	ldr	r0, [pc, #376]	; (8001ad0 <main+0x698>)
 8001956:	f002 fbd9 	bl	800410c <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <main+0x530>

	  	  	 	  			  	 	  		   	 			 	  		  echo = 1; //vechicle echo mode
 8001960:	4b5c      	ldr	r3, [pc, #368]	; (8001ad4 <main+0x69c>)
 8001962:	2201      	movs	r2, #1
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	e002      	b.n	800196e <main+0x536>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			 	  	  	 echo = 0;//VBAT_Out_Voltage,VBAT_current,speed,contemp,normal,echo,sports,
 8001968:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <main+0x69c>)
 800196a:	2200      	movs	r2, #0
 800196c:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12))  { //Check if button pressed
 800196e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001972:	4855      	ldr	r0, [pc, #340]	; (8001ac8 <main+0x690>)
 8001974:	f002 fbca 	bl	800410c <HAL_GPIO_ReadPin>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <main+0x54e>

	  	  	 	  			  	 	  		   	 			  	  		  sports = 1; //vechicle sports mode
 800197e:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <main+0x6a0>)
 8001980:	2201      	movs	r2, #1
 8001982:	801a      	strh	r2, [r3, #0]
 8001984:	e002      	b.n	800198c <main+0x554>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  		  sports = 0;
 8001986:	4b54      	ldr	r3, [pc, #336]	; (8001ad8 <main+0x6a0>)
 8001988:	2200      	movs	r2, #0
 800198a:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13))  { //Check if button pressed
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001990:	484d      	ldr	r0, [pc, #308]	; (8001ac8 <main+0x690>)
 8001992:	f002 fbbb 	bl	800410c <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <main+0x56c>

	  	  	 	  			  	 	  		   	 				  		    side_stand = 1; //side stand status check
 800199c:	4b4f      	ldr	r3, [pc, #316]	; (8001adc <main+0x6a4>)
 800199e:	2201      	movs	r2, #1
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	e002      	b.n	80019aa <main+0x572>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 				  		   side_stand = 0;
 80019a4:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <main+0x6a4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	801a      	strh	r2, [r3, #0]
	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14))  { //Check if button pressed
 80019aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ae:	4846      	ldr	r0, [pc, #280]	; (8001ac8 <main+0x690>)
 80019b0:	f002 fbac 	bl	800410c <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <main+0x58a>

	  	  	 	  			  	 	  		   	 			  	  		  	charging = 1; //charging status check
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <main+0x6a8>)
 80019bc:	2201      	movs	r2, #1
 80019be:	801a      	strh	r2, [r3, #0]
 80019c0:	e002      	b.n	80019c8 <main+0x590>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  		    charging = 0;
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <main+0x6a8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15))  { //Check if button pressed
 80019c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019cc:	483e      	ldr	r0, [pc, #248]	; (8001ac8 <main+0x690>)
 80019ce:	f002 fb9d 	bl	800410c <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <main+0x5a8>

	  	  	 	  			  	 	  		   	 			  	  		   vechicle_on = 1; //vechicle status check
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <main+0x6ac>)
 80019da:	2201      	movs	r2, #1
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	e002      	b.n	80019e6 <main+0x5ae>


	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  		  vechicle_on = 0;
 80019e0:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <main+0x6ac>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4))  { //Check if button pressed
 80019e6:	2110      	movs	r1, #16
 80019e8:	4837      	ldr	r0, [pc, #220]	; (8001ac8 <main+0x690>)
 80019ea:	f002 fb8f 	bl	800410c <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d009      	beq.n	8001a08 <main+0x5d0>

	  	  	 	  			  	 	  		   	 			  	  	  		  DAS = 1; // DAS status check
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <main+0x6b0>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	801a      	strh	r2, [r3, #0]
	  	  	 	  			  	 	  		   	 			  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a00:	4830      	ldr	r0, [pc, #192]	; (8001ac4 <main+0x68c>)
 8001a02:	f002 fb9a 	bl	800413a <HAL_GPIO_WritePin>
 8001a06:	e002      	b.n	8001a0e <main+0x5d6>


	  	  	 	  			  	 	  		   	 	 }
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 			  	  	  		 DAS = 0;
 8001a08:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <main+0x6b0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_7))  { //Check if button pressed
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	482d      	ldr	r0, [pc, #180]	; (8001ac8 <main+0x690>)
 8001a12:	f002 fb7b 	bl	800410c <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <main+0x5ec>

	  	  	 	  			  	 	  		   	 		 	  			  	  brake = 1; // brake status check
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <main+0x6b4>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	e002      	b.n	8001a2a <main+0x5f2>


	  	  	 	  			  	 	  		   	 		 }
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 		 	  			  	   brake = 0;
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <main+0x6b4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 	}
	  	  	 	  			  	 	  		   	 	 if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6))  { //Check if button pressed
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	4826      	ldr	r0, [pc, #152]	; (8001ac8 <main+0x690>)
 8001a2e:	f002 fb6d 	bl	800410c <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <main+0x608>

	  	  	 	  			  	 	  		   	 		 	  			  	 	left_ind = 1; // indicator status check
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <main+0x6b8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	e002      	b.n	8001a46 <main+0x60e>


	  	  	 	  			  	 	  		   	 		  }
	  	  	 	  			  	 	  		   	 		 else{

	  	  	 	  			  	 	  		   	 		 	  			  	 	 left_ind = 0;
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <main+0x6b8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		}
	  	  	 	  			  	 	  		   	 	 if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5))  { //Check if button pressed
 8001a46:	2120      	movs	r1, #32
 8001a48:	481f      	ldr	r0, [pc, #124]	; (8001ac8 <main+0x690>)
 8001a4a:	f002 fb5f 	bl	800410c <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <main+0x624>

	  	  	 	  			  	 	  		   	 		 	  			  right_ind = 1; // indicator status check
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <main+0x6bc>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	801a      	strh	r2, [r3, #0]
 8001a5a:	e002      	b.n	8001a62 <main+0x62a>

	  	  	 	                                           }
	  	  	 	  			  	 	  		   	 		else{

	  	  	 	  			  	 	  		   	 		 	  			    right_ind = 0;
 8001a5c:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <main+0x6bc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	801a      	strh	r2, [r3, #0]
	  	  	 	  			  	 	  		   	 		 	 }
	  	  	 	  			  	 	  		   	 	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_8))  { //Check if button pressed
 8001a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a66:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <main+0x690>)
 8001a68:	f002 fb50 	bl	800410c <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d044      	beq.n	8001afc <main+0x6c4>

	  	  	 	  			  	 	  		   	 		 		           low_beam = 1; // low beam status check
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <main+0x6c0>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	e043      	b.n	8001b02 <main+0x6ca>
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w
 8001a80:	66666666 	.word	0x66666666
 8001a84:	40711266 	.word	0x40711266
 8001a88:	200024b4 	.word	0x200024b4
 8001a8c:	200024b8 	.word	0x200024b8
 8001a90:	2000000c 	.word	0x2000000c
 8001a94:	200024bc 	.word	0x200024bc
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	200024c0 	.word	0x200024c0
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000010 	.word	0x20000010
 8001aa8:	200024c4 	.word	0x200024c4
 8001aac:	405b8000 	.word	0x405b8000
 8001ab0:	200024c8 	.word	0x200024c8
 8001ab4:	20002284 	.word	0x20002284
 8001ab8:	20002472 	.word	0x20002472
 8001abc:	20002478 	.word	0x20002478
 8001ac0:	200024b0 	.word	0x200024b0
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	20002484 	.word	0x20002484
 8001ad0:	40010800 	.word	0x40010800
 8001ad4:	20002486 	.word	0x20002486
 8001ad8:	20002488 	.word	0x20002488
 8001adc:	2000248a 	.word	0x2000248a
 8001ae0:	2000248c 	.word	0x2000248c
 8001ae4:	20002490 	.word	0x20002490
 8001ae8:	2000248e 	.word	0x2000248e
 8001aec:	20002492 	.word	0x20002492
 8001af0:	20002494 	.word	0x20002494
 8001af4:	20002496 	.word	0x20002496
 8001af8:	20002498 	.word	0x20002498


	  	  	 	  			  	 	  		   	 	 }
	  	  	 	  			  	 	  		   	 	else{

	  	  	 	  			  	 	  		   	 		 	                low_beam = 0;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <main+0x720>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		}
	  	  	 	  		 		   	 			  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_9))  { //Check if button pressed
 8001b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b06:	4815      	ldr	r0, [pc, #84]	; (8001b5c <main+0x724>)
 8001b08:	f002 fb00 	bl	800410c <HAL_GPIO_ReadPin>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <main+0x6e2>

	  	  	 	  			  	 	  		   	 			 		  	 high_beam = 1; // high beam status check
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <main+0x728>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	e002      	b.n	8001b20 <main+0x6e8>

	  	  	 	                                         }
	  	  	 	  			  	 	  		   	 	else{//VBAT_Out_Voltage,VBAT_current,speed,contemp,normal,echo,sports,side_stand,charging,vechicle_on, DAS,brake,left_ind,right_ind,low_beam,high_beam
	  	  	 	  			  	 	  		   	 		                 high_beam = 0;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <main+0x728>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	801a      	strh	r2, [r3, #0]

	  	  	 	  			  	 	  		   	 		 	}

	  	  	 	  		 		   	 			  if((side_stand == 1) || (charging == 1)||(( soc<=5))){
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <main+0x72c>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d007      	beq.n	8001b38 <main+0x700>
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <main+0x730>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d003      	beq.n	8001b38 <main+0x700>
 8001b30:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d81d      	bhi.n	8001b74 <main+0x73c>
	  	  	 	  		 		   	 			        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3e:	480b      	ldr	r0, [pc, #44]	; (8001b6c <main+0x734>)
 8001b40:	f002 fafb 	bl	800413a <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <main+0x734>)
 8001b4c:	f002 faf5 	bl	800413a <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 	                 alert=1;// Alert signal
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <main+0x738>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	801a      	strh	r2, [r3, #0]
 8001b56:	e01c      	b.n	8001b92 <main+0x75a>
 8001b58:	20002498 	.word	0x20002498
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	2000249a 	.word	0x2000249a
 8001b64:	2000248a 	.word	0x2000248a
 8001b68:	2000248c 	.word	0x2000248c
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	2000249c 	.word	0x2000249c
	  	  	 	  		 		   	 			  }
	  	  	 	  		 		   	 			  else{
	  	  	 	  		 		   	            		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7a:	48b1      	ldr	r0, [pc, #708]	; (8001e40 <main+0xa08>)
 8001b7c:	f002 fadd 	bl	800413a <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 				 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b86:	48ae      	ldr	r0, [pc, #696]	; (8001e40 <main+0xa08>)
 8001b88:	f002 fad7 	bl	800413a <HAL_GPIO_WritePin>
	  	  	 	  		 		   	 				     alert=0;
 8001b8c:	4bad      	ldr	r3, [pc, #692]	; (8001e44 <main+0xa0c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	801a      	strh	r2, [r3, #0]
	  	  	 	  		 		   	 			  }
	  	  	 	  		 		   	 			memset(VBAT_Out_Voltage_string, 0, sizeof(VBAT_Out_Voltage_string));
 8001b92:	2232      	movs	r2, #50	; 0x32
 8001b94:	2100      	movs	r1, #0
 8001b96:	48ac      	ldr	r0, [pc, #688]	; (8001e48 <main+0xa10>)
 8001b98:	f007 fe10 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(VBAT_current_string, 0, sizeof(VBAT_current_string));
 8001b9c:	2232      	movs	r2, #50	; 0x32
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	48aa      	ldr	r0, [pc, #680]	; (8001e4c <main+0xa14>)
 8001ba2:	f007 fe0b 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(speed_string, 0, sizeof(speed_string));
 8001ba6:	2232      	movs	r2, #50	; 0x32
 8001ba8:	2100      	movs	r1, #0
 8001baa:	48a9      	ldr	r0, [pc, #676]	; (8001e50 <main+0xa18>)
 8001bac:	f007 fe06 	bl	80097bc <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(contemp_string, 0, sizeof(contemp_string));
 8001bb0:	2232      	movs	r2, #50	; 0x32
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	48a7      	ldr	r0, [pc, #668]	; (8001e54 <main+0xa1c>)
 8001bb6:	f007 fe01 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(normal_string, 0, sizeof(normal_string));
 8001bba:	2232      	movs	r2, #50	; 0x32
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	48a6      	ldr	r0, [pc, #664]	; (8001e58 <main+0xa20>)
 8001bc0:	f007 fdfc 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(echo_string, 0, sizeof(echo_string));
 8001bc4:	2232      	movs	r2, #50	; 0x32
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	48a4      	ldr	r0, [pc, #656]	; (8001e5c <main+0xa24>)
 8001bca:	f007 fdf7 	bl	80097bc <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(sports_string, 0, sizeof(sports_string));
 8001bce:	2232      	movs	r2, #50	; 0x32
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	48a3      	ldr	r0, [pc, #652]	; (8001e60 <main+0xa28>)
 8001bd4:	f007 fdf2 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(side_stand_string, 0, sizeof(side_stand_string));
 8001bd8:	2232      	movs	r2, #50	; 0x32
 8001bda:	2100      	movs	r1, #0
 8001bdc:	48a1      	ldr	r0, [pc, #644]	; (8001e64 <main+0xa2c>)
 8001bde:	f007 fded 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(charging_string, 0, sizeof(charging_string));
 8001be2:	2232      	movs	r2, #50	; 0x32
 8001be4:	2100      	movs	r1, #0
 8001be6:	48a0      	ldr	r0, [pc, #640]	; (8001e68 <main+0xa30>)
 8001be8:	f007 fde8 	bl	80097bc <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(vechicle_on_string, 0, sizeof(vechicle_on_string));
 8001bec:	2232      	movs	r2, #50	; 0x32
 8001bee:	2100      	movs	r1, #0
 8001bf0:	489e      	ldr	r0, [pc, #632]	; (8001e6c <main+0xa34>)
 8001bf2:	f007 fde3 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(DAS_string, 0, sizeof(DAS_string));
 8001bf6:	2232      	movs	r2, #50	; 0x32
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	489d      	ldr	r0, [pc, #628]	; (8001e70 <main+0xa38>)
 8001bfc:	f007 fdde 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(brake_string, 0, sizeof(brake_string));
 8001c00:	2232      	movs	r2, #50	; 0x32
 8001c02:	2100      	movs	r1, #0
 8001c04:	489b      	ldr	r0, [pc, #620]	; (8001e74 <main+0xa3c>)
 8001c06:	f007 fdd9 	bl	80097bc <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(left_ind_string, 0, sizeof(left_ind_string));
 8001c0a:	2232      	movs	r2, #50	; 0x32
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	489a      	ldr	r0, [pc, #616]	; (8001e78 <main+0xa40>)
 8001c10:	f007 fdd4 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(right_ind_string, 0, sizeof(right_ind_string));
 8001c14:	2232      	movs	r2, #50	; 0x32
 8001c16:	2100      	movs	r1, #0
 8001c18:	4898      	ldr	r0, [pc, #608]	; (8001e7c <main+0xa44>)
 8001c1a:	f007 fdcf 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	        memset(low_beam_string, 0, sizeof(low_beam_string));
 8001c1e:	2232      	movs	r2, #50	; 0x32
 8001c20:	2100      	movs	r1, #0
 8001c22:	4897      	ldr	r0, [pc, #604]	; (8001e80 <main+0xa48>)
 8001c24:	f007 fdca 	bl	80097bc <memset>

	  	  	 	  		 		   	 					 		   	 		                        memset(high_beam_string, 0, sizeof(high_beam_string));
 8001c28:	2232      	movs	r2, #50	; 0x32
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4895      	ldr	r0, [pc, #596]	; (8001e84 <main+0xa4c>)
 8001c2e:	f007 fdc5 	bl	80097bc <memset>
	  	  	 	  		 		   	 					 		   	 			 	      	       // memset(temp_string, 0, sizeof(temp_string));
	  	  	 	  		 		   	 					 		   	 			 	      	       // memset(press_string, 0, sizeof(press_string));

	  	  	 	  		 		   	 			 		   	 		                        memset(soc_string, 0, sizeof(soc_string));
 8001c32:	2232      	movs	r2, #50	; 0x32
 8001c34:	2100      	movs	r1, #0
 8001c36:	4894      	ldr	r0, [pc, #592]	; (8001e88 <main+0xa50>)
 8001c38:	f007 fdc0 	bl	80097bc <memset>
	  	  	 	  		 		   	 			 		   	 			 	      	        memset(dod_string, 0, sizeof(dod_string));
 8001c3c:	2232      	movs	r2, #50	; 0x32
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4892      	ldr	r0, [pc, #584]	; (8001e8c <main+0xa54>)
 8001c42:	f007 fdbb 	bl	80097bc <memset>
	  	  	 	  		 		   	 			 		   	 			 	      	        memset(batteryPercentage_string, 0, sizeof(batteryPercentage_string));
 8001c46:	2232      	movs	r2, #50	; 0x32
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4891      	ldr	r0, [pc, #580]	; (8001e90 <main+0xa58>)
 8001c4c:	f007 fdb6 	bl	80097bc <memset>





	  	  	 	  		 		   	 					 		   	 			 	                sprintf(VBAT_Out_Voltage_string, "VBAT_Out_Voltage %03.1f%% ",VBAT_Out_Voltage);
 8001c50:	4b90      	ldr	r3, [pc, #576]	; (8001e94 <main+0xa5c>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4990      	ldr	r1, [pc, #576]	; (8001e98 <main+0xa60>)
 8001c58:	487b      	ldr	r0, [pc, #492]	; (8001e48 <main+0xa10>)
 8001c5a:	f008 fc29 	bl	800a4b0 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(VBAT_current_string, "VBAT_current %03.1fC ", VBAT_current);
 8001c5e:	4b8f      	ldr	r3, [pc, #572]	; (8001e9c <main+0xa64>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	498e      	ldr	r1, [pc, #568]	; (8001ea0 <main+0xa68>)
 8001c66:	4879      	ldr	r0, [pc, #484]	; (8001e4c <main+0xa14>)
 8001c68:	f008 fc22 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(speed_string, "speed %03.1fhPa\n", speed);
 8001c6c:	4b8d      	ldr	r3, [pc, #564]	; (8001ea4 <main+0xa6c>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	498d      	ldr	r1, [pc, #564]	; (8001ea8 <main+0xa70>)
 8001c74:	4876      	ldr	r0, [pc, #472]	; (8001e50 <main+0xa18>)
 8001c76:	f008 fc1b 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(contemp_string, "temperature %03.1f%% ",contemp);
 8001c7a:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <main+0xa74>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fbd2 	bl	8000428 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4989      	ldr	r1, [pc, #548]	; (8001eb0 <main+0xa78>)
 8001c8a:	4872      	ldr	r0, [pc, #456]	; (8001e54 <main+0xa1c>)
 8001c8c:	f008 fc10 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(normal_string, "normal %03.1fC ", normal);
 8001c90:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <main+0xa7c>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4988      	ldr	r1, [pc, #544]	; (8001eb8 <main+0xa80>)
 8001c98:	486f      	ldr	r0, [pc, #444]	; (8001e58 <main+0xa20>)
 8001c9a:	f008 fc09 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(echo_string, "echo %03.1fhPa\n",echo);
 8001c9e:	4b87      	ldr	r3, [pc, #540]	; (8001ebc <main+0xa84>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4986      	ldr	r1, [pc, #536]	; (8001ec0 <main+0xa88>)
 8001ca6:	486d      	ldr	r0, [pc, #436]	; (8001e5c <main+0xa24>)
 8001ca8:	f008 fc02 	bl	800a4b0 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	                sprintf(sports_string, "sports %03.1f%% ",sports);
 8001cac:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <main+0xa8c>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4985      	ldr	r1, [pc, #532]	; (8001ec8 <main+0xa90>)
 8001cb4:	486a      	ldr	r0, [pc, #424]	; (8001e60 <main+0xa28>)
 8001cb6:	f008 fbfb 	bl	800a4b0 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(side_stand_string, "side_stand %03.1fC ", side_stand);
 8001cba:	4b84      	ldr	r3, [pc, #528]	; (8001ecc <main+0xa94>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4983      	ldr	r1, [pc, #524]	; (8001ed0 <main+0xa98>)
 8001cc2:	4868      	ldr	r0, [pc, #416]	; (8001e64 <main+0xa2c>)
 8001cc4:	f008 fbf4 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(charging_string, "charging %03.1fhPa\n", charging);
 8001cc8:	4b82      	ldr	r3, [pc, #520]	; (8001ed4 <main+0xa9c>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4982      	ldr	r1, [pc, #520]	; (8001ed8 <main+0xaa0>)
 8001cd0:	4865      	ldr	r0, [pc, #404]	; (8001e68 <main+0xa30>)
 8001cd2:	f008 fbed 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(vechicle_on_string, "vechicle_on %03.1f%% ",vechicle_on);
 8001cd6:	4b81      	ldr	r3, [pc, #516]	; (8001edc <main+0xaa4>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4980      	ldr	r1, [pc, #512]	; (8001ee0 <main+0xaa8>)
 8001cde:	4863      	ldr	r0, [pc, #396]	; (8001e6c <main+0xa34>)
 8001ce0:	f008 fbe6 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(DAS_string, "DAS %03.1fC ", DAS);
 8001ce4:	4b7f      	ldr	r3, [pc, #508]	; (8001ee4 <main+0xaac>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	497f      	ldr	r1, [pc, #508]	; (8001ee8 <main+0xab0>)
 8001cec:	4860      	ldr	r0, [pc, #384]	; (8001e70 <main+0xa38>)
 8001cee:	f008 fbdf 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(brake_string, "brake %03.1fhPa\n",brake);
 8001cf2:	4b7e      	ldr	r3, [pc, #504]	; (8001eec <main+0xab4>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	497d      	ldr	r1, [pc, #500]	; (8001ef0 <main+0xab8>)
 8001cfa:	485e      	ldr	r0, [pc, #376]	; (8001e74 <main+0xa3c>)
 8001cfc:	f008 fbd8 	bl	800a4b0 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(left_ind_string, "left_ind %03.1fC ", left_ind);
 8001d00:	4b7c      	ldr	r3, [pc, #496]	; (8001ef4 <main+0xabc>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	497c      	ldr	r1, [pc, #496]	; (8001ef8 <main+0xac0>)
 8001d08:	485b      	ldr	r0, [pc, #364]	; (8001e78 <main+0xa40>)
 8001d0a:	f008 fbd1 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(right_ind_string, "right_ind %03.1fhPa\n", right_ind);
 8001d0e:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <main+0xac4>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	497a      	ldr	r1, [pc, #488]	; (8001f00 <main+0xac8>)
 8001d16:	4859      	ldr	r0, [pc, #356]	; (8001e7c <main+0xa44>)
 8001d18:	f008 fbca 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(low_beam_string, "low_beam %03.1f%% ",low_beam);
 8001d1c:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <main+0xacc>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4979      	ldr	r1, [pc, #484]	; (8001f08 <main+0xad0>)
 8001d24:	4856      	ldr	r0, [pc, #344]	; (8001e80 <main+0xa48>)
 8001d26:	f008 fbc3 	bl	800a4b0 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(high_beam_string, "high_beam %03.1fC ", high_beam);
 8001d2a:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <main+0xad4>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4977      	ldr	r1, [pc, #476]	; (8001f10 <main+0xad8>)
 8001d32:	4854      	ldr	r0, [pc, #336]	; (8001e84 <main+0xa4c>)
 8001d34:	f008 fbbc 	bl	800a4b0 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(dod_string, "dod %03.1fC ", dod);
 8001d38:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4975      	ldr	r1, [pc, #468]	; (8001f14 <main+0xadc>)
 8001d40:	4852      	ldr	r0, [pc, #328]	; (8001e8c <main+0xa54>)
 8001d42:	f008 fbb5 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(soc_string, "soc %03.1fhPa\n", soc);
 8001d46:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4972      	ldr	r1, [pc, #456]	; (8001f18 <main+0xae0>)
 8001d4e:	484e      	ldr	r0, [pc, #312]	; (8001e88 <main+0xa50>)
 8001d50:	f008 fbae 	bl	800a4b0 <siprintf>
	  	  	 	  		 		   	 					 		   	 			 	      	 	    sprintf(batteryPercentage_string, "batteryPercentage %03.1f%% ",batteryPercentage);
 8001d54:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <main+0xae4>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4971      	ldr	r1, [pc, #452]	; (8001f20 <main+0xae8>)
 8001d5c:	484c      	ldr	r0, [pc, #304]	; (8001e90 <main+0xa58>)
 8001d5e:	f008 fba7 	bl	800a4b0 <siprintf>

	  	  	 	  		 		   	 					 		   	 			 	      	f_open(&fil, "DAS.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001d62:	2213      	movs	r2, #19
 8001d64:	496f      	ldr	r1, [pc, #444]	; (8001f24 <main+0xaec>)
 8001d66:	4870      	ldr	r0, [pc, #448]	; (8001f28 <main+0xaf0>)
 8001d68:	f006 fb04 	bl	8008374 <f_open>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_lseek(&fil, fil.fsize);
 8001d6c:	4b6e      	ldr	r3, [pc, #440]	; (8001f28 <main+0xaf0>)
 8001d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4619      	mov	r1, r3
 8001d76:	486c      	ldr	r0, [pc, #432]	; (8001f28 <main+0xaf0>)
 8001d78:	f007 f934 	bl	8008fe4 <f_lseek>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(VBAT_Out_Voltage_string, &fil);
 8001d7c:	496a      	ldr	r1, [pc, #424]	; (8001f28 <main+0xaf0>)
 8001d7e:	4832      	ldr	r0, [pc, #200]	; (8001e48 <main+0xa10>)
 8001d80:	f007 fc5e 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(VBAT_current_string, &fil);
 8001d84:	4968      	ldr	r1, [pc, #416]	; (8001f28 <main+0xaf0>)
 8001d86:	4831      	ldr	r0, [pc, #196]	; (8001e4c <main+0xa14>)
 8001d88:	f007 fc5a 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(contemp_string, &fil);
 8001d8c:	4966      	ldr	r1, [pc, #408]	; (8001f28 <main+0xaf0>)
 8001d8e:	4831      	ldr	r0, [pc, #196]	; (8001e54 <main+0xa1c>)
 8001d90:	f007 fc56 	bl	8009640 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(normal_string, &fil);
 8001d94:	4964      	ldr	r1, [pc, #400]	; (8001f28 <main+0xaf0>)
 8001d96:	4830      	ldr	r0, [pc, #192]	; (8001e58 <main+0xa20>)
 8001d98:	f007 fc52 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(echo_string, &fil);
 8001d9c:	4962      	ldr	r1, [pc, #392]	; (8001f28 <main+0xaf0>)
 8001d9e:	482f      	ldr	r0, [pc, #188]	; (8001e5c <main+0xa24>)
 8001da0:	f007 fc4e 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(sports_string, &fil);
 8001da4:	4960      	ldr	r1, [pc, #384]	; (8001f28 <main+0xaf0>)
 8001da6:	482e      	ldr	r0, [pc, #184]	; (8001e60 <main+0xa28>)
 8001da8:	f007 fc4a 	bl	8009640 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(side_stand_string, &fil);
 8001dac:	495e      	ldr	r1, [pc, #376]	; (8001f28 <main+0xaf0>)
 8001dae:	482d      	ldr	r0, [pc, #180]	; (8001e64 <main+0xa2c>)
 8001db0:	f007 fc46 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(charging_string, &fil);
 8001db4:	495c      	ldr	r1, [pc, #368]	; (8001f28 <main+0xaf0>)
 8001db6:	482c      	ldr	r0, [pc, #176]	; (8001e68 <main+0xa30>)
 8001db8:	f007 fc42 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(vechicle_on_string, &fil);
 8001dbc:	495a      	ldr	r1, [pc, #360]	; (8001f28 <main+0xaf0>)
 8001dbe:	482b      	ldr	r0, [pc, #172]	; (8001e6c <main+0xa34>)
 8001dc0:	f007 fc3e 	bl	8009640 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(DAS_string, &fil);
 8001dc4:	4958      	ldr	r1, [pc, #352]	; (8001f28 <main+0xaf0>)
 8001dc6:	482a      	ldr	r0, [pc, #168]	; (8001e70 <main+0xa38>)
 8001dc8:	f007 fc3a 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(brake_string, &fil);
 8001dcc:	4956      	ldr	r1, [pc, #344]	; (8001f28 <main+0xaf0>)
 8001dce:	4829      	ldr	r0, [pc, #164]	; (8001e74 <main+0xa3c>)
 8001dd0:	f007 fc36 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(left_ind_string, &fil);
 8001dd4:	4954      	ldr	r1, [pc, #336]	; (8001f28 <main+0xaf0>)
 8001dd6:	4828      	ldr	r0, [pc, #160]	; (8001e78 <main+0xa40>)
 8001dd8:	f007 fc32 	bl	8009640 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(right_ind_string, &fil);
 8001ddc:	4952      	ldr	r1, [pc, #328]	; (8001f28 <main+0xaf0>)
 8001dde:	4827      	ldr	r0, [pc, #156]	; (8001e7c <main+0xa44>)
 8001de0:	f007 fc2e 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(low_beam_string, &fil);
 8001de4:	4950      	ldr	r1, [pc, #320]	; (8001f28 <main+0xaf0>)
 8001de6:	4826      	ldr	r0, [pc, #152]	; (8001e80 <main+0xa48>)
 8001de8:	f007 fc2a 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(high_beam_string, &fil);
 8001dec:	494e      	ldr	r1, [pc, #312]	; (8001f28 <main+0xaf0>)
 8001dee:	4825      	ldr	r0, [pc, #148]	; (8001e84 <main+0xa4c>)
 8001df0:	f007 fc26 	bl	8009640 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(dod_string, &fil);
 8001df4:	494c      	ldr	r1, [pc, #304]	; (8001f28 <main+0xaf0>)
 8001df6:	4825      	ldr	r0, [pc, #148]	; (8001e8c <main+0xa54>)
 8001df8:	f007 fc22 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(soc_string, &fil);
 8001dfc:	494a      	ldr	r1, [pc, #296]	; (8001f28 <main+0xaf0>)
 8001dfe:	4822      	ldr	r0, [pc, #136]	; (8001e88 <main+0xa50>)
 8001e00:	f007 fc1e 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(batteryPercentage_string, &fil);
 8001e04:	4948      	ldr	r1, [pc, #288]	; (8001f28 <main+0xaf0>)
 8001e06:	4822      	ldr	r0, [pc, #136]	; (8001e90 <main+0xa58>)
 8001e08:	f007 fc1a 	bl	8009640 <f_puts>

	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(time, &fil);
 8001e0c:	4946      	ldr	r1, [pc, #280]	; (8001f28 <main+0xaf0>)
 8001e0e:	4847      	ldr	r0, [pc, #284]	; (8001f2c <main+0xaf4>)
 8001e10:	f007 fc16 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_puts(location, &fil);
 8001e14:	4944      	ldr	r1, [pc, #272]	; (8001f28 <main+0xaf0>)
 8001e16:	4846      	ldr	r0, [pc, #280]	; (8001f30 <main+0xaf8>)
 8001e18:	f007 fc12 	bl	8009640 <f_puts>
	  	  	 	  		 		   	 					 		   	 			 	      		 	        f_close(&fil);
 8001e1c:	4842      	ldr	r0, [pc, #264]	; (8001f28 <main+0xaf0>)
 8001e1e:	f007 f8b6 	bl	8008f8e <f_close>

	  	  	 	  			// HAL_UART_Transmit (&huart1, data, sizeof (data), 1000);//VBAT_Out_Voltage,VBAT_current,speed,contemp,normal,echo,sports,side_stand,charging,vechicle_on, DAS,brake,left_ind,right_ind,low_beam,high_beam
	  	  	 	   uart_buf_len = sprintf(uart_buf,"{\"voltage\":%d,\"current\":%d,\"speed\":%d,\"temp\":%d,\"normal\":%d,\"echo\":%d,\"sports\":%d,\"side_stand\":%d,\"charging\":%d,\"vechicle_on\":%d,\"DAS\":%d,\"brake\":%d,\"left_ind\":%d,\"right_ind\":%d,\"low_beam\":%d,\"high_beam\":%d,\"soc\":%d,\"dod\":%d,\"batteryPercentage\":%d,\"latitude\":13.0728,\"NS\":N,\"longitude\":80.2042,\"EW\":E,\"hour\":23,\"min\":30,\"sec\":15,\"day\":29,\"mon\":03,\"year\":2003,\"trip\":60,\"range\":80}\n",(int)VBAT_Out_Voltage,(int)VBAT_current,(int)speed,(int)contemp,(int)normal,(int)echo,(int)sports,(int)side_stand,(int)charging,(int)vechicle_on,(int)DAS,(int)brake,(int)left_ind,(int)right_ind,(int)low_beam,(int)high_beam,(int)soc,(int)dod);//,(int)batteryPercentage,(int)latitude,NS,(int)longitude,EW,(int)hours,(int)mins,(int)secs,(int)days,(int)mont,(int)years);
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <main+0xa5c>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	4698      	mov	r8, r3
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <main+0xa64>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <main+0xa6c>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <main+0xa74>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f969 	bl	8001110 <__aeabi_f2iz>
 8001e3e:	e079      	b.n	8001f34 <main+0xafc>
 8001e40:	40011000 	.word	0x40011000
 8001e44:	2000249c 	.word	0x2000249c
 8001e48:	200024cc 	.word	0x200024cc
 8001e4c:	20002500 	.word	0x20002500
 8001e50:	20002534 	.word	0x20002534
 8001e54:	20002568 	.word	0x20002568
 8001e58:	2000259c 	.word	0x2000259c
 8001e5c:	200025d0 	.word	0x200025d0
 8001e60:	20002604 	.word	0x20002604
 8001e64:	20002638 	.word	0x20002638
 8001e68:	2000266c 	.word	0x2000266c
 8001e6c:	200026a0 	.word	0x200026a0
 8001e70:	200026d4 	.word	0x200026d4
 8001e74:	20002708 	.word	0x20002708
 8001e78:	2000273c 	.word	0x2000273c
 8001e7c:	20002770 	.word	0x20002770
 8001e80:	200027a4 	.word	0x200027a4
 8001e84:	200027d8 	.word	0x200027d8
 8001e88:	2000280c 	.word	0x2000280c
 8001e8c:	20002840 	.word	0x20002840
 8001e90:	20002874 	.word	0x20002874
 8001e94:	20002472 	.word	0x20002472
 8001e98:	0800e438 	.word	0x0800e438
 8001e9c:	20002478 	.word	0x20002478
 8001ea0:	0800e454 	.word	0x0800e454
 8001ea4:	20002482 	.word	0x20002482
 8001ea8:	0800e46c 	.word	0x0800e46c
 8001eac:	200024c8 	.word	0x200024c8
 8001eb0:	0800e480 	.word	0x0800e480
 8001eb4:	20002484 	.word	0x20002484
 8001eb8:	0800e498 	.word	0x0800e498
 8001ebc:	20002486 	.word	0x20002486
 8001ec0:	0800e4a8 	.word	0x0800e4a8
 8001ec4:	20002488 	.word	0x20002488
 8001ec8:	0800e4b8 	.word	0x0800e4b8
 8001ecc:	2000248a 	.word	0x2000248a
 8001ed0:	0800e4cc 	.word	0x0800e4cc
 8001ed4:	2000248c 	.word	0x2000248c
 8001ed8:	0800e4e0 	.word	0x0800e4e0
 8001edc:	20002490 	.word	0x20002490
 8001ee0:	0800e4f4 	.word	0x0800e4f4
 8001ee4:	2000248e 	.word	0x2000248e
 8001ee8:	0800e50c 	.word	0x0800e50c
 8001eec:	20002492 	.word	0x20002492
 8001ef0:	0800e51c 	.word	0x0800e51c
 8001ef4:	20002494 	.word	0x20002494
 8001ef8:	0800e530 	.word	0x0800e530
 8001efc:	20002496 	.word	0x20002496
 8001f00:	0800e544 	.word	0x0800e544
 8001f04:	20002498 	.word	0x20002498
 8001f08:	0800e55c 	.word	0x0800e55c
 8001f0c:	2000249a 	.word	0x2000249a
 8001f10:	0800e570 	.word	0x0800e570
 8001f14:	0800e584 	.word	0x0800e584
 8001f18:	0800e594 	.word	0x0800e594
 8001f1c:	200024b0 	.word	0x200024b0
 8001f20:	0800e5a4 	.word	0x0800e5a4
 8001f24:	0800e414 	.word	0x0800e414
 8001f28:	20001258 	.word	0x20001258
 8001f2c:	200028a8 	.word	0x200028a8
 8001f30:	200028dc 	.word	0x200028dc
 8001f34:	4605      	mov	r5, r0
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <main+0xbb4>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	623b      	str	r3, [r7, #32]
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <main+0xbb8>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <main+0xbbc>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <main+0xbc0>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <main+0xbc4>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <main+0xbc8>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <main+0xbcc>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	4b29      	ldr	r3, [pc, #164]	; (8002008 <main+0xbd0>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <main+0xbd4>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <main+0xbd8>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	461e      	mov	r6, r3
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <main+0xbdc>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	461c      	mov	r4, r3
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <main+0xbe0>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f897 241a 	ldrb.w	r2, [r7, #1050]	; 0x41a
 8001f82:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8001f86:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f8c:	920e      	str	r2, [sp, #56]	; 0x38
 8001f8e:	910d      	str	r1, [sp, #52]	; 0x34
 8001f90:	940c      	str	r4, [sp, #48]	; 0x30
 8001f92:	960b      	str	r6, [sp, #44]	; 0x2c
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	920a      	str	r2, [sp, #40]	; 0x28
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	9208      	str	r2, [sp, #32]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	9207      	str	r2, [sp, #28]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	9206      	str	r2, [sp, #24]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	9205      	str	r2, [sp, #20]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	9204      	str	r2, [sp, #16]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	9203      	str	r2, [sp, #12]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	9202      	str	r2, [sp, #8]
 8001fb8:	9501      	str	r5, [sp, #4]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	4642      	mov	r2, r8
 8001fc2:	4916      	ldr	r1, [pc, #88]	; (800201c <main+0xbe4>)
 8001fc4:	f008 fa74 	bl	800a4b0 <siprintf>
 8001fc8:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414

	  	  	 	  	 HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf,uart_buf_len, 1000);
 8001fcc:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <main+0xbe8>)
 8001fdc:	f003 faca 	bl	8005574 <HAL_UART_Transmit>
	  	  	 	  			 HAL_Delay(1000);
 8001fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe4:	f000 fe96 	bl	8002d14 <HAL_Delay>
  {
 8001fe8:	f7ff ba5c 	b.w	80014a4 <main+0x6c>
 8001fec:	20002484 	.word	0x20002484
 8001ff0:	20002486 	.word	0x20002486
 8001ff4:	20002488 	.word	0x20002488
 8001ff8:	2000248a 	.word	0x2000248a
 8001ffc:	2000248c 	.word	0x2000248c
 8002000:	20002490 	.word	0x20002490
 8002004:	2000248e 	.word	0x2000248e
 8002008:	20002492 	.word	0x20002492
 800200c:	20002494 	.word	0x20002494
 8002010:	20002496 	.word	0x20002496
 8002014:	20002498 	.word	0x20002498
 8002018:	2000249a 	.word	0x2000249a
 800201c:	0800e5c0 	.word	0x0800e5c0
 8002020:	200023e0 	.word	0x200023e0

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b094      	sub	sp, #80	; 0x50
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800202e:	2228      	movs	r2, #40	; 0x28
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f007 fbc2 	bl	80097bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002054:	2301      	movs	r3, #1
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002062:	2301      	movs	r3, #1
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002066:	2302      	movs	r3, #2
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800206e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002070:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002074:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207a:	4618      	mov	r0, r3
 800207c:	f002 f876 	bl	800416c <HAL_RCC_OscConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002086:	f000 fa29 	bl	80024dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208a:	230f      	movs	r3, #15
 800208c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2102      	movs	r1, #2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fae2 	bl	8004670 <HAL_RCC_ClockConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80020b2:	f000 fa13 	bl	80024dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020b6:	2302      	movs	r3, #2
 80020b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80020ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 fc62 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020ce:	f000 fa05 	bl	80024dc <Error_Handler>
  }
}
 80020d2:	bf00      	nop
 80020d4:	3750      	adds	r7, #80	; 0x50
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_ADC1_Init+0x58>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <MX_ADC1_Init+0x5c>)
 80020f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <MX_ADC1_Init+0x58>)
 80020f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_ADC1_Init+0x58>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_ADC1_Init+0x58>)
 8002102:	2200      	movs	r2, #0
 8002104:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MX_ADC1_Init+0x58>)
 8002108:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800210c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_ADC1_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_ADC1_Init+0x58>)
 8002116:	2201      	movs	r2, #1
 8002118:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <MX_ADC1_Init+0x58>)
 800211c:	f000 fe1e 	bl	8002d5c <HAL_ADC_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002126:	f000 f9d9 	bl	80024dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20002284 	.word	0x20002284
 8002138:	40012400 	.word	0x40012400

0800213c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002142:	4a18      	ldr	r2, [pc, #96]	; (80021a4 <MX_SPI1_Init+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800214c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_SPI1_Init+0x64>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002170:	2210      	movs	r2, #16
 8002172:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_SPI1_Init+0x64>)
 800217c:	2200      	movs	r2, #0
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002182:	2200      	movs	r2, #0
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_SPI1_Init+0x64>)
 8002188:	220a      	movs	r2, #10
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <MX_SPI1_Init+0x64>)
 800218e:	f002 fd69 	bl	8004c64 <HAL_SPI_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002198:	f000 f9a0 	bl	80024dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	200022f8 	.word	0x200022f8
 80021a4:	40013000 	.word	0x40013000

080021a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021bc:	463b      	mov	r3, r7
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021cc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80021d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021da:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80021de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021f2:	4814      	ldr	r0, [pc, #80]	; (8002244 <MX_TIM1_Init+0x9c>)
 80021f4:	f002 fdba 	bl	8004d6c <HAL_TIM_Base_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80021fe:	f000 f96d 	bl	80024dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	4619      	mov	r1, r3
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <MX_TIM1_Init+0x9c>)
 8002210:	f002 ff03 	bl	800501a <HAL_TIM_ConfigClockSource>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800221a:	f000 f95f 	bl	80024dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002226:	463b      	mov	r3, r7
 8002228:	4619      	mov	r1, r3
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <MX_TIM1_Init+0x9c>)
 800222c:	f003 f8e2 	bl	80053f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002236:	f000 f951 	bl	80024dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20002350 	.word	0x20002350
 8002248:	40012c00 	.word	0x40012c00

0800224c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MX_TIM3_Init+0x94>)
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <MX_TIM3_Init+0x98>)
 800226c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <MX_TIM3_Init+0x94>)
 8002270:	223b      	movs	r2, #59	; 0x3b
 8002272:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_TIM3_Init+0x94>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <MX_TIM3_Init+0x94>)
 800227c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002280:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_TIM3_Init+0x94>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <MX_TIM3_Init+0x94>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800228e:	4814      	ldr	r0, [pc, #80]	; (80022e0 <MX_TIM3_Init+0x94>)
 8002290:	f002 fd6c 	bl	8004d6c <HAL_TIM_Base_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800229a:	f000 f91f 	bl	80024dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	4619      	mov	r1, r3
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <MX_TIM3_Init+0x94>)
 80022ac:	f002 feb5 	bl	800501a <HAL_TIM_ConfigClockSource>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80022b6:	f000 f911 	bl	80024dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022c2:	463b      	mov	r3, r7
 80022c4:	4619      	mov	r1, r3
 80022c6:	4806      	ldr	r0, [pc, #24]	; (80022e0 <MX_TIM3_Init+0x94>)
 80022c8:	f003 f894 	bl	80053f4 <HAL_TIMEx_MasterConfigSynchronization>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022d2:	f000 f903 	bl	80024dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20002398 	.word	0x20002398
 80022e4:	40000400 	.word	0x40000400

080022e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <MX_USART1_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 80022f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002320:	f003 f8d8 	bl	80054d4 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800232a:	f000 f8d7 	bl	80024dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200023e0 	.word	0x200023e0
 8002338:	40013800 	.word	0x40013800

0800233c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <MX_USART3_UART_Init+0x50>)
 8002344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 8002348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800234c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <MX_USART3_UART_Init+0x4c>)
 8002374:	f003 f8ae 	bl	80054d4 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800237e:	f000 f8ad 	bl	80024dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20002428 	.word	0x20002428
 800238c:	40004800 	.word	0x40004800

08002390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_DMA_Init+0x38>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <MX_DMA_Init+0x38>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6153      	str	r3, [r2, #20]
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_DMA_Init+0x38>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	200b      	movs	r0, #11
 80023b4:	f001 fadb 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023b8:	200b      	movs	r0, #11
 80023ba:	f001 faf4 	bl	80039a6 <HAL_NVIC_EnableIRQ>

}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000

080023cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	f107 0310 	add.w	r3, r7, #16
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e0:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <MX_GPIO_Init+0x100>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a39      	ldr	r2, [pc, #228]	; (80024cc <MX_GPIO_Init+0x100>)
 80023e6:	f043 0310 	orr.w	r3, r3, #16
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b37      	ldr	r3, [pc, #220]	; (80024cc <MX_GPIO_Init+0x100>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f8:	4b34      	ldr	r3, [pc, #208]	; (80024cc <MX_GPIO_Init+0x100>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a33      	ldr	r2, [pc, #204]	; (80024cc <MX_GPIO_Init+0x100>)
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <MX_GPIO_Init+0x100>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <MX_GPIO_Init+0x100>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <MX_GPIO_Init+0x100>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <MX_GPIO_Init+0x100>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <MX_GPIO_Init+0x100>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <MX_GPIO_Init+0x100>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	6193      	str	r3, [r2, #24]
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <MX_GPIO_Init+0x100>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002446:	4822      	ldr	r0, [pc, #136]	; (80024d0 <MX_GPIO_Init+0x104>)
 8002448:	f001 fe77 	bl	800413a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	2108      	movs	r1, #8
 8002450:	4820      	ldr	r0, [pc, #128]	; (80024d4 <MX_GPIO_Init+0x108>)
 8002452:	f001 fe72 	bl	800413a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002456:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800245a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2302      	movs	r3, #2
 8002466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	4818      	ldr	r0, [pc, #96]	; (80024d0 <MX_GPIO_Init+0x104>)
 8002470:	f001 fcc8 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002474:	2308      	movs	r3, #8
 8002476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002478:	2301      	movs	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2302      	movs	r3, #2
 8002482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4619      	mov	r1, r3
 800248a:	4812      	ldr	r0, [pc, #72]	; (80024d4 <MX_GPIO_Init+0x108>)
 800248c:	f001 fcba 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002490:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 8002494:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4619      	mov	r1, r3
 80024a4:	480c      	ldr	r0, [pc, #48]	; (80024d8 <MX_GPIO_Init+0x10c>)
 80024a6:	f001 fcad 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80024aa:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80024ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_GPIO_Init+0x108>)
 80024c0:	f001 fca0 	bl	8003e04 <HAL_GPIO_Init>

}
 80024c4:	bf00      	nop
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40010800 	.word	0x40010800
 80024d8:	40010c00 	.word	0x40010c00

080024dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e0:	b672      	cpsid	i
}
 80024e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <Error_Handler+0x8>
	...

080024e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_MspInit+0x5c>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4a14      	ldr	r2, [pc, #80]	; (8002544 <HAL_MspInit+0x5c>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6193      	str	r3, [r2, #24]
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_MspInit+0x5c>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_MspInit+0x5c>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <HAL_MspInit+0x5c>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_MspInit+0x5c>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_MspInit+0x60>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_MspInit+0x60>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40021000 	.word	0x40021000
 8002548:	40010000 	.word	0x40010000

0800254c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2c      	ldr	r2, [pc, #176]	; (8002618 <HAL_ADC_MspInit+0xcc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d151      	bne.n	8002610 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_ADC_MspInit+0xd0>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a2a      	ldr	r2, [pc, #168]	; (800261c <HAL_ADC_MspInit+0xd0>)
 8002572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_ADC_MspInit+0xd0>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_ADC_MspInit+0xd0>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a24      	ldr	r2, [pc, #144]	; (800261c <HAL_ADC_MspInit+0xd0>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_ADC_MspInit+0xd0>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800259c:	2317      	movs	r3, #23
 800259e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025a0:	2303      	movs	r3, #3
 80025a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	481d      	ldr	r0, [pc, #116]	; (8002620 <HAL_ADC_MspInit+0xd4>)
 80025ac:	f001 fc2a 	bl	8003e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025b2:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025da:	2220      	movs	r2, #32
 80025dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025e4:	480f      	ldr	r0, [pc, #60]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025e6:	f001 f9f9 	bl	80039dc <HAL_DMA_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80025f0:	f7ff ff74 	bl	80024dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025f8:	621a      	str	r2, [r3, #32]
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2101      	movs	r1, #1
 8002604:	2012      	movs	r0, #18
 8002606:	f001 f9b2 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800260a:	2012      	movs	r0, #18
 800260c:	f001 f9cb 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40012400 	.word	0x40012400
 800261c:	40021000 	.word	0x40021000
 8002620:	40010800 	.word	0x40010800
 8002624:	200022b4 	.word	0x200022b4
 8002628:	40020008 	.word	0x40020008

0800262c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <HAL_SPI_MspInit+0x88>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d12f      	bne.n	80026ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_SPI_MspInit+0x8c>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_SPI_MspInit+0x8c>)
 8002652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_SPI_MspInit+0x8c>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_SPI_MspInit+0x8c>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <HAL_SPI_MspInit+0x8c>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_SPI_MspInit+0x8c>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800267c:	23a0      	movs	r3, #160	; 0xa0
 800267e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	4619      	mov	r1, r3
 800268e:	480b      	ldr	r0, [pc, #44]	; (80026bc <HAL_SPI_MspInit+0x90>)
 8002690:	f001 fbb8 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002694:	2340      	movs	r3, #64	; 0x40
 8002696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <HAL_SPI_MspInit+0x90>)
 80026a8:	f001 fbac 	bl	8003e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013000 	.word	0x40013000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010800 	.word	0x40010800

080026c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_TIM_Base_MspInit+0x68>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d114      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_TIM_Base_MspInit+0x6c>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_TIM_Base_MspInit+0x6c>)
 80026d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026dc:	6193      	str	r3, [r2, #24]
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_TIM_Base_MspInit+0x6c>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2019      	movs	r0, #25
 80026f0:	f001 f93d 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80026f4:	2019      	movs	r0, #25
 80026f6:	f001 f956 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026fa:	e010      	b.n	800271e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_TIM_Base_MspInit+0x70>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10b      	bne.n	800271e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_TIM_Base_MspInit+0x6c>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_TIM_Base_MspInit+0x6c>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_TIM_Base_MspInit+0x6c>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40012c00 	.word	0x40012c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40000400 	.word	0x40000400

08002734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0318 	add.w	r3, r7, #24
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3c      	ldr	r2, [pc, #240]	; (8002840 <HAL_UART_MspInit+0x10c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d132      	bne.n	80027ba <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002754:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_UART_MspInit+0x110>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <HAL_UART_MspInit+0x110>)
 800275a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_UART_MspInit+0x110>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_UART_MspInit+0x110>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a34      	ldr	r2, [pc, #208]	; (8002844 <HAL_UART_MspInit+0x110>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_UART_MspInit+0x110>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0318 	add.w	r3, r7, #24
 8002796:	4619      	mov	r1, r3
 8002798:	482b      	ldr	r0, [pc, #172]	; (8002848 <HAL_UART_MspInit+0x114>)
 800279a:	f001 fb33 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800279e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 0318 	add.w	r3, r7, #24
 80027b0:	4619      	mov	r1, r3
 80027b2:	4825      	ldr	r0, [pc, #148]	; (8002848 <HAL_UART_MspInit+0x114>)
 80027b4:	f001 fb26 	bl	8003e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027b8:	e03e      	b.n	8002838 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_UART_MspInit+0x118>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d139      	bne.n	8002838 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_UART_MspInit+0x110>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_UART_MspInit+0x110>)
 80027ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ce:	61d3      	str	r3, [r2, #28]
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_UART_MspInit+0x110>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_UART_MspInit+0x110>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_UART_MspInit+0x110>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_UART_MspInit+0x110>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 0318 	add.w	r3, r7, #24
 8002806:	4619      	mov	r1, r3
 8002808:	4811      	ldr	r0, [pc, #68]	; (8002850 <HAL_UART_MspInit+0x11c>)
 800280a:	f001 fafb 	bl	8003e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800280e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 0318 	add.w	r3, r7, #24
 8002820:	4619      	mov	r1, r3
 8002822:	480b      	ldr	r0, [pc, #44]	; (8002850 <HAL_UART_MspInit+0x11c>)
 8002824:	f001 faee 	bl	8003e04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	2027      	movs	r0, #39	; 0x27
 800282e:	f001 f89e 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002832:	2027      	movs	r0, #39	; 0x27
 8002834:	f001 f8b7 	bl	80039a6 <HAL_NVIC_EnableIRQ>
}
 8002838:	bf00      	nop
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40013800 	.word	0x40013800
 8002844:	40021000 	.word	0x40021000
 8002848:	40010800 	.word	0x40010800
 800284c:	40004800 	.word	0x40004800
 8002850:	40010c00 	.word	0x40010c00

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <NMI_Handler+0x4>

0800285a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <MemManage_Handler+0x4>

08002866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <UsageFault_Handler+0x4>

08002872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
	...

08002898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <SysTick_Handler+0x38>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <SysTick_Handler+0x1c>
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <SysTick_Handler+0x38>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <SysTick_Handler+0x38>)
 80028b2:	801a      	strh	r2, [r3, #0]
		if (VCCTimeout>0) VCCTimeout--;
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <SysTick_Handler+0x3c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	dd04      	ble.n	80028c6 <SysTick_Handler+0x2e>
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Handler+0x3c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <SysTick_Handler+0x3c>)
 80028c4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c6:	f000 fa09 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20002914 	.word	0x20002914
 80028d4:	20000014 	.word	0x20000014

080028d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <DMA1_Channel1_IRQHandler+0x10>)
 80028de:	f001 f98b 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200022b4 	.word	0x200022b4

080028ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <ADC1_2_IRQHandler+0x10>)
 80028f2:	f000 fcf7 	bl	80032e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20002284 	.word	0x20002284

08002900 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <TIM1_UP_IRQHandler+0x10>)
 8002906:	f002 fa80 	bl	8004e0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20002350 	.word	0x20002350

08002914 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <USART3_IRQHandler+0x14>)
 800291a:	f000 f915 	bl	8002b48 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800291e:	4802      	ldr	r0, [pc, #8]	; (8002928 <USART3_IRQHandler+0x14>)
 8002920:	f002 feac 	bl	800567c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20002428 	.word	0x20002428

0800292c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
	return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <_kill>:

int _kill(int pid, int sig)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002944:	f006 ff10 	bl	8009768 <__errno>
 8002948:	4603      	mov	r3, r0
 800294a:	2216      	movs	r2, #22
 800294c:	601a      	str	r2, [r3, #0]
	return -1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_exit>:

void _exit (int status)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002962:	f04f 31ff 	mov.w	r1, #4294967295
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ffe7 	bl	800293a <_kill>
	while (1) {}		/* Make sure we hang here */
 800296c:	e7fe      	b.n	800296c <_exit+0x12>

0800296e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e00a      	b.n	8002996 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002980:	f3af 8000 	nop.w
 8002984:	4601      	mov	r1, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	60ba      	str	r2, [r7, #8]
 800298c:	b2ca      	uxtb	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	dbf0      	blt.n	8002980 <_read+0x12>
	}

return len;
 800299e:	687b      	ldr	r3, [r7, #4]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e009      	b.n	80029ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	60ba      	str	r2, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	dbf1      	blt.n	80029ba <_write+0x12>
	}
	return len;
 80029d6:	687b      	ldr	r3, [r7, #4]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_close>:

int _close(int file)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	return -1;
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a06:	605a      	str	r2, [r3, #4]
	return 0;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <_isatty>:

int _isatty(int file)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
	return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <_sbrk+0x5c>)
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <_sbrk+0x60>)
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <_sbrk+0x64>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <_sbrk+0x68>)
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d207      	bcs.n	8002a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a70:	f006 fe7a 	bl	8009768 <__errno>
 8002a74:	4603      	mov	r3, r0
 8002a76:	220c      	movs	r2, #12
 8002a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e009      	b.n	8002a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <_sbrk+0x64>)
 8002a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20005000 	.word	0x20005000
 8002aa0:	00000400 	.word	0x00000400
 8002aa4:	20002910 	.word	0x20002910
 8002aa8:	20002d78 	.word	0x20002d78

08002aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <Ringbuf_init+0x38>)
 8002abe:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <Ringbuf_init+0x3c>)
 8002ac0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <Ringbuf_init+0x40>)
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <Ringbuf_init+0x44>)
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <Ringbuf_init+0x48>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <Ringbuf_init+0x48>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <Ringbuf_init+0x48>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <Ringbuf_init+0x48>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0220 	orr.w	r2, r2, #32
 8002ae6:	60da      	str	r2, [r3, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	20002d28 	.word	0x20002d28
 8002af4:	20002918 	.word	0x20002918
 8002af8:	20002d2c 	.word	0x20002d2c
 8002afc:	20002b20 	.word	0x20002b20
 8002b00:	20002428 	.word	0x20002428

08002b04 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d009      	beq.n	8002b3e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	79f9      	ldrb	r1, [r7, #7]
 8002b34:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d013      	beq.n	8002b92 <Uart_isr+0x4a>
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <Uart_isr+0xb4>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ffba 	bl	8002b04 <store_char>
        return;
 8002b90:	e031      	b.n	8002bf6 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02c      	beq.n	8002bf6 <Uart_isr+0xae>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d027      	beq.n	8002bf6 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <Uart_isr+0xb8>)
 8002ba8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <Uart_isr+0xb8>)
 8002bae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d108      	bne.n	8002bc8 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002bc6:	e015      	b.n	8002bf4 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <Uart_isr+0xb8>)
 8002bca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bce:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <Uart_isr+0xb8>)
 8002bd0:	5cd3      	ldrb	r3, [r2, r3]
 8002bd2:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <Uart_isr+0xb8>)
 8002bd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <Uart_isr+0xb8>)
 8002be2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	7bba      	ldrb	r2, [r7, #14]
 8002bf2:	605a      	str	r2, [r3, #4]
    	return;
 8002bf4:	bf00      	nop
    }
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20002d28 	.word	0x20002d28
 8002c00:	20002b20 	.word	0x20002b20

08002c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c04:	f7ff ff52 	bl	8002aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c08:	480b      	ldr	r0, [pc, #44]	; (8002c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c0a:	490c      	ldr	r1, [pc, #48]	; (8002c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c20:	4c09      	ldr	r4, [pc, #36]	; (8002c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f006 fda1 	bl	8009774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c32:	f7fe fc01 	bl	8001438 <main>
  bx lr
 8002c36:	4770      	bx	lr
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002c40:	0800ed2c 	.word	0x0800ed2c
  ldr r2, =_sbss
 8002c44:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002c48:	20002d78 	.word	0x20002d78

08002c4c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <CAN1_RX1_IRQHandler>
	...

08002c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_Init+0x28>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <HAL_Init+0x28>)
 8002c5a:	f043 0310 	orr.w	r3, r3, #16
 8002c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c60:	2003      	movs	r0, #3
 8002c62:	f000 fe79 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c66:	200f      	movs	r0, #15
 8002c68:	f000 f808 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6c:	f7ff fc3c 	bl	80024e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40022000 	.word	0x40022000

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fe91 	bl	80039c2 <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f000 fe59 	bl	800396e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000018 	.word	0x20000018
 8002cd4:	20000020 	.word	0x20000020
 8002cd8:	2000001c 	.word	0x2000001c

08002cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_IncTick+0x1c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <HAL_IncTick+0x20>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000020 	.word	0x20000020
 8002cfc:	20002d30 	.word	0x20002d30

08002d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <HAL_GetTick+0x10>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	20002d30 	.word	0x20002d30

08002d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d005      	beq.n	8002d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_Delay+0x44>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d3a:	bf00      	nop
 8002d3c:	f7ff ffe0 	bl	8002d00 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f7      	bhi.n	8002d3c <HAL_Delay+0x28>
  {
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000020 	.word	0x20000020

08002d5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0be      	b.n	8002efc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fbd6 	bl	800254c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fcc3 	bl	800372c <ADC_ConversionStop_Disable>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 8099 	bne.w	8002eea <HAL_ADC_Init+0x18e>
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 8095 	bne.w	8002eea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dc8:	f023 0302 	bic.w	r3, r3, #2
 8002dcc:	f043 0202 	orr.w	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ddc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7b1b      	ldrb	r3, [r3, #12]
 8002de2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002de4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df4:	d003      	beq.n	8002dfe <HAL_ADC_Init+0xa2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_ADC_Init+0xa8>
 8002dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_Init+0xaa>
 8002e04:	2300      	movs	r3, #0
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7d1b      	ldrb	r3, [r3, #20]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d119      	bne.n	8002e48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7b1b      	ldrb	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	035a      	lsls	r2, r3, #13
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e00b      	b.n	8002e48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <HAL_ADC_Init+0x1a8>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e78:	d003      	beq.n	8002e82 <HAL_ADC_Init+0x126>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d104      	bne.n	8002e8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	051b      	lsls	r3, r3, #20
 8002e8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_ADC_Init+0x1ac>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d10b      	bne.n	8002ec8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ec6:	e018      	b.n	8002efa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f023 0312 	bic.w	r3, r3, #18
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ee8:	e007      	b.n	8002efa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	ffe1f7fd 	.word	0xffe1f7fd
 8002f08:	ff1f0efe 	.word	0xff1f0efe

08002f0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Start+0x1a>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e098      	b.n	8003058 <HAL_ADC_Start+0x14c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fba2 	bl	8003678 <ADC_Enable>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 8087 	bne.w	800304e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a41      	ldr	r2, [pc, #260]	; (8003060 <HAL_ADC_Start+0x154>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_Start+0x5e>
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_ADC_Start+0x158>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d115      	bne.n	8002f96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d026      	beq.n	8002fd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f94:	e01d      	b.n	8002fd2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <HAL_ADC_Start+0x158>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_ADC_Start+0xaa>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <HAL_ADC_Start+0x154>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10d      	bne.n	8002fd2 <HAL_ADC_Start+0xc6>
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_ADC_Start+0x158>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f023 0206 	bic.w	r2, r3, #6
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fea:	e002      	b.n	8002ff2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0202 	mvn.w	r2, #2
 8003002:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800300e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003012:	d113      	bne.n	800303c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003018:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_ADC_Start+0x154>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d105      	bne.n	800302a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_ADC_Start+0x158>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	e00c      	b.n	8003056 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e003      	b.n	8003056 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40012800 	.word	0x40012800
 8003064:	40012400 	.word	0x40012400

08003068 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADC_Stop+0x1a>
 800307e:	2302      	movs	r3, #2
 8003080:	e01a      	b.n	80030b8 <HAL_ADC_Stop+0x50>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fb4e 	bl	800372c <ADC_ConversionStop_Disable>
 8003090:	4603      	mov	r3, r0
 8003092:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80030d6:	f7ff fe13 	bl	8002d00 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0d3      	b.n	80032aa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d131      	bne.n	8003174 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	d12a      	bne.n	8003174 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800311e:	e021      	b.n	8003164 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d01d      	beq.n	8003164 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_ADC_PollForConversion+0x7e>
 800312e:	f7ff fde7 	bl	8002d00 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d212      	bcs.n	8003164 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0a2      	b.n	80032aa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0d6      	beq.n	8003120 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003172:	e070      	b.n	8003256 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003174:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <HAL_ADC_PollForConversion+0x1f4>)
 8003176:	681c      	ldr	r4, [r3, #0]
 8003178:	2002      	movs	r0, #2
 800317a:	f001 fcbd 	bl	8004af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800317e:	4603      	mov	r3, r0
 8003180:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6919      	ldr	r1, [r3, #16]
 800318a:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <HAL_ADC_PollForConversion+0x1f8>)
 800318c:	400b      	ands	r3, r1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x104>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68d9      	ldr	r1, [r3, #12]
 8003198:	4b48      	ldr	r3, [pc, #288]	; (80032bc <HAL_ADC_PollForConversion+0x1fc>)
 800319a:	400b      	ands	r3, r1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x104>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6919      	ldr	r1, [r3, #16]
 80031a6:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_ADC_PollForConversion+0x200>)
 80031a8:	400b      	ands	r3, r1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_ADC_PollForConversion+0x100>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68d9      	ldr	r1, [r3, #12]
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_ADC_PollForConversion+0x204>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_PollForConversion+0x100>
 80031bc:	2314      	movs	r3, #20
 80031be:	e020      	b.n	8003202 <HAL_ADC_PollForConversion+0x142>
 80031c0:	2329      	movs	r3, #41	; 0x29
 80031c2:	e01e      	b.n	8003202 <HAL_ADC_PollForConversion+0x142>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6919      	ldr	r1, [r3, #16]
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_ADC_PollForConversion+0x200>)
 80031cc:	400b      	ands	r3, r1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_ADC_PollForConversion+0x120>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68d9      	ldr	r1, [r3, #12]
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_ADC_PollForConversion+0x204>)
 80031da:	400b      	ands	r3, r1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <HAL_ADC_PollForConversion+0x13c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_ADC_PollForConversion+0x208>)
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <HAL_ADC_PollForConversion+0x140>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_ADC_PollForConversion+0x208>)
 80031f6:	400b      	ands	r3, r1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_PollForConversion+0x140>
 80031fc:	2354      	movs	r3, #84	; 0x54
 80031fe:	e000      	b.n	8003202 <HAL_ADC_PollForConversion+0x142>
 8003200:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003208:	e021      	b.n	800324e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d01a      	beq.n	8003248 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_ADC_PollForConversion+0x168>
 8003218:	f7ff fd72 	bl	8002d00 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d20f      	bcs.n	8003248 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	429a      	cmp	r2, r3
 800322e:	d90b      	bls.n	8003248 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e030      	b.n	80032aa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	429a      	cmp	r2, r3
 8003254:	d8d9      	bhi.n	800320a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0212 	mvn.w	r2, #18
 800325e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003276:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800327a:	d115      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003280:	2b00      	cmp	r3, #0
 8003282:	d111      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000018 	.word	0x20000018
 80032b8:	24924924 	.word	0x24924924
 80032bc:	00924924 	.word	0x00924924
 80032c0:	12492492 	.word	0x12492492
 80032c4:	00492492 	.word	0x00492492
 80032c8:	00249249 	.word	0x00249249

080032cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d03e      	beq.n	8003384 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d039      	beq.n	8003384 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003332:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003336:	d11d      	bne.n	8003374 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800333c:	2b00      	cmp	r3, #0
 800333e:	d119      	bne.n	8003374 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0220 	bic.w	r2, r2, #32
 800334e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f874 	bl	8003462 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0212 	mvn.w	r2, #18
 8003382:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04d      	beq.n	800342a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d048      	beq.n	800342a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80033ba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80033be:	d012      	beq.n	80033e6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d125      	bne.n	800341a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80033d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033dc:	d11d      	bne.n	800341a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f9c7 	bl	80037ae <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 020c 	mvn.w	r2, #12
 8003428:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f812 	bl	8003474 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0201 	mvn.w	r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
	...

08003488 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x20>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0dc      	b.n	8003662 <HAL_ADC_ConfigChannel+0x1da>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d81c      	bhi.n	80034f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b05      	subs	r3, #5
 80034ca:	221f      	movs	r2, #31
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	4019      	ands	r1, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	3b05      	subs	r3, #5
 80034e4:	fa00 f203 	lsl.w	r2, r0, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34
 80034f0:	e03c      	b.n	800356c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d81c      	bhi.n	8003534 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b23      	subs	r3, #35	; 0x23
 800350c:	221f      	movs	r2, #31
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	4019      	ands	r1, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	3b23      	subs	r3, #35	; 0x23
 8003526:	fa00 f203 	lsl.w	r2, r0, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
 8003532:	e01b      	b.n	800356c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	3b41      	subs	r3, #65	; 0x41
 8003546:	221f      	movs	r2, #31
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	4019      	ands	r1, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b41      	subs	r3, #65	; 0x41
 8003560:	fa00 f203 	lsl.w	r2, r0, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b09      	cmp	r3, #9
 8003572:	d91c      	bls.n	80035ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68d9      	ldr	r1, [r3, #12]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	3b1e      	subs	r3, #30
 8003586:	2207      	movs	r2, #7
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	4019      	ands	r1, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6898      	ldr	r0, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	3b1e      	subs	r3, #30
 80035a0:	fa00 f203 	lsl.w	r2, r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	e019      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6919      	ldr	r1, [r3, #16]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	2207      	movs	r2, #7
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	4019      	ands	r1, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6898      	ldr	r0, [r3, #8]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	fa00 f203 	lsl.w	r2, r0, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d003      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d132      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_ADC_ConfigChannel+0x1e4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d125      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d126      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003618:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b10      	cmp	r3, #16
 8003620:	d11a      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <HAL_ADC_ConfigChannel+0x1e8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a13      	ldr	r2, [pc, #76]	; (8003674 <HAL_ADC_ConfigChannel+0x1ec>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	0c9a      	lsrs	r2, r3, #18
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003638:	e002      	b.n	8003640 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	3b01      	subs	r3, #1
 800363e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f9      	bne.n	800363a <HAL_ADC_ConfigChannel+0x1b2>
 8003646:	e007      	b.n	8003658 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	40012400 	.word	0x40012400
 8003670:	20000018 	.word	0x20000018
 8003674:	431bde83 	.word	0x431bde83

08003678 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d040      	beq.n	8003718 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <ADC_Enable+0xac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <ADC_Enable+0xb0>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	0c9b      	lsrs	r3, r3, #18
 80036b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036b4:	e002      	b.n	80036bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f9      	bne.n	80036b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036c2:	f7ff fb1d 	bl	8002d00 <HAL_GetTick>
 80036c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036c8:	e01f      	b.n	800370a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ca:	f7ff fb19 	bl	8002d00 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d918      	bls.n	800370a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d011      	beq.n	800370a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e007      	b.n	800371a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d1d8      	bne.n	80036ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000018 	.word	0x20000018
 8003728:	431bde83 	.word	0x431bde83

0800372c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d12e      	bne.n	80037a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003756:	f7ff fad3 	bl	8002d00 <HAL_GetTick>
 800375a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800375c:	e01b      	b.n	8003796 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800375e:	f7ff facf 	bl	8002d00 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d914      	bls.n	8003796 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10d      	bne.n	8003796 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	f043 0210 	orr.w	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d0dc      	beq.n	800375e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4906      	ldr	r1, [pc, #24]	; (8003858 <__NVIC_EnableIRQ+0x34>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100

0800385c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386c:	2b00      	cmp	r3, #0
 800386e:	db0a      	blt.n	8003886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	490c      	ldr	r1, [pc, #48]	; (80038a8 <__NVIC_SetPriority+0x4c>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	0112      	lsls	r2, r2, #4
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	440b      	add	r3, r1
 8003880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003884:	e00a      	b.n	800389c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4908      	ldr	r1, [pc, #32]	; (80038ac <__NVIC_SetPriority+0x50>)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	3b04      	subs	r3, #4
 8003894:	0112      	lsls	r2, r2, #4
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	440b      	add	r3, r1
 800389a:	761a      	strb	r2, [r3, #24]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000e100 	.word	0xe000e100
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f1c3 0307 	rsb	r3, r3, #7
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	bf28      	it	cs
 80038ce:	2304      	movcs	r3, #4
 80038d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d902      	bls.n	80038e0 <NVIC_EncodePriority+0x30>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3b03      	subs	r3, #3
 80038de:	e000      	b.n	80038e2 <NVIC_EncodePriority+0x32>
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	401a      	ands	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f8:	f04f 31ff 	mov.w	r1, #4294967295
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	43d9      	mvns	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	4313      	orrs	r3, r2
         );
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	; 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003924:	d301      	bcc.n	800392a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003926:	2301      	movs	r3, #1
 8003928:	e00f      	b.n	800394a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <SysTick_Config+0x40>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003932:	210f      	movs	r1, #15
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	f7ff ff90 	bl	800385c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SysTick_Config+0x40>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <SysTick_Config+0x40>)
 8003944:	2207      	movs	r2, #7
 8003946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	e000e010 	.word	0xe000e010

08003958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff2d 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003980:	f7ff ff42 	bl	8003808 <__NVIC_GetPriorityGrouping>
 8003984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7ff ff90 	bl	80038b0 <NVIC_EncodePriority>
 8003990:	4602      	mov	r2, r0
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff5f 	bl	800385c <__NVIC_SetPriority>
}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff35 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffa2 	bl	8003914 <SysTick_Config>
 80039d0:	4603      	mov	r3, r0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e043      	b.n	8003a7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <HAL_DMA_Init+0xa8>)
 80039fa:	4413      	add	r3, r2
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_DMA_Init+0xac>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	009a      	lsls	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <HAL_DMA_Init+0xb0>)
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	bffdfff8 	.word	0xbffdfff8
 8003a88:	cccccccd 	.word	0xcccccccd
 8003a8c:	40020000 	.word	0x40020000

08003a90 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d008      	beq.n	8003aba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e020      	b.n	8003afc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 020e 	bic.w	r2, r2, #14
 8003ac8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d005      	beq.n	8003b2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	e051      	b.n	8003bd0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 020e 	bic.w	r2, r2, #14
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a22      	ldr	r2, [pc, #136]	; (8003bdc <HAL_DMA_Abort_IT+0xd4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d029      	beq.n	8003baa <HAL_DMA_Abort_IT+0xa2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	; (8003be0 <HAL_DMA_Abort_IT+0xd8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x9e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <HAL_DMA_Abort_IT+0xdc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01a      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0x98>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_DMA_Abort_IT+0xe0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d012      	beq.n	8003b9a <HAL_DMA_Abort_IT+0x92>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_DMA_Abort_IT+0xe4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00a      	beq.n	8003b94 <HAL_DMA_Abort_IT+0x8c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <HAL_DMA_Abort_IT+0xe8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d102      	bne.n	8003b8e <HAL_DMA_Abort_IT+0x86>
 8003b88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b8c:	e00e      	b.n	8003bac <HAL_DMA_Abort_IT+0xa4>
 8003b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b92:	e00b      	b.n	8003bac <HAL_DMA_Abort_IT+0xa4>
 8003b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b98:	e008      	b.n	8003bac <HAL_DMA_Abort_IT+0xa4>
 8003b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b9e:	e005      	b.n	8003bac <HAL_DMA_Abort_IT+0xa4>
 8003ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ba4:	e002      	b.n	8003bac <HAL_DMA_Abort_IT+0xa4>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	e000      	b.n	8003bac <HAL_DMA_Abort_IT+0xa4>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <HAL_DMA_Abort_IT+0xec>)
 8003bae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
    } 
  }
  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40020008 	.word	0x40020008
 8003be0:	4002001c 	.word	0x4002001c
 8003be4:	40020030 	.word	0x40020030
 8003be8:	40020044 	.word	0x40020044
 8003bec:	40020058 	.word	0x40020058
 8003bf0:	4002006c 	.word	0x4002006c
 8003bf4:	40020000 	.word	0x40020000

08003bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2204      	movs	r2, #4
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d04f      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0xc8>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d04a      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a66      	ldr	r2, [pc, #408]	; (8003de8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d029      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xae>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a65      	ldr	r2, [pc, #404]	; (8003dec <HAL_DMA_IRQHandler+0x1f4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0xaa>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <HAL_DMA_IRQHandler+0x1f8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01a      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xa4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a62      	ldr	r2, [pc, #392]	; (8003df4 <HAL_DMA_IRQHandler+0x1fc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d012      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x9e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a60      	ldr	r2, [pc, #384]	; (8003df8 <HAL_DMA_IRQHandler+0x200>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00a      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x98>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	; (8003dfc <HAL_DMA_IRQHandler+0x204>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d102      	bne.n	8003c8a <HAL_DMA_IRQHandler+0x92>
 8003c84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c88:	e00e      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xb0>
 8003c8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c8e:	e00b      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xb0>
 8003c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c94:	e008      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xb0>
 8003c96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c9a:	e005      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xb0>
 8003c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca0:	e002      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xb0>
 8003ca2:	2340      	movs	r3, #64	; 0x40
 8003ca4:	e000      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xb0>
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	4a55      	ldr	r2, [pc, #340]	; (8003e00 <HAL_DMA_IRQHandler+0x208>)
 8003caa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8094 	beq.w	8003dde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cbe:	e08e      	b.n	8003dde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d056      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x186>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d051      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020a 	bic.w	r2, r2, #10
 8003cf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <HAL_DMA_IRQHandler+0x1f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d029      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x166>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a37      	ldr	r2, [pc, #220]	; (8003dec <HAL_DMA_IRQHandler+0x1f4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x162>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <HAL_DMA_IRQHandler+0x1f8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01a      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x15c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a34      	ldr	r2, [pc, #208]	; (8003df4 <HAL_DMA_IRQHandler+0x1fc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d012      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x156>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <HAL_DMA_IRQHandler+0x200>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00a      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x150>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <HAL_DMA_IRQHandler+0x204>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d102      	bne.n	8003d42 <HAL_DMA_IRQHandler+0x14a>
 8003d3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d40:	e00e      	b.n	8003d60 <HAL_DMA_IRQHandler+0x168>
 8003d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d46:	e00b      	b.n	8003d60 <HAL_DMA_IRQHandler+0x168>
 8003d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d4c:	e008      	b.n	8003d60 <HAL_DMA_IRQHandler+0x168>
 8003d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d52:	e005      	b.n	8003d60 <HAL_DMA_IRQHandler+0x168>
 8003d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d58:	e002      	b.n	8003d60 <HAL_DMA_IRQHandler+0x168>
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_IRQHandler+0x168>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <HAL_DMA_IRQHandler+0x208>)
 8003d62:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d034      	beq.n	8003dde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d7c:	e02f      	b.n	8003dde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2208      	movs	r2, #8
 8003d84:	409a      	lsls	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d028      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x1e8>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d023      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 020e 	bic.w	r2, r2, #14
 8003da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f202 	lsl.w	r2, r1, r2
 8003db6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
    }
  }
  return;
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
}
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40020008 	.word	0x40020008
 8003dec:	4002001c 	.word	0x4002001c
 8003df0:	40020030 	.word	0x40020030
 8003df4:	40020044 	.word	0x40020044
 8003df8:	40020058 	.word	0x40020058
 8003dfc:	4002006c 	.word	0x4002006c
 8003e00:	40020000 	.word	0x40020000

08003e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b08b      	sub	sp, #44	; 0x2c
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	e169      	b.n	80040ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e18:	2201      	movs	r2, #1
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f040 8158 	bne.w	80040e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4a9a      	ldr	r2, [pc, #616]	; (80040a4 <HAL_GPIO_Init+0x2a0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d05e      	beq.n	8003efe <HAL_GPIO_Init+0xfa>
 8003e40:	4a98      	ldr	r2, [pc, #608]	; (80040a4 <HAL_GPIO_Init+0x2a0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d875      	bhi.n	8003f32 <HAL_GPIO_Init+0x12e>
 8003e46:	4a98      	ldr	r2, [pc, #608]	; (80040a8 <HAL_GPIO_Init+0x2a4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d058      	beq.n	8003efe <HAL_GPIO_Init+0xfa>
 8003e4c:	4a96      	ldr	r2, [pc, #600]	; (80040a8 <HAL_GPIO_Init+0x2a4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d86f      	bhi.n	8003f32 <HAL_GPIO_Init+0x12e>
 8003e52:	4a96      	ldr	r2, [pc, #600]	; (80040ac <HAL_GPIO_Init+0x2a8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d052      	beq.n	8003efe <HAL_GPIO_Init+0xfa>
 8003e58:	4a94      	ldr	r2, [pc, #592]	; (80040ac <HAL_GPIO_Init+0x2a8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d869      	bhi.n	8003f32 <HAL_GPIO_Init+0x12e>
 8003e5e:	4a94      	ldr	r2, [pc, #592]	; (80040b0 <HAL_GPIO_Init+0x2ac>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d04c      	beq.n	8003efe <HAL_GPIO_Init+0xfa>
 8003e64:	4a92      	ldr	r2, [pc, #584]	; (80040b0 <HAL_GPIO_Init+0x2ac>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d863      	bhi.n	8003f32 <HAL_GPIO_Init+0x12e>
 8003e6a:	4a92      	ldr	r2, [pc, #584]	; (80040b4 <HAL_GPIO_Init+0x2b0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d046      	beq.n	8003efe <HAL_GPIO_Init+0xfa>
 8003e70:	4a90      	ldr	r2, [pc, #576]	; (80040b4 <HAL_GPIO_Init+0x2b0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d85d      	bhi.n	8003f32 <HAL_GPIO_Init+0x12e>
 8003e76:	2b12      	cmp	r3, #18
 8003e78:	d82a      	bhi.n	8003ed0 <HAL_GPIO_Init+0xcc>
 8003e7a:	2b12      	cmp	r3, #18
 8003e7c:	d859      	bhi.n	8003f32 <HAL_GPIO_Init+0x12e>
 8003e7e:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <HAL_GPIO_Init+0x80>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003eff 	.word	0x08003eff
 8003e88:	08003ed9 	.word	0x08003ed9
 8003e8c:	08003eeb 	.word	0x08003eeb
 8003e90:	08003f2d 	.word	0x08003f2d
 8003e94:	08003f33 	.word	0x08003f33
 8003e98:	08003f33 	.word	0x08003f33
 8003e9c:	08003f33 	.word	0x08003f33
 8003ea0:	08003f33 	.word	0x08003f33
 8003ea4:	08003f33 	.word	0x08003f33
 8003ea8:	08003f33 	.word	0x08003f33
 8003eac:	08003f33 	.word	0x08003f33
 8003eb0:	08003f33 	.word	0x08003f33
 8003eb4:	08003f33 	.word	0x08003f33
 8003eb8:	08003f33 	.word	0x08003f33
 8003ebc:	08003f33 	.word	0x08003f33
 8003ec0:	08003f33 	.word	0x08003f33
 8003ec4:	08003f33 	.word	0x08003f33
 8003ec8:	08003ee1 	.word	0x08003ee1
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	4a79      	ldr	r2, [pc, #484]	; (80040b8 <HAL_GPIO_Init+0x2b4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ed6:	e02c      	b.n	8003f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	623b      	str	r3, [r7, #32]
          break;
 8003ede:	e029      	b.n	8003f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	623b      	str	r3, [r7, #32]
          break;
 8003ee8:	e024      	b.n	8003f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	623b      	str	r3, [r7, #32]
          break;
 8003ef2:	e01f      	b.n	8003f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	623b      	str	r3, [r7, #32]
          break;
 8003efc:	e01a      	b.n	8003f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f06:	2304      	movs	r3, #4
 8003f08:	623b      	str	r3, [r7, #32]
          break;
 8003f0a:	e013      	b.n	8003f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f14:	2308      	movs	r3, #8
 8003f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	611a      	str	r2, [r3, #16]
          break;
 8003f1e:	e009      	b.n	8003f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f20:	2308      	movs	r3, #8
 8003f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	615a      	str	r2, [r3, #20]
          break;
 8003f2a:	e003      	b.n	8003f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
          break;
 8003f30:	e000      	b.n	8003f34 <HAL_GPIO_Init+0x130>
          break;
 8003f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2bff      	cmp	r3, #255	; 0xff
 8003f38:	d801      	bhi.n	8003f3e <HAL_GPIO_Init+0x13a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	e001      	b.n	8003f42 <HAL_GPIO_Init+0x13e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2bff      	cmp	r3, #255	; 0xff
 8003f48:	d802      	bhi.n	8003f50 <HAL_GPIO_Init+0x14c>
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	e002      	b.n	8003f56 <HAL_GPIO_Init+0x152>
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	3b08      	subs	r3, #8
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	210f      	movs	r1, #15
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	6a39      	ldr	r1, [r7, #32]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	431a      	orrs	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80b1 	beq.w	80040e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f84:	4b4d      	ldr	r3, [pc, #308]	; (80040bc <HAL_GPIO_Init+0x2b8>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	4a4c      	ldr	r2, [pc, #304]	; (80040bc <HAL_GPIO_Init+0x2b8>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6193      	str	r3, [r2, #24]
 8003f90:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <HAL_GPIO_Init+0x2b8>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f9c:	4a48      	ldr	r2, [pc, #288]	; (80040c0 <HAL_GPIO_Init+0x2bc>)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a40      	ldr	r2, [pc, #256]	; (80040c4 <HAL_GPIO_Init+0x2c0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_GPIO_Init+0x1ec>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <HAL_GPIO_Init+0x2c4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00d      	beq.n	8003fec <HAL_GPIO_Init+0x1e8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3e      	ldr	r2, [pc, #248]	; (80040cc <HAL_GPIO_Init+0x2c8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <HAL_GPIO_Init+0x1e4>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <HAL_GPIO_Init+0x2cc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_GPIO_Init+0x1e0>
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e006      	b.n	8003ff2 <HAL_GPIO_Init+0x1ee>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	e004      	b.n	8003ff2 <HAL_GPIO_Init+0x1ee>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e002      	b.n	8003ff2 <HAL_GPIO_Init+0x1ee>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_GPIO_Init+0x1ee>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff4:	f002 0203 	and.w	r2, r2, #3
 8003ff8:	0092      	lsls	r2, r2, #2
 8003ffa:	4093      	lsls	r3, r2
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004002:	492f      	ldr	r1, [pc, #188]	; (80040c0 <HAL_GPIO_Init+0x2bc>)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	3302      	adds	r3, #2
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800401c:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	492c      	ldr	r1, [pc, #176]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	43db      	mvns	r3, r3
 8004032:	4928      	ldr	r1, [pc, #160]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 8004034:	4013      	ands	r3, r2
 8004036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	4922      	ldr	r1, [pc, #136]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
 8004050:	e006      	b.n	8004060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	43db      	mvns	r3, r3
 800405a:	491e      	ldr	r1, [pc, #120]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 800405c:	4013      	ands	r3, r2
 800405e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	4918      	ldr	r1, [pc, #96]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
 8004078:	e006      	b.n	8004088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800407a:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	43db      	mvns	r3, r3
 8004082:	4914      	ldr	r1, [pc, #80]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 8004084:	4013      	ands	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d021      	beq.n	80040d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	490e      	ldr	r1, [pc, #56]	; (80040d4 <HAL_GPIO_Init+0x2d0>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	e021      	b.n	80040e6 <HAL_GPIO_Init+0x2e2>
 80040a2:	bf00      	nop
 80040a4:	10320000 	.word	0x10320000
 80040a8:	10310000 	.word	0x10310000
 80040ac:	10220000 	.word	0x10220000
 80040b0:	10210000 	.word	0x10210000
 80040b4:	10120000 	.word	0x10120000
 80040b8:	10110000 	.word	0x10110000
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40010800 	.word	0x40010800
 80040c8:	40010c00 	.word	0x40010c00
 80040cc:	40011000 	.word	0x40011000
 80040d0:	40011400 	.word	0x40011400
 80040d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_GPIO_Init+0x304>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	43db      	mvns	r3, r3
 80040e0:	4909      	ldr	r1, [pc, #36]	; (8004108 <HAL_GPIO_Init+0x304>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	3301      	adds	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f47f ae8e 	bne.w	8003e18 <HAL_GPIO_Init+0x14>
  }
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	372c      	adds	r7, #44	; 0x2c
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	40010400 	.word	0x40010400

0800410c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e001      	b.n	800412e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	807b      	strh	r3, [r7, #2]
 8004146:	4613      	mov	r3, r2
 8004148:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800414a:	787b      	ldrb	r3, [r7, #1]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004156:	e003      	b.n	8004160 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	041a      	lsls	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	611a      	str	r2, [r3, #16]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
	...

0800416c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e272      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8087 	beq.w	800429a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800418c:	4b92      	ldr	r3, [pc, #584]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b04      	cmp	r3, #4
 8004196:	d00c      	beq.n	80041b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004198:	4b8f      	ldr	r3, [pc, #572]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d112      	bne.n	80041ca <HAL_RCC_OscConfig+0x5e>
 80041a4:	4b8c      	ldr	r3, [pc, #560]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d10b      	bne.n	80041ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b2:	4b89      	ldr	r3, [pc, #548]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d06c      	beq.n	8004298 <HAL_RCC_OscConfig+0x12c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d168      	bne.n	8004298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e24c      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x76>
 80041d4:	4b80      	ldr	r3, [pc, #512]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a7f      	ldr	r2, [pc, #508]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e02e      	b.n	8004240 <HAL_RCC_OscConfig+0xd4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x98>
 80041ea:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7a      	ldr	r2, [pc, #488]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b78      	ldr	r3, [pc, #480]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a77      	ldr	r2, [pc, #476]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e01d      	b.n	8004240 <HAL_RCC_OscConfig+0xd4>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0xbc>
 800420e:	4b72      	ldr	r3, [pc, #456]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a71      	ldr	r2, [pc, #452]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b6f      	ldr	r3, [pc, #444]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a6e      	ldr	r2, [pc, #440]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0xd4>
 8004228:	4b6b      	ldr	r3, [pc, #428]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6a      	ldr	r2, [pc, #424]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a67      	ldr	r2, [pc, #412]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800423a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fe fd5a 	bl	8002d00 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004250:	f7fe fd56 	bl	8002d00 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e200      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xe4>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fe fd46 	bl	8002d00 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7fe fd42 	bl	8002d00 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1ec      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x10c>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d063      	beq.n	800436e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a6:	4b4c      	ldr	r3, [pc, #304]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042b2:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d11c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x18c>
 80042be:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d116      	bne.n	80042f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x176>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e1c0      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e2:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4939      	ldr	r1, [pc, #228]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	e03a      	b.n	800436e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <HAL_RCC_OscConfig+0x270>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004306:	f7fe fcfb 	bl	8002d00 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430e:	f7fe fcf7 	bl	8002d00 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e1a1      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4927      	ldr	r1, [pc, #156]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004342:	4b26      	ldr	r3, [pc, #152]	; (80043dc <HAL_RCC_OscConfig+0x270>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe fcda 	bl	8002d00 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fe fcd6 	bl	8002d00 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e180      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d03a      	beq.n	80043f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d019      	beq.n	80043b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004388:	f7fe fcba 	bl	8002d00 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004390:	f7fe fcb6 	bl	8002d00 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e160      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ae:	2001      	movs	r0, #1
 80043b0:	f000 face 	bl	8004950 <RCC_Delay>
 80043b4:	e01c      	b.n	80043f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043bc:	f7fe fca0 	bl	8002d00 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c2:	e00f      	b.n	80043e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fe fc9c 	bl	8002d00 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d908      	bls.n	80043e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e146      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	42420000 	.word	0x42420000
 80043e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e4:	4b92      	ldr	r3, [pc, #584]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e9      	bne.n	80043c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80a6 	beq.w	800454a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b8b      	ldr	r3, [pc, #556]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4a87      	ldr	r2, [pc, #540]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	61d3      	str	r3, [r2, #28]
 800441a:	4b85      	ldr	r3, [pc, #532]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	4b82      	ldr	r3, [pc, #520]	; (8004634 <HAL_RCC_OscConfig+0x4c8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d118      	bne.n	8004468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004436:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <HAL_RCC_OscConfig+0x4c8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7e      	ldr	r2, [pc, #504]	; (8004634 <HAL_RCC_OscConfig+0x4c8>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004442:	f7fe fc5d 	bl	8002d00 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fe fc59 	bl	8002d00 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b64      	cmp	r3, #100	; 0x64
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e103      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	4b75      	ldr	r3, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x4c8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x312>
 8004470:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	4a6e      	ldr	r2, [pc, #440]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6213      	str	r3, [r2, #32]
 800447c:	e02d      	b.n	80044da <HAL_RCC_OscConfig+0x36e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x334>
 8004486:	4b6a      	ldr	r3, [pc, #424]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	4a69      	ldr	r2, [pc, #420]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6213      	str	r3, [r2, #32]
 8004492:	4b67      	ldr	r3, [pc, #412]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4a66      	ldr	r2, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	f023 0304 	bic.w	r3, r3, #4
 800449c:	6213      	str	r3, [r2, #32]
 800449e:	e01c      	b.n	80044da <HAL_RCC_OscConfig+0x36e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCC_OscConfig+0x356>
 80044a8:	4b61      	ldr	r3, [pc, #388]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	4a60      	ldr	r2, [pc, #384]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044ae:	f043 0304 	orr.w	r3, r3, #4
 80044b2:	6213      	str	r3, [r2, #32]
 80044b4:	4b5e      	ldr	r3, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4a5d      	ldr	r2, [pc, #372]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	e00b      	b.n	80044da <HAL_RCC_OscConfig+0x36e>
 80044c2:	4b5b      	ldr	r3, [pc, #364]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a5a      	ldr	r2, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a57      	ldr	r2, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d015      	beq.n	800450e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fe fc0d 	bl	8002d00 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fe fc09 	bl	8002d00 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0b1      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ee      	beq.n	80044ea <HAL_RCC_OscConfig+0x37e>
 800450c:	e014      	b.n	8004538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450e:	f7fe fbf7 	bl	8002d00 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004514:	e00a      	b.n	800452c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fe fbf3 	bl	8002d00 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f241 3288 	movw	r2, #5000	; 0x1388
 8004524:	4293      	cmp	r3, r2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e09b      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452c:	4b40      	ldr	r3, [pc, #256]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ee      	bne.n	8004516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d105      	bne.n	800454a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	4b3c      	ldr	r3, [pc, #240]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	4a3b      	ldr	r2, [pc, #236]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8087 	beq.w	8004662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b08      	cmp	r3, #8
 800455e:	d061      	beq.n	8004624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d146      	bne.n	80045f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_RCC_OscConfig+0x4cc>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456e:	f7fe fbc7 	bl	8002d00 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004576:	f7fe fbc3 	bl	8002d00 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e06d      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004588:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d108      	bne.n	80045b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4921      	ldr	r1, [pc, #132]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045b0:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a19      	ldr	r1, [r3, #32]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	430b      	orrs	r3, r1
 80045c2:	491b      	ldr	r1, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fe fb97 	bl	8002d00 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fe fb93 	bl	8002d00 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e03d      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x46a>
 80045f4:	e035      	b.n	8004662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCC_OscConfig+0x4cc>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fe fb80 	bl	8002d00 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fe fb7c 	bl	8002d00 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e026      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x498>
 8004622:	e01e      	b.n	8004662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e019      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
 8004638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_OscConfig+0x500>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	429a      	cmp	r2, r3
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d001      	beq.n	8004662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40021000 	.word	0x40021000

08004670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0d0      	b.n	8004826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004684:	4b6a      	ldr	r3, [pc, #424]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d910      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b67      	ldr	r3, [pc, #412]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 0207 	bic.w	r2, r3, #7
 800469a:	4965      	ldr	r1, [pc, #404]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b63      	ldr	r3, [pc, #396]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0b8      	b.n	8004826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046cc:	4b59      	ldr	r3, [pc, #356]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a58      	ldr	r2, [pc, #352]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e4:	4b53      	ldr	r3, [pc, #332]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f0:	4b50      	ldr	r3, [pc, #320]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	494d      	ldr	r1, [pc, #308]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d040      	beq.n	8004790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d115      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e07f      	b.n	8004826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472e:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e073      	b.n	8004826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473e:	4b3d      	ldr	r3, [pc, #244]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e06b      	b.n	8004826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474e:	4b39      	ldr	r3, [pc, #228]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4936      	ldr	r1, [pc, #216]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004760:	f7fe face 	bl	8002d00 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	e00a      	b.n	800477e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004768:	f7fe faca 	bl	8002d00 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e053      	b.n	8004826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 020c 	and.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	429a      	cmp	r2, r3
 800478e:	d1eb      	bne.n	8004768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d210      	bcs.n	80047c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 0207 	bic.w	r2, r3, #7
 80047a6:	4922      	ldr	r1, [pc, #136]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e032      	b.n	8004826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4916      	ldr	r1, [pc, #88]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	490e      	ldr	r1, [pc, #56]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047fe:	f000 f821 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8004802:	4602      	mov	r2, r0
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	490a      	ldr	r1, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004810:	5ccb      	ldrb	r3, [r1, r3]
 8004812:	fa22 f303 	lsr.w	r3, r2, r3
 8004816:	4a09      	ldr	r2, [pc, #36]	; (800483c <HAL_RCC_ClockConfig+0x1cc>)
 8004818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800481a:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_ClockConfig+0x1d0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fa2c 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40022000 	.word	0x40022000
 8004834:	40021000 	.word	0x40021000
 8004838:	0800e7c0 	.word	0x0800e7c0
 800483c:	20000018 	.word	0x20000018
 8004840:	2000001c 	.word	0x2000001c

08004844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800485e:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b04      	cmp	r3, #4
 800486c:	d002      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x30>
 800486e:	2b08      	cmp	r3, #8
 8004870:	d003      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0x36>
 8004872:	e027      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_GetSysClockFreq+0x98>)
 8004876:	613b      	str	r3, [r7, #16]
      break;
 8004878:	e027      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	0c9b      	lsrs	r3, r3, #18
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	4a17      	ldr	r2, [pc, #92]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004884:	5cd3      	ldrb	r3, [r2, r3]
 8004886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	0c5b      	lsrs	r3, r3, #17
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <HAL_RCC_GetSysClockFreq+0x98>)
 80048a6:	fb03 f202 	mul.w	r2, r3, r2
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e004      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	613b      	str	r3, [r7, #16]
      break;
 80048c2:	e002      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_RCC_GetSysClockFreq+0x98>)
 80048c6:	613b      	str	r3, [r7, #16]
      break;
 80048c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ca:	693b      	ldr	r3, [r7, #16]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	007a1200 	.word	0x007a1200
 80048e0:	0800e7d8 	.word	0x0800e7d8
 80048e4:	0800e7e8 	.word	0x0800e7e8
 80048e8:	003d0900 	.word	0x003d0900

080048ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f0:	4b02      	ldr	r3, [pc, #8]	; (80048fc <HAL_RCC_GetHCLKFreq+0x10>)
 80048f2:	681b      	ldr	r3, [r3, #0]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	20000018 	.word	0x20000018

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004904:	f7ff fff2 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4903      	ldr	r1, [pc, #12]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	0800e7d0 	.word	0x0800e7d0

08004928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800492c:	f7ff ffde 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	0adb      	lsrs	r3, r3, #11
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4903      	ldr	r1, [pc, #12]	; (800494c <HAL_RCC_GetPCLK2Freq+0x24>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	0800e7d0 	.word	0x0800e7d0

08004950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <RCC_Delay+0x34>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <RCC_Delay+0x38>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0a5b      	lsrs	r3, r3, #9
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800496c:	bf00      	nop
  }
  while (Delay --);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	60fa      	str	r2, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f9      	bne.n	800496c <RCC_Delay+0x1c>
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	20000018 	.word	0x20000018
 8004988:	10624dd3 	.word	0x10624dd3

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d07d      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ac:	4b4f      	ldr	r3, [pc, #316]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10d      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	61d3      	str	r3, [r2, #28]
 80049c4:	4b49      	ldr	r3, [pc, #292]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d4:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d118      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a42      	ldr	r2, [pc, #264]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ec:	f7fe f988 	bl	8002d00 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f2:	e008      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f4:	f7fe f984 	bl	8002d00 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e06d      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a06:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02e      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d027      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a30:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d014      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fe f953 	bl	8002d00 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fe f94f 	bl	8002d00 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e036      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ee      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4917      	ldr	r1, [pc, #92]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a98:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	490b      	ldr	r1, [pc, #44]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4904      	ldr	r1, [pc, #16]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40007000 	.word	0x40007000
 8004af4:	42420440 	.word	0x42420440

08004af8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	f200 808a 	bhi.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d045      	beq.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d075      	beq.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004b2e:	e082      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004b30:	4b46      	ldr	r3, [pc, #280]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004b36:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d07b      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	0c9b      	lsrs	r3, r3, #18
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	4a41      	ldr	r2, [pc, #260]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004b4c:	5cd3      	ldrb	r3, [r2, r3]
 8004b4e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d015      	beq.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b5a:	4b3c      	ldr	r3, [pc, #240]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	0c5b      	lsrs	r3, r3, #17
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	4a3b      	ldr	r2, [pc, #236]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004b66:	5cd3      	ldrb	r3, [r2, r3]
 8004b68:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00d      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b74:	4a38      	ldr	r2, [pc, #224]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	e004      	b.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4a34      	ldr	r2, [pc, #208]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004b90:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9c:	d102      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	61bb      	str	r3, [r7, #24]
      break;
 8004ba2:	e04a      	b.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4a2d      	ldr	r2, [pc, #180]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	61bb      	str	r3, [r7, #24]
      break;
 8004bb2:	e042      	b.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004bb4:	4b25      	ldr	r3, [pc, #148]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc4:	d108      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e01f      	b.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be2:	d109      	bne.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004bf0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e00f      	b.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d11c      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c04:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d016      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004c10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c14:	61bb      	str	r3, [r7, #24]
      break;
 8004c16:	e012      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c18:	e011      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c1a:	f7ff fe85 	bl	8004928 <HAL_RCC_GetPCLK2Freq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	0b9b      	lsrs	r3, r3, #14
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	61bb      	str	r3, [r7, #24]
      break;
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c3e:	bf00      	nop
    }
  }
  return (frequency);
 8004c40:	69bb      	ldr	r3, [r7, #24]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	0800e7ec 	.word	0x0800e7ec
 8004c54:	0800e7fc 	.word	0x0800e7fc
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	003d0900 	.word	0x003d0900
 8004c60:	aaaaaaab 	.word	0xaaaaaaab

08004c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e076      	b.n	8004d64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d108      	bne.n	8004c90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c86:	d009      	beq.n	8004c9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	61da      	str	r2, [r3, #28]
 8004c8e:	e005      	b.n	8004c9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fd fcb8 	bl	800262c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	0c1a      	lsrs	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f002 0204 	and.w	r2, r2, #4
 8004d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e041      	b.n	8004e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd fc94 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 fa2a 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d122      	bne.n	8004e66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d11b      	bne.n	8004e66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f06f 0202 	mvn.w	r2, #2
 8004e36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f9bd 	bl	80051cc <HAL_TIM_IC_CaptureCallback>
 8004e52:	e005      	b.n	8004e60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f9b0 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f9bf 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d122      	bne.n	8004eba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d11b      	bne.n	8004eba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f06f 0204 	mvn.w	r2, #4
 8004e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f993 	bl	80051cc <HAL_TIM_IC_CaptureCallback>
 8004ea6:	e005      	b.n	8004eb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f986 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f995 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d122      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d11b      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f06f 0208 	mvn.w	r2, #8
 8004ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f969 	bl	80051cc <HAL_TIM_IC_CaptureCallback>
 8004efa:	e005      	b.n	8004f08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f95c 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f96b 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d122      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d11b      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f06f 0210 	mvn.w	r2, #16
 8004f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2208      	movs	r2, #8
 8004f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f93f 	bl	80051cc <HAL_TIM_IC_CaptureCallback>
 8004f4e:	e005      	b.n	8004f5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f932 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f941 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10e      	bne.n	8004f8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d107      	bne.n	8004f8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0201 	mvn.w	r2, #1
 8004f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f90d 	bl	80051a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f98:	2b80      	cmp	r3, #128	; 0x80
 8004f9a:	d10e      	bne.n	8004fba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b80      	cmp	r3, #128	; 0x80
 8004fa8:	d107      	bne.n	8004fba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa84 	bl	80054c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d107      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f905 	bl	80051f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d10e      	bne.n	8005012 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d107      	bne.n	8005012 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f06f 0220 	mvn.w	r2, #32
 800500a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa4f 	bl	80054b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_TIM_ConfigClockSource+0x1c>
 8005032:	2302      	movs	r3, #2
 8005034:	e0b4      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x186>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005054:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800505c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506e:	d03e      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xd4>
 8005070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005074:	f200 8087 	bhi.w	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507c:	f000 8086 	beq.w	800518c <HAL_TIM_ConfigClockSource+0x172>
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005084:	d87f      	bhi.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 8005086:	2b70      	cmp	r3, #112	; 0x70
 8005088:	d01a      	beq.n	80050c0 <HAL_TIM_ConfigClockSource+0xa6>
 800508a:	2b70      	cmp	r3, #112	; 0x70
 800508c:	d87b      	bhi.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 800508e:	2b60      	cmp	r3, #96	; 0x60
 8005090:	d050      	beq.n	8005134 <HAL_TIM_ConfigClockSource+0x11a>
 8005092:	2b60      	cmp	r3, #96	; 0x60
 8005094:	d877      	bhi.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 8005096:	2b50      	cmp	r3, #80	; 0x50
 8005098:	d03c      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0xfa>
 800509a:	2b50      	cmp	r3, #80	; 0x50
 800509c:	d873      	bhi.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d058      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x13a>
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d86f      	bhi.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 80050a6:	2b30      	cmp	r3, #48	; 0x30
 80050a8:	d064      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0x15a>
 80050aa:	2b30      	cmp	r3, #48	; 0x30
 80050ac:	d86b      	bhi.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d060      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0x15a>
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d867      	bhi.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d05c      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0x15a>
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d05a      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0x15a>
 80050be:	e062      	b.n	8005186 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	6899      	ldr	r1, [r3, #8]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f000 f971 	bl	80053b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]
      break;
 80050ec:	e04f      	b.n	800518e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6899      	ldr	r1, [r3, #8]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f000 f95a 	bl	80053b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005110:	609a      	str	r2, [r3, #8]
      break;
 8005112:	e03c      	b.n	800518e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6859      	ldr	r1, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	461a      	mov	r2, r3
 8005122:	f000 f8d1 	bl	80052c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2150      	movs	r1, #80	; 0x50
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f928 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8005132:	e02c      	b.n	800518e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	461a      	mov	r2, r3
 8005142:	f000 f8ef 	bl	8005324 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2160      	movs	r1, #96	; 0x60
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f918 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8005152:	e01c      	b.n	800518e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	461a      	mov	r2, r3
 8005162:	f000 f8b1 	bl	80052c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2140      	movs	r1, #64	; 0x40
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f908 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8005172:	e00c      	b.n	800518e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f000 f8ff 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8005184:	e003      	b.n	800518e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
      break;
 800518a:	e000      	b.n	800518e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800518c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
	...

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a29      	ldr	r2, [pc, #164]	; (80052bc <TIM_Base_SetConfig+0xb8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <TIM_Base_SetConfig+0xbc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <TIM_Base_SetConfig+0xc0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <TIM_Base_SetConfig+0xb8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <TIM_Base_SetConfig+0xbc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <TIM_Base_SetConfig+0xc0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a07      	ldr	r2, [pc, #28]	; (80052bc <TIM_Base_SetConfig+0xb8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d103      	bne.n	80052ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	615a      	str	r2, [r3, #20]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800

080052c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 030a 	bic.w	r3, r3, #10
 8005304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0210 	bic.w	r2, r3, #16
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800534e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	031b      	lsls	r3, r3, #12
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005360:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	f043 0307 	orr.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b087      	sub	sp, #28
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	021a      	lsls	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	431a      	orrs	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4313      	orrs	r3, r2
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	609a      	str	r2, [r3, #8]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005408:	2302      	movs	r3, #2
 800540a:	e046      	b.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005458:	d009      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a12      	ldr	r2, [pc, #72]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a10      	ldr	r2, [pc, #64]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10c      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4313      	orrs	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800

080054b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e042      	b.n	800556c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fd f91a 	bl	8002734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2224      	movs	r2, #36	; 0x24
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fd71 	bl	8006000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800552c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800553c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800554c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08a      	sub	sp, #40	; 0x28
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	d16d      	bne.n	8005670 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_UART_Transmit+0x2c>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e066      	b.n	8005672 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b2:	f7fd fba5 	bl	8002d00 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	88fa      	ldrh	r2, [r7, #6]
 80055c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d108      	bne.n	80055e0 <HAL_UART_Transmit+0x6c>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e003      	b.n	80055e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055e8:	e02a      	b.n	8005640 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2180      	movs	r1, #128	; 0x80
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 faf9 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e036      	b.n	8005672 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10b      	bne.n	8005622 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	3302      	adds	r3, #2
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	e007      	b.n	8005632 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	3301      	adds	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1cf      	bne.n	80055ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	2140      	movs	r1, #64	; 0x40
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fac9 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e006      	b.n	8005672 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e000      	b.n	8005672 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005670:	2302      	movs	r3, #2
  }
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b0ba      	sub	sp, #232	; 0xe8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_UART_IRQHandler+0x66>
 80056ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fbd1 	bl	8005e82 <UART_Receive_IT>
      return;
 80056e0:	e25b      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80de 	beq.w	80058a8 <HAL_UART_IRQHandler+0x22c>
 80056ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80d1 	beq.w	80058a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_UART_IRQHandler+0xae>
 8005712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_UART_IRQHandler+0xd2>
 8005736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	f043 0202 	orr.w	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <HAL_UART_IRQHandler+0xf6>
 800575a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	f043 0204 	orr.w	r2, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <HAL_UART_IRQHandler+0x126>
 800577e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d105      	bne.n	8005796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800578a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579a:	f043 0208 	orr.w	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 81f2 	beq.w	8005b90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_UART_IRQHandler+0x14e>
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fb5c 	bl	8005e82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <HAL_UART_IRQHandler+0x17a>
 80057ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d04f      	beq.n	8005896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa66 	bl	8005cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d041      	beq.n	800588e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3314      	adds	r3, #20
 8005810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005836:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800583a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800584e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1d9      	bne.n	800580a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	4a7e      	ldr	r2, [pc, #504]	; (8005a5c <HAL_UART_IRQHandler+0x3e0>)
 8005864:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe f94c 	bl	8003b08 <HAL_DMA_Abort_IT>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	e00e      	b.n	80058a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f99c 	bl	8005bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e00a      	b.n	80058a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f998 	bl	8005bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	e006      	b.n	80058a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f994 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80058a2:	e175      	b.n	8005b90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	bf00      	nop
    return;
 80058a6:	e173      	b.n	8005b90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	f040 814f 	bne.w	8005b50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8148 	beq.w	8005b50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8141 	beq.w	8005b50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80b6 	beq.w	8005a60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8145 	beq.w	8005b94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800590e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005912:	429a      	cmp	r2, r3
 8005914:	f080 813e 	bcs.w	8005b94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800591e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2b20      	cmp	r3, #32
 8005928:	f000 8088 	beq.w	8005a3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800594a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005958:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800595c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005964:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1d9      	bne.n	800592c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800599c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e1      	bne.n	8005978 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e3      	bne.n	80059b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e3      	bne.n	80059fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe f82a 	bl	8003a90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8bf 	bl	8005bd6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a58:	e09c      	b.n	8005b94 <HAL_UART_IRQHandler+0x518>
 8005a5a:	bf00      	nop
 8005a5c:	08005d8d 	.word	0x08005d8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 808e 	beq.w	8005b98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8089 	beq.w	8005b98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005aaa:	647a      	str	r2, [r7, #68]	; 0x44
 8005aac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e3      	bne.n	8005a86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e3      	bne.n	8005abe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0310 	bic.w	r3, r3, #16
 8005b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b28:	61fa      	str	r2, [r7, #28]
 8005b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69b9      	ldr	r1, [r7, #24]
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	617b      	str	r3, [r7, #20]
   return(result);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e3      	bne.n	8005b04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f844 	bl	8005bd6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b4e:	e023      	b.n	8005b98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <HAL_UART_IRQHandler+0x4f4>
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f923 	bl	8005db4 <UART_Transmit_IT>
    return;
 8005b6e:	e014      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00e      	beq.n	8005b9a <HAL_UART_IRQHandler+0x51e>
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f962 	bl	8005e52 <UART_EndTransmit_IT>
    return;
 8005b8e:	e004      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
    return;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005b98:	bf00      	nop
  }
}
 8005b9a:	37e8      	adds	r7, #232	; 0xe8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b090      	sub	sp, #64	; 0x40
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfc:	e050      	b.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d04c      	beq.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0c:	f7fd f878 	bl	8002d00 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d241      	bcs.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c3c:	637a      	str	r2, [r7, #52]	; 0x34
 8005c3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3314      	adds	r3, #20
 8005c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3314      	adds	r3, #20
 8005c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c70:	623a      	str	r2, [r7, #32]
 8005c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	69f9      	ldr	r1, [r7, #28]
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e00f      	b.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d09f      	beq.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3740      	adds	r7, #64	; 0x40
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b095      	sub	sp, #84	; 0x54
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cf0:	643a      	str	r2, [r7, #64]	; 0x40
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d119      	bne.n	8005d74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0310 	bic.w	r3, r3, #16
 8005d56:	647b      	str	r3, [r7, #68]	; 0x44
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d60:	61ba      	str	r2, [r7, #24]
 8005d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6979      	ldr	r1, [r7, #20]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d82:	bf00      	nop
 8005d84:	3754      	adds	r7, #84	; 0x54
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff ff0c 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b21      	cmp	r3, #33	; 0x21
 8005dc6:	d13e      	bne.n	8005e46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d114      	bne.n	8005dfc <UART_Transmit_IT+0x48>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d110      	bne.n	8005dfc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	1c9a      	adds	r2, r3, #2
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]
 8005dfa:	e008      	b.n	8005e0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	1c59      	adds	r1, r3, #1
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6211      	str	r1, [r2, #32]
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10f      	bne.n	8005e42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e000      	b.n	8005e48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e46:	2302      	movs	r3, #2
  }
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr

08005e52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff fe94 	bl	8005ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b08c      	sub	sp, #48	; 0x30
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b22      	cmp	r3, #34	; 0x22
 8005e94:	f040 80ae 	bne.w	8005ff4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea0:	d117      	bne.n	8005ed2 <UART_Receive_IT+0x50>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d113      	bne.n	8005ed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	1c9a      	adds	r2, r3, #2
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
 8005ed0:	e026      	b.n	8005f20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee4:	d007      	beq.n	8005ef6 <UART_Receive_IT+0x74>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <UART_Receive_IT+0x82>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	e008      	b.n	8005f16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d15d      	bne.n	8005ff0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0220 	bic.w	r2, r2, #32
 8005f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d135      	bne.n	8005fe6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f023 0310 	bic.w	r3, r3, #16
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa0:	623a      	str	r2, [r7, #32]
 8005fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	6a3a      	ldr	r2, [r7, #32]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d10a      	bne.n	8005fd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fdf9 	bl	8005bd6 <HAL_UARTEx_RxEventCallback>
 8005fe4:	e002      	b.n	8005fec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fde3 	bl	8005bb2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e002      	b.n	8005ff6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
  }
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3730      	adds	r7, #48	; 0x30
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800603a:	f023 030c 	bic.w	r3, r3, #12
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	430b      	orrs	r3, r1
 8006046:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2c      	ldr	r2, [pc, #176]	; (8006114 <UART_SetConfig+0x114>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d103      	bne.n	8006070 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006068:	f7fe fc5e 	bl	8004928 <HAL_RCC_GetPCLK2Freq>
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	e002      	b.n	8006076 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006070:	f7fe fc46 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8006074:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009a      	lsls	r2, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	4a22      	ldr	r2, [pc, #136]	; (8006118 <UART_SetConfig+0x118>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	0119      	lsls	r1, r3, #4
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009a      	lsls	r2, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <UART_SetConfig+0x118>)
 80060ae:	fba3 0302 	umull	r0, r3, r3, r2
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	2064      	movs	r0, #100	; 0x64
 80060b6:	fb00 f303 	mul.w	r3, r0, r3
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	3332      	adds	r3, #50	; 0x32
 80060c0:	4a15      	ldr	r2, [pc, #84]	; (8006118 <UART_SetConfig+0x118>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060cc:	4419      	add	r1, r3
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <UART_SetConfig+0x118>)
 80060e6:	fba3 0302 	umull	r0, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2064      	movs	r0, #100	; 0x64
 80060ee:	fb00 f303 	mul.w	r3, r0, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	4a07      	ldr	r2, [pc, #28]	; (8006118 <UART_SetConfig+0x118>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 020f 	and.w	r2, r3, #15
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	440a      	add	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800610c:	bf00      	nop
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40013800 	.word	0x40013800
 8006118:	51eb851f 	.word	0x51eb851f

0800611c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006120:	4904      	ldr	r1, [pc, #16]	; (8006134 <MX_FATFS_Init+0x18>)
 8006122:	4805      	ldr	r0, [pc, #20]	; (8006138 <MX_FATFS_Init+0x1c>)
 8006124:	f003 fb10 	bl	8009748 <FATFS_LinkDriver>
 8006128:	4603      	mov	r3, r0
 800612a:	461a      	mov	r2, r3
 800612c:	4b03      	ldr	r3, [pc, #12]	; (800613c <MX_FATFS_Init+0x20>)
 800612e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006130:	bf00      	nop
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20002d38 	.word	0x20002d38
 8006138:	20000024 	.word	0x20000024
 800613c:	20002d34 	.word	0x20002d34

08006140 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006144:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006146:	4618      	mov	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
	...

08006150 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <USER_initialize+0x20>)
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <USER_initialize+0x20>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr
 8006170:	20000021 	.word	0x20000021

08006174 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <USER_status+0x20>)
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <USER_status+0x20>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr
 8006194:	20000021 	.word	0x20000021

08006198 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80061a8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80061c4:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	603a      	str	r2, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
 80061dc:	460b      	mov	r3, r1
 80061de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
    return res;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	4a08      	ldr	r2, [pc, #32]	; (8006220 <disk_status+0x30>)
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	79fa      	ldrb	r2, [r7, #7]
 8006208:	4905      	ldr	r1, [pc, #20]	; (8006220 <disk_status+0x30>)
 800620a:	440a      	add	r2, r1
 800620c:	7a12      	ldrb	r2, [r2, #8]
 800620e:	4610      	mov	r0, r2
 8006210:	4798      	blx	r3
 8006212:	4603      	mov	r3, r0
 8006214:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20002d5c 	.word	0x20002d5c

08006224 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <disk_initialize+0x48>)
 8006236:	5cd3      	ldrb	r3, [r2, r3]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d111      	bne.n	8006260 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	4a0b      	ldr	r2, [pc, #44]	; (800626c <disk_initialize+0x48>)
 8006240:	2101      	movs	r1, #1
 8006242:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	4a09      	ldr	r2, [pc, #36]	; (800626c <disk_initialize+0x48>)
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	79fa      	ldrb	r2, [r7, #7]
 8006252:	4906      	ldr	r1, [pc, #24]	; (800626c <disk_initialize+0x48>)
 8006254:	440a      	add	r2, r1
 8006256:	7a12      	ldrb	r2, [r2, #8]
 8006258:	4610      	mov	r0, r2
 800625a:	4798      	blx	r3
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20002d5c 	.word	0x20002d5c

08006270 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <disk_read+0x3c>)
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	689c      	ldr	r4, [r3, #8]
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	4a07      	ldr	r2, [pc, #28]	; (80062ac <disk_read+0x3c>)
 8006290:	4413      	add	r3, r2
 8006292:	7a18      	ldrb	r0, [r3, #8]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	47a0      	blx	r4
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]
  return res;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd90      	pop	{r4, r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20002d5c 	.word	0x20002d5c

080062b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062b0:	b590      	push	{r4, r7, lr}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <disk_write+0x3c>)
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	68dc      	ldr	r4, [r3, #12]
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	4a07      	ldr	r2, [pc, #28]	; (80062ec <disk_write+0x3c>)
 80062d0:	4413      	add	r3, r2
 80062d2:	7a18      	ldrb	r0, [r3, #8]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	47a0      	blx	r4
 80062dc:	4603      	mov	r3, r0
 80062de:	75fb      	strb	r3, [r7, #23]
  return res;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd90      	pop	{r4, r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20002d5c 	.word	0x20002d5c

080062f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	603a      	str	r2, [r7, #0]
 80062fa:	71fb      	strb	r3, [r7, #7]
 80062fc:	460b      	mov	r3, r1
 80062fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	4a09      	ldr	r2, [pc, #36]	; (8006328 <disk_ioctl+0x38>)
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	79fa      	ldrb	r2, [r7, #7]
 800630e:	4906      	ldr	r1, [pc, #24]	; (8006328 <disk_ioctl+0x38>)
 8006310:	440a      	add	r2, r1
 8006312:	7a10      	ldrb	r0, [r2, #8]
 8006314:	79b9      	ldrb	r1, [r7, #6]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4798      	blx	r3
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
  return res;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20002d5c 	.word	0x20002d5c

0800632c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006340:	e007      	b.n	8006352 <mem_cpy+0x26>
		*d++ = *s++;
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	1c53      	adds	r3, r2, #1
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	6179      	str	r1, [r7, #20]
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1e5a      	subs	r2, r3, #1
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f2      	bne.n	8006342 <mem_cpy+0x16>
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006378:	e005      	b.n	8006386 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	617a      	str	r2, [r7, #20]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	1e5a      	subs	r2, r3, #1
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f4      	bne.n	800637a <mem_set+0x12>
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	; 0x24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80063b4:	bf00      	nop
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00d      	beq.n	80063dc <mem_cmp+0x40>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	4619      	mov	r1, r3
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	61ba      	str	r2, [r7, #24]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	1acb      	subs	r3, r1, r3
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0ec      	beq.n	80063b6 <mem_cmp+0x1a>
	return r;
 80063dc:	697b      	ldr	r3, [r7, #20]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3724      	adds	r7, #36	; 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80063f2:	e002      	b.n	80063fa <chk_chr+0x12>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <chk_chr+0x26>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	4293      	cmp	r3, r2
 800640c:	d1f2      	bne.n	80063f4 <chk_chr+0xc>
	return *str;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	781b      	ldrb	r3, [r3, #0]
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e03b      	b.n	80064a8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8006430:	4931      	ldr	r1, [pc, #196]	; (80064f8 <chk_lock+0xdc>)
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4613      	mov	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d02c      	beq.n	800649e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006444:	492c      	ldr	r1, [pc, #176]	; (80064f8 <chk_lock+0xdc>)
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4613      	mov	r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d120      	bne.n	80064a2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006460:	4925      	ldr	r1, [pc, #148]	; (80064f8 <chk_lock+0xdc>)
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4613      	mov	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	3304      	adds	r3, #4
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006478:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800647a:	429a      	cmp	r2, r3
 800647c:	d111      	bne.n	80064a2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800647e:	491e      	ldr	r1, [pc, #120]	; (80064f8 <chk_lock+0xdc>)
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4613      	mov	r3, r2
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3308      	adds	r3, #8
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006496:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006498:	429a      	cmp	r2, r3
 800649a:	d102      	bne.n	80064a2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800649c:	e007      	b.n	80064ae <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800649e:	2301      	movs	r3, #1
 80064a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d9c0      	bls.n	8006430 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d109      	bne.n	80064c8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <chk_lock+0xa4>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d101      	bne.n	80064c4 <chk_lock+0xa8>
 80064c0:	2300      	movs	r3, #0
 80064c2:	e013      	b.n	80064ec <chk_lock+0xd0>
 80064c4:	2312      	movs	r3, #18
 80064c6:	e011      	b.n	80064ec <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <chk_lock+0xca>
 80064ce:	490a      	ldr	r1, [pc, #40]	; (80064f8 <chk_lock+0xdc>)
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4613      	mov	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	330a      	adds	r3, #10
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e4:	d101      	bne.n	80064ea <chk_lock+0xce>
 80064e6:	2310      	movs	r3, #16
 80064e8:	e000      	b.n	80064ec <chk_lock+0xd0>
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20002d44 	.word	0x20002d44

080064fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	e002      	b.n	800650e <enq_lock+0x12>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3301      	adds	r3, #1
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d809      	bhi.n	8006528 <enq_lock+0x2c>
 8006514:	490a      	ldr	r1, [pc, #40]	; (8006540 <enq_lock+0x44>)
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1ef      	bne.n	8006508 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b02      	cmp	r3, #2
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	bc80      	pop	{r7}
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20002d44 	.word	0x20002d44

08006544 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e02e      	b.n	80065b2 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8006554:	4958      	ldr	r1, [pc, #352]	; (80066b8 <inc_lock+0x174>)
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4613      	mov	r3, r2
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d11d      	bne.n	80065ac <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006570:	4951      	ldr	r1, [pc, #324]	; (80066b8 <inc_lock+0x174>)
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4613      	mov	r3, r2
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	3304      	adds	r3, #4
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006588:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800658a:	429a      	cmp	r2, r3
 800658c:	d10e      	bne.n	80065ac <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800658e:	494a      	ldr	r1, [pc, #296]	; (80066b8 <inc_lock+0x174>)
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4613      	mov	r3, r2
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	3308      	adds	r3, #8
 800659e:	881a      	ldrh	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d006      	beq.n	80065ba <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d9cd      	bls.n	8006554 <inc_lock+0x10>
 80065b8:	e000      	b.n	80065bc <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80065ba:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d148      	bne.n	8006654 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e002      	b.n	80065ce <inc_lock+0x8a>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d809      	bhi.n	80065e8 <inc_lock+0xa4>
 80065d4:	4938      	ldr	r1, [pc, #224]	; (80066b8 <inc_lock+0x174>)
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4613      	mov	r3, r2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1ef      	bne.n	80065c8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d101      	bne.n	80065f2 <inc_lock+0xae>
 80065ee:	2300      	movs	r3, #0
 80065f0:	e05d      	b.n	80066ae <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f8:	6819      	ldr	r1, [r3, #0]
 80065fa:	482f      	ldr	r0, [pc, #188]	; (80066b8 <inc_lock+0x174>)
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4403      	add	r3, r0
 8006608:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	4829      	ldr	r0, [pc, #164]	; (80066b8 <inc_lock+0x174>)
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4613      	mov	r3, r2
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4403      	add	r3, r0
 8006620:	3304      	adds	r3, #4
 8006622:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662a:	88d8      	ldrh	r0, [r3, #6]
 800662c:	4922      	ldr	r1, [pc, #136]	; (80066b8 <inc_lock+0x174>)
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	3308      	adds	r3, #8
 800663c:	4602      	mov	r2, r0
 800663e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006640:	491d      	ldr	r1, [pc, #116]	; (80066b8 <inc_lock+0x174>)
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4613      	mov	r3, r2
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	330a      	adds	r3, #10
 8006650:	2200      	movs	r2, #0
 8006652:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <inc_lock+0x130>
 800665a:	4917      	ldr	r1, [pc, #92]	; (80066b8 <inc_lock+0x174>)
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4613      	mov	r3, r2
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	330a      	adds	r3, #10
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <inc_lock+0x130>
 8006670:	2300      	movs	r3, #0
 8006672:	e01c      	b.n	80066ae <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <inc_lock+0x14e>
 800667a:	490f      	ldr	r1, [pc, #60]	; (80066b8 <inc_lock+0x174>)
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4613      	mov	r3, r2
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	330a      	adds	r3, #10
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	3301      	adds	r3, #1
 800668e:	b299      	uxth	r1, r3
 8006690:	e001      	b.n	8006696 <inc_lock+0x152>
 8006692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006696:	4808      	ldr	r0, [pc, #32]	; (80066b8 <inc_lock+0x174>)
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4613      	mov	r3, r2
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4403      	add	r3, r0
 80066a4:	330a      	adds	r3, #10
 80066a6:	460a      	mov	r2, r1
 80066a8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	20002d44 	.word	0x20002d44

080066bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	607b      	str	r3, [r7, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d82e      	bhi.n	800672e <dec_lock+0x72>
		n = Files[i].ctr;
 80066d0:	491b      	ldr	r1, [pc, #108]	; (8006740 <dec_lock+0x84>)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	330a      	adds	r3, #10
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80066e4:	89fb      	ldrh	r3, [r7, #14]
 80066e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ea:	d101      	bne.n	80066f0 <dec_lock+0x34>
 80066ec:	2300      	movs	r3, #0
 80066ee:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80066f0:	89fb      	ldrh	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <dec_lock+0x40>
 80066f6:	89fb      	ldrh	r3, [r7, #14]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80066fc:	4910      	ldr	r1, [pc, #64]	; (8006740 <dec_lock+0x84>)
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4613      	mov	r3, r2
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	330a      	adds	r3, #10
 800670c:	89fa      	ldrh	r2, [r7, #14]
 800670e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006710:	89fb      	ldrh	r3, [r7, #14]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d108      	bne.n	8006728 <dec_lock+0x6c>
 8006716:	490a      	ldr	r1, [pc, #40]	; (8006740 <dec_lock+0x84>)
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	737b      	strb	r3, [r7, #13]
 800672c:	e001      	b.n	8006732 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800672e:	2302      	movs	r3, #2
 8006730:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006732:	7b7b      	ldrb	r3, [r7, #13]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20002d44 	.word	0x20002d44

08006744 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e016      	b.n	8006780 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006752:	4910      	ldr	r1, [pc, #64]	; (8006794 <clear_lock+0x50>)
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4613      	mov	r3, r2
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d108      	bne.n	800677a <clear_lock+0x36>
 8006768:	490a      	ldr	r1, [pc, #40]	; (8006794 <clear_lock+0x50>)
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4613      	mov	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d9e5      	bls.n	8006752 <clear_lock+0xe>
	}
}
 8006786:	bf00      	nop
 8006788:	bf00      	nop
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20002d44 	.word	0x20002d44

08006798 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067aa:	791b      	ldrb	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d040      	beq.n	8006832 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c0:	7858      	ldrb	r0, [r3, #1]
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	2301      	movs	r3, #1
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f7ff fd72 	bl	80062b0 <disk_write>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <sync_window+0x40>
			res = FR_DISK_ERR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	73fb      	strb	r3, [r7, #15]
 80067d6:	e02c      	b.n	8006832 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067de:	2200      	movs	r2, #0
 80067e0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	1ad2      	subs	r2, r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d21b      	bcs.n	8006832 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006800:	78db      	ldrb	r3, [r3, #3]
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	e012      	b.n	800682c <sync_window+0x94>
					wsect += fs->fsize;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681a:	7858      	ldrb	r0, [r3, #1]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	2301      	movs	r3, #1
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	f7ff fd45 	bl	80062b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3b01      	subs	r3, #1
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d8e9      	bhi.n	8006806 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d01e      	beq.n	8006896 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff9d 	bl	8006798 <sync_window>
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d116      	bne.n	8006896 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686e:	7858      	ldrb	r0, [r3, #1]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	2301      	movs	r3, #1
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	f7ff fcfb 	bl	8006270 <disk_read>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006880:	f04f 33ff 	mov.w	r3, #4294967295
 8006884:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006890:	461a      	mov	r2, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff ff75 	bl	8006798 <sync_window>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 80ad 	bne.w	8006a14 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	f040 8098 	bne.w	80069f8 <sync_fs+0x158>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ce:	795b      	ldrb	r3, [r3, #5]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	f040 8091 	bne.w	80069f8 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068de:	895b      	ldrh	r3, [r3, #10]
 80068e0:	461a      	mov	r2, r3
 80068e2:	2100      	movs	r1, #0
 80068e4:	f7ff fd40 	bl	8006368 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2255      	movs	r2, #85	; 0x55
 80068ec:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	22aa      	movs	r2, #170	; 0xaa
 80068f4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2252      	movs	r2, #82	; 0x52
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2252      	movs	r2, #82	; 0x52
 8006902:	705a      	strb	r2, [r3, #1]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2261      	movs	r2, #97	; 0x61
 8006908:	709a      	strb	r2, [r3, #2]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2241      	movs	r2, #65	; 0x41
 800690e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2272      	movs	r2, #114	; 0x72
 8006914:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2272      	movs	r2, #114	; 0x72
 800691c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2241      	movs	r2, #65	; 0x41
 8006924:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2261      	movs	r2, #97	; 0x61
 800692c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	b29b      	uxth	r3, r3
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	b29b      	uxth	r3, r3
 800694e:	b2da      	uxtb	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	0c1b      	lsrs	r3, r3, #16
 8006960:	b2da      	uxtb	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	0e1b      	lsrs	r3, r3, #24
 8006972:	b2da      	uxtb	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	b29b      	uxth	r3, r3
 8006994:	0a1b      	lsrs	r3, r3, #8
 8006996:	b29b      	uxth	r3, r3
 8006998:	b2da      	uxtb	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	0c1b      	lsrs	r3, r3, #16
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	0e1b      	lsrs	r3, r3, #24
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	3301      	adds	r3, #1
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069d4:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069dc:	7858      	ldrb	r0, [r3, #1]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	2301      	movs	r3, #1
 80069ea:	f7ff fc61 	bl	80062b0 <disk_write>
			fs->fsi_flag = 0;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f4:	2200      	movs	r2, #0
 80069f6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2100      	movs	r1, #0
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff fc73 	bl	80062f0 <disk_ioctl>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	3b02      	subs	r3, #2
 8006a2c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	3b02      	subs	r3, #2
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d301      	bcc.n	8006a42 <clust2sect+0x24>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e00c      	b.n	8006a5c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a48:	789b      	ldrb	r3, [r3, #2]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	fb03 f202 	mul.w	r2, r3, r2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	4413      	add	r3, r2
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d906      	bls.n	8006a84 <get_fat+0x1e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d302      	bcc.n	8006a8a <get_fat+0x24>
		val = 1;	/* Internal error */
 8006a84:	2301      	movs	r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e0e4      	b.n	8006c54 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	f000 8098 	beq.w	8006bce <get_fat+0x168>
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	f300 80ce 	bgt.w	8006c40 <get_fat+0x1da>
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d002      	beq.n	8006aae <get_fat+0x48>
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d05f      	beq.n	8006b6c <get_fat+0x106>
 8006aac:	e0c8      	b.n	8006c40 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aca:	895b      	ldrh	r3, [r3, #10]
 8006acc:	4619      	mov	r1, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ad4:	4413      	add	r3, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff feaf 	bl	800683c <move_window>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f040 80b0 	bne.w	8006c46 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	60fa      	str	r2, [r7, #12]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006af2:	8952      	ldrh	r2, [r2, #10]
 8006af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006af8:	fb01 f202 	mul.w	r2, r1, r2
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	5cd3      	ldrb	r3, [r2, r3]
 8006b02:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b12:	895b      	ldrh	r3, [r3, #10]
 8006b14:	4619      	mov	r1, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fe8b 	bl	800683c <move_window>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 808e 	bne.w	8006c4a <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b34:	895b      	ldrh	r3, [r3, #10]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b3e:	fb01 f202 	mul.w	r2, r1, r2
 8006b42:	1a9b      	subs	r3, r3, r2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	5cd3      	ldrb	r3, [r2, r3]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <get_fat+0xfc>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	e002      	b.n	8006b68 <get_fat+0x102>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b68:	617b      	str	r3, [r7, #20]
			break;
 8006b6a:	e073      	b.n	8006c54 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7a:	895b      	ldrh	r3, [r3, #10]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4619      	mov	r1, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b88:	4413      	add	r3, r2
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fe55 	bl	800683c <move_window>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d15a      	bne.n	8006c4e <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ba2:	8952      	ldrh	r2, [r2, #10]
 8006ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ba8:	fb01 f202 	mul.w	r2, r1, r2
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	b21a      	sxth	r2, r3
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b21b      	sxth	r3, r3
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	617b      	str	r3, [r7, #20]
			break;
 8006bcc:	e042      	b.n	8006c54 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bdc:	895b      	ldrh	r3, [r3, #10]
 8006bde:	089b      	lsrs	r3, r3, #2
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4619      	mov	r1, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bea:	4413      	add	r3, r2
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fe24 	bl	800683c <move_window>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d12b      	bne.n	8006c52 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c04:	8952      	ldrh	r2, [r2, #10]
 8006c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c0a:	fb01 f202 	mul.w	r2, r1, r2
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4413      	add	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3303      	adds	r3, #3
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	061a      	lsls	r2, r3, #24
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	3302      	adds	r3, #2
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	4313      	orrs	r3, r2
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	3201      	adds	r2, #1
 8006c2c:	7812      	ldrb	r2, [r2, #0]
 8006c2e:	0212      	lsls	r2, r2, #8
 8006c30:	4313      	orrs	r3, r2
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	7812      	ldrb	r2, [r2, #0]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c3c:	617b      	str	r3, [r7, #20]
			break;
 8006c3e:	e009      	b.n	8006c54 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e006      	b.n	8006c54 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c46:	bf00      	nop
 8006c48:	e004      	b.n	8006c54 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c4a:	bf00      	nop
 8006c4c:	e002      	b.n	8006c54 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c52:	bf00      	nop
		}
	}

	return val;
 8006c54:	697b      	ldr	r3, [r7, #20]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b088      	sub	sp, #32
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d906      	bls.n	8006c7e <put_fat+0x20>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <put_fat+0x26>
		res = FR_INT_ERR;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e13a      	b.n	8006efa <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	f000 80d0 	beq.w	8006e32 <put_fat+0x1d4>
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	f300 8127 	bgt.w	8006ee6 <put_fat+0x288>
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d003      	beq.n	8006ca4 <put_fat+0x46>
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	f000 808f 	beq.w	8006dc0 <put_fat+0x162>
 8006ca2:	e120      	b.n	8006ee6 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4413      	add	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb8:	6a1a      	ldr	r2, [r3, #32]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc0:	895b      	ldrh	r3, [r3, #10]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cca:	4413      	add	r3, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fdb4 	bl	800683c <move_window>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cd8:	7ffb      	ldrb	r3, [r7, #31]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 8106 	bne.w	8006eec <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	617a      	str	r2, [r7, #20]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006cec:	8952      	ldrh	r2, [r2, #10]
 8006cee:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cf2:	fb01 f202 	mul.w	r2, r1, r2
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <put_fat+0xc6>
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	b25a      	sxtb	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	e001      	b.n	8006d28 <put_fat+0xca>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d32:	2201      	movs	r2, #1
 8006d34:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d44:	895b      	ldrh	r3, [r3, #10]
 8006d46:	4619      	mov	r1, r3
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d4e:	4413      	add	r3, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fd72 	bl	800683c <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d5c:	7ffb      	ldrb	r3, [r7, #31]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 80c6 	bne.w	8006ef0 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6a:	895b      	ldrh	r3, [r3, #10]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d74:	fb01 f202 	mul.w	r2, r1, r2
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <put_fat+0x134>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	e00e      	b.n	8006db0 <put_fat+0x152>
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	b25b      	sxtb	r3, r3
 8006d98:	f023 030f 	bic.w	r3, r3, #15
 8006d9c:	b25a      	sxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	0a1b      	lsrs	r3, r3, #8
 8006da2:	b25b      	sxtb	r3, r3
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dba:	2201      	movs	r2, #1
 8006dbc:	711a      	strb	r2, [r3, #4]
			break;
 8006dbe:	e09c      	b.n	8006efa <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dce:	895b      	ldrh	r3, [r3, #10]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ddc:	4413      	add	r3, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff fd2b 	bl	800683c <move_window>
 8006de6:	4603      	mov	r3, r0
 8006de8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dea:	7ffb      	ldrb	r3, [r7, #31]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 8081 	bne.w	8006ef4 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dfc:	8952      	ldrh	r2, [r2, #10]
 8006dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e02:	fb01 f202 	mul.w	r2, r1, r2
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3301      	adds	r3, #1
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	711a      	strb	r2, [r3, #4]
			break;
 8006e30:	e063      	b.n	8006efa <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e40:	895b      	ldrh	r3, [r3, #10]
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4619      	mov	r1, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e4e:	4413      	add	r3, r2
 8006e50:	4619      	mov	r1, r3
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f7ff fcf2 	bl	800683c <move_window>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e5c:	7ffb      	ldrb	r3, [r7, #31]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d14a      	bne.n	8006ef8 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e6c:	8952      	ldrh	r2, [r2, #10]
 8006e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e72:	fb01 f202 	mul.w	r2, r1, r2
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	3303      	adds	r3, #3
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	061a      	lsls	r2, r3, #24
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	3302      	adds	r3, #2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	041b      	lsls	r3, r3, #16
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	3201      	adds	r2, #1
 8006e94:	7812      	ldrb	r2, [r2, #0]
 8006e96:	0212      	lsls	r2, r2, #8
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	0c1a      	lsrs	r2, r3, #16
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	3302      	adds	r3, #2
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0e1a      	lsrs	r2, r3, #24
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	3303      	adds	r3, #3
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	711a      	strb	r2, [r3, #4]
			break;
 8006ee4:	e009      	b.n	8006efa <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e006      	b.n	8006efa <put_fat+0x29c>
			if (res != FR_OK) break;
 8006eec:	bf00      	nop
 8006eee:	e004      	b.n	8006efa <put_fat+0x29c>
			if (res != FR_OK) break;
 8006ef0:	bf00      	nop
 8006ef2:	e002      	b.n	8006efa <put_fat+0x29c>
			if (res != FR_OK) break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <put_fat+0x29c>
			if (res != FR_OK) break;
 8006ef8:	bf00      	nop
		}
	}

	return res;
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d906      	bls.n	8006f22 <remove_chain+0x1e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d302      	bcc.n	8006f28 <remove_chain+0x24>
		res = FR_INT_ERR;
 8006f22:	2302      	movs	r3, #2
 8006f24:	73fb      	strb	r3, [r7, #15]
 8006f26:	e049      	b.n	8006fbc <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006f2c:	e03b      	b.n	8006fa6 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fd98 	bl	8006a66 <get_fat>
 8006f36:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d03b      	beq.n	8006fb6 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d102      	bne.n	8006f4a <remove_chain+0x46>
 8006f44:	2302      	movs	r3, #2
 8006f46:	73fb      	strb	r3, [r7, #15]
 8006f48:	e038      	b.n	8006fbc <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d102      	bne.n	8006f58 <remove_chain+0x54>
 8006f52:	2301      	movs	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
 8006f56:	e031      	b.n	8006fbc <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006f58:	2200      	movs	r2, #0
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff fe7e 	bl	8006c5e <put_fat>
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d126      	bne.n	8006fba <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d013      	beq.n	8006fa2 <remove_chain+0x9e>
				fs->free_clust++;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	3301      	adds	r3, #1
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f8a:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f92:	795b      	ldrb	r3, [r3, #5]
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa0:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d3bc      	bcc.n	8006f2e <remove_chain+0x2a>
 8006fb4:	e002      	b.n	8006fbc <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <remove_chain+0xb8>
			if (res != FR_OK) break;
 8006fba:	bf00      	nop
		}
	}

	return res;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d111      	bne.n	8006ffa <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d006      	beq.n	8006ff4 <create_chain+0x2e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d31d      	bcc.n	8007030 <create_chain+0x6a>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	e01a      	b.n	8007030 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fd32 	bl	8006a66 <get_fat>
 8007002:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d801      	bhi.n	800700e <create_chain+0x48>
 800700a:	2301      	movs	r3, #1
 800700c:	e07f      	b.n	800710e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d101      	bne.n	800701a <create_chain+0x54>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	e079      	b.n	800710e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	429a      	cmp	r2, r3
 8007026:	d201      	bcs.n	800702c <create_chain+0x66>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	e070      	b.n	800710e <create_chain+0x148>
		scl = clst;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	3301      	adds	r3, #1
 8007038:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	429a      	cmp	r2, r3
 8007046:	d307      	bcc.n	8007058 <create_chain+0x92>
			ncl = 2;
 8007048:	2302      	movs	r3, #2
 800704a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	429a      	cmp	r2, r3
 8007052:	d901      	bls.n	8007058 <create_chain+0x92>
 8007054:	2300      	movs	r3, #0
 8007056:	e05a      	b.n	800710e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007058:	6979      	ldr	r1, [r7, #20]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fd03 	bl	8006a66 <get_fat>
 8007060:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00e      	beq.n	8007086 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706e:	d002      	beq.n	8007076 <create_chain+0xb0>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <create_chain+0xb4>
			return cs;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	e049      	b.n	800710e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	429a      	cmp	r2, r3
 8007080:	d1d8      	bne.n	8007034 <create_chain+0x6e>
 8007082:	2300      	movs	r3, #0
 8007084:	e043      	b.n	800710e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8007086:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007088:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800708c:	6979      	ldr	r1, [r7, #20]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff fde5 	bl	8006c5e <put_fat>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <create_chain+0xec>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fdd8 	bl	8006c5e <put_fat>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d121      	bne.n	80070fc <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	461a      	mov	r2, r3
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d0:	d01c      	beq.n	800710c <create_chain+0x146>
			fs->free_clust--;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	3b01      	subs	r3, #1
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070e2:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	795b      	ldrb	r3, [r3, #5]
 80070ec:	f043 0301 	orr.w	r3, r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f8:	715a      	strb	r2, [r3, #5]
 80070fa:	e007      	b.n	800710c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d102      	bne.n	8007108 <create_chain+0x142>
 8007102:	f04f 33ff 	mov.w	r3, #4294967295
 8007106:	e000      	b.n	800710a <create_chain+0x144>
 8007108:	2301      	movs	r3, #1
 800710a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800710c:	697b      	ldr	r3, [r7, #20]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007116:	b480      	push	{r7}
 8007118:	b087      	sub	sp, #28
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	3304      	adds	r3, #4
 800712a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007138:	895b      	ldrh	r3, [r3, #10]
 800713a:	461a      	mov	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800714e:	7892      	ldrb	r2, [r2, #2]
 8007150:	fbb3 f3f2 	udiv	r3, r3, r2
 8007154:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	613a      	str	r2, [r7, #16]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <clmt_clust+0x54>
 8007166:	2300      	movs	r3, #0
 8007168:	e010      	b.n	800718c <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	429a      	cmp	r2, r3
 8007170:	d307      	bcc.n	8007182 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3304      	adds	r3, #4
 800717e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007180:	e7e9      	b.n	8007156 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8007182:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4413      	add	r3, r2
}
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr

08007196 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b086      	sub	sp, #24
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071aa:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d009      	beq.n	80071d0 <dir_sdi+0x3a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d301      	bcc.n	80071d4 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80071d0:	2302      	movs	r3, #2
 80071d2:	e0aa      	b.n	800732a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d110      	bne.n	80071fc <dir_sdi+0x66>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d107      	bne.n	80071fc <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d115      	bne.n	800722e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720e:	891b      	ldrh	r3, [r3, #8]
 8007210:	461a      	mov	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	4293      	cmp	r3, r2
 8007216:	d301      	bcc.n	800721c <dir_sdi+0x86>
			return FR_INT_ERR;
 8007218:	2302      	movs	r3, #2
 800721a:	e086      	b.n	800732a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	e043      	b.n	80072b6 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	895b      	ldrh	r3, [r3, #10]
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724e:	789b      	ldrb	r3, [r3, #2]
 8007250:	fb02 f303 	mul.w	r3, r2, r3
 8007254:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007256:	e021      	b.n	800729c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6979      	ldr	r1, [r7, #20]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fbff 	bl	8006a66 <get_fat>
 8007268:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d101      	bne.n	8007276 <dir_sdi+0xe0>
 8007272:	2301      	movs	r3, #1
 8007274:	e059      	b.n	800732a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d909      	bls.n	8007290 <dir_sdi+0xfa>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	429a      	cmp	r2, r3
 800728e:	d301      	bcc.n	8007294 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8007290:	2302      	movs	r3, #2
 8007292:	e04a      	b.n	800732a <dir_sdi+0x194>
			idx -= ic;
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d2d9      	bcs.n	8007258 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6979      	ldr	r1, [r7, #20]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fbb5 	bl	8006a1e <clust2sect>
 80072b4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072bc:	461a      	mov	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <dir_sdi+0x136>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e02e      	b.n	800732a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d8:	895b      	ldrh	r3, [r3, #10]
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	b29b      	uxth	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	4413      	add	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072f0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007308:	895b      	ldrh	r3, [r3, #10]
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	b29b      	uxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	fbb3 f1f2 	udiv	r1, r3, r2
 8007316:	fb01 f202 	mul.w	r2, r1, r2
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	015b      	lsls	r3, r3, #5
 800731e:	4403      	add	r3, r0
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007326:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007332:	b590      	push	{r4, r7, lr}
 8007334:	b087      	sub	sp, #28
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007342:	88db      	ldrh	r3, [r3, #6]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	b29b      	uxth	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <dir_next+0x2a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <dir_next+0x2e>
		return FR_NO_FILE;
 800735c:	2304      	movs	r3, #4
 800735e:	e12e      	b.n	80075be <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736c:	895b      	ldrh	r3, [r3, #10]
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	b29b      	uxth	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	fbb3 f1f2 	udiv	r1, r3, r2
 800737a:	fb01 f202 	mul.w	r2, r1, r2
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 80fa 	bne.w	800757a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	3301      	adds	r3, #1
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007396:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b0:	891b      	ldrh	r3, [r3, #8]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	f0c0 80df 	bcc.w	800757a <dir_next+0x248>
				return FR_NO_FILE;
 80073bc:	2304      	movs	r3, #4
 80073be:	e0fe      	b.n	80075be <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073cc:	895b      	ldrh	r3, [r3, #10]
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073e6:	7892      	ldrb	r2, [r2, #2]
 80073e8:	3a01      	subs	r2, #1
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 80c4 	bne.w	800757a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f7ff fb2e 	bl	8006a66 <get_fat>
 800740a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d801      	bhi.n	8007416 <dir_next+0xe4>
 8007412:	2302      	movs	r3, #2
 8007414:	e0d3      	b.n	80075be <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d101      	bne.n	8007422 <dir_next+0xf0>
 800741e:	2301      	movs	r3, #1
 8007420:	e0cd      	b.n	80075be <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	429a      	cmp	r2, r3
 8007434:	f0c0 808e 	bcc.w	8007554 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <dir_next+0x110>
 800743e:	2304      	movs	r3, #4
 8007440:	e0bd      	b.n	80075be <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f7ff fdb6 	bl	8006fc6 <create_chain>
 800745a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <dir_next+0x134>
 8007462:	2307      	movs	r3, #7
 8007464:	e0ab      	b.n	80075be <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <dir_next+0x13e>
 800746c:	2302      	movs	r3, #2
 800746e:	e0a6      	b.n	80075be <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d101      	bne.n	800747c <dir_next+0x14a>
 8007478:	2301      	movs	r3, #1
 800747a:	e0a0      	b.n	80075be <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff f987 	bl	8006798 <sync_window>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <dir_next+0x162>
 8007490:	2301      	movs	r3, #1
 8007492:	e094      	b.n	80075be <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074aa:	895b      	ldrh	r3, [r3, #10]
 80074ac:	461a      	mov	r2, r3
 80074ae:	2100      	movs	r1, #0
 80074b0:	f7fe ff5a 	bl	8006368 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c2:	681c      	ldr	r4, [r3, #0]
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	4610      	mov	r0, r2
 80074c8:	f7ff faa9 	bl	8006a1e <clust2sect>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	e021      	b.n	800751e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e6:	2201      	movs	r2, #1
 80074e8:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff f950 	bl	8006798 <sync_window>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <dir_next+0x1d0>
 80074fe:	2301      	movs	r3, #1
 8007500:	e05d      	b.n	80075be <dir_next+0x28c>
						dp->fs->winsect++;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800750e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007510:	3201      	adds	r2, #1
 8007512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007516:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3301      	adds	r3, #1
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752a:	789b      	ldrb	r3, [r3, #2]
 800752c:	461a      	mov	r2, r3
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4293      	cmp	r3, r2
 8007532:	d3d2      	bcc.n	80074da <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1acb      	subs	r3, r1, r3
 800754e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007552:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755a:	461a      	mov	r2, r3
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6979      	ldr	r1, [r7, #20]
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fa57 	bl	8006a1e <clust2sect>
 8007570:	4602      	mov	r2, r0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007578:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007584:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759c:	895b      	ldrh	r3, [r3, #10]
 800759e:	095b      	lsrs	r3, r3, #5
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80075aa:	fb01 f202 	mul.w	r2, r1, r2
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	015b      	lsls	r3, r3, #5
 80075b2:	4403      	add	r3, r0
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075ba:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd90      	pop	{r4, r7, pc}

080075c6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80075d0:	2100      	movs	r1, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fddf 	bl	8007196 <dir_sdi>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d135      	bne.n	800764e <dir_alloc+0x88>
		n = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7ff f91f 	bl	800683c <move_window>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d121      	bne.n	800764c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2be5      	cmp	r3, #229	; 0xe5
 8007614:	d006      	beq.n	8007624 <dir_alloc+0x5e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d107      	bne.n	8007634 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3301      	adds	r3, #1
 8007628:	60bb      	str	r3, [r7, #8]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d102      	bne.n	8007638 <dir_alloc+0x72>
 8007632:	e00c      	b.n	800764e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007638:	2101      	movs	r1, #1
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fe79 	bl	8007332 <dir_next>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0cd      	beq.n	80075e6 <dir_alloc+0x20>
 800764a:	e000      	b.n	800764e <dir_alloc+0x88>
			if (res != FR_OK) break;
 800764c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b04      	cmp	r3, #4
 8007652:	d101      	bne.n	8007658 <dir_alloc+0x92>
 8007654:	2307      	movs	r3, #7
 8007656:	73fb      	strb	r3, [r7, #15]
	return res;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	331b      	adds	r3, #27
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	b21a      	sxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	331a      	adds	r3, #26
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b21b      	sxth	r3, r3
 800767e:	4313      	orrs	r3, r2
 8007680:	b21b      	sxth	r3, r3
 8007682:	b29b      	uxth	r3, r3
 8007684:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b03      	cmp	r3, #3
 8007690:	d10f      	bne.n	80076b2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	3315      	adds	r3, #21
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	b21a      	sxth	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	3314      	adds	r3, #20
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	4313      	orrs	r3, r2
 80076a6:	b21b      	sxth	r3, r3
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	041b      	lsls	r3, r3, #16
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

	return cl;
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	331a      	adds	r3, #26
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	331b      	adds	r3, #27
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	0c1a      	lsrs	r2, r3, #16
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3314      	adds	r3, #20
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	0c1b      	lsrs	r3, r3, #16
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3315      	adds	r3, #21
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	701a      	strb	r2, [r3, #0]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr

0800770a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b086      	sub	sp, #24
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007712:	2100      	movs	r1, #0
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff fd3e 	bl	8007196 <dir_sdi>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <dir_find+0x1e>
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	e03f      	b.n	80077a8 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f7ff f87e 	bl	800683c <move_window>
 8007740:	4603      	mov	r3, r0
 8007742:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d12a      	bne.n	80077a0 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <dir_find+0x5c>
 8007760:	2304      	movs	r3, #4
 8007762:	75fb      	strb	r3, [r7, #23]
 8007764:	e01f      	b.n	80077a6 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	330b      	adds	r3, #11
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10b      	bne.n	800778c <dir_find+0x82>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	220b      	movs	r2, #11
 800777e:	4619      	mov	r1, r3
 8007780:	6938      	ldr	r0, [r7, #16]
 8007782:	f7fe fe0b 	bl	800639c <mem_cmp>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800778c:	2100      	movs	r1, #0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fdcf 	bl	8007332 <dir_next>
 8007794:	4603      	mov	r3, r0
 8007796:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c4      	beq.n	8007728 <dir_find+0x1e>
 800779e:	e002      	b.n	80077a6 <dir_find+0x9c>
		if (res != FR_OK) break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <dir_find+0x9c>
			break;
 80077a4:	bf00      	nop

	return res;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80077b8:	2101      	movs	r1, #1
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff ff03 	bl	80075c6 <dir_alloc>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d12d      	bne.n	8007826 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7ff f82d 	bl	800683c <move_window>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d11c      	bne.n	8007826 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	2220      	movs	r2, #32
 80077f6:	2100      	movs	r1, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe fdb5 	bl	8006368 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007804:	6958      	ldr	r0, [r3, #20]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	220b      	movs	r2, #11
 8007810:	4619      	mov	r1, r3
 8007812:	f7fe fd8b 	bl	800632c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007822:	2201      	movs	r2, #1
 8007824:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e002      	b.n	8007848 <create_name+0x18>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3301      	adds	r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b2f      	cmp	r3, #47	; 0x2f
 800784e:	d0f8      	beq.n	8007842 <create_name+0x12>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b5c      	cmp	r3, #92	; 0x5c
 8007856:	d0f4      	beq.n	8007842 <create_name+0x12>
	sfn = dp->fn;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007862:	220b      	movs	r2, #11
 8007864:	2120      	movs	r1, #32
 8007866:	68b8      	ldr	r0, [r7, #8]
 8007868:	f7fe fd7e 	bl	8006368 <mem_set>
	si = i = b = 0; ni = 8;
 800786c:	2300      	movs	r3, #0
 800786e:	77fb      	strb	r3, [r7, #31]
 8007870:	2300      	movs	r3, #0
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	2308      	movs	r3, #8
 800787a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	617a      	str	r2, [r7, #20]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800788a:	7fbb      	ldrb	r3, [r7, #30]
 800788c:	2b20      	cmp	r3, #32
 800788e:	d953      	bls.n	8007938 <create_name+0x108>
 8007890:	7fbb      	ldrb	r3, [r7, #30]
 8007892:	2b2f      	cmp	r3, #47	; 0x2f
 8007894:	d050      	beq.n	8007938 <create_name+0x108>
 8007896:	7fbb      	ldrb	r3, [r7, #30]
 8007898:	2b5c      	cmp	r3, #92	; 0x5c
 800789a:	d04d      	beq.n	8007938 <create_name+0x108>
		if (c == '.' || i >= ni) {
 800789c:	7fbb      	ldrb	r3, [r7, #30]
 800789e:	2b2e      	cmp	r3, #46	; 0x2e
 80078a0:	d003      	beq.n	80078aa <create_name+0x7a>
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d30f      	bcc.n	80078ca <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d102      	bne.n	80078b6 <create_name+0x86>
 80078b0:	7fbb      	ldrb	r3, [r7, #30]
 80078b2:	2b2e      	cmp	r3, #46	; 0x2e
 80078b4:	d001      	beq.n	80078ba <create_name+0x8a>
 80078b6:	2306      	movs	r3, #6
 80078b8:	e073      	b.n	80079a2 <create_name+0x172>
			i = 8; ni = 11;
 80078ba:	2308      	movs	r3, #8
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	230b      	movs	r3, #11
 80078c0:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80078c2:	7ffb      	ldrb	r3, [r7, #31]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	77fb      	strb	r3, [r7, #31]
 80078c8:	e035      	b.n	8007936 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 80078ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	da08      	bge.n	80078e4 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 80078d2:	7ffb      	ldrb	r3, [r7, #31]
 80078d4:	f043 0303 	orr.w	r3, r3, #3
 80078d8:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80078da:	7fbb      	ldrb	r3, [r7, #30]
 80078dc:	3b80      	subs	r3, #128	; 0x80
 80078de:	4a33      	ldr	r2, [pc, #204]	; (80079ac <create_name+0x17c>)
 80078e0:	5cd3      	ldrb	r3, [r2, r3]
 80078e2:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80078e4:	7fbb      	ldrb	r3, [r7, #30]
 80078e6:	4619      	mov	r1, r3
 80078e8:	4831      	ldr	r0, [pc, #196]	; (80079b0 <create_name+0x180>)
 80078ea:	f7fe fd7d 	bl	80063e8 <chk_chr>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <create_name+0xc8>
				return FR_INVALID_NAME;
 80078f4:	2306      	movs	r3, #6
 80078f6:	e054      	b.n	80079a2 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80078f8:	7fbb      	ldrb	r3, [r7, #30]
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d907      	bls.n	800790e <create_name+0xde>
 80078fe:	7fbb      	ldrb	r3, [r7, #30]
 8007900:	2b5a      	cmp	r3, #90	; 0x5a
 8007902:	d804      	bhi.n	800790e <create_name+0xde>
				b |= 2;
 8007904:	7ffb      	ldrb	r3, [r7, #31]
 8007906:	f043 0302 	orr.w	r3, r3, #2
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	e00c      	b.n	8007928 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800790e:	7fbb      	ldrb	r3, [r7, #30]
 8007910:	2b60      	cmp	r3, #96	; 0x60
 8007912:	d909      	bls.n	8007928 <create_name+0xf8>
 8007914:	7fbb      	ldrb	r3, [r7, #30]
 8007916:	2b7a      	cmp	r3, #122	; 0x7a
 8007918:	d806      	bhi.n	8007928 <create_name+0xf8>
					b |= 1; c -= 0x20;
 800791a:	7ffb      	ldrb	r3, [r7, #31]
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	77fb      	strb	r3, [r7, #31]
 8007922:	7fbb      	ldrb	r3, [r7, #30]
 8007924:	3b20      	subs	r3, #32
 8007926:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	613a      	str	r2, [r7, #16]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4413      	add	r3, r2
 8007932:	7fba      	ldrb	r2, [r7, #30]
 8007934:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007936:	e7a1      	b.n	800787c <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	441a      	add	r2, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007942:	7fbb      	ldrb	r3, [r7, #30]
 8007944:	2b20      	cmp	r3, #32
 8007946:	d801      	bhi.n	800794c <create_name+0x11c>
 8007948:	2304      	movs	r3, #4
 800794a:	e000      	b.n	800794e <create_name+0x11e>
 800794c:	2300      	movs	r3, #0
 800794e:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <create_name+0x12a>
 8007956:	2306      	movs	r3, #6
 8007958:	e023      	b.n	80079a2 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2be5      	cmp	r3, #229	; 0xe5
 8007960:	d102      	bne.n	8007968 <create_name+0x138>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2205      	movs	r2, #5
 8007966:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2b08      	cmp	r3, #8
 800796c:	d102      	bne.n	8007974 <create_name+0x144>
 800796e:	7ffb      	ldrb	r3, [r7, #31]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007974:	7ffb      	ldrb	r3, [r7, #31]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b01      	cmp	r3, #1
 800797c:	d103      	bne.n	8007986 <create_name+0x156>
 800797e:	7fbb      	ldrb	r3, [r7, #30]
 8007980:	f043 0310 	orr.w	r3, r3, #16
 8007984:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007986:	7ffb      	ldrb	r3, [r7, #31]
 8007988:	f003 030c 	and.w	r3, r3, #12
 800798c:	2b04      	cmp	r3, #4
 800798e:	d103      	bne.n	8007998 <create_name+0x168>
 8007990:	7fbb      	ldrb	r3, [r7, #30]
 8007992:	f043 0308 	orr.w	r3, r3, #8
 8007996:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	330b      	adds	r3, #11
 800799c:	7fba      	ldrb	r2, [r7, #30]
 800799e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80079a0:	2300      	movs	r3, #0
#endif
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	0800e800 	.word	0x0800e800
 80079b0:	0800e740 	.word	0x0800e740

080079b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b2f      	cmp	r3, #47	; 0x2f
 80079c4:	d003      	beq.n	80079ce <follow_path+0x1a>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b5c      	cmp	r3, #92	; 0x5c
 80079cc:	d102      	bne.n	80079d4 <follow_path+0x20>
		path++;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	3301      	adds	r3, #1
 80079d2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079da:	461a      	mov	r2, r3
 80079dc:	2300      	movs	r3, #0
 80079de:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b1f      	cmp	r3, #31
 80079e6:	d80c      	bhi.n	8007a02 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff fbd3 	bl	8007196 <dir_sdi>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fa:	461a      	mov	r2, r3
 80079fc:	2300      	movs	r3, #0
 80079fe:	6153      	str	r3, [r2, #20]
 8007a00:	e049      	b.n	8007a96 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a02:	463b      	mov	r3, r7
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff ff12 	bl	8007830 <create_name>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13a      	bne.n	8007a8c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff fe77 	bl	800770a <dir_find>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	7adb      	ldrb	r3, [r3, #11]
 8007a2a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d12b      	bne.n	8007a90 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d126      	bne.n	8007a90 <follow_path+0xdc>
 8007a42:	2305      	movs	r3, #5
 8007a44:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007a46:	e023      	b.n	8007a90 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d120      	bne.n	8007a94 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	330b      	adds	r3, #11
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	f003 0310 	and.w	r3, r3, #16
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d102      	bne.n	8007a70 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8007a6a:	2305      	movs	r3, #5
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	e012      	b.n	8007a96 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fdf1 	bl	8007662 <ld_clust>
 8007a80:	4602      	mov	r2, r0
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a88:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a8a:	e7ba      	b.n	8007a02 <follow_path+0x4e>
			if (res != FR_OK) break;
 8007a8c:	bf00      	nop
 8007a8e:	e002      	b.n	8007a96 <follow_path+0xe2>
				break;
 8007a90:	bf00      	nop
 8007a92:	e000      	b.n	8007a96 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a94:	bf00      	nop
		}
	}

	return res;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007aac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d031      	beq.n	8007b1a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e002      	b.n	8007ac4 <get_ldnumber+0x24>
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d903      	bls.n	8007ad4 <get_ldnumber+0x34>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b3a      	cmp	r3, #58	; 0x3a
 8007ad2:	d1f4      	bne.n	8007abe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b3a      	cmp	r3, #58	; 0x3a
 8007ada:	d11c      	bne.n	8007b16 <get_ldnumber+0x76>
			tp = *path;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	60fa      	str	r2, [r7, #12]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	3b30      	subs	r3, #48	; 0x30
 8007aec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d80e      	bhi.n	8007b12 <get_ldnumber+0x72>
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d10a      	bne.n	8007b12 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <get_ldnumber+0x72>
					vol = (int)i;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	e002      	b.n	8007b1c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b16:	2300      	movs	r3, #0
 8007b18:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b1a:	693b      	ldr	r3, [r7, #16]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
	...

08007b28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b38:	2200      	movs	r2, #0
 8007b3a:	711a      	strb	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b42:	461a      	mov	r2, r3
 8007b44:	f04f 33ff 	mov.w	r3, #4294967295
 8007b48:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fe fe75 	bl	800683c <move_window>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <check_fs+0x34>
		return 3;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e04a      	b.n	8007bf2 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b62:	3301      	adds	r3, #1
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	b21a      	sxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007b70:	b21b      	sxth	r3, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	b21b      	sxth	r3, r3
 8007b76:	4a21      	ldr	r2, [pc, #132]	; (8007bfc <check_fs+0xd4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d001      	beq.n	8007b80 <check_fs+0x58>
		return 2;
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e038      	b.n	8007bf2 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3336      	adds	r3, #54	; 0x36
 8007b84:	3303      	adds	r3, #3
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	061a      	lsls	r2, r3, #24
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3336      	adds	r3, #54	; 0x36
 8007b8e:	3302      	adds	r3, #2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	4313      	orrs	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	3236      	adds	r2, #54	; 0x36
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	7812      	ldrb	r2, [r2, #0]
 8007b9e:	0212      	lsls	r2, r2, #8
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bae:	4a14      	ldr	r2, [pc, #80]	; (8007c00 <check_fs+0xd8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d101      	bne.n	8007bb8 <check_fs+0x90>
		return 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e01c      	b.n	8007bf2 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3352      	adds	r3, #82	; 0x52
 8007bbc:	3303      	adds	r3, #3
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	061a      	lsls	r2, r3, #24
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3352      	adds	r3, #82	; 0x52
 8007bc6:	3302      	adds	r3, #2
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	3252      	adds	r2, #82	; 0x52
 8007bd2:	3201      	adds	r2, #1
 8007bd4:	7812      	ldrb	r2, [r2, #0]
 8007bd6:	0212      	lsls	r2, r2, #8
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007be6:	4a06      	ldr	r2, [pc, #24]	; (8007c00 <check_fs+0xd8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d101      	bne.n	8007bf0 <check_fs+0xc8>
		return 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e000      	b.n	8007bf2 <check_fs+0xca>

	return 1;
 8007bf0:	2301      	movs	r3, #1
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	ffffaa55 	.word	0xffffaa55
 8007c00:	00544146 	.word	0x00544146

08007c04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b096      	sub	sp, #88	; 0x58
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c18:	68b8      	ldr	r0, [r7, #8]
 8007c1a:	f7ff ff41 	bl	8007aa0 <get_ldnumber>
 8007c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da01      	bge.n	8007c2a <find_volume+0x26>
 8007c26:	230b      	movs	r3, #11
 8007c28:	e311      	b.n	800824e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c2a:	4a98      	ldr	r2, [pc, #608]	; (8007e8c <find_volume+0x288>)
 8007c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <find_volume+0x3a>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	e307      	b.n	800824e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c42:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01c      	beq.n	8007c8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fac9 	bl	80061f0 <disk_status>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10c      	bne.n	8007c8a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <find_volume+0x82>
 8007c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c82:	230a      	movs	r3, #10
 8007c84:	e2e3      	b.n	800824e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007c86:	2300      	movs	r3, #0
 8007c88:	e2e1      	b.n	800824e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fabb 	bl	8006224 <disk_initialize>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e2c4      	b.n	800824e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <find_volume+0xd6>
 8007cca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cce:	f003 0304 	and.w	r3, r3, #4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007cd6:	230a      	movs	r3, #10
 8007cd8:	e2b9      	b.n	800824e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce0:	7858      	ldrb	r0, [r3, #1]
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce8:	330a      	adds	r3, #10
 8007cea:	461a      	mov	r2, r3
 8007cec:	2102      	movs	r1, #2
 8007cee:	f7fe faff 	bl	80062f0 <disk_ioctl>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfe:	895b      	ldrh	r3, [r3, #10]
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d04:	d306      	bcc.n	8007d14 <find_volume+0x110>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	895b      	ldrh	r3, [r3, #10]
 8007d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d12:	d901      	bls.n	8007d18 <find_volume+0x114>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e29a      	b.n	800824e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007d1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d20:	f7ff ff02 	bl	8007b28 <check_fs>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d153      	bne.n	8007dda <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007d32:	2300      	movs	r3, #0
 8007d34:	643b      	str	r3, [r7, #64]	; 0x40
 8007d36:	e028      	b.n	8007d8a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d42:	4413      	add	r3, r2
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	3304      	adds	r3, #4
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d012      	beq.n	8007d76 <find_volume+0x172>
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	330b      	adds	r3, #11
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	061a      	lsls	r2, r3, #24
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	330a      	adds	r3, #10
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	041b      	lsls	r3, r3, #16
 8007d60:	4313      	orrs	r3, r2
 8007d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d64:	3209      	adds	r2, #9
 8007d66:	7812      	ldrb	r2, [r2, #0]
 8007d68:	0212      	lsls	r2, r2, #8
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	3208      	adds	r2, #8
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	e000      	b.n	8007d78 <find_volume+0x174>
 8007d76:	2200      	movs	r2, #0
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	3358      	adds	r3, #88	; 0x58
 8007d7e:	443b      	add	r3, r7
 8007d80:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d86:	3301      	adds	r3, #1
 8007d88:	643b      	str	r3, [r7, #64]	; 0x40
 8007d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d9d3      	bls.n	8007d38 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007d90:	2300      	movs	r3, #0
 8007d92:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <find_volume+0x19c>
 8007d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	3358      	adds	r3, #88	; 0x58
 8007da6:	443b      	add	r3, r7
 8007da8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007dac:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <find_volume+0x1bc>
 8007db4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007db6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007db8:	f7ff feb6 	bl	8007b28 <check_fs>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	e000      	b.n	8007dc2 <find_volume+0x1be>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <find_volume+0x1d6>
 8007dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d9e2      	bls.n	8007da0 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d101      	bne.n	8007de6 <find_volume+0x1e2>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e233      	b.n	800824e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <find_volume+0x1ee>
 8007dee:	230d      	movs	r3, #13
 8007df0:	e22d      	b.n	800824e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	7b1b      	ldrb	r3, [r3, #12]
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	b21a      	sxth	r2, r3
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	7adb      	ldrb	r3, [r3, #11]
 8007dfe:	b21b      	sxth	r3, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b21a      	sxth	r2, r3
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0a:	895b      	ldrh	r3, [r3, #10]
 8007e0c:	b21b      	sxth	r3, r3
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d001      	beq.n	8007e16 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007e12:	230d      	movs	r3, #13
 8007e14:	e21b      	b.n	800824e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	7ddb      	ldrb	r3, [r3, #23]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	b21a      	sxth	r2, r3
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	7d9b      	ldrb	r3, [r3, #22]
 8007e22:	b21b      	sxth	r3, r3
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b21b      	sxth	r3, r3
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d112      	bne.n	8007e58 <find_volume+0x254>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007e38:	061a      	lsls	r2, r3, #24
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	4313      	orrs	r3, r2
 8007e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e46:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007e4a:	0212      	lsls	r2, r2, #8
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e50:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007e54:	4313      	orrs	r3, r2
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e62:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	7c1a      	ldrb	r2, [r3, #16]
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e6e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e76:	78db      	ldrb	r3, [r3, #3]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d009      	beq.n	8007e90 <find_volume+0x28c>
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e82:	78db      	ldrb	r3, [r3, #3]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d003      	beq.n	8007e90 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007e88:	230d      	movs	r3, #13
 8007e8a:	e1e0      	b.n	800824e <find_volume+0x64a>
 8007e8c:	20002d3c 	.word	0x20002d3c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e96:	78db      	ldrb	r3, [r3, #3]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ea0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	7b5a      	ldrb	r2, [r3, #13]
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eac:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	789b      	ldrb	r3, [r3, #2]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00c      	beq.n	8007ed4 <find_volume+0x2d0>
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec0:	789b      	ldrb	r3, [r3, #2]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eca:	789b      	ldrb	r3, [r3, #2]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	4013      	ands	r3, r2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007ed4:	230d      	movs	r3, #13
 8007ed6:	e1ba      	b.n	800824e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	7c9b      	ldrb	r3, [r3, #18]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	b21a      	sxth	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	7c5b      	ldrb	r3, [r3, #17]
 8007ee4:	b21b      	sxth	r3, r3
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	b21b      	sxth	r3, r3
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efa:	891b      	ldrh	r3, [r3, #8]
 8007efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f02:	8952      	ldrh	r2, [r2, #10]
 8007f04:	0952      	lsrs	r2, r2, #5
 8007f06:	b292      	uxth	r2, r2
 8007f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f0c:	fb01 f202 	mul.w	r2, r1, r2
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007f18:	230d      	movs	r3, #13
 8007f1a:	e198      	b.n	800824e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	7d1b      	ldrb	r3, [r3, #20]
 8007f20:	021b      	lsls	r3, r3, #8
 8007f22:	b21a      	sxth	r2, r3
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	7cdb      	ldrb	r3, [r3, #19]
 8007f28:	b21b      	sxth	r3, r3
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	b21b      	sxth	r3, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d112      	bne.n	8007f5e <find_volume+0x35a>
 8007f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007f3e:	061a      	lsls	r2, r3, #24
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007f46:	041b      	lsls	r3, r3, #16
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f4c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007f50:	0212      	lsls	r2, r2, #8
 8007f52:	4313      	orrs	r3, r2
 8007f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f56:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	7bdb      	ldrb	r3, [r3, #15]
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	b21a      	sxth	r2, r3
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	7b9b      	ldrb	r3, [r3, #14]
 8007f6a:	b21b      	sxth	r3, r3
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	b21b      	sxth	r3, r3
 8007f70:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007f72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <find_volume+0x378>
 8007f78:	230d      	movs	r3, #13
 8007f7a:	e168      	b.n	800824e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007f7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f80:	4413      	add	r3, r2
 8007f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f88:	8911      	ldrh	r1, [r2, #8]
 8007f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f90:	8952      	ldrh	r2, [r2, #10]
 8007f92:	0952      	lsrs	r2, r2, #5
 8007f94:	b292      	uxth	r2, r2
 8007f96:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f9a:	b292      	uxth	r2, r2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d201      	bcs.n	8007fac <find_volume+0x3a8>
 8007fa8:	230d      	movs	r3, #13
 8007faa:	e150      	b.n	800824e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fb8:	7892      	ldrb	r2, [r2, #2]
 8007fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <find_volume+0x3c6>
 8007fc6:	230d      	movs	r3, #13
 8007fc8:	e141      	b.n	800824e <find_volume+0x64a>
	fmt = FS_FAT12;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d902      	bls.n	8007fe0 <find_volume+0x3dc>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d902      	bls.n	8007ff0 <find_volume+0x3ec>
 8007fea:	2303      	movs	r3, #3
 8007fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ffa:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008002:	461a      	mov	r2, r3
 8008004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008006:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008008:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800800a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800c:	4413      	add	r3, r2
 800800e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008010:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008014:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8008016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	4413      	add	r3, r2
 800801c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800801e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008022:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8008024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008028:	2b03      	cmp	r3, #3
 800802a:	d124      	bne.n	8008076 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008032:	891b      	ldrh	r3, [r3, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <find_volume+0x438>
 8008038:	230d      	movs	r3, #13
 800803a:	e108      	b.n	800824e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008042:	061a      	lsls	r2, r3, #24
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	4313      	orrs	r3, r2
 800804e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008050:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008054:	0212      	lsls	r2, r2, #8
 8008056:	4313      	orrs	r3, r2
 8008058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800805e:	4313      	orrs	r3, r2
 8008060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008062:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008066:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	647b      	str	r3, [r7, #68]	; 0x44
 8008074:	e02b      	b.n	80080ce <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807c:	891b      	ldrh	r3, [r3, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <find_volume+0x482>
 8008082:	230d      	movs	r3, #13
 8008084:	e0e3      	b.n	800824e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008090:	4413      	add	r3, r2
 8008092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008094:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008098:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800809a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d105      	bne.n	80080ae <find_volume+0x4aa>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	e00e      	b.n	80080cc <find_volume+0x4c8>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b4:	695a      	ldr	r2, [r3, #20]
 80080b6:	4613      	mov	r3, r2
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	4413      	add	r3, r2
 80080bc:	085a      	lsrs	r2, r3, #1
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80080cc:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080dc:	895b      	ldrh	r3, [r3, #10]
 80080de:	4619      	mov	r1, r3
 80080e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e2:	440b      	add	r3, r1
 80080e4:	3b01      	subs	r3, #1
 80080e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080e8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80080ec:	8949      	ldrh	r1, [r1, #10]
 80080ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d201      	bcs.n	80080fa <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80080f6:	230d      	movs	r3, #13
 80080f8:	e0a9      	b.n	800824e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008100:	461a      	mov	r2, r3
 8008102:	f04f 33ff 	mov.w	r3, #4294967295
 8008106:	6113      	str	r3, [r2, #16]
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008112:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008116:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811e:	2280      	movs	r2, #128	; 0x80
 8008120:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008126:	2b03      	cmp	r3, #3
 8008128:	d17a      	bne.n	8008220 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	b21a      	sxth	r2, r3
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800813a:	b21b      	sxth	r3, r3
 800813c:	4313      	orrs	r3, r2
 800813e:	b21b      	sxth	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	d16d      	bne.n	8008220 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008146:	3301      	adds	r3, #1
 8008148:	4619      	mov	r1, r3
 800814a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800814c:	f7fe fb76 	bl	800683c <move_window>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d164      	bne.n	8008220 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815c:	2200      	movs	r2, #0
 800815e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	b21a      	sxth	r2, r3
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008170:	b21b      	sxth	r3, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	b21b      	sxth	r3, r3
 8008176:	4a38      	ldr	r2, [pc, #224]	; (8008258 <find_volume+0x654>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d151      	bne.n	8008220 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	78db      	ldrb	r3, [r3, #3]
 8008180:	061a      	lsls	r2, r3, #24
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	789b      	ldrb	r3, [r3, #2]
 8008186:	041b      	lsls	r3, r3, #16
 8008188:	4313      	orrs	r3, r2
 800818a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818c:	7852      	ldrb	r2, [r2, #1]
 800818e:	0212      	lsls	r2, r2, #8
 8008190:	4313      	orrs	r3, r2
 8008192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008194:	7812      	ldrb	r2, [r2, #0]
 8008196:	4313      	orrs	r3, r2
 8008198:	4a30      	ldr	r2, [pc, #192]	; (800825c <find_volume+0x658>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d140      	bne.n	8008220 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80081a4:	061a      	lsls	r2, r3, #24
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	4313      	orrs	r3, r2
 80081b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081b2:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80081b6:	0212      	lsls	r2, r2, #8
 80081b8:	4313      	orrs	r3, r2
 80081ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081bc:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80081c0:	4313      	orrs	r3, r2
 80081c2:	4a27      	ldr	r2, [pc, #156]	; (8008260 <find_volume+0x65c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d12b      	bne.n	8008220 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80081ce:	061a      	lsls	r2, r3, #24
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	4313      	orrs	r3, r2
 80081da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081dc:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80081e0:	0212      	lsls	r2, r2, #8
 80081e2:	4313      	orrs	r3, r2
 80081e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081e6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80081ea:	4313      	orrs	r3, r2
 80081ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081f2:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80081fa:	061a      	lsls	r2, r3, #24
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	4313      	orrs	r3, r2
 8008206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008208:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800820c:	0212      	lsls	r2, r2, #8
 800820e:	4313      	orrs	r3, r2
 8008210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008212:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008216:	4313      	orrs	r3, r2
 8008218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800821a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800821e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008226:	461a      	mov	r2, r3
 8008228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800822c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <find_volume+0x660>)
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <find_volume+0x660>)
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <find_volume+0x660>)
 800823c:	881a      	ldrh	r2, [r3, #0]
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008244:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008246:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008248:	f7fe fa7c 	bl	8006744 <clear_lock>
#endif

	return FR_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3758      	adds	r7, #88	; 0x58
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	ffffaa55 	.word	0xffffaa55
 800825c:	41615252 	.word	0x41615252
 8008260:	61417272 	.word	0x61417272
 8008264:	20002d40 	.word	0x20002d40

08008268 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d02a      	beq.n	80082d0 <validate+0x68>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d024      	beq.n	80082d0 <validate+0x68>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01b      	beq.n	80082d0 <validate+0x68>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	88da      	ldrh	r2, [r3, #6]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ac:	889b      	ldrh	r3, [r3, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d10e      	bne.n	80082d0 <validate+0x68>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082be:	785b      	ldrb	r3, [r3, #1]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fd ff95 	bl	80061f0 <disk_status>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <validate+0x6c>
		return FR_INVALID_OBJECT;
 80082d0:	2309      	movs	r3, #9
 80082d2:	e000      	b.n	80082d6 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80082f2:	f107 0310 	add.w	r3, r7, #16
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff fbd2 	bl	8007aa0 <get_ldnumber>
 80082fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	da01      	bge.n	8008308 <f_mount+0x28>
 8008304:	230b      	movs	r3, #11
 8008306:	e02f      	b.n	8008368 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008308:	4a19      	ldr	r2, [pc, #100]	; (8008370 <f_mount+0x90>)
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008310:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8008318:	69b8      	ldr	r0, [r7, #24]
 800831a:	f7fe fa13 	bl	8006744 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008334:	2200      	movs	r2, #0
 8008336:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	490d      	ldr	r1, [pc, #52]	; (8008370 <f_mount+0x90>)
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <f_mount+0x6e>
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d001      	beq.n	8008352 <f_mount+0x72>
 800834e:	2300      	movs	r3, #0
 8008350:	e00a      	b.n	8008368 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008352:	f107 0108 	add.w	r1, r7, #8
 8008356:	f107 030c 	add.w	r3, r7, #12
 800835a:	2200      	movs	r2, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fc51 	bl	8007c04 <find_volume>
 8008362:	4603      	mov	r3, r0
 8008364:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008366:	7dfb      	ldrb	r3, [r7, #23]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3720      	adds	r7, #32
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20002d3c 	.word	0x20002d3c

08008374 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008382:	f843 0c44 	str.w	r0, [r3, #-68]
 8008386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800838a:	f843 1c48 	str.w	r1, [r3, #-72]
 800838e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008392:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800839a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <f_open+0x32>
 80083a2:	2309      	movs	r3, #9
 80083a4:	e2e6      	b.n	8008974 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 80083a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80083ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b2:	461a      	mov	r2, r3
 80083b4:	2300      	movs	r3, #0
 80083b6:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80083b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083bc:	461a      	mov	r2, r3
 80083be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083c2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80083ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083d2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80083d6:	f023 0301 	bic.w	r3, r3, #1
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	f107 0110 	add.w	r1, r7, #16
 80083e0:	3908      	subs	r1, #8
 80083e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083e6:	3b10      	subs	r3, #16
 80083e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff fc09 	bl	8007c04 <find_volume>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083f8:	f102 020f 	add.w	r2, r2, #15
 80083fc:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80083fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008402:	f103 030f 	add.w	r3, r3, #15
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 82ae 	bne.w	800896a <f_open+0x5f6>
		INIT_BUF(dj);
 800840e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008412:	461a      	mov	r2, r3
 8008414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008418:	3b1c      	subs	r3, #28
 800841a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800841e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008422:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8008426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800842a:	3b10      	subs	r3, #16
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff fac0 	bl	80079b4 <follow_path>
 8008434:	4603      	mov	r3, r0
 8008436:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800843a:	f102 020f 	add.w	r2, r2, #15
 800843e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8008440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008444:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8008448:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800844c:	f102 0208 	add.w	r2, r2, #8
 8008450:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008452:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008456:	f103 030f 	add.w	r3, r3, #15
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d126      	bne.n	80084ae <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 8008460:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008464:	f103 0308 	add.w	r3, r3, #8
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <f_open+0x108>
				res = FR_INVALID_NAME;
 800846e:	2306      	movs	r3, #6
 8008470:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008474:	f102 020f 	add.w	r2, r2, #15
 8008478:	7013      	strb	r3, [r2, #0]
 800847a:	e018      	b.n	80084ae <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800847c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008480:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	bf14      	ite	ne
 800848c:	2301      	movne	r3, #1
 800848e:	2300      	moveq	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008498:	3b10      	subs	r3, #16
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd ffbd 	bl	800641c <chk_lock>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084a8:	f102 020f 	add.w	r2, r2, #15
 80084ac:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084b2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80084b6:	f003 031c 	and.w	r3, r3, #28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8134 	beq.w	8008728 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 80084c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084c4:	f103 030f 	add.w	r3, r3, #15
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d02e      	beq.n	800852c <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80084ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084d2:	f103 030f 	add.w	r3, r3, #15
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d112      	bne.n	8008502 <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084dc:	f7fe f80e 	bl	80064fc <enq_lock>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <f_open+0x182>
 80084e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084ea:	3b10      	subs	r3, #16
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff f95f 	bl	80077b0 <dir_register>
 80084f2:	4603      	mov	r3, r0
 80084f4:	e000      	b.n	80084f8 <f_open+0x184>
 80084f6:	2312      	movs	r3, #18
 80084f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084fc:	f102 020f 	add.w	r2, r2, #15
 8008500:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008502:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008506:	461a      	mov	r2, r3
 8008508:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800850c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008510:	f043 0308 	orr.w	r3, r3, #8
 8008514:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8008518:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800851c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8008520:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008524:	f102 0208 	add.w	r2, r2, #8
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	e01f      	b.n	800856c <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800852c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008530:	f103 0308 	add.w	r3, r3, #8
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	330b      	adds	r3, #11
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 0311 	and.w	r3, r3, #17
 800853e:	2b00      	cmp	r3, #0
 8008540:	d006      	beq.n	8008550 <f_open+0x1dc>
					res = FR_DENIED;
 8008542:	2307      	movs	r3, #7
 8008544:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008548:	f102 020f 	add.w	r2, r2, #15
 800854c:	7013      	strb	r3, [r2, #0]
 800854e:	e00d      	b.n	800856c <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008550:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008554:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <f_open+0x1f8>
						res = FR_EXIST;
 8008560:	2308      	movs	r3, #8
 8008562:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008566:	f102 020f 	add.w	r2, r2, #15
 800856a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800856c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008570:	f103 030f 	add.w	r3, r3, #15
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f040 8108 	bne.w	800878c <f_open+0x418>
 800857c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008580:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80ff 	beq.w	800878c <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 800858e:	f7fd fdd7 	bl	8006140 <get_fattime>
 8008592:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008596:	f103 0304 	add.w	r3, r3, #4
 800859a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800859c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085a0:	f103 0308 	add.w	r3, r3, #8
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	330e      	adds	r3, #14
 80085a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085ac:	f102 0204 	add.w	r2, r2, #4
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085ba:	f103 0304 	add.w	r3, r3, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	0a1b      	lsrs	r3, r3, #8
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085ca:	f103 0308 	add.w	r3, r3, #8
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330f      	adds	r3, #15
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	701a      	strb	r2, [r3, #0]
 80085d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085da:	f103 0304 	add.w	r3, r3, #4
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	0c1a      	lsrs	r2, r3, #16
 80085e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085e6:	f103 0308 	add.w	r3, r3, #8
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3310      	adds	r3, #16
 80085ee:	b2d2      	uxtb	r2, r2
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085f6:	f103 0304 	add.w	r3, r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	0e1a      	lsrs	r2, r3, #24
 80085fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008602:	f103 0308 	add.w	r3, r3, #8
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3311      	adds	r3, #17
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800860e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008612:	f103 0308 	add.w	r3, r3, #8
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	330b      	adds	r3, #11
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800861e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008622:	f103 0308 	add.w	r3, r3, #8
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	331c      	adds	r3, #28
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008632:	f103 0308 	add.w	r3, r3, #8
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	331d      	adds	r3, #29
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008642:	f103 0308 	add.w	r3, r3, #8
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	331e      	adds	r3, #30
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
 800864e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008652:	f103 0308 	add.w	r3, r3, #8
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	331f      	adds	r3, #31
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800865e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008662:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008666:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800866a:	f102 0208 	add.w	r2, r2, #8
 800866e:	6811      	ldr	r1, [r2, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fff6 	bl	8007662 <ld_clust>
 8008676:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800867a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800867c:	2100      	movs	r1, #0
 800867e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008682:	f103 0308 	add.w	r3, r3, #8
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	f7ff f819 	bl	80076be <st_clust>
				dj.fs->wflag = 1;
 800868c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008690:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008698:	2201      	movs	r2, #1
 800869a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800869c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d072      	beq.n	800878c <f_open+0x418>
					dw = dj.fs->winsect;
 80086a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086aa:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80086ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086b8:	f102 0204 	add.w	r2, r2, #4
 80086bc:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80086be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086c2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80086c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086ca:	6811      	ldr	r1, [r2, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fc19 	bl	8006f04 <remove_chain>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086d8:	f102 020f 	add.w	r2, r2, #15
 80086dc:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80086de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086e2:	f103 030f 	add.w	r3, r3, #15
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d14f      	bne.n	800878c <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80086ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086f0:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 80086f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008700:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8008702:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008706:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800870a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800870e:	f102 0204 	add.w	r2, r2, #4
 8008712:	6811      	ldr	r1, [r2, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe f891 	bl	800683c <move_window>
 800871a:	4603      	mov	r3, r0
 800871c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008720:	f102 020f 	add.w	r2, r2, #15
 8008724:	7013      	strb	r3, [r2, #0]
 8008726:	e031      	b.n	800878c <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008728:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800872c:	f103 030f 	add.w	r3, r3, #15
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d12a      	bne.n	800878c <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008736:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800873a:	f103 0308 	add.w	r3, r3, #8
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	330b      	adds	r3, #11
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <f_open+0x3e6>
					res = FR_NO_FILE;
 800874c:	2304      	movs	r3, #4
 800874e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008752:	f102 020f 	add.w	r2, r2, #15
 8008756:	7013      	strb	r3, [r2, #0]
 8008758:	e018      	b.n	800878c <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800875a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800875e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d010      	beq.n	800878c <f_open+0x418>
 800876a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800876e:	f103 0308 	add.w	r3, r3, #8
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	330b      	adds	r3, #11
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <f_open+0x418>
						res = FR_DENIED;
 8008780:	2307      	movs	r3, #7
 8008782:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008786:	f102 020f 	add.w	r2, r2, #15
 800878a:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800878c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008790:	f103 030f 	add.w	r3, r3, #15
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d157      	bne.n	800884a <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800879a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800879e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80087a2:	f003 0308 	and.w	r3, r3, #8
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <f_open+0x44c>
				mode |= FA__WRITTEN;
 80087aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087ae:	461a      	mov	r2, r3
 80087b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087b4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80087b8:	f043 0320 	orr.w	r3, r3, #32
 80087bc:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80087c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087c4:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80087c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80087d2:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80087d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087da:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80087dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e8:	461a      	mov	r2, r3
 80087ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80087ee:	f103 0308 	add.w	r3, r3, #8
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087fa:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80087fe:	f023 0301 	bic.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	bf14      	ite	ne
 8008806:	2301      	movne	r3, #1
 8008808:	2300      	moveq	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008812:	3b10      	subs	r3, #16
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7fd fe94 	bl	8006544 <inc_lock>
 800881c:	4602      	mov	r2, r0
 800881e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008822:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800882a:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800882c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008830:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	2b00      	cmp	r3, #0
 800883c:	d105      	bne.n	800884a <f_open+0x4d6>
 800883e:	2302      	movs	r3, #2
 8008840:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008844:	f102 020f 	add.w	r2, r2, #15
 8008848:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800884a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800884e:	f103 030f 	add.w	r3, r3, #15
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 8088 	bne.w	800896a <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 800885a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800885e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008866:	461a      	mov	r2, r3
 8008868:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800886c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008870:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008872:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008876:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800887a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887e:	2200      	movs	r2, #0
 8008880:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008886:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800888a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800888e:	f102 0208 	add.w	r2, r2, #8
 8008892:	6811      	ldr	r1, [r2, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fee4 	bl	8007662 <ld_clust>
 800889a:	4602      	mov	r2, r0
 800889c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80088a0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a8:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80088aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80088ae:	f103 0308 	add.w	r3, r3, #8
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	331f      	adds	r3, #31
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	061a      	lsls	r2, r3, #24
 80088ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80088be:	f103 0308 	add.w	r3, r3, #8
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	331e      	adds	r3, #30
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	4313      	orrs	r3, r2
 80088cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80088d0:	f102 0208 	add.w	r2, r2, #8
 80088d4:	6812      	ldr	r2, [r2, #0]
 80088d6:	321d      	adds	r2, #29
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	0212      	lsls	r2, r2, #8
 80088dc:	4313      	orrs	r3, r2
 80088de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80088e2:	f102 0208 	add.w	r2, r2, #8
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	321c      	adds	r2, #28
 80088ea:	7812      	ldrb	r2, [r2, #0]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80088f2:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80088f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088fa:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80088fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008900:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008908:	461a      	mov	r2, r3
 800890a:	2300      	movs	r3, #0
 800890c:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800890e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008912:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891a:	461a      	mov	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008920:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008924:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892c:	461a      	mov	r2, r3
 800892e:	2300      	movs	r3, #0
 8008930:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008932:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008936:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800893a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800893e:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008942:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008946:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008948:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800894c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895a:	88da      	ldrh	r2, [r3, #6]
 800895c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008960:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008968:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800896a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800896e:	f103 030f 	add.w	r3, r3, #15
 8008972:	781b      	ldrb	r3, [r3, #0]
}
 8008974:	4618      	mov	r0, r3
 8008976:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	; 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f7ff fc65 	bl	8008268 <validate>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <f_write+0x2c>
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	e21e      	b.n	8008dea <f_write+0x46a>
	if (fp->err)							/* Check error */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b2:	79db      	ldrb	r3, [r3, #7]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089be:	79db      	ldrb	r3, [r3, #7]
 80089c0:	e213      	b.n	8008dea <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c8:	799b      	ldrb	r3, [r3, #6]
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80089d2:	2307      	movs	r3, #7
 80089d4:	e209      	b.n	8008dea <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	441a      	add	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	f080 81d9 	bcs.w	8008da2 <f_write+0x422>
 80089f0:	2300      	movs	r3, #0
 80089f2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80089f4:	e1d5      	b.n	8008da2 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a0a:	8952      	ldrh	r2, [r2, #10]
 8008a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a10:	fb01 f202 	mul.w	r2, r1, r2
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f040 8169 	bne.w	8008cee <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a2a:	6812      	ldr	r2, [r2, #0]
 8008a2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a30:	8952      	ldrh	r2, [r2, #10]
 8008a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a44:	789b      	ldrb	r3, [r3, #2]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008a4e:	7dbb      	ldrb	r3, [r7, #22]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d15f      	bne.n	8008b14 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d111      	bne.n	8008a84 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d126      	bne.n	8008abe <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe faa3 	bl	8006fc6 <create_chain>
 8008a80:	6278      	str	r0, [r7, #36]	; 0x24
 8008a82:	e01c      	b.n	8008abe <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f7fe fb3b 	bl	8007116 <clmt_clust>
 8008aa0:	6278      	str	r0, [r7, #36]	; 0x24
 8008aa2:	e00c      	b.n	8008abe <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fa85 	bl	8006fc6 <create_chain>
 8008abc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8173 	beq.w	8008dac <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d106      	bne.n	8008ada <f_write+0x15a>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	71da      	strb	r2, [r3, #7]
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e187      	b.n	8008dea <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	d106      	bne.n	8008af0 <f_write+0x170>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae8:	2201      	movs	r2, #1
 8008aea:	71da      	strb	r2, [r3, #7]
 8008aec:	2301      	movs	r3, #1
 8008aee:	e17c      	b.n	8008dea <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af6:	461a      	mov	r2, r3
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d105      	bne.n	8008b14 <f_write+0x194>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1a:	799b      	ldrb	r3, [r3, #6]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d023      	beq.n	8008b6c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b30:	7858      	ldrb	r0, [r3, #1]
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f7fd fbb7 	bl	80062b0 <disk_write>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d006      	beq.n	8008b56 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4e:	2201      	movs	r2, #1
 8008b50:	71da      	strb	r2, [r3, #7]
 8008b52:	2301      	movs	r3, #1
 8008b54:	e149      	b.n	8008dea <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5c:	799b      	ldrb	r3, [r3, #6]
 8008b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f7fd ff4d 	bl	8006a1e <clust2sect>
 8008b84:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <f_write+0x21a>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b92:	2202      	movs	r2, #2
 8008b94:	71da      	strb	r2, [r3, #7]
 8008b96:	2302      	movs	r3, #2
 8008b98:	e127      	b.n	8008dea <f_write+0x46a>
			sect += csect;
 8008b9a:	7dbb      	ldrb	r3, [r7, #22]
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bae:	895b      	ldrh	r3, [r3, #10]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d069      	beq.n	8008c94 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008bc0:	7dba      	ldrb	r2, [r7, #22]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bd2:	7892      	ldrb	r2, [r2, #2]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d90a      	bls.n	8008bee <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be4:	789b      	ldrb	r3, [r3, #2]
 8008be6:	461a      	mov	r2, r3
 8008be8:	7dbb      	ldrb	r3, [r7, #22]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfa:	7858      	ldrb	r0, [r3, #1]
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	69b9      	ldr	r1, [r7, #24]
 8008c02:	f7fd fb55 	bl	80062b0 <disk_write>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d006      	beq.n	8008c1a <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c12:	2201      	movs	r2, #1
 8008c14:	71da      	strb	r2, [r3, #7]
 8008c16:	2301      	movs	r3, #1
 8008c18:	e0e7      	b.n	8008dea <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d926      	bls.n	8008c7a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c46:	8952      	ldrh	r2, [r2, #10]
 8008c48:	fb02 f303 	mul.w	r3, r2, r3
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	18d1      	adds	r1, r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c5c:	895b      	ldrh	r3, [r3, #10]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f7fd fb64 	bl	800632c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6a:	799b      	ldrb	r3, [r3, #6]
 8008c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c78:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c86:	895b      	ldrh	r3, [r3, #10]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	623b      	str	r3, [r7, #32]
				continue;
 8008c92:	e06e      	b.n	8008d72 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d01f      	beq.n	8008ce2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d215      	bcs.n	8008ce2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc2:	7858      	ldrb	r0, [r3, #1]
 8008cc4:	68f9      	ldr	r1, [r7, #12]
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	f7fd fad1 	bl	8006270 <disk_read>
 8008cce:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d006      	beq.n	8008ce2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cda:	2201      	movs	r2, #1
 8008cdc:	71da      	strb	r2, [r3, #7]
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e083      	b.n	8008dea <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce8:	461a      	mov	r2, r3
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfa:	895b      	ldrh	r3, [r3, #10]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d0c:	6812      	ldr	r2, [r2, #0]
 8008d0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d12:	8952      	ldrh	r2, [r2, #10]
 8008d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d18:	fb01 f202 	mul.w	r2, r1, r2
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	1ac3      	subs	r3, r0, r3
 8008d20:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008d22:	6a3a      	ldr	r2, [r7, #32]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d901      	bls.n	8008d2e <f_write+0x3ae>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d42:	8952      	ldrh	r2, [r2, #10]
 8008d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d48:	fb01 f202 	mul.w	r2, r1, r2
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4413      	add	r3, r2
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	69b9      	ldr	r1, [r7, #24]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fd fae8 	bl	800632c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d62:	799b      	ldrb	r3, [r3, #6]
 8008d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d70:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	4413      	add	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	4413      	add	r3, r2
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d8c:	6093      	str	r3, [r2, #8]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	441a      	add	r2, r3
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f47f ae26 	bne.w	80089f6 <f_write+0x76>
 8008daa:	e000      	b.n	8008dae <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dac:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d907      	bls.n	8008dd2 <f_write+0x452>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008dd0:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd8:	799b      	ldrb	r3, [r3, #6]
 8008dda:	f043 0320 	orr.w	r3, r3, #32
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3728      	adds	r7, #40	; 0x28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff fa34 	bl	8008268 <validate>
 8008e00:	4603      	mov	r3, r0
 8008e02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f040 80bc 	bne.w	8008f84 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e12:	799b      	ldrb	r3, [r3, #6]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80b3 	beq.w	8008f84 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e24:	799b      	ldrb	r3, [r3, #6]
 8008e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d01e      	beq.n	8008e6c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e3a:	7858      	ldrb	r0, [r3, #1]
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	2301      	movs	r3, #1
 8008e48:	f7fd fa32 	bl	80062b0 <disk_write>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008e52:	2301      	movs	r3, #1
 8008e54:	e097      	b.n	8008f86 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e5c:	799b      	ldrb	r3, [r3, #6]
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f7fd fcdc 	bl	800683c <move_window>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d17a      	bne.n	8008f84 <f_sync+0x192>
				dir = fp->dir_ptr;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	330b      	adds	r3, #11
 8008e9c:	781a      	ldrb	r2, [r3, #0]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	330b      	adds	r3, #11
 8008ea2:	f042 0220 	orr.w	r2, r2, #32
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	331c      	adds	r3, #28
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	0a1b      	lsrs	r3, r3, #8
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	331d      	adds	r3, #29
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	701a      	strb	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	0c1a      	lsrs	r2, r3, #16
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	331e      	adds	r3, #30
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	0e1a      	lsrs	r2, r3, #24
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	331f      	adds	r3, #31
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6938      	ldr	r0, [r7, #16]
 8008f00:	f7fe fbdd 	bl	80076be <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008f04:	f7fd f91c 	bl	8006140 <get_fattime>
 8008f08:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	3316      	adds	r3, #22
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	b2d2      	uxtb	r2, r2
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	0a1b      	lsrs	r3, r3, #8
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	3317      	adds	r3, #23
 8008f20:	b2d2      	uxtb	r2, r2
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	0c1a      	lsrs	r2, r3, #16
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3318      	adds	r3, #24
 8008f2c:	b2d2      	uxtb	r2, r2
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	0e1a      	lsrs	r2, r3, #24
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3319      	adds	r3, #25
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	3312      	adds	r3, #18
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	3313      	adds	r3, #19
 8008f48:	2200      	movs	r2, #0
 8008f4a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f52:	799b      	ldrb	r3, [r3, #6]
 8008f54:	f023 0320 	bic.w	r3, r3, #32
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f60:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6e:	2201      	movs	r2, #1
 8008f70:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fd fc90 	bl	80068a0 <sync_fs>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff ff2b 	bl	8008df2 <f_sync>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d119      	bne.n	8008fda <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff f95e 	bl	8008268 <validate>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d111      	bne.n	8008fda <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fd fb7c 	bl	80066bc <dec_lock>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d105      	bne.n	8008fda <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b090      	sub	sp, #64	; 0x40
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff f93a 	bl	8008268 <validate>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <f_lseek+0x24>
 8009002:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009006:	e2da      	b.n	80095be <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800900e:	79db      	ldrb	r3, [r3, #7]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	79db      	ldrb	r3, [r3, #7]
 800901c:	e2cf      	b.n	80095be <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 8124 	beq.w	8009274 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009032:	d16c      	bne.n	800910e <f_lseek+0x12a>
			tbl = fp->cltbl;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	1d1a      	adds	r2, r3, #4
 8009042:	627a      	str	r2, [r7, #36]	; 0x24
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	2302      	movs	r3, #2
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2b00      	cmp	r3, #0
 800905a:	d046      	beq.n	80090ea <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	2300      	movs	r3, #0
 8009062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	3302      	adds	r3, #2
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	3301      	adds	r3, #1
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd fcf1 	bl	8006a66 <get_fat>
 8009084:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	2b01      	cmp	r3, #1
 800908a:	d806      	bhi.n	800909a <f_lseek+0xb6>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009092:	2202      	movs	r2, #2
 8009094:	71da      	strb	r2, [r3, #7]
 8009096:	2302      	movs	r3, #2
 8009098:	e291      	b.n	80095be <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d106      	bne.n	80090b0 <f_lseek+0xcc>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a8:	2201      	movs	r2, #1
 80090aa:	71da      	strb	r2, [r3, #7]
 80090ac:	2301      	movs	r3, #1
 80090ae:	e286      	b.n	80095be <f_lseek+0x5da>
					} while (cl == pcl + 1);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3301      	adds	r3, #1
 80090b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d0d7      	beq.n	800906a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80090ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d809      	bhi.n	80090d6 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	1d1a      	adds	r2, r3, #4
 80090c6:	627a      	str	r2, [r7, #36]	; 0x24
 80090c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	627a      	str	r2, [r7, #36]	; 0x24
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d3b8      	bcc.n	800905c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80090f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d803      	bhi.n	8009106 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e259      	b.n	80095ba <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009106:	2311      	movs	r3, #17
 8009108:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800910c:	e255      	b.n	80095ba <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d904      	bls.n	8009126 <f_lseek+0x142>
				ofs = fp->fsize;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912c:	461a      	mov	r2, r3
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8240 	beq.w	80095ba <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	3b01      	subs	r3, #1
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7fd ffe8 	bl	8007116 <clmt_clust>
 8009146:	4602      	mov	r2, r0
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800914e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f7fd fc5b 	bl	8006a1e <clust2sect>
 8009168:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <f_lseek+0x19a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	2202      	movs	r2, #2
 8009178:	71da      	strb	r2, [r3, #7]
 800917a:	2302      	movs	r3, #2
 800917c:	e21f      	b.n	80095be <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	3b01      	subs	r3, #1
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800918e:	8952      	ldrh	r2, [r2, #10]
 8009190:	fbb3 f3f2 	udiv	r3, r3, r2
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091a0:	7892      	ldrb	r2, [r2, #2]
 80091a2:	3a01      	subs	r2, #1
 80091a4:	4013      	ands	r3, r2
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	4413      	add	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091c0:	8952      	ldrh	r2, [r2, #10]
 80091c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80091c6:	fb01 f202 	mul.w	r2, r1, r2
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 81f4 	beq.w	80095ba <f_lseek+0x5d6>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	429a      	cmp	r2, r3
 80091de:	f000 81ec 	beq.w	80095ba <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e8:	799b      	ldrb	r3, [r3, #6]
 80091ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d023      	beq.n	800923a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fe:	7858      	ldrb	r0, [r3, #1]
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	2301      	movs	r3, #1
 800920c:	f7fd f850 	bl	80062b0 <disk_write>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800921c:	2201      	movs	r2, #1
 800921e:	71da      	strb	r2, [r3, #7]
 8009220:	2301      	movs	r3, #1
 8009222:	e1cc      	b.n	80095be <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	799b      	ldrb	r3, [r3, #6]
 800922c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009230:	b2da      	uxtb	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009238:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009246:	7858      	ldrb	r0, [r3, #1]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	2301      	movs	r3, #1
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	f7fd f80f 	bl	8006270 <disk_read>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d006      	beq.n	8009266 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925e:	2201      	movs	r2, #1
 8009260:	71da      	strb	r2, [r3, #7]
 8009262:	2301      	movs	r3, #1
 8009264:	e1ab      	b.n	80095be <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800926c:	461a      	mov	r2, r3
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	6193      	str	r3, [r2, #24]
 8009272:	e1a2      	b.n	80095ba <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d90c      	bls.n	800929c <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	799b      	ldrb	r3, [r3, #6]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b0:	461a      	mov	r2, r3
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	6093      	str	r3, [r2, #8]
		if (ofs) {
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 8100 	beq.w	80094be <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ca:	789b      	ldrb	r3, [r3, #2]
 80092cc:	461a      	mov	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092da:	895b      	ldrh	r3, [r3, #10]
 80092dc:	fb02 f303 	mul.w	r3, r2, r3
 80092e0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d021      	beq.n	800932c <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	1e5a      	subs	r2, r3, #1
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	1e59      	subs	r1, r3, #1
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d315      	bcc.n	800932c <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	1e5a      	subs	r2, r3, #1
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	425b      	negs	r3, r3
 8009308:	4013      	ands	r3, r2
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009310:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	63bb      	str	r3, [r7, #56]	; 0x38
 800932a:	e031      	b.n	8009390 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	2b00      	cmp	r3, #0
 800933a:	d123      	bne.n	8009384 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2100      	movs	r1, #0
 8009346:	4618      	mov	r0, r3
 8009348:	f7fd fe3d 	bl	8006fc6 <create_chain>
 800934c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	2b01      	cmp	r3, #1
 8009352:	d106      	bne.n	8009362 <f_lseek+0x37e>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935a:	2202      	movs	r2, #2
 800935c:	71da      	strb	r2, [r3, #7]
 800935e:	2302      	movs	r3, #2
 8009360:	e12d      	b.n	80095be <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009368:	d106      	bne.n	8009378 <f_lseek+0x394>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009370:	2201      	movs	r2, #1
 8009372:	71da      	strb	r2, [r3, #7]
 8009374:	2301      	movs	r3, #1
 8009376:	e122      	b.n	80095be <f_lseek+0x5da>
					fp->sclust = clst;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800937e:	461a      	mov	r2, r3
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938a:	461a      	mov	r2, r3
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8093 	beq.w	80094be <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8009398:	e052      	b.n	8009440 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a0:	799b      	ldrb	r3, [r3, #6]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00e      	beq.n	80093c8 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fd fe06 	bl	8006fc6 <create_chain>
 80093ba:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10b      	bne.n	80093da <f_lseek+0x3f6>
							ofs = bcs; break;
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	603b      	str	r3, [r7, #0]
 80093c6:	e03f      	b.n	8009448 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fd fb47 	bl	8006a66 <get_fat>
 80093d8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e0:	d106      	bne.n	80093f0 <f_lseek+0x40c>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e8:	2201      	movs	r2, #1
 80093ea:	71da      	strb	r2, [r3, #7]
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0e6      	b.n	80095be <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d909      	bls.n	800940a <f_lseek+0x426>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009406:	429a      	cmp	r2, r3
 8009408:	d306      	bcc.n	8009418 <f_lseek+0x434>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009410:	2202      	movs	r2, #2
 8009412:	71da      	strb	r2, [r3, #7]
 8009414:	2302      	movs	r3, #2
 8009416:	e0d2      	b.n	80095be <f_lseek+0x5da>
					fp->clust = clst;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800941e:	461a      	mov	r2, r3
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009436:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	429a      	cmp	r2, r3
 8009446:	d8a8      	bhi.n	800939a <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	4413      	add	r3, r2
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800945a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009468:	895b      	ldrh	r3, [r3, #10]
 800946a:	461a      	mov	r2, r3
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009472:	fb01 f202 	mul.w	r2, r1, r2
 8009476:	1a9b      	subs	r3, r3, r2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d020      	beq.n	80094be <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009486:	4618      	mov	r0, r3
 8009488:	f7fd fac9 	bl	8006a1e <clust2sect>
 800948c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <f_lseek+0x4be>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949a:	2202      	movs	r2, #2
 800949c:	71da      	strb	r2, [r3, #7]
 800949e:	2302      	movs	r3, #2
 80094a0:	e08d      	b.n	80095be <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	895b      	ldrh	r3, [r3, #10]
 80094b0:	461a      	mov	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80094b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ba:	4413      	add	r3, r2
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094cc:	6812      	ldr	r2, [r2, #0]
 80094ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094d2:	8952      	ldrh	r2, [r2, #10]
 80094d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80094d8:	fb01 f202 	mul.w	r2, r1, r2
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d04e      	beq.n	8009580 <f_lseek+0x59c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d047      	beq.n	8009580 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f6:	799b      	ldrb	r3, [r3, #6]
 80094f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d023      	beq.n	8009548 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950c:	7858      	ldrb	r0, [r3, #1]
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009516:	699a      	ldr	r2, [r3, #24]
 8009518:	2301      	movs	r3, #1
 800951a:	f7fc fec9 	bl	80062b0 <disk_write>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d006      	beq.n	8009532 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952a:	2201      	movs	r2, #1
 800952c:	71da      	strb	r2, [r3, #7]
 800952e:	2301      	movs	r3, #1
 8009530:	e045      	b.n	80095be <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009538:	799b      	ldrb	r3, [r3, #6]
 800953a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800953e:	b2da      	uxtb	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009546:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009554:	7858      	ldrb	r0, [r3, #1]
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	2301      	movs	r3, #1
 800955a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800955c:	f7fc fe88 	bl	8006270 <disk_read>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d006      	beq.n	8009574 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956c:	2201      	movs	r2, #1
 800956e:	71da      	strb	r2, [r3, #7]
 8009570:	2301      	movs	r3, #1
 8009572:	e024      	b.n	80095be <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957a:	461a      	mov	r2, r3
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	429a      	cmp	r2, r3
 8009592:	d912      	bls.n	80095ba <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095a2:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095aa:	799b      	ldrb	r3, [r3, #6]
 80095ac:	f043 0320 	orr.w	r3, r3, #32
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b8:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80095ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3740      	adds	r7, #64	; 0x40
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	2b0a      	cmp	r3, #10
 80095d6:	d103      	bne.n	80095e0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80095d8:	210d      	movs	r1, #13
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fff3 	bl	80095c6 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	db25      	blt.n	8009638 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	60fa      	str	r2, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	4413      	add	r3, r2
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b3c      	cmp	r3, #60	; 0x3c
 80095fe:	dd12      	ble.n	8009626 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f103 010c 	add.w	r1, r3, #12
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	f107 0308 	add.w	r3, r7, #8
 8009610:	f7ff f9b6 	bl	8008980 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	429a      	cmp	r2, r3
 800961a:	d101      	bne.n	8009620 <putc_bfd+0x5a>
 800961c:	2300      	movs	r3, #0
 800961e:	e001      	b.n	8009624 <putc_bfd+0x5e>
 8009620:	f04f 33ff 	mov.w	r3, #4294967295
 8009624:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	609a      	str	r2, [r3, #8]
 8009636:	e000      	b.n	800963a <putc_bfd+0x74>
	if (i < 0) return;
 8009638:	bf00      	nop
}
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009640:	b590      	push	{r4, r7, lr}
 8009642:	b097      	sub	sp, #92	; 0x5c
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8009656:	e009      	b.n	800966c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	f107 030c 	add.w	r3, r7, #12
 8009664:	4611      	mov	r1, r2
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff ffad 	bl	80095c6 <putc_bfd>
	while (*str)			/* Put the string */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1f1      	bne.n	8009658 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	db15      	blt.n	80096a6 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	461c      	mov	r4, r3
 8009680:	f107 0208 	add.w	r2, r7, #8
 8009684:	f107 030c 	add.w	r3, r7, #12
 8009688:	f103 010c 	add.w	r1, r3, #12
 800968c:	4613      	mov	r3, r2
 800968e:	4622      	mov	r2, r4
 8009690:	f7ff f976 	bl	8008980 <f_write>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	4293      	cmp	r3, r2
 80096a0:	d101      	bne.n	80096a6 <f_puts+0x66>
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	e001      	b.n	80096aa <f_puts+0x6a>
	return EOF;
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	375c      	adds	r7, #92	; 0x5c
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd90      	pop	{r4, r7, pc}
	...

080096b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096c2:	2301      	movs	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80096ca:	4b1e      	ldr	r3, [pc, #120]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 80096cc:	7a5b      	ldrb	r3, [r3, #9]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d831      	bhi.n	8009738 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096d4:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 80096d6:	7a5b      	ldrb	r3, [r3, #9]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	461a      	mov	r2, r3
 80096dc:	4b19      	ldr	r3, [pc, #100]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 80096de:	2100      	movs	r1, #0
 80096e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80096e2:	4b18      	ldr	r3, [pc, #96]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 80096e4:	7a5b      	ldrb	r3, [r3, #9]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	4a16      	ldr	r2, [pc, #88]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80096f2:	4b14      	ldr	r3, [pc, #80]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 80096f4:	7a5b      	ldrb	r3, [r3, #9]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	461a      	mov	r2, r3
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 80096fc:	4413      	add	r3, r2
 80096fe:	79fa      	ldrb	r2, [r7, #7]
 8009700:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009702:	4b10      	ldr	r3, [pc, #64]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 8009704:	7a5b      	ldrb	r3, [r3, #9]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	b2d1      	uxtb	r1, r2
 800970c:	4a0d      	ldr	r2, [pc, #52]	; (8009744 <FATFS_LinkDriverEx+0x90>)
 800970e:	7251      	strb	r1, [r2, #9]
 8009710:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009712:	7dbb      	ldrb	r3, [r7, #22]
 8009714:	3330      	adds	r3, #48	; 0x30
 8009716:	b2da      	uxtb	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	3301      	adds	r3, #1
 8009720:	223a      	movs	r2, #58	; 0x3a
 8009722:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3302      	adds	r3, #2
 8009728:	222f      	movs	r2, #47	; 0x2f
 800972a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	3303      	adds	r3, #3
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
}
 800973a:	4618      	mov	r0, r3
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr
 8009744:	20002d5c 	.word	0x20002d5c

08009748 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009752:	2200      	movs	r2, #0
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff ffac 	bl	80096b4 <FATFS_LinkDriverEx>
 800975c:	4603      	mov	r3, r0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <__errno>:
 8009768:	4b01      	ldr	r3, [pc, #4]	; (8009770 <__errno+0x8>)
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	20000038 	.word	0x20000038

08009774 <__libc_init_array>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	2600      	movs	r6, #0
 8009778:	4d0c      	ldr	r5, [pc, #48]	; (80097ac <__libc_init_array+0x38>)
 800977a:	4c0d      	ldr	r4, [pc, #52]	; (80097b0 <__libc_init_array+0x3c>)
 800977c:	1b64      	subs	r4, r4, r5
 800977e:	10a4      	asrs	r4, r4, #2
 8009780:	42a6      	cmp	r6, r4
 8009782:	d109      	bne.n	8009798 <__libc_init_array+0x24>
 8009784:	f004 fe36 	bl	800e3f4 <_init>
 8009788:	2600      	movs	r6, #0
 800978a:	4d0a      	ldr	r5, [pc, #40]	; (80097b4 <__libc_init_array+0x40>)
 800978c:	4c0a      	ldr	r4, [pc, #40]	; (80097b8 <__libc_init_array+0x44>)
 800978e:	1b64      	subs	r4, r4, r5
 8009790:	10a4      	asrs	r4, r4, #2
 8009792:	42a6      	cmp	r6, r4
 8009794:	d105      	bne.n	80097a2 <__libc_init_array+0x2e>
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	f855 3b04 	ldr.w	r3, [r5], #4
 800979c:	4798      	blx	r3
 800979e:	3601      	adds	r6, #1
 80097a0:	e7ee      	b.n	8009780 <__libc_init_array+0xc>
 80097a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a6:	4798      	blx	r3
 80097a8:	3601      	adds	r6, #1
 80097aa:	e7f2      	b.n	8009792 <__libc_init_array+0x1e>
 80097ac:	0800ed24 	.word	0x0800ed24
 80097b0:	0800ed24 	.word	0x0800ed24
 80097b4:	0800ed24 	.word	0x0800ed24
 80097b8:	0800ed28 	.word	0x0800ed28

080097bc <memset>:
 80097bc:	4603      	mov	r3, r0
 80097be:	4402      	add	r2, r0
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d100      	bne.n	80097c6 <memset+0xa>
 80097c4:	4770      	bx	lr
 80097c6:	f803 1b01 	strb.w	r1, [r3], #1
 80097ca:	e7f9      	b.n	80097c0 <memset+0x4>

080097cc <__cvt>:
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d2:	461f      	mov	r7, r3
 80097d4:	bfbb      	ittet	lt
 80097d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80097da:	461f      	movlt	r7, r3
 80097dc:	2300      	movge	r3, #0
 80097de:	232d      	movlt	r3, #45	; 0x2d
 80097e0:	b088      	sub	sp, #32
 80097e2:	4614      	mov	r4, r2
 80097e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80097e8:	7013      	strb	r3, [r2, #0]
 80097ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80097f0:	f023 0820 	bic.w	r8, r3, #32
 80097f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097f8:	d005      	beq.n	8009806 <__cvt+0x3a>
 80097fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097fe:	d100      	bne.n	8009802 <__cvt+0x36>
 8009800:	3501      	adds	r5, #1
 8009802:	2302      	movs	r3, #2
 8009804:	e000      	b.n	8009808 <__cvt+0x3c>
 8009806:	2303      	movs	r3, #3
 8009808:	aa07      	add	r2, sp, #28
 800980a:	9204      	str	r2, [sp, #16]
 800980c:	aa06      	add	r2, sp, #24
 800980e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009812:	e9cd 3500 	strd	r3, r5, [sp]
 8009816:	4622      	mov	r2, r4
 8009818:	463b      	mov	r3, r7
 800981a:	f001 fd85 	bl	800b328 <_dtoa_r>
 800981e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009822:	4606      	mov	r6, r0
 8009824:	d102      	bne.n	800982c <__cvt+0x60>
 8009826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d522      	bpl.n	8009872 <__cvt+0xa6>
 800982c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009830:	eb06 0905 	add.w	r9, r6, r5
 8009834:	d110      	bne.n	8009858 <__cvt+0x8c>
 8009836:	7833      	ldrb	r3, [r6, #0]
 8009838:	2b30      	cmp	r3, #48	; 0x30
 800983a:	d10a      	bne.n	8009852 <__cvt+0x86>
 800983c:	2200      	movs	r2, #0
 800983e:	2300      	movs	r3, #0
 8009840:	4620      	mov	r0, r4
 8009842:	4639      	mov	r1, r7
 8009844:	f7f7 f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 8009848:	b918      	cbnz	r0, 8009852 <__cvt+0x86>
 800984a:	f1c5 0501 	rsb	r5, r5, #1
 800984e:	f8ca 5000 	str.w	r5, [sl]
 8009852:	f8da 3000 	ldr.w	r3, [sl]
 8009856:	4499      	add	r9, r3
 8009858:	2200      	movs	r2, #0
 800985a:	2300      	movs	r3, #0
 800985c:	4620      	mov	r0, r4
 800985e:	4639      	mov	r1, r7
 8009860:	f7f7 f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8009864:	b108      	cbz	r0, 800986a <__cvt+0x9e>
 8009866:	f8cd 901c 	str.w	r9, [sp, #28]
 800986a:	2230      	movs	r2, #48	; 0x30
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	454b      	cmp	r3, r9
 8009870:	d307      	bcc.n	8009882 <__cvt+0xb6>
 8009872:	4630      	mov	r0, r6
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009878:	1b9b      	subs	r3, r3, r6
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	b008      	add	sp, #32
 800987e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009882:	1c59      	adds	r1, r3, #1
 8009884:	9107      	str	r1, [sp, #28]
 8009886:	701a      	strb	r2, [r3, #0]
 8009888:	e7f0      	b.n	800986c <__cvt+0xa0>

0800988a <__exponent>:
 800988a:	4603      	mov	r3, r0
 800988c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800988e:	2900      	cmp	r1, #0
 8009890:	f803 2b02 	strb.w	r2, [r3], #2
 8009894:	bfb6      	itet	lt
 8009896:	222d      	movlt	r2, #45	; 0x2d
 8009898:	222b      	movge	r2, #43	; 0x2b
 800989a:	4249      	neglt	r1, r1
 800989c:	2909      	cmp	r1, #9
 800989e:	7042      	strb	r2, [r0, #1]
 80098a0:	dd2b      	ble.n	80098fa <__exponent+0x70>
 80098a2:	f10d 0407 	add.w	r4, sp, #7
 80098a6:	46a4      	mov	ip, r4
 80098a8:	270a      	movs	r7, #10
 80098aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80098ae:	460a      	mov	r2, r1
 80098b0:	46a6      	mov	lr, r4
 80098b2:	fb07 1516 	mls	r5, r7, r6, r1
 80098b6:	2a63      	cmp	r2, #99	; 0x63
 80098b8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80098bc:	4631      	mov	r1, r6
 80098be:	f104 34ff 	add.w	r4, r4, #4294967295
 80098c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098c6:	dcf0      	bgt.n	80098aa <__exponent+0x20>
 80098c8:	3130      	adds	r1, #48	; 0x30
 80098ca:	f1ae 0502 	sub.w	r5, lr, #2
 80098ce:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098d2:	4629      	mov	r1, r5
 80098d4:	1c44      	adds	r4, r0, #1
 80098d6:	4561      	cmp	r1, ip
 80098d8:	d30a      	bcc.n	80098f0 <__exponent+0x66>
 80098da:	f10d 0209 	add.w	r2, sp, #9
 80098de:	eba2 020e 	sub.w	r2, r2, lr
 80098e2:	4565      	cmp	r5, ip
 80098e4:	bf88      	it	hi
 80098e6:	2200      	movhi	r2, #0
 80098e8:	4413      	add	r3, r2
 80098ea:	1a18      	subs	r0, r3, r0
 80098ec:	b003      	add	sp, #12
 80098ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098f4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098f8:	e7ed      	b.n	80098d6 <__exponent+0x4c>
 80098fa:	2330      	movs	r3, #48	; 0x30
 80098fc:	3130      	adds	r1, #48	; 0x30
 80098fe:	7083      	strb	r3, [r0, #2]
 8009900:	70c1      	strb	r1, [r0, #3]
 8009902:	1d03      	adds	r3, r0, #4
 8009904:	e7f1      	b.n	80098ea <__exponent+0x60>
	...

08009908 <_printf_float>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	b091      	sub	sp, #68	; 0x44
 800990e:	460c      	mov	r4, r1
 8009910:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009914:	4616      	mov	r6, r2
 8009916:	461f      	mov	r7, r3
 8009918:	4605      	mov	r5, r0
 800991a:	f002 fe59 	bl	800c5d0 <_localeconv_r>
 800991e:	6803      	ldr	r3, [r0, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	9309      	str	r3, [sp, #36]	; 0x24
 8009924:	f7f6 fc14 	bl	8000150 <strlen>
 8009928:	2300      	movs	r3, #0
 800992a:	930e      	str	r3, [sp, #56]	; 0x38
 800992c:	f8d8 3000 	ldr.w	r3, [r8]
 8009930:	900a      	str	r0, [sp, #40]	; 0x28
 8009932:	3307      	adds	r3, #7
 8009934:	f023 0307 	bic.w	r3, r3, #7
 8009938:	f103 0208 	add.w	r2, r3, #8
 800993c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009940:	f8d4 b000 	ldr.w	fp, [r4]
 8009944:	f8c8 2000 	str.w	r2, [r8]
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009950:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009954:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009958:	930b      	str	r3, [sp, #44]	; 0x2c
 800995a:	f04f 32ff 	mov.w	r2, #4294967295
 800995e:	4640      	mov	r0, r8
 8009960:	4b9c      	ldr	r3, [pc, #624]	; (8009bd4 <_printf_float+0x2cc>)
 8009962:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009964:	f7f7 f852 	bl	8000a0c <__aeabi_dcmpun>
 8009968:	bb70      	cbnz	r0, 80099c8 <_printf_float+0xc0>
 800996a:	f04f 32ff 	mov.w	r2, #4294967295
 800996e:	4640      	mov	r0, r8
 8009970:	4b98      	ldr	r3, [pc, #608]	; (8009bd4 <_printf_float+0x2cc>)
 8009972:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009974:	f7f7 f82c 	bl	80009d0 <__aeabi_dcmple>
 8009978:	bb30      	cbnz	r0, 80099c8 <_printf_float+0xc0>
 800997a:	2200      	movs	r2, #0
 800997c:	2300      	movs	r3, #0
 800997e:	4640      	mov	r0, r8
 8009980:	4651      	mov	r1, sl
 8009982:	f7f7 f81b 	bl	80009bc <__aeabi_dcmplt>
 8009986:	b110      	cbz	r0, 800998e <_printf_float+0x86>
 8009988:	232d      	movs	r3, #45	; 0x2d
 800998a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800998e:	4b92      	ldr	r3, [pc, #584]	; (8009bd8 <_printf_float+0x2d0>)
 8009990:	4892      	ldr	r0, [pc, #584]	; (8009bdc <_printf_float+0x2d4>)
 8009992:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009996:	bf94      	ite	ls
 8009998:	4698      	movls	r8, r3
 800999a:	4680      	movhi	r8, r0
 800999c:	2303      	movs	r3, #3
 800999e:	f04f 0a00 	mov.w	sl, #0
 80099a2:	6123      	str	r3, [r4, #16]
 80099a4:	f02b 0304 	bic.w	r3, fp, #4
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	4633      	mov	r3, r6
 80099ac:	4621      	mov	r1, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	9700      	str	r7, [sp, #0]
 80099b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80099b4:	f000 f9d4 	bl	8009d60 <_printf_common>
 80099b8:	3001      	adds	r0, #1
 80099ba:	f040 8090 	bne.w	8009ade <_printf_float+0x1d6>
 80099be:	f04f 30ff 	mov.w	r0, #4294967295
 80099c2:	b011      	add	sp, #68	; 0x44
 80099c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c8:	4642      	mov	r2, r8
 80099ca:	4653      	mov	r3, sl
 80099cc:	4640      	mov	r0, r8
 80099ce:	4651      	mov	r1, sl
 80099d0:	f7f7 f81c 	bl	8000a0c <__aeabi_dcmpun>
 80099d4:	b148      	cbz	r0, 80099ea <_printf_float+0xe2>
 80099d6:	f1ba 0f00 	cmp.w	sl, #0
 80099da:	bfb8      	it	lt
 80099dc:	232d      	movlt	r3, #45	; 0x2d
 80099de:	4880      	ldr	r0, [pc, #512]	; (8009be0 <_printf_float+0x2d8>)
 80099e0:	bfb8      	it	lt
 80099e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099e6:	4b7f      	ldr	r3, [pc, #508]	; (8009be4 <_printf_float+0x2dc>)
 80099e8:	e7d3      	b.n	8009992 <_printf_float+0x8a>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	d142      	bne.n	8009a7a <_printf_float+0x172>
 80099f4:	2306      	movs	r3, #6
 80099f6:	6063      	str	r3, [r4, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	9206      	str	r2, [sp, #24]
 80099fc:	aa0e      	add	r2, sp, #56	; 0x38
 80099fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009a02:	aa0d      	add	r2, sp, #52	; 0x34
 8009a04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009a08:	9203      	str	r2, [sp, #12]
 8009a0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009a0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	6863      	ldr	r3, [r4, #4]
 8009a16:	4642      	mov	r2, r8
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	4653      	mov	r3, sl
 8009a1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a20:	f7ff fed4 	bl	80097cc <__cvt>
 8009a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a26:	4680      	mov	r8, r0
 8009a28:	2947      	cmp	r1, #71	; 0x47
 8009a2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a2c:	d108      	bne.n	8009a40 <_printf_float+0x138>
 8009a2e:	1cc8      	adds	r0, r1, #3
 8009a30:	db02      	blt.n	8009a38 <_printf_float+0x130>
 8009a32:	6863      	ldr	r3, [r4, #4]
 8009a34:	4299      	cmp	r1, r3
 8009a36:	dd40      	ble.n	8009aba <_printf_float+0x1b2>
 8009a38:	f1a9 0902 	sub.w	r9, r9, #2
 8009a3c:	fa5f f989 	uxtb.w	r9, r9
 8009a40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a44:	d81f      	bhi.n	8009a86 <_printf_float+0x17e>
 8009a46:	464a      	mov	r2, r9
 8009a48:	3901      	subs	r1, #1
 8009a4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a4e:	910d      	str	r1, [sp, #52]	; 0x34
 8009a50:	f7ff ff1b 	bl	800988a <__exponent>
 8009a54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a56:	4682      	mov	sl, r0
 8009a58:	1813      	adds	r3, r2, r0
 8009a5a:	2a01      	cmp	r2, #1
 8009a5c:	6123      	str	r3, [r4, #16]
 8009a5e:	dc02      	bgt.n	8009a66 <_printf_float+0x15e>
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	07d2      	lsls	r2, r2, #31
 8009a64:	d501      	bpl.n	8009a6a <_printf_float+0x162>
 8009a66:	3301      	adds	r3, #1
 8009a68:	6123      	str	r3, [r4, #16]
 8009a6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d09b      	beq.n	80099aa <_printf_float+0xa2>
 8009a72:	232d      	movs	r3, #45	; 0x2d
 8009a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a78:	e797      	b.n	80099aa <_printf_float+0xa2>
 8009a7a:	2947      	cmp	r1, #71	; 0x47
 8009a7c:	d1bc      	bne.n	80099f8 <_printf_float+0xf0>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ba      	bne.n	80099f8 <_printf_float+0xf0>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e7b7      	b.n	80099f6 <_printf_float+0xee>
 8009a86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a8a:	d118      	bne.n	8009abe <_printf_float+0x1b6>
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	6863      	ldr	r3, [r4, #4]
 8009a90:	dd0b      	ble.n	8009aaa <_printf_float+0x1a2>
 8009a92:	6121      	str	r1, [r4, #16]
 8009a94:	b913      	cbnz	r3, 8009a9c <_printf_float+0x194>
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	07d0      	lsls	r0, r2, #31
 8009a9a:	d502      	bpl.n	8009aa2 <_printf_float+0x19a>
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	440b      	add	r3, r1
 8009aa0:	6123      	str	r3, [r4, #16]
 8009aa2:	f04f 0a00 	mov.w	sl, #0
 8009aa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009aa8:	e7df      	b.n	8009a6a <_printf_float+0x162>
 8009aaa:	b913      	cbnz	r3, 8009ab2 <_printf_float+0x1aa>
 8009aac:	6822      	ldr	r2, [r4, #0]
 8009aae:	07d2      	lsls	r2, r2, #31
 8009ab0:	d501      	bpl.n	8009ab6 <_printf_float+0x1ae>
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	e7f4      	b.n	8009aa0 <_printf_float+0x198>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e7f2      	b.n	8009aa0 <_printf_float+0x198>
 8009aba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	db05      	blt.n	8009ad0 <_printf_float+0x1c8>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	6121      	str	r1, [r4, #16]
 8009ac8:	07d8      	lsls	r0, r3, #31
 8009aca:	d5ea      	bpl.n	8009aa2 <_printf_float+0x19a>
 8009acc:	1c4b      	adds	r3, r1, #1
 8009ace:	e7e7      	b.n	8009aa0 <_printf_float+0x198>
 8009ad0:	2900      	cmp	r1, #0
 8009ad2:	bfcc      	ite	gt
 8009ad4:	2201      	movgt	r2, #1
 8009ad6:	f1c1 0202 	rsble	r2, r1, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	e7e0      	b.n	8009aa0 <_printf_float+0x198>
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	055a      	lsls	r2, r3, #21
 8009ae2:	d407      	bmi.n	8009af4 <_printf_float+0x1ec>
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	4642      	mov	r2, r8
 8009ae8:	4631      	mov	r1, r6
 8009aea:	4628      	mov	r0, r5
 8009aec:	47b8      	blx	r7
 8009aee:	3001      	adds	r0, #1
 8009af0:	d12b      	bne.n	8009b4a <_printf_float+0x242>
 8009af2:	e764      	b.n	80099be <_printf_float+0xb6>
 8009af4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009af8:	f240 80dd 	bls.w	8009cb6 <_printf_float+0x3ae>
 8009afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b00:	2200      	movs	r2, #0
 8009b02:	2300      	movs	r3, #0
 8009b04:	f7f6 ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d033      	beq.n	8009b74 <_printf_float+0x26c>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	4a35      	ldr	r2, [pc, #212]	; (8009be8 <_printf_float+0x2e0>)
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	f43f af51 	beq.w	80099be <_printf_float+0xb6>
 8009b1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b20:	429a      	cmp	r2, r3
 8009b22:	db02      	blt.n	8009b2a <_printf_float+0x222>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	07d8      	lsls	r0, r3, #31
 8009b28:	d50f      	bpl.n	8009b4a <_printf_float+0x242>
 8009b2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	f43f af42 	beq.w	80099be <_printf_float+0xb6>
 8009b3a:	f04f 0800 	mov.w	r8, #0
 8009b3e:	f104 091a 	add.w	r9, r4, #26
 8009b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b44:	3b01      	subs	r3, #1
 8009b46:	4543      	cmp	r3, r8
 8009b48:	dc09      	bgt.n	8009b5e <_printf_float+0x256>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	079b      	lsls	r3, r3, #30
 8009b4e:	f100 8102 	bmi.w	8009d56 <_printf_float+0x44e>
 8009b52:	68e0      	ldr	r0, [r4, #12]
 8009b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b56:	4298      	cmp	r0, r3
 8009b58:	bfb8      	it	lt
 8009b5a:	4618      	movlt	r0, r3
 8009b5c:	e731      	b.n	80099c2 <_printf_float+0xba>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	464a      	mov	r2, r9
 8009b62:	4631      	mov	r1, r6
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b8      	blx	r7
 8009b68:	3001      	adds	r0, #1
 8009b6a:	f43f af28 	beq.w	80099be <_printf_float+0xb6>
 8009b6e:	f108 0801 	add.w	r8, r8, #1
 8009b72:	e7e6      	b.n	8009b42 <_printf_float+0x23a>
 8009b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dc38      	bgt.n	8009bec <_printf_float+0x2e4>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4628      	mov	r0, r5
 8009b80:	4a19      	ldr	r2, [pc, #100]	; (8009be8 <_printf_float+0x2e0>)
 8009b82:	47b8      	blx	r7
 8009b84:	3001      	adds	r0, #1
 8009b86:	f43f af1a 	beq.w	80099be <_printf_float+0xb6>
 8009b8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	d102      	bne.n	8009b98 <_printf_float+0x290>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	07d9      	lsls	r1, r3, #31
 8009b96:	d5d8      	bpl.n	8009b4a <_printf_float+0x242>
 8009b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f43f af0b 	beq.w	80099be <_printf_float+0xb6>
 8009ba8:	f04f 0900 	mov.w	r9, #0
 8009bac:	f104 0a1a 	add.w	sl, r4, #26
 8009bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bb2:	425b      	negs	r3, r3
 8009bb4:	454b      	cmp	r3, r9
 8009bb6:	dc01      	bgt.n	8009bbc <_printf_float+0x2b4>
 8009bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bba:	e794      	b.n	8009ae6 <_printf_float+0x1de>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	4652      	mov	r2, sl
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f43f aef9 	beq.w	80099be <_printf_float+0xb6>
 8009bcc:	f109 0901 	add.w	r9, r9, #1
 8009bd0:	e7ee      	b.n	8009bb0 <_printf_float+0x2a8>
 8009bd2:	bf00      	nop
 8009bd4:	7fefffff 	.word	0x7fefffff
 8009bd8:	0800e884 	.word	0x0800e884
 8009bdc:	0800e888 	.word	0x0800e888
 8009be0:	0800e890 	.word	0x0800e890
 8009be4:	0800e88c 	.word	0x0800e88c
 8009be8:	0800e894 	.word	0x0800e894
 8009bec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	bfa8      	it	ge
 8009bf4:	461a      	movge	r2, r3
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	4691      	mov	r9, r2
 8009bfa:	dc37      	bgt.n	8009c6c <_printf_float+0x364>
 8009bfc:	f04f 0b00 	mov.w	fp, #0
 8009c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c04:	f104 021a 	add.w	r2, r4, #26
 8009c08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009c0c:	ebaa 0309 	sub.w	r3, sl, r9
 8009c10:	455b      	cmp	r3, fp
 8009c12:	dc33      	bgt.n	8009c7c <_printf_float+0x374>
 8009c14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	db3b      	blt.n	8009c94 <_printf_float+0x38c>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	07da      	lsls	r2, r3, #31
 8009c20:	d438      	bmi.n	8009c94 <_printf_float+0x38c>
 8009c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c26:	eba3 020a 	sub.w	r2, r3, sl
 8009c2a:	eba3 0901 	sub.w	r9, r3, r1
 8009c2e:	4591      	cmp	r9, r2
 8009c30:	bfa8      	it	ge
 8009c32:	4691      	movge	r9, r2
 8009c34:	f1b9 0f00 	cmp.w	r9, #0
 8009c38:	dc34      	bgt.n	8009ca4 <_printf_float+0x39c>
 8009c3a:	f04f 0800 	mov.w	r8, #0
 8009c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c42:	f104 0a1a 	add.w	sl, r4, #26
 8009c46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c4a:	1a9b      	subs	r3, r3, r2
 8009c4c:	eba3 0309 	sub.w	r3, r3, r9
 8009c50:	4543      	cmp	r3, r8
 8009c52:	f77f af7a 	ble.w	8009b4a <_printf_float+0x242>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4652      	mov	r2, sl
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	f43f aeac 	beq.w	80099be <_printf_float+0xb6>
 8009c66:	f108 0801 	add.w	r8, r8, #1
 8009c6a:	e7ec      	b.n	8009c46 <_printf_float+0x33e>
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4642      	mov	r2, r8
 8009c72:	4628      	mov	r0, r5
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	d1c0      	bne.n	8009bfc <_printf_float+0x2f4>
 8009c7a:	e6a0      	b.n	80099be <_printf_float+0xb6>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4628      	mov	r0, r5
 8009c82:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c84:	47b8      	blx	r7
 8009c86:	3001      	adds	r0, #1
 8009c88:	f43f ae99 	beq.w	80099be <_printf_float+0xb6>
 8009c8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c8e:	f10b 0b01 	add.w	fp, fp, #1
 8009c92:	e7b9      	b.n	8009c08 <_printf_float+0x300>
 8009c94:	4631      	mov	r1, r6
 8009c96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	47b8      	blx	r7
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d1bf      	bne.n	8009c22 <_printf_float+0x31a>
 8009ca2:	e68c      	b.n	80099be <_printf_float+0xb6>
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	eb08 020a 	add.w	r2, r8, sl
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d1c2      	bne.n	8009c3a <_printf_float+0x332>
 8009cb4:	e683      	b.n	80099be <_printf_float+0xb6>
 8009cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb8:	2a01      	cmp	r2, #1
 8009cba:	dc01      	bgt.n	8009cc0 <_printf_float+0x3b8>
 8009cbc:	07db      	lsls	r3, r3, #31
 8009cbe:	d537      	bpl.n	8009d30 <_printf_float+0x428>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	4642      	mov	r2, r8
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f ae77 	beq.w	80099be <_printf_float+0xb6>
 8009cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	f43f ae6f 	beq.w	80099be <_printf_float+0xb6>
 8009ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f7f6 fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8009cec:	b9d8      	cbnz	r0, 8009d26 <_printf_float+0x41e>
 8009cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf0:	f108 0201 	add.w	r2, r8, #1
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	47b8      	blx	r7
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d10e      	bne.n	8009d1e <_printf_float+0x416>
 8009d00:	e65d      	b.n	80099be <_printf_float+0xb6>
 8009d02:	2301      	movs	r3, #1
 8009d04:	464a      	mov	r2, r9
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f43f ae56 	beq.w	80099be <_printf_float+0xb6>
 8009d12:	f108 0801 	add.w	r8, r8, #1
 8009d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	4543      	cmp	r3, r8
 8009d1c:	dcf1      	bgt.n	8009d02 <_printf_float+0x3fa>
 8009d1e:	4653      	mov	r3, sl
 8009d20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d24:	e6e0      	b.n	8009ae8 <_printf_float+0x1e0>
 8009d26:	f04f 0800 	mov.w	r8, #0
 8009d2a:	f104 091a 	add.w	r9, r4, #26
 8009d2e:	e7f2      	b.n	8009d16 <_printf_float+0x40e>
 8009d30:	2301      	movs	r3, #1
 8009d32:	4642      	mov	r2, r8
 8009d34:	e7df      	b.n	8009cf6 <_printf_float+0x3ee>
 8009d36:	2301      	movs	r3, #1
 8009d38:	464a      	mov	r2, r9
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	f43f ae3c 	beq.w	80099be <_printf_float+0xb6>
 8009d46:	f108 0801 	add.w	r8, r8, #1
 8009d4a:	68e3      	ldr	r3, [r4, #12]
 8009d4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d4e:	1a5b      	subs	r3, r3, r1
 8009d50:	4543      	cmp	r3, r8
 8009d52:	dcf0      	bgt.n	8009d36 <_printf_float+0x42e>
 8009d54:	e6fd      	b.n	8009b52 <_printf_float+0x24a>
 8009d56:	f04f 0800 	mov.w	r8, #0
 8009d5a:	f104 0919 	add.w	r9, r4, #25
 8009d5e:	e7f4      	b.n	8009d4a <_printf_float+0x442>

08009d60 <_printf_common>:
 8009d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d64:	4616      	mov	r6, r2
 8009d66:	4699      	mov	r9, r3
 8009d68:	688a      	ldr	r2, [r1, #8]
 8009d6a:	690b      	ldr	r3, [r1, #16]
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	bfb8      	it	lt
 8009d72:	4613      	movlt	r3, r2
 8009d74:	6033      	str	r3, [r6, #0]
 8009d76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d80:	b10a      	cbz	r2, 8009d86 <_printf_common+0x26>
 8009d82:	3301      	adds	r3, #1
 8009d84:	6033      	str	r3, [r6, #0]
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	0699      	lsls	r1, r3, #26
 8009d8a:	bf42      	ittt	mi
 8009d8c:	6833      	ldrmi	r3, [r6, #0]
 8009d8e:	3302      	addmi	r3, #2
 8009d90:	6033      	strmi	r3, [r6, #0]
 8009d92:	6825      	ldr	r5, [r4, #0]
 8009d94:	f015 0506 	ands.w	r5, r5, #6
 8009d98:	d106      	bne.n	8009da8 <_printf_common+0x48>
 8009d9a:	f104 0a19 	add.w	sl, r4, #25
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	6832      	ldr	r2, [r6, #0]
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	dc28      	bgt.n	8009dfa <_printf_common+0x9a>
 8009da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dac:	1e13      	subs	r3, r2, #0
 8009dae:	6822      	ldr	r2, [r4, #0]
 8009db0:	bf18      	it	ne
 8009db2:	2301      	movne	r3, #1
 8009db4:	0692      	lsls	r2, r2, #26
 8009db6:	d42d      	bmi.n	8009e14 <_printf_common+0xb4>
 8009db8:	4649      	mov	r1, r9
 8009dba:	4638      	mov	r0, r7
 8009dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dc0:	47c0      	blx	r8
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	d020      	beq.n	8009e08 <_printf_common+0xa8>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	68e5      	ldr	r5, [r4, #12]
 8009dca:	f003 0306 	and.w	r3, r3, #6
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	bf18      	it	ne
 8009dd2:	2500      	movne	r5, #0
 8009dd4:	6832      	ldr	r2, [r6, #0]
 8009dd6:	f04f 0600 	mov.w	r6, #0
 8009dda:	68a3      	ldr	r3, [r4, #8]
 8009ddc:	bf08      	it	eq
 8009dde:	1aad      	subeq	r5, r5, r2
 8009de0:	6922      	ldr	r2, [r4, #16]
 8009de2:	bf08      	it	eq
 8009de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009de8:	4293      	cmp	r3, r2
 8009dea:	bfc4      	itt	gt
 8009dec:	1a9b      	subgt	r3, r3, r2
 8009dee:	18ed      	addgt	r5, r5, r3
 8009df0:	341a      	adds	r4, #26
 8009df2:	42b5      	cmp	r5, r6
 8009df4:	d11a      	bne.n	8009e2c <_printf_common+0xcc>
 8009df6:	2000      	movs	r0, #0
 8009df8:	e008      	b.n	8009e0c <_printf_common+0xac>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4652      	mov	r2, sl
 8009dfe:	4649      	mov	r1, r9
 8009e00:	4638      	mov	r0, r7
 8009e02:	47c0      	blx	r8
 8009e04:	3001      	adds	r0, #1
 8009e06:	d103      	bne.n	8009e10 <_printf_common+0xb0>
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e10:	3501      	adds	r5, #1
 8009e12:	e7c4      	b.n	8009d9e <_printf_common+0x3e>
 8009e14:	2030      	movs	r0, #48	; 0x30
 8009e16:	18e1      	adds	r1, r4, r3
 8009e18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e22:	4422      	add	r2, r4
 8009e24:	3302      	adds	r3, #2
 8009e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e2a:	e7c5      	b.n	8009db8 <_printf_common+0x58>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	4622      	mov	r2, r4
 8009e30:	4649      	mov	r1, r9
 8009e32:	4638      	mov	r0, r7
 8009e34:	47c0      	blx	r8
 8009e36:	3001      	adds	r0, #1
 8009e38:	d0e6      	beq.n	8009e08 <_printf_common+0xa8>
 8009e3a:	3601      	adds	r6, #1
 8009e3c:	e7d9      	b.n	8009df2 <_printf_common+0x92>
	...

08009e40 <_printf_i>:
 8009e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e44:	7e0f      	ldrb	r7, [r1, #24]
 8009e46:	4691      	mov	r9, r2
 8009e48:	2f78      	cmp	r7, #120	; 0x78
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	469a      	mov	sl, r3
 8009e50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e56:	d807      	bhi.n	8009e68 <_printf_i+0x28>
 8009e58:	2f62      	cmp	r7, #98	; 0x62
 8009e5a:	d80a      	bhi.n	8009e72 <_printf_i+0x32>
 8009e5c:	2f00      	cmp	r7, #0
 8009e5e:	f000 80d9 	beq.w	800a014 <_printf_i+0x1d4>
 8009e62:	2f58      	cmp	r7, #88	; 0x58
 8009e64:	f000 80a4 	beq.w	8009fb0 <_printf_i+0x170>
 8009e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e70:	e03a      	b.n	8009ee8 <_printf_i+0xa8>
 8009e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e76:	2b15      	cmp	r3, #21
 8009e78:	d8f6      	bhi.n	8009e68 <_printf_i+0x28>
 8009e7a:	a101      	add	r1, pc, #4	; (adr r1, 8009e80 <_printf_i+0x40>)
 8009e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e80:	08009ed9 	.word	0x08009ed9
 8009e84:	08009eed 	.word	0x08009eed
 8009e88:	08009e69 	.word	0x08009e69
 8009e8c:	08009e69 	.word	0x08009e69
 8009e90:	08009e69 	.word	0x08009e69
 8009e94:	08009e69 	.word	0x08009e69
 8009e98:	08009eed 	.word	0x08009eed
 8009e9c:	08009e69 	.word	0x08009e69
 8009ea0:	08009e69 	.word	0x08009e69
 8009ea4:	08009e69 	.word	0x08009e69
 8009ea8:	08009e69 	.word	0x08009e69
 8009eac:	08009ffb 	.word	0x08009ffb
 8009eb0:	08009f1d 	.word	0x08009f1d
 8009eb4:	08009fdd 	.word	0x08009fdd
 8009eb8:	08009e69 	.word	0x08009e69
 8009ebc:	08009e69 	.word	0x08009e69
 8009ec0:	0800a01d 	.word	0x0800a01d
 8009ec4:	08009e69 	.word	0x08009e69
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	08009e69 	.word	0x08009e69
 8009ed0:	08009e69 	.word	0x08009e69
 8009ed4:	08009fe5 	.word	0x08009fe5
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	1d1a      	adds	r2, r3, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	602a      	str	r2, [r5, #0]
 8009ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e0a4      	b.n	800a036 <_printf_i+0x1f6>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	6829      	ldr	r1, [r5, #0]
 8009ef0:	0606      	lsls	r6, r0, #24
 8009ef2:	f101 0304 	add.w	r3, r1, #4
 8009ef6:	d50a      	bpl.n	8009f0e <_printf_i+0xce>
 8009ef8:	680e      	ldr	r6, [r1, #0]
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	2e00      	cmp	r6, #0
 8009efe:	da03      	bge.n	8009f08 <_printf_i+0xc8>
 8009f00:	232d      	movs	r3, #45	; 0x2d
 8009f02:	4276      	negs	r6, r6
 8009f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f08:	230a      	movs	r3, #10
 8009f0a:	485e      	ldr	r0, [pc, #376]	; (800a084 <_printf_i+0x244>)
 8009f0c:	e019      	b.n	8009f42 <_printf_i+0x102>
 8009f0e:	680e      	ldr	r6, [r1, #0]
 8009f10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f14:	602b      	str	r3, [r5, #0]
 8009f16:	bf18      	it	ne
 8009f18:	b236      	sxthne	r6, r6
 8009f1a:	e7ef      	b.n	8009efc <_printf_i+0xbc>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	6820      	ldr	r0, [r4, #0]
 8009f20:	1d19      	adds	r1, r3, #4
 8009f22:	6029      	str	r1, [r5, #0]
 8009f24:	0601      	lsls	r1, r0, #24
 8009f26:	d501      	bpl.n	8009f2c <_printf_i+0xec>
 8009f28:	681e      	ldr	r6, [r3, #0]
 8009f2a:	e002      	b.n	8009f32 <_printf_i+0xf2>
 8009f2c:	0646      	lsls	r6, r0, #25
 8009f2e:	d5fb      	bpl.n	8009f28 <_printf_i+0xe8>
 8009f30:	881e      	ldrh	r6, [r3, #0]
 8009f32:	2f6f      	cmp	r7, #111	; 0x6f
 8009f34:	bf0c      	ite	eq
 8009f36:	2308      	moveq	r3, #8
 8009f38:	230a      	movne	r3, #10
 8009f3a:	4852      	ldr	r0, [pc, #328]	; (800a084 <_printf_i+0x244>)
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f42:	6865      	ldr	r5, [r4, #4]
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	bfa8      	it	ge
 8009f48:	6821      	ldrge	r1, [r4, #0]
 8009f4a:	60a5      	str	r5, [r4, #8]
 8009f4c:	bfa4      	itt	ge
 8009f4e:	f021 0104 	bicge.w	r1, r1, #4
 8009f52:	6021      	strge	r1, [r4, #0]
 8009f54:	b90e      	cbnz	r6, 8009f5a <_printf_i+0x11a>
 8009f56:	2d00      	cmp	r5, #0
 8009f58:	d04d      	beq.n	8009ff6 <_printf_i+0x1b6>
 8009f5a:	4615      	mov	r5, r2
 8009f5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f60:	fb03 6711 	mls	r7, r3, r1, r6
 8009f64:	5dc7      	ldrb	r7, [r0, r7]
 8009f66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f6a:	4637      	mov	r7, r6
 8009f6c:	42bb      	cmp	r3, r7
 8009f6e:	460e      	mov	r6, r1
 8009f70:	d9f4      	bls.n	8009f5c <_printf_i+0x11c>
 8009f72:	2b08      	cmp	r3, #8
 8009f74:	d10b      	bne.n	8009f8e <_printf_i+0x14e>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	07de      	lsls	r6, r3, #31
 8009f7a:	d508      	bpl.n	8009f8e <_printf_i+0x14e>
 8009f7c:	6923      	ldr	r3, [r4, #16]
 8009f7e:	6861      	ldr	r1, [r4, #4]
 8009f80:	4299      	cmp	r1, r3
 8009f82:	bfde      	ittt	le
 8009f84:	2330      	movle	r3, #48	; 0x30
 8009f86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f8e:	1b52      	subs	r2, r2, r5
 8009f90:	6122      	str	r2, [r4, #16]
 8009f92:	464b      	mov	r3, r9
 8009f94:	4621      	mov	r1, r4
 8009f96:	4640      	mov	r0, r8
 8009f98:	f8cd a000 	str.w	sl, [sp]
 8009f9c:	aa03      	add	r2, sp, #12
 8009f9e:	f7ff fedf 	bl	8009d60 <_printf_common>
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d14c      	bne.n	800a040 <_printf_i+0x200>
 8009fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8009faa:	b004      	add	sp, #16
 8009fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb0:	4834      	ldr	r0, [pc, #208]	; (800a084 <_printf_i+0x244>)
 8009fb2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fb6:	6829      	ldr	r1, [r5, #0]
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fbe:	6029      	str	r1, [r5, #0]
 8009fc0:	061d      	lsls	r5, r3, #24
 8009fc2:	d514      	bpl.n	8009fee <_printf_i+0x1ae>
 8009fc4:	07df      	lsls	r7, r3, #31
 8009fc6:	bf44      	itt	mi
 8009fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8009fcc:	6023      	strmi	r3, [r4, #0]
 8009fce:	b91e      	cbnz	r6, 8009fd8 <_printf_i+0x198>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	f023 0320 	bic.w	r3, r3, #32
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	2310      	movs	r3, #16
 8009fda:	e7af      	b.n	8009f3c <_printf_i+0xfc>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	f043 0320 	orr.w	r3, r3, #32
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	2378      	movs	r3, #120	; 0x78
 8009fe6:	4828      	ldr	r0, [pc, #160]	; (800a088 <_printf_i+0x248>)
 8009fe8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fec:	e7e3      	b.n	8009fb6 <_printf_i+0x176>
 8009fee:	0659      	lsls	r1, r3, #25
 8009ff0:	bf48      	it	mi
 8009ff2:	b2b6      	uxthmi	r6, r6
 8009ff4:	e7e6      	b.n	8009fc4 <_printf_i+0x184>
 8009ff6:	4615      	mov	r5, r2
 8009ff8:	e7bb      	b.n	8009f72 <_printf_i+0x132>
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	6826      	ldr	r6, [r4, #0]
 8009ffe:	1d18      	adds	r0, r3, #4
 800a000:	6961      	ldr	r1, [r4, #20]
 800a002:	6028      	str	r0, [r5, #0]
 800a004:	0635      	lsls	r5, r6, #24
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	d501      	bpl.n	800a00e <_printf_i+0x1ce>
 800a00a:	6019      	str	r1, [r3, #0]
 800a00c:	e002      	b.n	800a014 <_printf_i+0x1d4>
 800a00e:	0670      	lsls	r0, r6, #25
 800a010:	d5fb      	bpl.n	800a00a <_printf_i+0x1ca>
 800a012:	8019      	strh	r1, [r3, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	4615      	mov	r5, r2
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	e7ba      	b.n	8009f92 <_printf_i+0x152>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	2100      	movs	r1, #0
 800a020:	1d1a      	adds	r2, r3, #4
 800a022:	602a      	str	r2, [r5, #0]
 800a024:	681d      	ldr	r5, [r3, #0]
 800a026:	6862      	ldr	r2, [r4, #4]
 800a028:	4628      	mov	r0, r5
 800a02a:	f002 faef 	bl	800c60c <memchr>
 800a02e:	b108      	cbz	r0, 800a034 <_printf_i+0x1f4>
 800a030:	1b40      	subs	r0, r0, r5
 800a032:	6060      	str	r0, [r4, #4]
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	2300      	movs	r3, #0
 800a03a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03e:	e7a8      	b.n	8009f92 <_printf_i+0x152>
 800a040:	462a      	mov	r2, r5
 800a042:	4649      	mov	r1, r9
 800a044:	4640      	mov	r0, r8
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	47d0      	blx	sl
 800a04a:	3001      	adds	r0, #1
 800a04c:	d0ab      	beq.n	8009fa6 <_printf_i+0x166>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	079b      	lsls	r3, r3, #30
 800a052:	d413      	bmi.n	800a07c <_printf_i+0x23c>
 800a054:	68e0      	ldr	r0, [r4, #12]
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	4298      	cmp	r0, r3
 800a05a:	bfb8      	it	lt
 800a05c:	4618      	movlt	r0, r3
 800a05e:	e7a4      	b.n	8009faa <_printf_i+0x16a>
 800a060:	2301      	movs	r3, #1
 800a062:	4632      	mov	r2, r6
 800a064:	4649      	mov	r1, r9
 800a066:	4640      	mov	r0, r8
 800a068:	47d0      	blx	sl
 800a06a:	3001      	adds	r0, #1
 800a06c:	d09b      	beq.n	8009fa6 <_printf_i+0x166>
 800a06e:	3501      	adds	r5, #1
 800a070:	68e3      	ldr	r3, [r4, #12]
 800a072:	9903      	ldr	r1, [sp, #12]
 800a074:	1a5b      	subs	r3, r3, r1
 800a076:	42ab      	cmp	r3, r5
 800a078:	dcf2      	bgt.n	800a060 <_printf_i+0x220>
 800a07a:	e7eb      	b.n	800a054 <_printf_i+0x214>
 800a07c:	2500      	movs	r5, #0
 800a07e:	f104 0619 	add.w	r6, r4, #25
 800a082:	e7f5      	b.n	800a070 <_printf_i+0x230>
 800a084:	0800e896 	.word	0x0800e896
 800a088:	0800e8a7 	.word	0x0800e8a7

0800a08c <_scanf_float>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	b087      	sub	sp, #28
 800a092:	9303      	str	r3, [sp, #12]
 800a094:	688b      	ldr	r3, [r1, #8]
 800a096:	4617      	mov	r7, r2
 800a098:	1e5a      	subs	r2, r3, #1
 800a09a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a09e:	bf85      	ittet	hi
 800a0a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0a4:	195b      	addhi	r3, r3, r5
 800a0a6:	2300      	movls	r3, #0
 800a0a8:	9302      	strhi	r3, [sp, #8]
 800a0aa:	bf88      	it	hi
 800a0ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0b0:	468b      	mov	fp, r1
 800a0b2:	f04f 0500 	mov.w	r5, #0
 800a0b6:	bf8c      	ite	hi
 800a0b8:	608b      	strhi	r3, [r1, #8]
 800a0ba:	9302      	strls	r3, [sp, #8]
 800a0bc:	680b      	ldr	r3, [r1, #0]
 800a0be:	4680      	mov	r8, r0
 800a0c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0c4:	f84b 3b1c 	str.w	r3, [fp], #28
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	465e      	mov	r6, fp
 800a0cc:	46aa      	mov	sl, r5
 800a0ce:	46a9      	mov	r9, r5
 800a0d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0d4:	9501      	str	r5, [sp, #4]
 800a0d6:	68a2      	ldr	r2, [r4, #8]
 800a0d8:	b152      	cbz	r2, 800a0f0 <_scanf_float+0x64>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b4e      	cmp	r3, #78	; 0x4e
 800a0e0:	d864      	bhi.n	800a1ac <_scanf_float+0x120>
 800a0e2:	2b40      	cmp	r3, #64	; 0x40
 800a0e4:	d83c      	bhi.n	800a160 <_scanf_float+0xd4>
 800a0e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a0ea:	b2c8      	uxtb	r0, r1
 800a0ec:	280e      	cmp	r0, #14
 800a0ee:	d93a      	bls.n	800a166 <_scanf_float+0xda>
 800a0f0:	f1b9 0f00 	cmp.w	r9, #0
 800a0f4:	d003      	beq.n	800a0fe <_scanf_float+0x72>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a102:	f1ba 0f01 	cmp.w	sl, #1
 800a106:	f200 8113 	bhi.w	800a330 <_scanf_float+0x2a4>
 800a10a:	455e      	cmp	r6, fp
 800a10c:	f200 8105 	bhi.w	800a31a <_scanf_float+0x28e>
 800a110:	2501      	movs	r5, #1
 800a112:	4628      	mov	r0, r5
 800a114:	b007      	add	sp, #28
 800a116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a11e:	2a0d      	cmp	r2, #13
 800a120:	d8e6      	bhi.n	800a0f0 <_scanf_float+0x64>
 800a122:	a101      	add	r1, pc, #4	; (adr r1, 800a128 <_scanf_float+0x9c>)
 800a124:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a128:	0800a267 	.word	0x0800a267
 800a12c:	0800a0f1 	.word	0x0800a0f1
 800a130:	0800a0f1 	.word	0x0800a0f1
 800a134:	0800a0f1 	.word	0x0800a0f1
 800a138:	0800a2c7 	.word	0x0800a2c7
 800a13c:	0800a29f 	.word	0x0800a29f
 800a140:	0800a0f1 	.word	0x0800a0f1
 800a144:	0800a0f1 	.word	0x0800a0f1
 800a148:	0800a275 	.word	0x0800a275
 800a14c:	0800a0f1 	.word	0x0800a0f1
 800a150:	0800a0f1 	.word	0x0800a0f1
 800a154:	0800a0f1 	.word	0x0800a0f1
 800a158:	0800a0f1 	.word	0x0800a0f1
 800a15c:	0800a22d 	.word	0x0800a22d
 800a160:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a164:	e7db      	b.n	800a11e <_scanf_float+0x92>
 800a166:	290e      	cmp	r1, #14
 800a168:	d8c2      	bhi.n	800a0f0 <_scanf_float+0x64>
 800a16a:	a001      	add	r0, pc, #4	; (adr r0, 800a170 <_scanf_float+0xe4>)
 800a16c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a170:	0800a21f 	.word	0x0800a21f
 800a174:	0800a0f1 	.word	0x0800a0f1
 800a178:	0800a21f 	.word	0x0800a21f
 800a17c:	0800a2b3 	.word	0x0800a2b3
 800a180:	0800a0f1 	.word	0x0800a0f1
 800a184:	0800a1cd 	.word	0x0800a1cd
 800a188:	0800a209 	.word	0x0800a209
 800a18c:	0800a209 	.word	0x0800a209
 800a190:	0800a209 	.word	0x0800a209
 800a194:	0800a209 	.word	0x0800a209
 800a198:	0800a209 	.word	0x0800a209
 800a19c:	0800a209 	.word	0x0800a209
 800a1a0:	0800a209 	.word	0x0800a209
 800a1a4:	0800a209 	.word	0x0800a209
 800a1a8:	0800a209 	.word	0x0800a209
 800a1ac:	2b6e      	cmp	r3, #110	; 0x6e
 800a1ae:	d809      	bhi.n	800a1c4 <_scanf_float+0x138>
 800a1b0:	2b60      	cmp	r3, #96	; 0x60
 800a1b2:	d8b2      	bhi.n	800a11a <_scanf_float+0x8e>
 800a1b4:	2b54      	cmp	r3, #84	; 0x54
 800a1b6:	d077      	beq.n	800a2a8 <_scanf_float+0x21c>
 800a1b8:	2b59      	cmp	r3, #89	; 0x59
 800a1ba:	d199      	bne.n	800a0f0 <_scanf_float+0x64>
 800a1bc:	2d07      	cmp	r5, #7
 800a1be:	d197      	bne.n	800a0f0 <_scanf_float+0x64>
 800a1c0:	2508      	movs	r5, #8
 800a1c2:	e029      	b.n	800a218 <_scanf_float+0x18c>
 800a1c4:	2b74      	cmp	r3, #116	; 0x74
 800a1c6:	d06f      	beq.n	800a2a8 <_scanf_float+0x21c>
 800a1c8:	2b79      	cmp	r3, #121	; 0x79
 800a1ca:	e7f6      	b.n	800a1ba <_scanf_float+0x12e>
 800a1cc:	6821      	ldr	r1, [r4, #0]
 800a1ce:	05c8      	lsls	r0, r1, #23
 800a1d0:	d51a      	bpl.n	800a208 <_scanf_float+0x17c>
 800a1d2:	9b02      	ldr	r3, [sp, #8]
 800a1d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1d8:	6021      	str	r1, [r4, #0]
 800a1da:	f109 0901 	add.w	r9, r9, #1
 800a1de:	b11b      	cbz	r3, 800a1e8 <_scanf_float+0x15c>
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	3201      	adds	r2, #1
 800a1e4:	9302      	str	r3, [sp, #8]
 800a1e6:	60a2      	str	r2, [r4, #8]
 800a1e8:	68a3      	ldr	r3, [r4, #8]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	60a3      	str	r3, [r4, #8]
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	607b      	str	r3, [r7, #4]
 800a1fc:	f340 8084 	ble.w	800a308 <_scanf_float+0x27c>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	603b      	str	r3, [r7, #0]
 800a206:	e766      	b.n	800a0d6 <_scanf_float+0x4a>
 800a208:	eb1a 0f05 	cmn.w	sl, r5
 800a20c:	f47f af70 	bne.w	800a0f0 <_scanf_float+0x64>
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a216:	6022      	str	r2, [r4, #0]
 800a218:	f806 3b01 	strb.w	r3, [r6], #1
 800a21c:	e7e4      	b.n	800a1e8 <_scanf_float+0x15c>
 800a21e:	6822      	ldr	r2, [r4, #0]
 800a220:	0610      	lsls	r0, r2, #24
 800a222:	f57f af65 	bpl.w	800a0f0 <_scanf_float+0x64>
 800a226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a22a:	e7f4      	b.n	800a216 <_scanf_float+0x18a>
 800a22c:	f1ba 0f00 	cmp.w	sl, #0
 800a230:	d10e      	bne.n	800a250 <_scanf_float+0x1c4>
 800a232:	f1b9 0f00 	cmp.w	r9, #0
 800a236:	d10e      	bne.n	800a256 <_scanf_float+0x1ca>
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a23e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a242:	d108      	bne.n	800a256 <_scanf_float+0x1ca>
 800a244:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a248:	f04f 0a01 	mov.w	sl, #1
 800a24c:	6022      	str	r2, [r4, #0]
 800a24e:	e7e3      	b.n	800a218 <_scanf_float+0x18c>
 800a250:	f1ba 0f02 	cmp.w	sl, #2
 800a254:	d055      	beq.n	800a302 <_scanf_float+0x276>
 800a256:	2d01      	cmp	r5, #1
 800a258:	d002      	beq.n	800a260 <_scanf_float+0x1d4>
 800a25a:	2d04      	cmp	r5, #4
 800a25c:	f47f af48 	bne.w	800a0f0 <_scanf_float+0x64>
 800a260:	3501      	adds	r5, #1
 800a262:	b2ed      	uxtb	r5, r5
 800a264:	e7d8      	b.n	800a218 <_scanf_float+0x18c>
 800a266:	f1ba 0f01 	cmp.w	sl, #1
 800a26a:	f47f af41 	bne.w	800a0f0 <_scanf_float+0x64>
 800a26e:	f04f 0a02 	mov.w	sl, #2
 800a272:	e7d1      	b.n	800a218 <_scanf_float+0x18c>
 800a274:	b97d      	cbnz	r5, 800a296 <_scanf_float+0x20a>
 800a276:	f1b9 0f00 	cmp.w	r9, #0
 800a27a:	f47f af3c 	bne.w	800a0f6 <_scanf_float+0x6a>
 800a27e:	6822      	ldr	r2, [r4, #0]
 800a280:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a284:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a288:	f47f af39 	bne.w	800a0fe <_scanf_float+0x72>
 800a28c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a290:	2501      	movs	r5, #1
 800a292:	6022      	str	r2, [r4, #0]
 800a294:	e7c0      	b.n	800a218 <_scanf_float+0x18c>
 800a296:	2d03      	cmp	r5, #3
 800a298:	d0e2      	beq.n	800a260 <_scanf_float+0x1d4>
 800a29a:	2d05      	cmp	r5, #5
 800a29c:	e7de      	b.n	800a25c <_scanf_float+0x1d0>
 800a29e:	2d02      	cmp	r5, #2
 800a2a0:	f47f af26 	bne.w	800a0f0 <_scanf_float+0x64>
 800a2a4:	2503      	movs	r5, #3
 800a2a6:	e7b7      	b.n	800a218 <_scanf_float+0x18c>
 800a2a8:	2d06      	cmp	r5, #6
 800a2aa:	f47f af21 	bne.w	800a0f0 <_scanf_float+0x64>
 800a2ae:	2507      	movs	r5, #7
 800a2b0:	e7b2      	b.n	800a218 <_scanf_float+0x18c>
 800a2b2:	6822      	ldr	r2, [r4, #0]
 800a2b4:	0591      	lsls	r1, r2, #22
 800a2b6:	f57f af1b 	bpl.w	800a0f0 <_scanf_float+0x64>
 800a2ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a2be:	6022      	str	r2, [r4, #0]
 800a2c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2c4:	e7a8      	b.n	800a218 <_scanf_float+0x18c>
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a2cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2d0:	d006      	beq.n	800a2e0 <_scanf_float+0x254>
 800a2d2:	0550      	lsls	r0, r2, #21
 800a2d4:	f57f af0c 	bpl.w	800a0f0 <_scanf_float+0x64>
 800a2d8:	f1b9 0f00 	cmp.w	r9, #0
 800a2dc:	f43f af0f 	beq.w	800a0fe <_scanf_float+0x72>
 800a2e0:	0591      	lsls	r1, r2, #22
 800a2e2:	bf58      	it	pl
 800a2e4:	9901      	ldrpl	r1, [sp, #4]
 800a2e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2ea:	bf58      	it	pl
 800a2ec:	eba9 0101 	subpl.w	r1, r9, r1
 800a2f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2f4:	f04f 0900 	mov.w	r9, #0
 800a2f8:	bf58      	it	pl
 800a2fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2fe:	6022      	str	r2, [r4, #0]
 800a300:	e78a      	b.n	800a218 <_scanf_float+0x18c>
 800a302:	f04f 0a03 	mov.w	sl, #3
 800a306:	e787      	b.n	800a218 <_scanf_float+0x18c>
 800a308:	4639      	mov	r1, r7
 800a30a:	4640      	mov	r0, r8
 800a30c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a310:	4798      	blx	r3
 800a312:	2800      	cmp	r0, #0
 800a314:	f43f aedf 	beq.w	800a0d6 <_scanf_float+0x4a>
 800a318:	e6ea      	b.n	800a0f0 <_scanf_float+0x64>
 800a31a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a31e:	463a      	mov	r2, r7
 800a320:	4640      	mov	r0, r8
 800a322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a326:	4798      	blx	r3
 800a328:	6923      	ldr	r3, [r4, #16]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	6123      	str	r3, [r4, #16]
 800a32e:	e6ec      	b.n	800a10a <_scanf_float+0x7e>
 800a330:	1e6b      	subs	r3, r5, #1
 800a332:	2b06      	cmp	r3, #6
 800a334:	d825      	bhi.n	800a382 <_scanf_float+0x2f6>
 800a336:	2d02      	cmp	r5, #2
 800a338:	d836      	bhi.n	800a3a8 <_scanf_float+0x31c>
 800a33a:	455e      	cmp	r6, fp
 800a33c:	f67f aee8 	bls.w	800a110 <_scanf_float+0x84>
 800a340:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a344:	463a      	mov	r2, r7
 800a346:	4640      	mov	r0, r8
 800a348:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a34c:	4798      	blx	r3
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	3b01      	subs	r3, #1
 800a352:	6123      	str	r3, [r4, #16]
 800a354:	e7f1      	b.n	800a33a <_scanf_float+0x2ae>
 800a356:	9802      	ldr	r0, [sp, #8]
 800a358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a35c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a360:	463a      	mov	r2, r7
 800a362:	9002      	str	r0, [sp, #8]
 800a364:	4640      	mov	r0, r8
 800a366:	4798      	blx	r3
 800a368:	6923      	ldr	r3, [r4, #16]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	6123      	str	r3, [r4, #16]
 800a36e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a372:	fa5f fa8a 	uxtb.w	sl, sl
 800a376:	f1ba 0f02 	cmp.w	sl, #2
 800a37a:	d1ec      	bne.n	800a356 <_scanf_float+0x2ca>
 800a37c:	3d03      	subs	r5, #3
 800a37e:	b2ed      	uxtb	r5, r5
 800a380:	1b76      	subs	r6, r6, r5
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	05da      	lsls	r2, r3, #23
 800a386:	d52f      	bpl.n	800a3e8 <_scanf_float+0x35c>
 800a388:	055b      	lsls	r3, r3, #21
 800a38a:	d510      	bpl.n	800a3ae <_scanf_float+0x322>
 800a38c:	455e      	cmp	r6, fp
 800a38e:	f67f aebf 	bls.w	800a110 <_scanf_float+0x84>
 800a392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a396:	463a      	mov	r2, r7
 800a398:	4640      	mov	r0, r8
 800a39a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a39e:	4798      	blx	r3
 800a3a0:	6923      	ldr	r3, [r4, #16]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	6123      	str	r3, [r4, #16]
 800a3a6:	e7f1      	b.n	800a38c <_scanf_float+0x300>
 800a3a8:	46aa      	mov	sl, r5
 800a3aa:	9602      	str	r6, [sp, #8]
 800a3ac:	e7df      	b.n	800a36e <_scanf_float+0x2e2>
 800a3ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	2965      	cmp	r1, #101	; 0x65
 800a3b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ba:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3be:	6123      	str	r3, [r4, #16]
 800a3c0:	d00c      	beq.n	800a3dc <_scanf_float+0x350>
 800a3c2:	2945      	cmp	r1, #69	; 0x45
 800a3c4:	d00a      	beq.n	800a3dc <_scanf_float+0x350>
 800a3c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4798      	blx	r3
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	1eb5      	subs	r5, r6, #2
 800a3da:	6123      	str	r3, [r4, #16]
 800a3dc:	463a      	mov	r2, r7
 800a3de:	4640      	mov	r0, r8
 800a3e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3e4:	4798      	blx	r3
 800a3e6:	462e      	mov	r6, r5
 800a3e8:	6825      	ldr	r5, [r4, #0]
 800a3ea:	f015 0510 	ands.w	r5, r5, #16
 800a3ee:	d155      	bne.n	800a49c <_scanf_float+0x410>
 800a3f0:	7035      	strb	r5, [r6, #0]
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3fc:	d11b      	bne.n	800a436 <_scanf_float+0x3aa>
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	454b      	cmp	r3, r9
 800a402:	eba3 0209 	sub.w	r2, r3, r9
 800a406:	d123      	bne.n	800a450 <_scanf_float+0x3c4>
 800a408:	2200      	movs	r2, #0
 800a40a:	4659      	mov	r1, fp
 800a40c:	4640      	mov	r0, r8
 800a40e:	f000 fe7b 	bl	800b108 <_strtod_r>
 800a412:	6822      	ldr	r2, [r4, #0]
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	f012 0f02 	tst.w	r2, #2
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	d021      	beq.n	800a466 <_scanf_float+0x3da>
 800a422:	1d1a      	adds	r2, r3, #4
 800a424:	9903      	ldr	r1, [sp, #12]
 800a426:	600a      	str	r2, [r1, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	e9c3 6700 	strd	r6, r7, [r3]
 800a42e:	68e3      	ldr	r3, [r4, #12]
 800a430:	3301      	adds	r3, #1
 800a432:	60e3      	str	r3, [r4, #12]
 800a434:	e66d      	b.n	800a112 <_scanf_float+0x86>
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0e5      	beq.n	800a408 <_scanf_float+0x37c>
 800a43c:	9905      	ldr	r1, [sp, #20]
 800a43e:	230a      	movs	r3, #10
 800a440:	462a      	mov	r2, r5
 800a442:	4640      	mov	r0, r8
 800a444:	3101      	adds	r1, #1
 800a446:	f000 fee1 	bl	800b20c <_strtol_r>
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	9e05      	ldr	r6, [sp, #20]
 800a44e:	1ac2      	subs	r2, r0, r3
 800a450:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a454:	429e      	cmp	r6, r3
 800a456:	bf28      	it	cs
 800a458:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a45c:	4630      	mov	r0, r6
 800a45e:	4910      	ldr	r1, [pc, #64]	; (800a4a0 <_scanf_float+0x414>)
 800a460:	f000 f826 	bl	800a4b0 <siprintf>
 800a464:	e7d0      	b.n	800a408 <_scanf_float+0x37c>
 800a466:	f012 0f04 	tst.w	r2, #4
 800a46a:	f103 0204 	add.w	r2, r3, #4
 800a46e:	d1d9      	bne.n	800a424 <_scanf_float+0x398>
 800a470:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a474:	f8cc 2000 	str.w	r2, [ip]
 800a478:	f8d3 8000 	ldr.w	r8, [r3]
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	f7f6 fac4 	bl	8000a0c <__aeabi_dcmpun>
 800a484:	b128      	cbz	r0, 800a492 <_scanf_float+0x406>
 800a486:	4807      	ldr	r0, [pc, #28]	; (800a4a4 <_scanf_float+0x418>)
 800a488:	f000 f80e 	bl	800a4a8 <nanf>
 800a48c:	f8c8 0000 	str.w	r0, [r8]
 800a490:	e7cd      	b.n	800a42e <_scanf_float+0x3a2>
 800a492:	4630      	mov	r0, r6
 800a494:	4639      	mov	r1, r7
 800a496:	f7f6 fb17 	bl	8000ac8 <__aeabi_d2f>
 800a49a:	e7f7      	b.n	800a48c <_scanf_float+0x400>
 800a49c:	2500      	movs	r5, #0
 800a49e:	e638      	b.n	800a112 <_scanf_float+0x86>
 800a4a0:	0800e8b8 	.word	0x0800e8b8
 800a4a4:	0800ecc0 	.word	0x0800ecc0

0800a4a8 <nanf>:
 800a4a8:	4800      	ldr	r0, [pc, #0]	; (800a4ac <nanf+0x4>)
 800a4aa:	4770      	bx	lr
 800a4ac:	7fc00000 	.word	0x7fc00000

0800a4b0 <siprintf>:
 800a4b0:	b40e      	push	{r1, r2, r3}
 800a4b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4b6:	b500      	push	{lr}
 800a4b8:	b09c      	sub	sp, #112	; 0x70
 800a4ba:	ab1d      	add	r3, sp, #116	; 0x74
 800a4bc:	9002      	str	r0, [sp, #8]
 800a4be:	9006      	str	r0, [sp, #24]
 800a4c0:	9107      	str	r1, [sp, #28]
 800a4c2:	9104      	str	r1, [sp, #16]
 800a4c4:	4808      	ldr	r0, [pc, #32]	; (800a4e8 <siprintf+0x38>)
 800a4c6:	4909      	ldr	r1, [pc, #36]	; (800a4ec <siprintf+0x3c>)
 800a4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4cc:	9105      	str	r1, [sp, #20]
 800a4ce:	6800      	ldr	r0, [r0, #0]
 800a4d0:	a902      	add	r1, sp, #8
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	f002 feba 	bl	800d24c <_svfiprintf_r>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	9b02      	ldr	r3, [sp, #8]
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	b01c      	add	sp, #112	; 0x70
 800a4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e4:	b003      	add	sp, #12
 800a4e6:	4770      	bx	lr
 800a4e8:	20000038 	.word	0x20000038
 800a4ec:	ffff0208 	.word	0xffff0208

0800a4f0 <sulp>:
 800a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	460f      	mov	r7, r1
 800a4f6:	4690      	mov	r8, r2
 800a4f8:	f002 fc14 	bl	800cd24 <__ulp>
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	f1b8 0f00 	cmp.w	r8, #0
 800a504:	d011      	beq.n	800a52a <sulp+0x3a>
 800a506:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a50a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dd0b      	ble.n	800a52a <sulp+0x3a>
 800a512:	2400      	movs	r4, #0
 800a514:	051b      	lsls	r3, r3, #20
 800a516:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a51a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a51e:	4622      	mov	r2, r4
 800a520:	462b      	mov	r3, r5
 800a522:	f7f5 ffd9 	bl	80004d8 <__aeabi_dmul>
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a532:	0000      	movs	r0, r0
 800a534:	0000      	movs	r0, r0
	...

0800a538 <_strtod_l>:
 800a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53c:	469b      	mov	fp, r3
 800a53e:	2300      	movs	r3, #0
 800a540:	b09f      	sub	sp, #124	; 0x7c
 800a542:	931a      	str	r3, [sp, #104]	; 0x68
 800a544:	4b9e      	ldr	r3, [pc, #632]	; (800a7c0 <_strtod_l+0x288>)
 800a546:	4682      	mov	sl, r0
 800a548:	681f      	ldr	r7, [r3, #0]
 800a54a:	460e      	mov	r6, r1
 800a54c:	4638      	mov	r0, r7
 800a54e:	9215      	str	r2, [sp, #84]	; 0x54
 800a550:	f7f5 fdfe 	bl	8000150 <strlen>
 800a554:	f04f 0800 	mov.w	r8, #0
 800a558:	4604      	mov	r4, r0
 800a55a:	f04f 0900 	mov.w	r9, #0
 800a55e:	9619      	str	r6, [sp, #100]	; 0x64
 800a560:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a562:	781a      	ldrb	r2, [r3, #0]
 800a564:	2a2b      	cmp	r2, #43	; 0x2b
 800a566:	d04c      	beq.n	800a602 <_strtod_l+0xca>
 800a568:	d83a      	bhi.n	800a5e0 <_strtod_l+0xa8>
 800a56a:	2a0d      	cmp	r2, #13
 800a56c:	d833      	bhi.n	800a5d6 <_strtod_l+0x9e>
 800a56e:	2a08      	cmp	r2, #8
 800a570:	d833      	bhi.n	800a5da <_strtod_l+0xa2>
 800a572:	2a00      	cmp	r2, #0
 800a574:	d03d      	beq.n	800a5f2 <_strtod_l+0xba>
 800a576:	2300      	movs	r3, #0
 800a578:	930a      	str	r3, [sp, #40]	; 0x28
 800a57a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a57c:	782b      	ldrb	r3, [r5, #0]
 800a57e:	2b30      	cmp	r3, #48	; 0x30
 800a580:	f040 80aa 	bne.w	800a6d8 <_strtod_l+0x1a0>
 800a584:	786b      	ldrb	r3, [r5, #1]
 800a586:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a58a:	2b58      	cmp	r3, #88	; 0x58
 800a58c:	d166      	bne.n	800a65c <_strtod_l+0x124>
 800a58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a590:	4650      	mov	r0, sl
 800a592:	9301      	str	r3, [sp, #4]
 800a594:	ab1a      	add	r3, sp, #104	; 0x68
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	4a8a      	ldr	r2, [pc, #552]	; (800a7c4 <_strtod_l+0x28c>)
 800a59a:	f8cd b008 	str.w	fp, [sp, #8]
 800a59e:	ab1b      	add	r3, sp, #108	; 0x6c
 800a5a0:	a919      	add	r1, sp, #100	; 0x64
 800a5a2:	f001 fd17 	bl	800bfd4 <__gethex>
 800a5a6:	f010 0607 	ands.w	r6, r0, #7
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	d005      	beq.n	800a5ba <_strtod_l+0x82>
 800a5ae:	2e06      	cmp	r6, #6
 800a5b0:	d129      	bne.n	800a606 <_strtod_l+0xce>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	9519      	str	r5, [sp, #100]	; 0x64
 800a5b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a5ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 858a 	bne.w	800b0d6 <_strtod_l+0xb9e>
 800a5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c4:	b1d3      	cbz	r3, 800a5fc <_strtod_l+0xc4>
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	b01f      	add	sp, #124	; 0x7c
 800a5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d6:	2a20      	cmp	r2, #32
 800a5d8:	d1cd      	bne.n	800a576 <_strtod_l+0x3e>
 800a5da:	3301      	adds	r3, #1
 800a5dc:	9319      	str	r3, [sp, #100]	; 0x64
 800a5de:	e7bf      	b.n	800a560 <_strtod_l+0x28>
 800a5e0:	2a2d      	cmp	r2, #45	; 0x2d
 800a5e2:	d1c8      	bne.n	800a576 <_strtod_l+0x3e>
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	920a      	str	r2, [sp, #40]	; 0x28
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	9219      	str	r2, [sp, #100]	; 0x64
 800a5ec:	785b      	ldrb	r3, [r3, #1]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1c3      	bne.n	800a57a <_strtod_l+0x42>
 800a5f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5f4:	9619      	str	r6, [sp, #100]	; 0x64
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f040 856b 	bne.w	800b0d2 <_strtod_l+0xb9a>
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	464b      	mov	r3, r9
 800a600:	e7e4      	b.n	800a5cc <_strtod_l+0x94>
 800a602:	2200      	movs	r2, #0
 800a604:	e7ef      	b.n	800a5e6 <_strtod_l+0xae>
 800a606:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a608:	b13a      	cbz	r2, 800a61a <_strtod_l+0xe2>
 800a60a:	2135      	movs	r1, #53	; 0x35
 800a60c:	a81c      	add	r0, sp, #112	; 0x70
 800a60e:	f002 fc8d 	bl	800cf2c <__copybits>
 800a612:	4650      	mov	r0, sl
 800a614:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a616:	f002 f855 	bl	800c6c4 <_Bfree>
 800a61a:	3e01      	subs	r6, #1
 800a61c:	2e04      	cmp	r6, #4
 800a61e:	d806      	bhi.n	800a62e <_strtod_l+0xf6>
 800a620:	e8df f006 	tbb	[pc, r6]
 800a624:	1714030a 	.word	0x1714030a
 800a628:	0a          	.byte	0x0a
 800a629:	00          	.byte	0x00
 800a62a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a62e:	0721      	lsls	r1, r4, #28
 800a630:	d5c3      	bpl.n	800a5ba <_strtod_l+0x82>
 800a632:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a636:	e7c0      	b.n	800a5ba <_strtod_l+0x82>
 800a638:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a63a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a63e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a642:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a646:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a64a:	e7f0      	b.n	800a62e <_strtod_l+0xf6>
 800a64c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a7c8 <_strtod_l+0x290>
 800a650:	e7ed      	b.n	800a62e <_strtod_l+0xf6>
 800a652:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a656:	f04f 38ff 	mov.w	r8, #4294967295
 800a65a:	e7e8      	b.n	800a62e <_strtod_l+0xf6>
 800a65c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	9219      	str	r2, [sp, #100]	; 0x64
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	2b30      	cmp	r3, #48	; 0x30
 800a666:	d0f9      	beq.n	800a65c <_strtod_l+0x124>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0a6      	beq.n	800a5ba <_strtod_l+0x82>
 800a66c:	2301      	movs	r3, #1
 800a66e:	9307      	str	r3, [sp, #28]
 800a670:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a672:	220a      	movs	r2, #10
 800a674:	9308      	str	r3, [sp, #32]
 800a676:	2300      	movs	r3, #0
 800a678:	469b      	mov	fp, r3
 800a67a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a67e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a680:	7805      	ldrb	r5, [r0, #0]
 800a682:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a686:	b2d9      	uxtb	r1, r3
 800a688:	2909      	cmp	r1, #9
 800a68a:	d927      	bls.n	800a6dc <_strtod_l+0x1a4>
 800a68c:	4622      	mov	r2, r4
 800a68e:	4639      	mov	r1, r7
 800a690:	f002 fef2 	bl	800d478 <strncmp>
 800a694:	2800      	cmp	r0, #0
 800a696:	d033      	beq.n	800a700 <_strtod_l+0x1c8>
 800a698:	2000      	movs	r0, #0
 800a69a:	462a      	mov	r2, r5
 800a69c:	465c      	mov	r4, fp
 800a69e:	4603      	mov	r3, r0
 800a6a0:	9004      	str	r0, [sp, #16]
 800a6a2:	2a65      	cmp	r2, #101	; 0x65
 800a6a4:	d001      	beq.n	800a6aa <_strtod_l+0x172>
 800a6a6:	2a45      	cmp	r2, #69	; 0x45
 800a6a8:	d114      	bne.n	800a6d4 <_strtod_l+0x19c>
 800a6aa:	b91c      	cbnz	r4, 800a6b4 <_strtod_l+0x17c>
 800a6ac:	9a07      	ldr	r2, [sp, #28]
 800a6ae:	4302      	orrs	r2, r0
 800a6b0:	d09f      	beq.n	800a5f2 <_strtod_l+0xba>
 800a6b2:	2400      	movs	r4, #0
 800a6b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a6b6:	1c72      	adds	r2, r6, #1
 800a6b8:	9219      	str	r2, [sp, #100]	; 0x64
 800a6ba:	7872      	ldrb	r2, [r6, #1]
 800a6bc:	2a2b      	cmp	r2, #43	; 0x2b
 800a6be:	d079      	beq.n	800a7b4 <_strtod_l+0x27c>
 800a6c0:	2a2d      	cmp	r2, #45	; 0x2d
 800a6c2:	f000 8083 	beq.w	800a7cc <_strtod_l+0x294>
 800a6c6:	2700      	movs	r7, #0
 800a6c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6cc:	2909      	cmp	r1, #9
 800a6ce:	f240 8083 	bls.w	800a7d8 <_strtod_l+0x2a0>
 800a6d2:	9619      	str	r6, [sp, #100]	; 0x64
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	e09f      	b.n	800a818 <_strtod_l+0x2e0>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e7c8      	b.n	800a66e <_strtod_l+0x136>
 800a6dc:	f1bb 0f08 	cmp.w	fp, #8
 800a6e0:	bfd5      	itete	le
 800a6e2:	9906      	ldrle	r1, [sp, #24]
 800a6e4:	9905      	ldrgt	r1, [sp, #20]
 800a6e6:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a6ee:	f100 0001 	add.w	r0, r0, #1
 800a6f2:	bfd4      	ite	le
 800a6f4:	9306      	strle	r3, [sp, #24]
 800a6f6:	9305      	strgt	r3, [sp, #20]
 800a6f8:	f10b 0b01 	add.w	fp, fp, #1
 800a6fc:	9019      	str	r0, [sp, #100]	; 0x64
 800a6fe:	e7be      	b.n	800a67e <_strtod_l+0x146>
 800a700:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a702:	191a      	adds	r2, r3, r4
 800a704:	9219      	str	r2, [sp, #100]	; 0x64
 800a706:	5d1a      	ldrb	r2, [r3, r4]
 800a708:	f1bb 0f00 	cmp.w	fp, #0
 800a70c:	d036      	beq.n	800a77c <_strtod_l+0x244>
 800a70e:	465c      	mov	r4, fp
 800a710:	9004      	str	r0, [sp, #16]
 800a712:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a716:	2b09      	cmp	r3, #9
 800a718:	d912      	bls.n	800a740 <_strtod_l+0x208>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e7c1      	b.n	800a6a2 <_strtod_l+0x16a>
 800a71e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a720:	3001      	adds	r0, #1
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	9219      	str	r2, [sp, #100]	; 0x64
 800a726:	785a      	ldrb	r2, [r3, #1]
 800a728:	2a30      	cmp	r2, #48	; 0x30
 800a72a:	d0f8      	beq.n	800a71e <_strtod_l+0x1e6>
 800a72c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a730:	2b08      	cmp	r3, #8
 800a732:	f200 84d5 	bhi.w	800b0e0 <_strtod_l+0xba8>
 800a736:	9004      	str	r0, [sp, #16]
 800a738:	2000      	movs	r0, #0
 800a73a:	4604      	mov	r4, r0
 800a73c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a73e:	9308      	str	r3, [sp, #32]
 800a740:	3a30      	subs	r2, #48	; 0x30
 800a742:	f100 0301 	add.w	r3, r0, #1
 800a746:	d013      	beq.n	800a770 <_strtod_l+0x238>
 800a748:	9904      	ldr	r1, [sp, #16]
 800a74a:	1905      	adds	r5, r0, r4
 800a74c:	4419      	add	r1, r3
 800a74e:	9104      	str	r1, [sp, #16]
 800a750:	4623      	mov	r3, r4
 800a752:	210a      	movs	r1, #10
 800a754:	42ab      	cmp	r3, r5
 800a756:	d113      	bne.n	800a780 <_strtod_l+0x248>
 800a758:	1823      	adds	r3, r4, r0
 800a75a:	2b08      	cmp	r3, #8
 800a75c:	f104 0401 	add.w	r4, r4, #1
 800a760:	4404      	add	r4, r0
 800a762:	dc1b      	bgt.n	800a79c <_strtod_l+0x264>
 800a764:	230a      	movs	r3, #10
 800a766:	9906      	ldr	r1, [sp, #24]
 800a768:	fb03 2301 	mla	r3, r3, r1, r2
 800a76c:	9306      	str	r3, [sp, #24]
 800a76e:	2300      	movs	r3, #0
 800a770:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a772:	4618      	mov	r0, r3
 800a774:	1c51      	adds	r1, r2, #1
 800a776:	9119      	str	r1, [sp, #100]	; 0x64
 800a778:	7852      	ldrb	r2, [r2, #1]
 800a77a:	e7ca      	b.n	800a712 <_strtod_l+0x1da>
 800a77c:	4658      	mov	r0, fp
 800a77e:	e7d3      	b.n	800a728 <_strtod_l+0x1f0>
 800a780:	2b08      	cmp	r3, #8
 800a782:	dc04      	bgt.n	800a78e <_strtod_l+0x256>
 800a784:	9f06      	ldr	r7, [sp, #24]
 800a786:	434f      	muls	r7, r1
 800a788:	9706      	str	r7, [sp, #24]
 800a78a:	3301      	adds	r3, #1
 800a78c:	e7e2      	b.n	800a754 <_strtod_l+0x21c>
 800a78e:	1c5f      	adds	r7, r3, #1
 800a790:	2f10      	cmp	r7, #16
 800a792:	bfde      	ittt	le
 800a794:	9f05      	ldrle	r7, [sp, #20]
 800a796:	434f      	mulle	r7, r1
 800a798:	9705      	strle	r7, [sp, #20]
 800a79a:	e7f6      	b.n	800a78a <_strtod_l+0x252>
 800a79c:	2c10      	cmp	r4, #16
 800a79e:	bfdf      	itttt	le
 800a7a0:	230a      	movle	r3, #10
 800a7a2:	9905      	ldrle	r1, [sp, #20]
 800a7a4:	fb03 2301 	mlale	r3, r3, r1, r2
 800a7a8:	9305      	strle	r3, [sp, #20]
 800a7aa:	e7e0      	b.n	800a76e <_strtod_l+0x236>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e77b      	b.n	800a6ac <_strtod_l+0x174>
 800a7b4:	2700      	movs	r7, #0
 800a7b6:	1cb2      	adds	r2, r6, #2
 800a7b8:	9219      	str	r2, [sp, #100]	; 0x64
 800a7ba:	78b2      	ldrb	r2, [r6, #2]
 800a7bc:	e784      	b.n	800a6c8 <_strtod_l+0x190>
 800a7be:	bf00      	nop
 800a7c0:	0800eb08 	.word	0x0800eb08
 800a7c4:	0800e8c0 	.word	0x0800e8c0
 800a7c8:	7ff00000 	.word	0x7ff00000
 800a7cc:	2701      	movs	r7, #1
 800a7ce:	e7f2      	b.n	800a7b6 <_strtod_l+0x27e>
 800a7d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a7d2:	1c51      	adds	r1, r2, #1
 800a7d4:	9119      	str	r1, [sp, #100]	; 0x64
 800a7d6:	7852      	ldrb	r2, [r2, #1]
 800a7d8:	2a30      	cmp	r2, #48	; 0x30
 800a7da:	d0f9      	beq.n	800a7d0 <_strtod_l+0x298>
 800a7dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a7e0:	2908      	cmp	r1, #8
 800a7e2:	f63f af77 	bhi.w	800a6d4 <_strtod_l+0x19c>
 800a7e6:	f04f 0e0a 	mov.w	lr, #10
 800a7ea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a7ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a7f4:	1c51      	adds	r1, r2, #1
 800a7f6:	9119      	str	r1, [sp, #100]	; 0x64
 800a7f8:	7852      	ldrb	r2, [r2, #1]
 800a7fa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a7fe:	2d09      	cmp	r5, #9
 800a800:	d935      	bls.n	800a86e <_strtod_l+0x336>
 800a802:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a804:	1b49      	subs	r1, r1, r5
 800a806:	2908      	cmp	r1, #8
 800a808:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a80c:	dc02      	bgt.n	800a814 <_strtod_l+0x2dc>
 800a80e:	4565      	cmp	r5, ip
 800a810:	bfa8      	it	ge
 800a812:	4665      	movge	r5, ip
 800a814:	b107      	cbz	r7, 800a818 <_strtod_l+0x2e0>
 800a816:	426d      	negs	r5, r5
 800a818:	2c00      	cmp	r4, #0
 800a81a:	d14c      	bne.n	800a8b6 <_strtod_l+0x37e>
 800a81c:	9907      	ldr	r1, [sp, #28]
 800a81e:	4301      	orrs	r1, r0
 800a820:	f47f aecb 	bne.w	800a5ba <_strtod_l+0x82>
 800a824:	2b00      	cmp	r3, #0
 800a826:	f47f aee4 	bne.w	800a5f2 <_strtod_l+0xba>
 800a82a:	2a69      	cmp	r2, #105	; 0x69
 800a82c:	d026      	beq.n	800a87c <_strtod_l+0x344>
 800a82e:	dc23      	bgt.n	800a878 <_strtod_l+0x340>
 800a830:	2a49      	cmp	r2, #73	; 0x49
 800a832:	d023      	beq.n	800a87c <_strtod_l+0x344>
 800a834:	2a4e      	cmp	r2, #78	; 0x4e
 800a836:	f47f aedc 	bne.w	800a5f2 <_strtod_l+0xba>
 800a83a:	499d      	ldr	r1, [pc, #628]	; (800aab0 <_strtod_l+0x578>)
 800a83c:	a819      	add	r0, sp, #100	; 0x64
 800a83e:	f001 fe17 	bl	800c470 <__match>
 800a842:	2800      	cmp	r0, #0
 800a844:	f43f aed5 	beq.w	800a5f2 <_strtod_l+0xba>
 800a848:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b28      	cmp	r3, #40	; 0x28
 800a84e:	d12c      	bne.n	800a8aa <_strtod_l+0x372>
 800a850:	4998      	ldr	r1, [pc, #608]	; (800aab4 <_strtod_l+0x57c>)
 800a852:	aa1c      	add	r2, sp, #112	; 0x70
 800a854:	a819      	add	r0, sp, #100	; 0x64
 800a856:	f001 fe1f 	bl	800c498 <__hexnan>
 800a85a:	2805      	cmp	r0, #5
 800a85c:	d125      	bne.n	800a8aa <_strtod_l+0x372>
 800a85e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a860:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a864:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a868:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a86c:	e6a5      	b.n	800a5ba <_strtod_l+0x82>
 800a86e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a872:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a876:	e7bc      	b.n	800a7f2 <_strtod_l+0x2ba>
 800a878:	2a6e      	cmp	r2, #110	; 0x6e
 800a87a:	e7dc      	b.n	800a836 <_strtod_l+0x2fe>
 800a87c:	498e      	ldr	r1, [pc, #568]	; (800aab8 <_strtod_l+0x580>)
 800a87e:	a819      	add	r0, sp, #100	; 0x64
 800a880:	f001 fdf6 	bl	800c470 <__match>
 800a884:	2800      	cmp	r0, #0
 800a886:	f43f aeb4 	beq.w	800a5f2 <_strtod_l+0xba>
 800a88a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a88c:	498b      	ldr	r1, [pc, #556]	; (800aabc <_strtod_l+0x584>)
 800a88e:	3b01      	subs	r3, #1
 800a890:	a819      	add	r0, sp, #100	; 0x64
 800a892:	9319      	str	r3, [sp, #100]	; 0x64
 800a894:	f001 fdec 	bl	800c470 <__match>
 800a898:	b910      	cbnz	r0, 800a8a0 <_strtod_l+0x368>
 800a89a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a89c:	3301      	adds	r3, #1
 800a89e:	9319      	str	r3, [sp, #100]	; 0x64
 800a8a0:	f04f 0800 	mov.w	r8, #0
 800a8a4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800aac0 <_strtod_l+0x588>
 800a8a8:	e687      	b.n	800a5ba <_strtod_l+0x82>
 800a8aa:	4886      	ldr	r0, [pc, #536]	; (800aac4 <_strtod_l+0x58c>)
 800a8ac:	f002 fdce 	bl	800d44c <nan>
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	4689      	mov	r9, r1
 800a8b4:	e681      	b.n	800a5ba <_strtod_l+0x82>
 800a8b6:	9b04      	ldr	r3, [sp, #16]
 800a8b8:	f1bb 0f00 	cmp.w	fp, #0
 800a8bc:	bf08      	it	eq
 800a8be:	46a3      	moveq	fp, r4
 800a8c0:	1aeb      	subs	r3, r5, r3
 800a8c2:	2c10      	cmp	r4, #16
 800a8c4:	9806      	ldr	r0, [sp, #24]
 800a8c6:	4626      	mov	r6, r4
 800a8c8:	9307      	str	r3, [sp, #28]
 800a8ca:	bfa8      	it	ge
 800a8cc:	2610      	movge	r6, #16
 800a8ce:	f7f5 fd89 	bl	80003e4 <__aeabi_ui2d>
 800a8d2:	2c09      	cmp	r4, #9
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	dd13      	ble.n	800a902 <_strtod_l+0x3ca>
 800a8da:	4b7b      	ldr	r3, [pc, #492]	; (800aac8 <_strtod_l+0x590>)
 800a8dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8e4:	f7f5 fdf8 	bl	80004d8 <__aeabi_dmul>
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	9805      	ldr	r0, [sp, #20]
 800a8ec:	4689      	mov	r9, r1
 800a8ee:	f7f5 fd79 	bl	80003e4 <__aeabi_ui2d>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	f7f5 fc37 	bl	800016c <__adddf3>
 800a8fe:	4680      	mov	r8, r0
 800a900:	4689      	mov	r9, r1
 800a902:	2c0f      	cmp	r4, #15
 800a904:	dc36      	bgt.n	800a974 <_strtod_l+0x43c>
 800a906:	9b07      	ldr	r3, [sp, #28]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f43f ae56 	beq.w	800a5ba <_strtod_l+0x82>
 800a90e:	dd22      	ble.n	800a956 <_strtod_l+0x41e>
 800a910:	2b16      	cmp	r3, #22
 800a912:	dc09      	bgt.n	800a928 <_strtod_l+0x3f0>
 800a914:	496c      	ldr	r1, [pc, #432]	; (800aac8 <_strtod_l+0x590>)
 800a916:	4642      	mov	r2, r8
 800a918:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a91c:	464b      	mov	r3, r9
 800a91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a922:	f7f5 fdd9 	bl	80004d8 <__aeabi_dmul>
 800a926:	e7c3      	b.n	800a8b0 <_strtod_l+0x378>
 800a928:	9a07      	ldr	r2, [sp, #28]
 800a92a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a92e:	4293      	cmp	r3, r2
 800a930:	db20      	blt.n	800a974 <_strtod_l+0x43c>
 800a932:	4d65      	ldr	r5, [pc, #404]	; (800aac8 <_strtod_l+0x590>)
 800a934:	f1c4 040f 	rsb	r4, r4, #15
 800a938:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a93c:	4642      	mov	r2, r8
 800a93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a942:	464b      	mov	r3, r9
 800a944:	f7f5 fdc8 	bl	80004d8 <__aeabi_dmul>
 800a948:	9b07      	ldr	r3, [sp, #28]
 800a94a:	1b1c      	subs	r4, r3, r4
 800a94c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a950:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a954:	e7e5      	b.n	800a922 <_strtod_l+0x3ea>
 800a956:	9b07      	ldr	r3, [sp, #28]
 800a958:	3316      	adds	r3, #22
 800a95a:	db0b      	blt.n	800a974 <_strtod_l+0x43c>
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	4640      	mov	r0, r8
 800a960:	1b5d      	subs	r5, r3, r5
 800a962:	4b59      	ldr	r3, [pc, #356]	; (800aac8 <_strtod_l+0x590>)
 800a964:	4649      	mov	r1, r9
 800a966:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a96a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a96e:	f7f5 fedd 	bl	800072c <__aeabi_ddiv>
 800a972:	e79d      	b.n	800a8b0 <_strtod_l+0x378>
 800a974:	9b07      	ldr	r3, [sp, #28]
 800a976:	1ba6      	subs	r6, r4, r6
 800a978:	441e      	add	r6, r3
 800a97a:	2e00      	cmp	r6, #0
 800a97c:	dd74      	ble.n	800aa68 <_strtod_l+0x530>
 800a97e:	f016 030f 	ands.w	r3, r6, #15
 800a982:	d00a      	beq.n	800a99a <_strtod_l+0x462>
 800a984:	4950      	ldr	r1, [pc, #320]	; (800aac8 <_strtod_l+0x590>)
 800a986:	4642      	mov	r2, r8
 800a988:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a98c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a990:	464b      	mov	r3, r9
 800a992:	f7f5 fda1 	bl	80004d8 <__aeabi_dmul>
 800a996:	4680      	mov	r8, r0
 800a998:	4689      	mov	r9, r1
 800a99a:	f036 060f 	bics.w	r6, r6, #15
 800a99e:	d052      	beq.n	800aa46 <_strtod_l+0x50e>
 800a9a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a9a4:	dd27      	ble.n	800a9f6 <_strtod_l+0x4be>
 800a9a6:	f04f 0b00 	mov.w	fp, #0
 800a9aa:	f8cd b010 	str.w	fp, [sp, #16]
 800a9ae:	f8cd b020 	str.w	fp, [sp, #32]
 800a9b2:	f8cd b018 	str.w	fp, [sp, #24]
 800a9b6:	2322      	movs	r3, #34	; 0x22
 800a9b8:	f04f 0800 	mov.w	r8, #0
 800a9bc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800aac0 <_strtod_l+0x588>
 800a9c0:	f8ca 3000 	str.w	r3, [sl]
 800a9c4:	9b08      	ldr	r3, [sp, #32]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f43f adf7 	beq.w	800a5ba <_strtod_l+0x82>
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a9d0:	f001 fe78 	bl	800c6c4 <_Bfree>
 800a9d4:	4650      	mov	r0, sl
 800a9d6:	9906      	ldr	r1, [sp, #24]
 800a9d8:	f001 fe74 	bl	800c6c4 <_Bfree>
 800a9dc:	4650      	mov	r0, sl
 800a9de:	9904      	ldr	r1, [sp, #16]
 800a9e0:	f001 fe70 	bl	800c6c4 <_Bfree>
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	9908      	ldr	r1, [sp, #32]
 800a9e8:	f001 fe6c 	bl	800c6c4 <_Bfree>
 800a9ec:	4659      	mov	r1, fp
 800a9ee:	4650      	mov	r0, sl
 800a9f0:	f001 fe68 	bl	800c6c4 <_Bfree>
 800a9f4:	e5e1      	b.n	800a5ba <_strtod_l+0x82>
 800a9f6:	4b35      	ldr	r3, [pc, #212]	; (800aacc <_strtod_l+0x594>)
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	9305      	str	r3, [sp, #20]
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4649      	mov	r1, r9
 800aa00:	461f      	mov	r7, r3
 800aa02:	1136      	asrs	r6, r6, #4
 800aa04:	2e01      	cmp	r6, #1
 800aa06:	dc21      	bgt.n	800aa4c <_strtod_l+0x514>
 800aa08:	b10b      	cbz	r3, 800aa0e <_strtod_l+0x4d6>
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4689      	mov	r9, r1
 800aa0e:	4b2f      	ldr	r3, [pc, #188]	; (800aacc <_strtod_l+0x594>)
 800aa10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aa14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aa18:	4642      	mov	r2, r8
 800aa1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa1e:	464b      	mov	r3, r9
 800aa20:	f7f5 fd5a 	bl	80004d8 <__aeabi_dmul>
 800aa24:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <_strtod_l+0x588>)
 800aa26:	460a      	mov	r2, r1
 800aa28:	400b      	ands	r3, r1
 800aa2a:	4929      	ldr	r1, [pc, #164]	; (800aad0 <_strtod_l+0x598>)
 800aa2c:	4680      	mov	r8, r0
 800aa2e:	428b      	cmp	r3, r1
 800aa30:	d8b9      	bhi.n	800a9a6 <_strtod_l+0x46e>
 800aa32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa36:	428b      	cmp	r3, r1
 800aa38:	bf86      	itte	hi
 800aa3a:	f04f 38ff 	movhi.w	r8, #4294967295
 800aa3e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800aad4 <_strtod_l+0x59c>
 800aa42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aa46:	2300      	movs	r3, #0
 800aa48:	9305      	str	r3, [sp, #20]
 800aa4a:	e07f      	b.n	800ab4c <_strtod_l+0x614>
 800aa4c:	07f2      	lsls	r2, r6, #31
 800aa4e:	d505      	bpl.n	800aa5c <_strtod_l+0x524>
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	f7f5 fd3f 	bl	80004d8 <__aeabi_dmul>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	9a05      	ldr	r2, [sp, #20]
 800aa5e:	3701      	adds	r7, #1
 800aa60:	3208      	adds	r2, #8
 800aa62:	1076      	asrs	r6, r6, #1
 800aa64:	9205      	str	r2, [sp, #20]
 800aa66:	e7cd      	b.n	800aa04 <_strtod_l+0x4cc>
 800aa68:	d0ed      	beq.n	800aa46 <_strtod_l+0x50e>
 800aa6a:	4276      	negs	r6, r6
 800aa6c:	f016 020f 	ands.w	r2, r6, #15
 800aa70:	d00a      	beq.n	800aa88 <_strtod_l+0x550>
 800aa72:	4b15      	ldr	r3, [pc, #84]	; (800aac8 <_strtod_l+0x590>)
 800aa74:	4640      	mov	r0, r8
 800aa76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fe54 	bl	800072c <__aeabi_ddiv>
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	1136      	asrs	r6, r6, #4
 800aa8a:	d0dc      	beq.n	800aa46 <_strtod_l+0x50e>
 800aa8c:	2e1f      	cmp	r6, #31
 800aa8e:	dd23      	ble.n	800aad8 <_strtod_l+0x5a0>
 800aa90:	f04f 0b00 	mov.w	fp, #0
 800aa94:	f8cd b010 	str.w	fp, [sp, #16]
 800aa98:	f8cd b020 	str.w	fp, [sp, #32]
 800aa9c:	f8cd b018 	str.w	fp, [sp, #24]
 800aaa0:	2322      	movs	r3, #34	; 0x22
 800aaa2:	f04f 0800 	mov.w	r8, #0
 800aaa6:	f04f 0900 	mov.w	r9, #0
 800aaaa:	f8ca 3000 	str.w	r3, [sl]
 800aaae:	e789      	b.n	800a9c4 <_strtod_l+0x48c>
 800aab0:	0800e891 	.word	0x0800e891
 800aab4:	0800e8d4 	.word	0x0800e8d4
 800aab8:	0800e889 	.word	0x0800e889
 800aabc:	0800ea14 	.word	0x0800ea14
 800aac0:	7ff00000 	.word	0x7ff00000
 800aac4:	0800ecc0 	.word	0x0800ecc0
 800aac8:	0800eba0 	.word	0x0800eba0
 800aacc:	0800eb78 	.word	0x0800eb78
 800aad0:	7ca00000 	.word	0x7ca00000
 800aad4:	7fefffff 	.word	0x7fefffff
 800aad8:	f016 0310 	ands.w	r3, r6, #16
 800aadc:	bf18      	it	ne
 800aade:	236a      	movne	r3, #106	; 0x6a
 800aae0:	4640      	mov	r0, r8
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	4649      	mov	r1, r9
 800aae6:	2300      	movs	r3, #0
 800aae8:	4fb0      	ldr	r7, [pc, #704]	; (800adac <_strtod_l+0x874>)
 800aaea:	07f2      	lsls	r2, r6, #31
 800aaec:	d504      	bpl.n	800aaf8 <_strtod_l+0x5c0>
 800aaee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf2:	f7f5 fcf1 	bl	80004d8 <__aeabi_dmul>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	1076      	asrs	r6, r6, #1
 800aafa:	f107 0708 	add.w	r7, r7, #8
 800aafe:	d1f4      	bne.n	800aaea <_strtod_l+0x5b2>
 800ab00:	b10b      	cbz	r3, 800ab06 <_strtod_l+0x5ce>
 800ab02:	4680      	mov	r8, r0
 800ab04:	4689      	mov	r9, r1
 800ab06:	9b05      	ldr	r3, [sp, #20]
 800ab08:	b1c3      	cbz	r3, 800ab3c <_strtod_l+0x604>
 800ab0a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ab0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	4649      	mov	r1, r9
 800ab16:	dd11      	ble.n	800ab3c <_strtod_l+0x604>
 800ab18:	2b1f      	cmp	r3, #31
 800ab1a:	f340 8127 	ble.w	800ad6c <_strtod_l+0x834>
 800ab1e:	2b34      	cmp	r3, #52	; 0x34
 800ab20:	bfd8      	it	le
 800ab22:	f04f 33ff 	movle.w	r3, #4294967295
 800ab26:	f04f 0800 	mov.w	r8, #0
 800ab2a:	bfcf      	iteee	gt
 800ab2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ab30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ab34:	fa03 f202 	lslle.w	r2, r3, r2
 800ab38:	ea02 0901 	andle.w	r9, r2, r1
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	4640      	mov	r0, r8
 800ab42:	4649      	mov	r1, r9
 800ab44:	f7f5 ff30 	bl	80009a8 <__aeabi_dcmpeq>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d1a1      	bne.n	800aa90 <_strtod_l+0x558>
 800ab4c:	9b06      	ldr	r3, [sp, #24]
 800ab4e:	465a      	mov	r2, fp
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	4650      	mov	r0, sl
 800ab54:	4623      	mov	r3, r4
 800ab56:	9908      	ldr	r1, [sp, #32]
 800ab58:	f001 fe1c 	bl	800c794 <__s2b>
 800ab5c:	9008      	str	r0, [sp, #32]
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f43f af21 	beq.w	800a9a6 <_strtod_l+0x46e>
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	f04f 0b00 	mov.w	fp, #0
 800ab6a:	1b5d      	subs	r5, r3, r5
 800ab6c:	9b07      	ldr	r3, [sp, #28]
 800ab6e:	f8cd b010 	str.w	fp, [sp, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	bfb4      	ite	lt
 800ab76:	462b      	movlt	r3, r5
 800ab78:	2300      	movge	r3, #0
 800ab7a:	930e      	str	r3, [sp, #56]	; 0x38
 800ab7c:	9b07      	ldr	r3, [sp, #28]
 800ab7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab82:	9314      	str	r3, [sp, #80]	; 0x50
 800ab84:	9b08      	ldr	r3, [sp, #32]
 800ab86:	4650      	mov	r0, sl
 800ab88:	6859      	ldr	r1, [r3, #4]
 800ab8a:	f001 fd5b 	bl	800c644 <_Balloc>
 800ab8e:	9006      	str	r0, [sp, #24]
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f43f af10 	beq.w	800a9b6 <_strtod_l+0x47e>
 800ab96:	9b08      	ldr	r3, [sp, #32]
 800ab98:	300c      	adds	r0, #12
 800ab9a:	691a      	ldr	r2, [r3, #16]
 800ab9c:	f103 010c 	add.w	r1, r3, #12
 800aba0:	3202      	adds	r2, #2
 800aba2:	0092      	lsls	r2, r2, #2
 800aba4:	f001 fd40 	bl	800c628 <memcpy>
 800aba8:	ab1c      	add	r3, sp, #112	; 0x70
 800abaa:	9301      	str	r3, [sp, #4]
 800abac:	ab1b      	add	r3, sp, #108	; 0x6c
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	4642      	mov	r2, r8
 800abb2:	464b      	mov	r3, r9
 800abb4:	4650      	mov	r0, sl
 800abb6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800abba:	f002 f92d 	bl	800ce18 <__d2b>
 800abbe:	901a      	str	r0, [sp, #104]	; 0x68
 800abc0:	2800      	cmp	r0, #0
 800abc2:	f43f aef8 	beq.w	800a9b6 <_strtod_l+0x47e>
 800abc6:	2101      	movs	r1, #1
 800abc8:	4650      	mov	r0, sl
 800abca:	f001 fe7b 	bl	800c8c4 <__i2b>
 800abce:	4603      	mov	r3, r0
 800abd0:	9004      	str	r0, [sp, #16]
 800abd2:	2800      	cmp	r0, #0
 800abd4:	f43f aeef 	beq.w	800a9b6 <_strtod_l+0x47e>
 800abd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800abda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800abdc:	2d00      	cmp	r5, #0
 800abde:	bfab      	itete	ge
 800abe0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800abe2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800abe4:	18ee      	addge	r6, r5, r3
 800abe6:	1b5c      	sublt	r4, r3, r5
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	bfa8      	it	ge
 800abec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800abee:	eba5 0503 	sub.w	r5, r5, r3
 800abf2:	4415      	add	r5, r2
 800abf4:	4b6e      	ldr	r3, [pc, #440]	; (800adb0 <_strtod_l+0x878>)
 800abf6:	f105 35ff 	add.w	r5, r5, #4294967295
 800abfa:	bfb8      	it	lt
 800abfc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800abfe:	429d      	cmp	r5, r3
 800ac00:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac04:	f280 80c4 	bge.w	800ad90 <_strtod_l+0x858>
 800ac08:	1b5b      	subs	r3, r3, r5
 800ac0a:	2b1f      	cmp	r3, #31
 800ac0c:	f04f 0701 	mov.w	r7, #1
 800ac10:	eba2 0203 	sub.w	r2, r2, r3
 800ac14:	f300 80b1 	bgt.w	800ad7a <_strtod_l+0x842>
 800ac18:	2500      	movs	r5, #0
 800ac1a:	fa07 f303 	lsl.w	r3, r7, r3
 800ac1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac20:	18b7      	adds	r7, r6, r2
 800ac22:	9b05      	ldr	r3, [sp, #20]
 800ac24:	42be      	cmp	r6, r7
 800ac26:	4414      	add	r4, r2
 800ac28:	441c      	add	r4, r3
 800ac2a:	4633      	mov	r3, r6
 800ac2c:	bfa8      	it	ge
 800ac2e:	463b      	movge	r3, r7
 800ac30:	42a3      	cmp	r3, r4
 800ac32:	bfa8      	it	ge
 800ac34:	4623      	movge	r3, r4
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfc2      	ittt	gt
 800ac3a:	1aff      	subgt	r7, r7, r3
 800ac3c:	1ae4      	subgt	r4, r4, r3
 800ac3e:	1af6      	subgt	r6, r6, r3
 800ac40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dd17      	ble.n	800ac76 <_strtod_l+0x73e>
 800ac46:	461a      	mov	r2, r3
 800ac48:	4650      	mov	r0, sl
 800ac4a:	9904      	ldr	r1, [sp, #16]
 800ac4c:	f001 fef8 	bl	800ca40 <__pow5mult>
 800ac50:	9004      	str	r0, [sp, #16]
 800ac52:	2800      	cmp	r0, #0
 800ac54:	f43f aeaf 	beq.w	800a9b6 <_strtod_l+0x47e>
 800ac58:	4601      	mov	r1, r0
 800ac5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac5c:	4650      	mov	r0, sl
 800ac5e:	f001 fe47 	bl	800c8f0 <__multiply>
 800ac62:	9009      	str	r0, [sp, #36]	; 0x24
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f43f aea6 	beq.w	800a9b6 <_strtod_l+0x47e>
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac6e:	f001 fd29 	bl	800c6c4 <_Bfree>
 800ac72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac74:	931a      	str	r3, [sp, #104]	; 0x68
 800ac76:	2f00      	cmp	r7, #0
 800ac78:	f300 808e 	bgt.w	800ad98 <_strtod_l+0x860>
 800ac7c:	9b07      	ldr	r3, [sp, #28]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd08      	ble.n	800ac94 <_strtod_l+0x75c>
 800ac82:	4650      	mov	r0, sl
 800ac84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac86:	9906      	ldr	r1, [sp, #24]
 800ac88:	f001 feda 	bl	800ca40 <__pow5mult>
 800ac8c:	9006      	str	r0, [sp, #24]
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f ae91 	beq.w	800a9b6 <_strtod_l+0x47e>
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	dd08      	ble.n	800acaa <_strtod_l+0x772>
 800ac98:	4622      	mov	r2, r4
 800ac9a:	4650      	mov	r0, sl
 800ac9c:	9906      	ldr	r1, [sp, #24]
 800ac9e:	f001 ff29 	bl	800caf4 <__lshift>
 800aca2:	9006      	str	r0, [sp, #24]
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f43f ae86 	beq.w	800a9b6 <_strtod_l+0x47e>
 800acaa:	2e00      	cmp	r6, #0
 800acac:	dd08      	ble.n	800acc0 <_strtod_l+0x788>
 800acae:	4632      	mov	r2, r6
 800acb0:	4650      	mov	r0, sl
 800acb2:	9904      	ldr	r1, [sp, #16]
 800acb4:	f001 ff1e 	bl	800caf4 <__lshift>
 800acb8:	9004      	str	r0, [sp, #16]
 800acba:	2800      	cmp	r0, #0
 800acbc:	f43f ae7b 	beq.w	800a9b6 <_strtod_l+0x47e>
 800acc0:	4650      	mov	r0, sl
 800acc2:	9a06      	ldr	r2, [sp, #24]
 800acc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800acc6:	f001 ffa1 	bl	800cc0c <__mdiff>
 800acca:	4683      	mov	fp, r0
 800accc:	2800      	cmp	r0, #0
 800acce:	f43f ae72 	beq.w	800a9b6 <_strtod_l+0x47e>
 800acd2:	2400      	movs	r4, #0
 800acd4:	68c3      	ldr	r3, [r0, #12]
 800acd6:	9904      	ldr	r1, [sp, #16]
 800acd8:	60c4      	str	r4, [r0, #12]
 800acda:	930b      	str	r3, [sp, #44]	; 0x2c
 800acdc:	f001 ff7a 	bl	800cbd4 <__mcmp>
 800ace0:	42a0      	cmp	r0, r4
 800ace2:	da6b      	bge.n	800adbc <_strtod_l+0x884>
 800ace4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace6:	ea53 0308 	orrs.w	r3, r3, r8
 800acea:	f040 8091 	bne.w	800ae10 <_strtod_l+0x8d8>
 800acee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f040 808c 	bne.w	800ae10 <_strtod_l+0x8d8>
 800acf8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acfc:	0d1b      	lsrs	r3, r3, #20
 800acfe:	051b      	lsls	r3, r3, #20
 800ad00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad04:	f240 8084 	bls.w	800ae10 <_strtod_l+0x8d8>
 800ad08:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ad0c:	b91b      	cbnz	r3, 800ad16 <_strtod_l+0x7de>
 800ad0e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	dd7c      	ble.n	800ae10 <_strtod_l+0x8d8>
 800ad16:	4659      	mov	r1, fp
 800ad18:	2201      	movs	r2, #1
 800ad1a:	4650      	mov	r0, sl
 800ad1c:	f001 feea 	bl	800caf4 <__lshift>
 800ad20:	9904      	ldr	r1, [sp, #16]
 800ad22:	4683      	mov	fp, r0
 800ad24:	f001 ff56 	bl	800cbd4 <__mcmp>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	dd71      	ble.n	800ae10 <_strtod_l+0x8d8>
 800ad2c:	9905      	ldr	r1, [sp, #20]
 800ad2e:	464b      	mov	r3, r9
 800ad30:	4a20      	ldr	r2, [pc, #128]	; (800adb4 <_strtod_l+0x87c>)
 800ad32:	2900      	cmp	r1, #0
 800ad34:	f000 808c 	beq.w	800ae50 <_strtod_l+0x918>
 800ad38:	ea02 0109 	and.w	r1, r2, r9
 800ad3c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad40:	f300 8086 	bgt.w	800ae50 <_strtod_l+0x918>
 800ad44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad48:	f77f aeaa 	ble.w	800aaa0 <_strtod_l+0x568>
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4649      	mov	r1, r9
 800ad50:	4b19      	ldr	r3, [pc, #100]	; (800adb8 <_strtod_l+0x880>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	f7f5 fbc0 	bl	80004d8 <__aeabi_dmul>
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4303      	orrs	r3, r0
 800ad5c:	bf08      	it	eq
 800ad5e:	2322      	moveq	r3, #34	; 0x22
 800ad60:	4680      	mov	r8, r0
 800ad62:	4689      	mov	r9, r1
 800ad64:	bf08      	it	eq
 800ad66:	f8ca 3000 	streq.w	r3, [sl]
 800ad6a:	e62f      	b.n	800a9cc <_strtod_l+0x494>
 800ad6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad70:	fa02 f303 	lsl.w	r3, r2, r3
 800ad74:	ea03 0808 	and.w	r8, r3, r8
 800ad78:	e6e0      	b.n	800ab3c <_strtod_l+0x604>
 800ad7a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ad7e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ad82:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ad86:	35e2      	adds	r5, #226	; 0xe2
 800ad88:	fa07 f505 	lsl.w	r5, r7, r5
 800ad8c:	970f      	str	r7, [sp, #60]	; 0x3c
 800ad8e:	e747      	b.n	800ac20 <_strtod_l+0x6e8>
 800ad90:	2301      	movs	r3, #1
 800ad92:	2500      	movs	r5, #0
 800ad94:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad96:	e743      	b.n	800ac20 <_strtod_l+0x6e8>
 800ad98:	463a      	mov	r2, r7
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad9e:	f001 fea9 	bl	800caf4 <__lshift>
 800ada2:	901a      	str	r0, [sp, #104]	; 0x68
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f47f af69 	bne.w	800ac7c <_strtod_l+0x744>
 800adaa:	e604      	b.n	800a9b6 <_strtod_l+0x47e>
 800adac:	0800e8e8 	.word	0x0800e8e8
 800adb0:	fffffc02 	.word	0xfffffc02
 800adb4:	7ff00000 	.word	0x7ff00000
 800adb8:	39500000 	.word	0x39500000
 800adbc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800adc0:	d165      	bne.n	800ae8e <_strtod_l+0x956>
 800adc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adc8:	b35a      	cbz	r2, 800ae22 <_strtod_l+0x8ea>
 800adca:	4a99      	ldr	r2, [pc, #612]	; (800b030 <_strtod_l+0xaf8>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d12b      	bne.n	800ae28 <_strtod_l+0x8f0>
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	4641      	mov	r1, r8
 800add4:	b303      	cbz	r3, 800ae18 <_strtod_l+0x8e0>
 800add6:	464a      	mov	r2, r9
 800add8:	4b96      	ldr	r3, [pc, #600]	; (800b034 <_strtod_l+0xafc>)
 800adda:	4013      	ands	r3, r2
 800addc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ade0:	f04f 32ff 	mov.w	r2, #4294967295
 800ade4:	d81b      	bhi.n	800ae1e <_strtod_l+0x8e6>
 800ade6:	0d1b      	lsrs	r3, r3, #20
 800ade8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800adec:	fa02 f303 	lsl.w	r3, r2, r3
 800adf0:	4299      	cmp	r1, r3
 800adf2:	d119      	bne.n	800ae28 <_strtod_l+0x8f0>
 800adf4:	4b90      	ldr	r3, [pc, #576]	; (800b038 <_strtod_l+0xb00>)
 800adf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d102      	bne.n	800ae02 <_strtod_l+0x8ca>
 800adfc:	3101      	adds	r1, #1
 800adfe:	f43f adda 	beq.w	800a9b6 <_strtod_l+0x47e>
 800ae02:	f04f 0800 	mov.w	r8, #0
 800ae06:	4b8b      	ldr	r3, [pc, #556]	; (800b034 <_strtod_l+0xafc>)
 800ae08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae0a:	401a      	ands	r2, r3
 800ae0c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ae10:	9b05      	ldr	r3, [sp, #20]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d19a      	bne.n	800ad4c <_strtod_l+0x814>
 800ae16:	e5d9      	b.n	800a9cc <_strtod_l+0x494>
 800ae18:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1c:	e7e8      	b.n	800adf0 <_strtod_l+0x8b8>
 800ae1e:	4613      	mov	r3, r2
 800ae20:	e7e6      	b.n	800adf0 <_strtod_l+0x8b8>
 800ae22:	ea53 0308 	orrs.w	r3, r3, r8
 800ae26:	d081      	beq.n	800ad2c <_strtod_l+0x7f4>
 800ae28:	b1e5      	cbz	r5, 800ae64 <_strtod_l+0x92c>
 800ae2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2c:	421d      	tst	r5, r3
 800ae2e:	d0ef      	beq.n	800ae10 <_strtod_l+0x8d8>
 800ae30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae32:	4640      	mov	r0, r8
 800ae34:	4649      	mov	r1, r9
 800ae36:	9a05      	ldr	r2, [sp, #20]
 800ae38:	b1c3      	cbz	r3, 800ae6c <_strtod_l+0x934>
 800ae3a:	f7ff fb59 	bl	800a4f0 <sulp>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae46:	f7f5 f991 	bl	800016c <__adddf3>
 800ae4a:	4680      	mov	r8, r0
 800ae4c:	4689      	mov	r9, r1
 800ae4e:	e7df      	b.n	800ae10 <_strtod_l+0x8d8>
 800ae50:	4013      	ands	r3, r2
 800ae52:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae56:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ae5a:	f04f 38ff 	mov.w	r8, #4294967295
 800ae5e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ae62:	e7d5      	b.n	800ae10 <_strtod_l+0x8d8>
 800ae64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae66:	ea13 0f08 	tst.w	r3, r8
 800ae6a:	e7e0      	b.n	800ae2e <_strtod_l+0x8f6>
 800ae6c:	f7ff fb40 	bl	800a4f0 <sulp>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae78:	f7f5 f976 	bl	8000168 <__aeabi_dsub>
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4680      	mov	r8, r0
 800ae82:	4689      	mov	r9, r1
 800ae84:	f7f5 fd90 	bl	80009a8 <__aeabi_dcmpeq>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d0c1      	beq.n	800ae10 <_strtod_l+0x8d8>
 800ae8c:	e608      	b.n	800aaa0 <_strtod_l+0x568>
 800ae8e:	4658      	mov	r0, fp
 800ae90:	9904      	ldr	r1, [sp, #16]
 800ae92:	f002 f81d 	bl	800ced0 <__ratio>
 800ae96:	2200      	movs	r2, #0
 800ae98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	460f      	mov	r7, r1
 800aea0:	f7f5 fd96 	bl	80009d0 <__aeabi_dcmple>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d070      	beq.n	800af8a <_strtod_l+0xa52>
 800aea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d042      	beq.n	800af34 <_strtod_l+0x9fc>
 800aeae:	2600      	movs	r6, #0
 800aeb0:	4f62      	ldr	r7, [pc, #392]	; (800b03c <_strtod_l+0xb04>)
 800aeb2:	4d62      	ldr	r5, [pc, #392]	; (800b03c <_strtod_l+0xb04>)
 800aeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeba:	0d1b      	lsrs	r3, r3, #20
 800aebc:	051b      	lsls	r3, r3, #20
 800aebe:	930f      	str	r3, [sp, #60]	; 0x3c
 800aec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aec2:	4b5f      	ldr	r3, [pc, #380]	; (800b040 <_strtod_l+0xb08>)
 800aec4:	429a      	cmp	r2, r3
 800aec6:	f040 80c3 	bne.w	800b050 <_strtod_l+0xb18>
 800aeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aecc:	4640      	mov	r0, r8
 800aece:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800aed2:	4649      	mov	r1, r9
 800aed4:	f001 ff26 	bl	800cd24 <__ulp>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4630      	mov	r0, r6
 800aede:	4639      	mov	r1, r7
 800aee0:	f7f5 fafa 	bl	80004d8 <__aeabi_dmul>
 800aee4:	4642      	mov	r2, r8
 800aee6:	464b      	mov	r3, r9
 800aee8:	f7f5 f940 	bl	800016c <__adddf3>
 800aeec:	460b      	mov	r3, r1
 800aeee:	4951      	ldr	r1, [pc, #324]	; (800b034 <_strtod_l+0xafc>)
 800aef0:	4a54      	ldr	r2, [pc, #336]	; (800b044 <_strtod_l+0xb0c>)
 800aef2:	4019      	ands	r1, r3
 800aef4:	4291      	cmp	r1, r2
 800aef6:	4680      	mov	r8, r0
 800aef8:	d95d      	bls.n	800afb6 <_strtod_l+0xa7e>
 800aefa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aefc:	4b4e      	ldr	r3, [pc, #312]	; (800b038 <_strtod_l+0xb00>)
 800aefe:	429a      	cmp	r2, r3
 800af00:	d103      	bne.n	800af0a <_strtod_l+0x9d2>
 800af02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af04:	3301      	adds	r3, #1
 800af06:	f43f ad56 	beq.w	800a9b6 <_strtod_l+0x47e>
 800af0a:	f04f 38ff 	mov.w	r8, #4294967295
 800af0e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b038 <_strtod_l+0xb00>
 800af12:	4650      	mov	r0, sl
 800af14:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af16:	f001 fbd5 	bl	800c6c4 <_Bfree>
 800af1a:	4650      	mov	r0, sl
 800af1c:	9906      	ldr	r1, [sp, #24]
 800af1e:	f001 fbd1 	bl	800c6c4 <_Bfree>
 800af22:	4650      	mov	r0, sl
 800af24:	9904      	ldr	r1, [sp, #16]
 800af26:	f001 fbcd 	bl	800c6c4 <_Bfree>
 800af2a:	4659      	mov	r1, fp
 800af2c:	4650      	mov	r0, sl
 800af2e:	f001 fbc9 	bl	800c6c4 <_Bfree>
 800af32:	e627      	b.n	800ab84 <_strtod_l+0x64c>
 800af34:	f1b8 0f00 	cmp.w	r8, #0
 800af38:	d119      	bne.n	800af6e <_strtod_l+0xa36>
 800af3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af40:	b9e3      	cbnz	r3, 800af7c <_strtod_l+0xa44>
 800af42:	2200      	movs	r2, #0
 800af44:	4630      	mov	r0, r6
 800af46:	4639      	mov	r1, r7
 800af48:	4b3c      	ldr	r3, [pc, #240]	; (800b03c <_strtod_l+0xb04>)
 800af4a:	f7f5 fd37 	bl	80009bc <__aeabi_dcmplt>
 800af4e:	b9c8      	cbnz	r0, 800af84 <_strtod_l+0xa4c>
 800af50:	2200      	movs	r2, #0
 800af52:	4630      	mov	r0, r6
 800af54:	4639      	mov	r1, r7
 800af56:	4b3c      	ldr	r3, [pc, #240]	; (800b048 <_strtod_l+0xb10>)
 800af58:	f7f5 fabe 	bl	80004d8 <__aeabi_dmul>
 800af5c:	4604      	mov	r4, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800af64:	9416      	str	r4, [sp, #88]	; 0x58
 800af66:	9317      	str	r3, [sp, #92]	; 0x5c
 800af68:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800af6c:	e7a2      	b.n	800aeb4 <_strtod_l+0x97c>
 800af6e:	f1b8 0f01 	cmp.w	r8, #1
 800af72:	d103      	bne.n	800af7c <_strtod_l+0xa44>
 800af74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af76:	2b00      	cmp	r3, #0
 800af78:	f43f ad92 	beq.w	800aaa0 <_strtod_l+0x568>
 800af7c:	2600      	movs	r6, #0
 800af7e:	2400      	movs	r4, #0
 800af80:	4f32      	ldr	r7, [pc, #200]	; (800b04c <_strtod_l+0xb14>)
 800af82:	e796      	b.n	800aeb2 <_strtod_l+0x97a>
 800af84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800af86:	4d30      	ldr	r5, [pc, #192]	; (800b048 <_strtod_l+0xb10>)
 800af88:	e7ea      	b.n	800af60 <_strtod_l+0xa28>
 800af8a:	4b2f      	ldr	r3, [pc, #188]	; (800b048 <_strtod_l+0xb10>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	4630      	mov	r0, r6
 800af90:	4639      	mov	r1, r7
 800af92:	f7f5 faa1 	bl	80004d8 <__aeabi_dmul>
 800af96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af98:	4604      	mov	r4, r0
 800af9a:	460d      	mov	r5, r1
 800af9c:	b933      	cbnz	r3, 800afac <_strtod_l+0xa74>
 800af9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afa2:	9010      	str	r0, [sp, #64]	; 0x40
 800afa4:	9311      	str	r3, [sp, #68]	; 0x44
 800afa6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800afaa:	e783      	b.n	800aeb4 <_strtod_l+0x97c>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800afb4:	e7f7      	b.n	800afa6 <_strtod_l+0xa6e>
 800afb6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800afba:	9b05      	ldr	r3, [sp, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1a8      	bne.n	800af12 <_strtod_l+0x9da>
 800afc0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afc6:	0d1b      	lsrs	r3, r3, #20
 800afc8:	051b      	lsls	r3, r3, #20
 800afca:	429a      	cmp	r2, r3
 800afcc:	d1a1      	bne.n	800af12 <_strtod_l+0x9da>
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f6 f8e3 	bl	800119c <__aeabi_d2lz>
 800afd6:	f7f5 fa51 	bl	800047c <__aeabi_l2d>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	4620      	mov	r0, r4
 800afe0:	4629      	mov	r1, r5
 800afe2:	f7f5 f8c1 	bl	8000168 <__aeabi_dsub>
 800afe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afec:	ea43 0308 	orr.w	r3, r3, r8
 800aff0:	4313      	orrs	r3, r2
 800aff2:	4604      	mov	r4, r0
 800aff4:	460d      	mov	r5, r1
 800aff6:	d066      	beq.n	800b0c6 <_strtod_l+0xb8e>
 800aff8:	a309      	add	r3, pc, #36	; (adr r3, 800b020 <_strtod_l+0xae8>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 fcdd 	bl	80009bc <__aeabi_dcmplt>
 800b002:	2800      	cmp	r0, #0
 800b004:	f47f ace2 	bne.w	800a9cc <_strtod_l+0x494>
 800b008:	a307      	add	r3, pc, #28	; (adr r3, 800b028 <_strtod_l+0xaf0>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	4620      	mov	r0, r4
 800b010:	4629      	mov	r1, r5
 800b012:	f7f5 fcf1 	bl	80009f8 <__aeabi_dcmpgt>
 800b016:	2800      	cmp	r0, #0
 800b018:	f43f af7b 	beq.w	800af12 <_strtod_l+0x9da>
 800b01c:	e4d6      	b.n	800a9cc <_strtod_l+0x494>
 800b01e:	bf00      	nop
 800b020:	94a03595 	.word	0x94a03595
 800b024:	3fdfffff 	.word	0x3fdfffff
 800b028:	35afe535 	.word	0x35afe535
 800b02c:	3fe00000 	.word	0x3fe00000
 800b030:	000fffff 	.word	0x000fffff
 800b034:	7ff00000 	.word	0x7ff00000
 800b038:	7fefffff 	.word	0x7fefffff
 800b03c:	3ff00000 	.word	0x3ff00000
 800b040:	7fe00000 	.word	0x7fe00000
 800b044:	7c9fffff 	.word	0x7c9fffff
 800b048:	3fe00000 	.word	0x3fe00000
 800b04c:	bff00000 	.word	0xbff00000
 800b050:	9b05      	ldr	r3, [sp, #20]
 800b052:	b313      	cbz	r3, 800b09a <_strtod_l+0xb62>
 800b054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b056:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b05a:	d81e      	bhi.n	800b09a <_strtod_l+0xb62>
 800b05c:	a326      	add	r3, pc, #152	; (adr r3, 800b0f8 <_strtod_l+0xbc0>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	4620      	mov	r0, r4
 800b064:	4629      	mov	r1, r5
 800b066:	f7f5 fcb3 	bl	80009d0 <__aeabi_dcmple>
 800b06a:	b190      	cbz	r0, 800b092 <_strtod_l+0xb5a>
 800b06c:	4629      	mov	r1, r5
 800b06e:	4620      	mov	r0, r4
 800b070:	f7f5 fd0a 	bl	8000a88 <__aeabi_d2uiz>
 800b074:	2801      	cmp	r0, #1
 800b076:	bf38      	it	cc
 800b078:	2001      	movcc	r0, #1
 800b07a:	f7f5 f9b3 	bl	80003e4 <__aeabi_ui2d>
 800b07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	b9d3      	cbnz	r3, 800b0bc <_strtod_l+0xb84>
 800b086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b08a:	9012      	str	r0, [sp, #72]	; 0x48
 800b08c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b08e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b094:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b098:	1a9f      	subs	r7, r3, r2
 800b09a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b09e:	f001 fe41 	bl	800cd24 <__ulp>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	f7f5 fa15 	bl	80004d8 <__aeabi_dmul>
 800b0ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b0b2:	f7f5 f85b 	bl	800016c <__adddf3>
 800b0b6:	4680      	mov	r8, r0
 800b0b8:	4689      	mov	r9, r1
 800b0ba:	e77e      	b.n	800afba <_strtod_l+0xa82>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b0c4:	e7e3      	b.n	800b08e <_strtod_l+0xb56>
 800b0c6:	a30e      	add	r3, pc, #56	; (adr r3, 800b100 <_strtod_l+0xbc8>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 fc76 	bl	80009bc <__aeabi_dcmplt>
 800b0d0:	e7a1      	b.n	800b016 <_strtod_l+0xade>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b0d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0da:	6013      	str	r3, [r2, #0]
 800b0dc:	f7ff ba71 	b.w	800a5c2 <_strtod_l+0x8a>
 800b0e0:	2a65      	cmp	r2, #101	; 0x65
 800b0e2:	f43f ab63 	beq.w	800a7ac <_strtod_l+0x274>
 800b0e6:	2a45      	cmp	r2, #69	; 0x45
 800b0e8:	f43f ab60 	beq.w	800a7ac <_strtod_l+0x274>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f7ff bb95 	b.w	800a81c <_strtod_l+0x2e4>
 800b0f2:	bf00      	nop
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	ffc00000 	.word	0xffc00000
 800b0fc:	41dfffff 	.word	0x41dfffff
 800b100:	94a03595 	.word	0x94a03595
 800b104:	3fcfffff 	.word	0x3fcfffff

0800b108 <_strtod_r>:
 800b108:	4b01      	ldr	r3, [pc, #4]	; (800b110 <_strtod_r+0x8>)
 800b10a:	f7ff ba15 	b.w	800a538 <_strtod_l>
 800b10e:	bf00      	nop
 800b110:	200000a0 	.word	0x200000a0

0800b114 <_strtol_l.constprop.0>:
 800b114:	2b01      	cmp	r3, #1
 800b116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11a:	4680      	mov	r8, r0
 800b11c:	d001      	beq.n	800b122 <_strtol_l.constprop.0+0xe>
 800b11e:	2b24      	cmp	r3, #36	; 0x24
 800b120:	d906      	bls.n	800b130 <_strtol_l.constprop.0+0x1c>
 800b122:	f7fe fb21 	bl	8009768 <__errno>
 800b126:	2316      	movs	r3, #22
 800b128:	6003      	str	r3, [r0, #0]
 800b12a:	2000      	movs	r0, #0
 800b12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b130:	460d      	mov	r5, r1
 800b132:	4f35      	ldr	r7, [pc, #212]	; (800b208 <_strtol_l.constprop.0+0xf4>)
 800b134:	4628      	mov	r0, r5
 800b136:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b13a:	5de6      	ldrb	r6, [r4, r7]
 800b13c:	f016 0608 	ands.w	r6, r6, #8
 800b140:	d1f8      	bne.n	800b134 <_strtol_l.constprop.0+0x20>
 800b142:	2c2d      	cmp	r4, #45	; 0x2d
 800b144:	d12f      	bne.n	800b1a6 <_strtol_l.constprop.0+0x92>
 800b146:	2601      	movs	r6, #1
 800b148:	782c      	ldrb	r4, [r5, #0]
 800b14a:	1c85      	adds	r5, r0, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d057      	beq.n	800b200 <_strtol_l.constprop.0+0xec>
 800b150:	2b10      	cmp	r3, #16
 800b152:	d109      	bne.n	800b168 <_strtol_l.constprop.0+0x54>
 800b154:	2c30      	cmp	r4, #48	; 0x30
 800b156:	d107      	bne.n	800b168 <_strtol_l.constprop.0+0x54>
 800b158:	7828      	ldrb	r0, [r5, #0]
 800b15a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b15e:	2858      	cmp	r0, #88	; 0x58
 800b160:	d149      	bne.n	800b1f6 <_strtol_l.constprop.0+0xe2>
 800b162:	2310      	movs	r3, #16
 800b164:	786c      	ldrb	r4, [r5, #1]
 800b166:	3502      	adds	r5, #2
 800b168:	2700      	movs	r7, #0
 800b16a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b16e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b172:	fbbe f9f3 	udiv	r9, lr, r3
 800b176:	4638      	mov	r0, r7
 800b178:	fb03 ea19 	mls	sl, r3, r9, lr
 800b17c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b180:	f1bc 0f09 	cmp.w	ip, #9
 800b184:	d814      	bhi.n	800b1b0 <_strtol_l.constprop.0+0x9c>
 800b186:	4664      	mov	r4, ip
 800b188:	42a3      	cmp	r3, r4
 800b18a:	dd22      	ble.n	800b1d2 <_strtol_l.constprop.0+0xbe>
 800b18c:	2f00      	cmp	r7, #0
 800b18e:	db1d      	blt.n	800b1cc <_strtol_l.constprop.0+0xb8>
 800b190:	4581      	cmp	r9, r0
 800b192:	d31b      	bcc.n	800b1cc <_strtol_l.constprop.0+0xb8>
 800b194:	d101      	bne.n	800b19a <_strtol_l.constprop.0+0x86>
 800b196:	45a2      	cmp	sl, r4
 800b198:	db18      	blt.n	800b1cc <_strtol_l.constprop.0+0xb8>
 800b19a:	2701      	movs	r7, #1
 800b19c:	fb00 4003 	mla	r0, r0, r3, r4
 800b1a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1a4:	e7ea      	b.n	800b17c <_strtol_l.constprop.0+0x68>
 800b1a6:	2c2b      	cmp	r4, #43	; 0x2b
 800b1a8:	bf04      	itt	eq
 800b1aa:	782c      	ldrbeq	r4, [r5, #0]
 800b1ac:	1c85      	addeq	r5, r0, #2
 800b1ae:	e7cd      	b.n	800b14c <_strtol_l.constprop.0+0x38>
 800b1b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b1b4:	f1bc 0f19 	cmp.w	ip, #25
 800b1b8:	d801      	bhi.n	800b1be <_strtol_l.constprop.0+0xaa>
 800b1ba:	3c37      	subs	r4, #55	; 0x37
 800b1bc:	e7e4      	b.n	800b188 <_strtol_l.constprop.0+0x74>
 800b1be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b1c2:	f1bc 0f19 	cmp.w	ip, #25
 800b1c6:	d804      	bhi.n	800b1d2 <_strtol_l.constprop.0+0xbe>
 800b1c8:	3c57      	subs	r4, #87	; 0x57
 800b1ca:	e7dd      	b.n	800b188 <_strtol_l.constprop.0+0x74>
 800b1cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b1d0:	e7e6      	b.n	800b1a0 <_strtol_l.constprop.0+0x8c>
 800b1d2:	2f00      	cmp	r7, #0
 800b1d4:	da07      	bge.n	800b1e6 <_strtol_l.constprop.0+0xd2>
 800b1d6:	2322      	movs	r3, #34	; 0x22
 800b1d8:	4670      	mov	r0, lr
 800b1da:	f8c8 3000 	str.w	r3, [r8]
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	d0a4      	beq.n	800b12c <_strtol_l.constprop.0+0x18>
 800b1e2:	1e69      	subs	r1, r5, #1
 800b1e4:	e005      	b.n	800b1f2 <_strtol_l.constprop.0+0xde>
 800b1e6:	b106      	cbz	r6, 800b1ea <_strtol_l.constprop.0+0xd6>
 800b1e8:	4240      	negs	r0, r0
 800b1ea:	2a00      	cmp	r2, #0
 800b1ec:	d09e      	beq.n	800b12c <_strtol_l.constprop.0+0x18>
 800b1ee:	2f00      	cmp	r7, #0
 800b1f0:	d1f7      	bne.n	800b1e2 <_strtol_l.constprop.0+0xce>
 800b1f2:	6011      	str	r1, [r2, #0]
 800b1f4:	e79a      	b.n	800b12c <_strtol_l.constprop.0+0x18>
 800b1f6:	2430      	movs	r4, #48	; 0x30
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1b5      	bne.n	800b168 <_strtol_l.constprop.0+0x54>
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	e7b3      	b.n	800b168 <_strtol_l.constprop.0+0x54>
 800b200:	2c30      	cmp	r4, #48	; 0x30
 800b202:	d0a9      	beq.n	800b158 <_strtol_l.constprop.0+0x44>
 800b204:	230a      	movs	r3, #10
 800b206:	e7af      	b.n	800b168 <_strtol_l.constprop.0+0x54>
 800b208:	0800e911 	.word	0x0800e911

0800b20c <_strtol_r>:
 800b20c:	f7ff bf82 	b.w	800b114 <_strtol_l.constprop.0>

0800b210 <quorem>:
 800b210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	6903      	ldr	r3, [r0, #16]
 800b216:	690c      	ldr	r4, [r1, #16]
 800b218:	4607      	mov	r7, r0
 800b21a:	42a3      	cmp	r3, r4
 800b21c:	f2c0 8082 	blt.w	800b324 <quorem+0x114>
 800b220:	3c01      	subs	r4, #1
 800b222:	f100 0514 	add.w	r5, r0, #20
 800b226:	f101 0814 	add.w	r8, r1, #20
 800b22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b238:	3301      	adds	r3, #1
 800b23a:	429a      	cmp	r2, r3
 800b23c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b248:	d331      	bcc.n	800b2ae <quorem+0x9e>
 800b24a:	f04f 0e00 	mov.w	lr, #0
 800b24e:	4640      	mov	r0, r8
 800b250:	46ac      	mov	ip, r5
 800b252:	46f2      	mov	sl, lr
 800b254:	f850 2b04 	ldr.w	r2, [r0], #4
 800b258:	b293      	uxth	r3, r2
 800b25a:	fb06 e303 	mla	r3, r6, r3, lr
 800b25e:	0c12      	lsrs	r2, r2, #16
 800b260:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b264:	b29b      	uxth	r3, r3
 800b266:	fb06 e202 	mla	r2, r6, r2, lr
 800b26a:	ebaa 0303 	sub.w	r3, sl, r3
 800b26e:	f8dc a000 	ldr.w	sl, [ip]
 800b272:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b276:	fa1f fa8a 	uxth.w	sl, sl
 800b27a:	4453      	add	r3, sl
 800b27c:	f8dc a000 	ldr.w	sl, [ip]
 800b280:	b292      	uxth	r2, r2
 800b282:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b286:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b290:	4581      	cmp	r9, r0
 800b292:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b296:	f84c 3b04 	str.w	r3, [ip], #4
 800b29a:	d2db      	bcs.n	800b254 <quorem+0x44>
 800b29c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b2a0:	b92b      	cbnz	r3, 800b2ae <quorem+0x9e>
 800b2a2:	9b01      	ldr	r3, [sp, #4]
 800b2a4:	3b04      	subs	r3, #4
 800b2a6:	429d      	cmp	r5, r3
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	d32f      	bcc.n	800b30c <quorem+0xfc>
 800b2ac:	613c      	str	r4, [r7, #16]
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f001 fc90 	bl	800cbd4 <__mcmp>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	db25      	blt.n	800b304 <quorem+0xf4>
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f04f 0c00 	mov.w	ip, #0
 800b2be:	3601      	adds	r6, #1
 800b2c0:	f858 1b04 	ldr.w	r1, [r8], #4
 800b2c4:	f8d0 e000 	ldr.w	lr, [r0]
 800b2c8:	b28b      	uxth	r3, r1
 800b2ca:	ebac 0303 	sub.w	r3, ip, r3
 800b2ce:	fa1f f28e 	uxth.w	r2, lr
 800b2d2:	4413      	add	r3, r2
 800b2d4:	0c0a      	lsrs	r2, r1, #16
 800b2d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2e4:	45c1      	cmp	r9, r8
 800b2e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2ea:	f840 3b04 	str.w	r3, [r0], #4
 800b2ee:	d2e7      	bcs.n	800b2c0 <quorem+0xb0>
 800b2f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2f8:	b922      	cbnz	r2, 800b304 <quorem+0xf4>
 800b2fa:	3b04      	subs	r3, #4
 800b2fc:	429d      	cmp	r5, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	d30a      	bcc.n	800b318 <quorem+0x108>
 800b302:	613c      	str	r4, [r7, #16]
 800b304:	4630      	mov	r0, r6
 800b306:	b003      	add	sp, #12
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30c:	6812      	ldr	r2, [r2, #0]
 800b30e:	3b04      	subs	r3, #4
 800b310:	2a00      	cmp	r2, #0
 800b312:	d1cb      	bne.n	800b2ac <quorem+0x9c>
 800b314:	3c01      	subs	r4, #1
 800b316:	e7c6      	b.n	800b2a6 <quorem+0x96>
 800b318:	6812      	ldr	r2, [r2, #0]
 800b31a:	3b04      	subs	r3, #4
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	d1f0      	bne.n	800b302 <quorem+0xf2>
 800b320:	3c01      	subs	r4, #1
 800b322:	e7eb      	b.n	800b2fc <quorem+0xec>
 800b324:	2000      	movs	r0, #0
 800b326:	e7ee      	b.n	800b306 <quorem+0xf6>

0800b328 <_dtoa_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4616      	mov	r6, r2
 800b32e:	461f      	mov	r7, r3
 800b330:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b332:	b099      	sub	sp, #100	; 0x64
 800b334:	4605      	mov	r5, r0
 800b336:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b33a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b33e:	b974      	cbnz	r4, 800b35e <_dtoa_r+0x36>
 800b340:	2010      	movs	r0, #16
 800b342:	f001 f949 	bl	800c5d8 <malloc>
 800b346:	4602      	mov	r2, r0
 800b348:	6268      	str	r0, [r5, #36]	; 0x24
 800b34a:	b920      	cbnz	r0, 800b356 <_dtoa_r+0x2e>
 800b34c:	21ea      	movs	r1, #234	; 0xea
 800b34e:	4ba8      	ldr	r3, [pc, #672]	; (800b5f0 <_dtoa_r+0x2c8>)
 800b350:	48a8      	ldr	r0, [pc, #672]	; (800b5f4 <_dtoa_r+0x2cc>)
 800b352:	f002 f8b3 	bl	800d4bc <__assert_func>
 800b356:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b35a:	6004      	str	r4, [r0, #0]
 800b35c:	60c4      	str	r4, [r0, #12]
 800b35e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b360:	6819      	ldr	r1, [r3, #0]
 800b362:	b151      	cbz	r1, 800b37a <_dtoa_r+0x52>
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	2301      	movs	r3, #1
 800b368:	4093      	lsls	r3, r2
 800b36a:	604a      	str	r2, [r1, #4]
 800b36c:	608b      	str	r3, [r1, #8]
 800b36e:	4628      	mov	r0, r5
 800b370:	f001 f9a8 	bl	800c6c4 <_Bfree>
 800b374:	2200      	movs	r2, #0
 800b376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	1e3b      	subs	r3, r7, #0
 800b37c:	bfaf      	iteee	ge
 800b37e:	2300      	movge	r3, #0
 800b380:	2201      	movlt	r2, #1
 800b382:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b386:	9305      	strlt	r3, [sp, #20]
 800b388:	bfa8      	it	ge
 800b38a:	f8c8 3000 	strge.w	r3, [r8]
 800b38e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b392:	4b99      	ldr	r3, [pc, #612]	; (800b5f8 <_dtoa_r+0x2d0>)
 800b394:	bfb8      	it	lt
 800b396:	f8c8 2000 	strlt.w	r2, [r8]
 800b39a:	ea33 0309 	bics.w	r3, r3, r9
 800b39e:	d119      	bne.n	800b3d4 <_dtoa_r+0xac>
 800b3a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3ac:	4333      	orrs	r3, r6
 800b3ae:	f000 857f 	beq.w	800beb0 <_dtoa_r+0xb88>
 800b3b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3b4:	b953      	cbnz	r3, 800b3cc <_dtoa_r+0xa4>
 800b3b6:	4b91      	ldr	r3, [pc, #580]	; (800b5fc <_dtoa_r+0x2d4>)
 800b3b8:	e022      	b.n	800b400 <_dtoa_r+0xd8>
 800b3ba:	4b91      	ldr	r3, [pc, #580]	; (800b600 <_dtoa_r+0x2d8>)
 800b3bc:	9303      	str	r3, [sp, #12]
 800b3be:	3308      	adds	r3, #8
 800b3c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	9803      	ldr	r0, [sp, #12]
 800b3c6:	b019      	add	sp, #100	; 0x64
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	4b8b      	ldr	r3, [pc, #556]	; (800b5fc <_dtoa_r+0x2d4>)
 800b3ce:	9303      	str	r3, [sp, #12]
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	e7f5      	b.n	800b3c0 <_dtoa_r+0x98>
 800b3d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b3d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b3dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f7f5 fae0 	bl	80009a8 <__aeabi_dcmpeq>
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	b158      	cbz	r0, 800b404 <_dtoa_r+0xdc>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 8558 	beq.w	800beaa <_dtoa_r+0xb82>
 800b3fa:	4882      	ldr	r0, [pc, #520]	; (800b604 <_dtoa_r+0x2dc>)
 800b3fc:	6018      	str	r0, [r3, #0]
 800b3fe:	1e43      	subs	r3, r0, #1
 800b400:	9303      	str	r3, [sp, #12]
 800b402:	e7df      	b.n	800b3c4 <_dtoa_r+0x9c>
 800b404:	ab16      	add	r3, sp, #88	; 0x58
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	ab17      	add	r3, sp, #92	; 0x5c
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	4628      	mov	r0, r5
 800b40e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b412:	f001 fd01 	bl	800ce18 <__d2b>
 800b416:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b41a:	4683      	mov	fp, r0
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	d07f      	beq.n	800b520 <_dtoa_r+0x1f8>
 800b420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b426:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b42a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b42e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b432:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b436:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b43a:	2200      	movs	r2, #0
 800b43c:	4b72      	ldr	r3, [pc, #456]	; (800b608 <_dtoa_r+0x2e0>)
 800b43e:	f7f4 fe93 	bl	8000168 <__aeabi_dsub>
 800b442:	a365      	add	r3, pc, #404	; (adr r3, 800b5d8 <_dtoa_r+0x2b0>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f5 f846 	bl	80004d8 <__aeabi_dmul>
 800b44c:	a364      	add	r3, pc, #400	; (adr r3, 800b5e0 <_dtoa_r+0x2b8>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 fe8b 	bl	800016c <__adddf3>
 800b456:	4606      	mov	r6, r0
 800b458:	4620      	mov	r0, r4
 800b45a:	460f      	mov	r7, r1
 800b45c:	f7f4 ffd2 	bl	8000404 <__aeabi_i2d>
 800b460:	a361      	add	r3, pc, #388	; (adr r3, 800b5e8 <_dtoa_r+0x2c0>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f7f5 f837 	bl	80004d8 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f4 fe7b 	bl	800016c <__adddf3>
 800b476:	4606      	mov	r6, r0
 800b478:	460f      	mov	r7, r1
 800b47a:	f7f5 fadd 	bl	8000a38 <__aeabi_d2iz>
 800b47e:	2200      	movs	r2, #0
 800b480:	4682      	mov	sl, r0
 800b482:	2300      	movs	r3, #0
 800b484:	4630      	mov	r0, r6
 800b486:	4639      	mov	r1, r7
 800b488:	f7f5 fa98 	bl	80009bc <__aeabi_dcmplt>
 800b48c:	b148      	cbz	r0, 800b4a2 <_dtoa_r+0x17a>
 800b48e:	4650      	mov	r0, sl
 800b490:	f7f4 ffb8 	bl	8000404 <__aeabi_i2d>
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	f7f5 fa86 	bl	80009a8 <__aeabi_dcmpeq>
 800b49c:	b908      	cbnz	r0, 800b4a2 <_dtoa_r+0x17a>
 800b49e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4a2:	f1ba 0f16 	cmp.w	sl, #22
 800b4a6:	d858      	bhi.n	800b55a <_dtoa_r+0x232>
 800b4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4ac:	4b57      	ldr	r3, [pc, #348]	; (800b60c <_dtoa_r+0x2e4>)
 800b4ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f5 fa81 	bl	80009bc <__aeabi_dcmplt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d04f      	beq.n	800b55e <_dtoa_r+0x236>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4c8:	1b1c      	subs	r4, r3, r4
 800b4ca:	1e63      	subs	r3, r4, #1
 800b4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ce:	bf49      	itett	mi
 800b4d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800b4d4:	2300      	movpl	r3, #0
 800b4d6:	9306      	strmi	r3, [sp, #24]
 800b4d8:	2300      	movmi	r3, #0
 800b4da:	bf54      	ite	pl
 800b4dc:	9306      	strpl	r3, [sp, #24]
 800b4de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b4e0:	f1ba 0f00 	cmp.w	sl, #0
 800b4e4:	db3d      	blt.n	800b562 <_dtoa_r+0x23a>
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b4ec:	4453      	add	r3, sl
 800b4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4f6:	2b09      	cmp	r3, #9
 800b4f8:	f200 808c 	bhi.w	800b614 <_dtoa_r+0x2ec>
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	bfc4      	itt	gt
 800b500:	3b04      	subgt	r3, #4
 800b502:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b506:	bfc8      	it	gt
 800b508:	2400      	movgt	r4, #0
 800b50a:	f1a3 0302 	sub.w	r3, r3, #2
 800b50e:	bfd8      	it	le
 800b510:	2401      	movle	r4, #1
 800b512:	2b03      	cmp	r3, #3
 800b514:	f200 808a 	bhi.w	800b62c <_dtoa_r+0x304>
 800b518:	e8df f003 	tbb	[pc, r3]
 800b51c:	5b4d4f2d 	.word	0x5b4d4f2d
 800b520:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b524:	441c      	add	r4, r3
 800b526:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b52a:	2b20      	cmp	r3, #32
 800b52c:	bfc3      	ittte	gt
 800b52e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b532:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b536:	fa09 f303 	lslgt.w	r3, r9, r3
 800b53a:	f1c3 0320 	rsble	r3, r3, #32
 800b53e:	bfc6      	itte	gt
 800b540:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b544:	4318      	orrgt	r0, r3
 800b546:	fa06 f003 	lslle.w	r0, r6, r3
 800b54a:	f7f4 ff4b 	bl	80003e4 <__aeabi_ui2d>
 800b54e:	2301      	movs	r3, #1
 800b550:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b554:	3c01      	subs	r4, #1
 800b556:	9313      	str	r3, [sp, #76]	; 0x4c
 800b558:	e76f      	b.n	800b43a <_dtoa_r+0x112>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e7b2      	b.n	800b4c4 <_dtoa_r+0x19c>
 800b55e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b560:	e7b1      	b.n	800b4c6 <_dtoa_r+0x19e>
 800b562:	9b06      	ldr	r3, [sp, #24]
 800b564:	eba3 030a 	sub.w	r3, r3, sl
 800b568:	9306      	str	r3, [sp, #24]
 800b56a:	f1ca 0300 	rsb	r3, sl, #0
 800b56e:	930a      	str	r3, [sp, #40]	; 0x28
 800b570:	2300      	movs	r3, #0
 800b572:	930e      	str	r3, [sp, #56]	; 0x38
 800b574:	e7be      	b.n	800b4f4 <_dtoa_r+0x1cc>
 800b576:	2300      	movs	r3, #0
 800b578:	930b      	str	r3, [sp, #44]	; 0x2c
 800b57a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dc58      	bgt.n	800b632 <_dtoa_r+0x30a>
 800b580:	f04f 0901 	mov.w	r9, #1
 800b584:	464b      	mov	r3, r9
 800b586:	f8cd 9020 	str.w	r9, [sp, #32]
 800b58a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b58e:	2200      	movs	r2, #0
 800b590:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b592:	6042      	str	r2, [r0, #4]
 800b594:	2204      	movs	r2, #4
 800b596:	f102 0614 	add.w	r6, r2, #20
 800b59a:	429e      	cmp	r6, r3
 800b59c:	6841      	ldr	r1, [r0, #4]
 800b59e:	d94e      	bls.n	800b63e <_dtoa_r+0x316>
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	f001 f84f 	bl	800c644 <_Balloc>
 800b5a6:	9003      	str	r0, [sp, #12]
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d14c      	bne.n	800b646 <_dtoa_r+0x31e>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5b2:	4b17      	ldr	r3, [pc, #92]	; (800b610 <_dtoa_r+0x2e8>)
 800b5b4:	e6cc      	b.n	800b350 <_dtoa_r+0x28>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e7de      	b.n	800b578 <_dtoa_r+0x250>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5c0:	eb0a 0903 	add.w	r9, sl, r3
 800b5c4:	f109 0301 	add.w	r3, r9, #1
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	9308      	str	r3, [sp, #32]
 800b5cc:	bfb8      	it	lt
 800b5ce:	2301      	movlt	r3, #1
 800b5d0:	e7dd      	b.n	800b58e <_dtoa_r+0x266>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e7f2      	b.n	800b5bc <_dtoa_r+0x294>
 800b5d6:	bf00      	nop
 800b5d8:	636f4361 	.word	0x636f4361
 800b5dc:	3fd287a7 	.word	0x3fd287a7
 800b5e0:	8b60c8b3 	.word	0x8b60c8b3
 800b5e4:	3fc68a28 	.word	0x3fc68a28
 800b5e8:	509f79fb 	.word	0x509f79fb
 800b5ec:	3fd34413 	.word	0x3fd34413
 800b5f0:	0800ea1e 	.word	0x0800ea1e
 800b5f4:	0800ea35 	.word	0x0800ea35
 800b5f8:	7ff00000 	.word	0x7ff00000
 800b5fc:	0800ea1a 	.word	0x0800ea1a
 800b600:	0800ea11 	.word	0x0800ea11
 800b604:	0800e895 	.word	0x0800e895
 800b608:	3ff80000 	.word	0x3ff80000
 800b60c:	0800eba0 	.word	0x0800eba0
 800b610:	0800ea90 	.word	0x0800ea90
 800b614:	2401      	movs	r4, #1
 800b616:	2300      	movs	r3, #0
 800b618:	940b      	str	r4, [sp, #44]	; 0x2c
 800b61a:	9322      	str	r3, [sp, #136]	; 0x88
 800b61c:	f04f 39ff 	mov.w	r9, #4294967295
 800b620:	2200      	movs	r2, #0
 800b622:	2312      	movs	r3, #18
 800b624:	f8cd 9020 	str.w	r9, [sp, #32]
 800b628:	9223      	str	r2, [sp, #140]	; 0x8c
 800b62a:	e7b0      	b.n	800b58e <_dtoa_r+0x266>
 800b62c:	2301      	movs	r3, #1
 800b62e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b630:	e7f4      	b.n	800b61c <_dtoa_r+0x2f4>
 800b632:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b636:	464b      	mov	r3, r9
 800b638:	f8cd 9020 	str.w	r9, [sp, #32]
 800b63c:	e7a7      	b.n	800b58e <_dtoa_r+0x266>
 800b63e:	3101      	adds	r1, #1
 800b640:	6041      	str	r1, [r0, #4]
 800b642:	0052      	lsls	r2, r2, #1
 800b644:	e7a7      	b.n	800b596 <_dtoa_r+0x26e>
 800b646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b648:	9a03      	ldr	r2, [sp, #12]
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	9b08      	ldr	r3, [sp, #32]
 800b64e:	2b0e      	cmp	r3, #14
 800b650:	f200 80a8 	bhi.w	800b7a4 <_dtoa_r+0x47c>
 800b654:	2c00      	cmp	r4, #0
 800b656:	f000 80a5 	beq.w	800b7a4 <_dtoa_r+0x47c>
 800b65a:	f1ba 0f00 	cmp.w	sl, #0
 800b65e:	dd34      	ble.n	800b6ca <_dtoa_r+0x3a2>
 800b660:	4a9a      	ldr	r2, [pc, #616]	; (800b8cc <_dtoa_r+0x5a4>)
 800b662:	f00a 030f 	and.w	r3, sl, #15
 800b666:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b66a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b66e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b672:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b676:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b67a:	d016      	beq.n	800b6aa <_dtoa_r+0x382>
 800b67c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b680:	4b93      	ldr	r3, [pc, #588]	; (800b8d0 <_dtoa_r+0x5a8>)
 800b682:	2703      	movs	r7, #3
 800b684:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b688:	f7f5 f850 	bl	800072c <__aeabi_ddiv>
 800b68c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b690:	f004 040f 	and.w	r4, r4, #15
 800b694:	4e8e      	ldr	r6, [pc, #568]	; (800b8d0 <_dtoa_r+0x5a8>)
 800b696:	b954      	cbnz	r4, 800b6ae <_dtoa_r+0x386>
 800b698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b69c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6a0:	f7f5 f844 	bl	800072c <__aeabi_ddiv>
 800b6a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6a8:	e029      	b.n	800b6fe <_dtoa_r+0x3d6>
 800b6aa:	2702      	movs	r7, #2
 800b6ac:	e7f2      	b.n	800b694 <_dtoa_r+0x36c>
 800b6ae:	07e1      	lsls	r1, r4, #31
 800b6b0:	d508      	bpl.n	800b6c4 <_dtoa_r+0x39c>
 800b6b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6ba:	f7f4 ff0d 	bl	80004d8 <__aeabi_dmul>
 800b6be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b6c2:	3701      	adds	r7, #1
 800b6c4:	1064      	asrs	r4, r4, #1
 800b6c6:	3608      	adds	r6, #8
 800b6c8:	e7e5      	b.n	800b696 <_dtoa_r+0x36e>
 800b6ca:	f000 80a5 	beq.w	800b818 <_dtoa_r+0x4f0>
 800b6ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6d2:	f1ca 0400 	rsb	r4, sl, #0
 800b6d6:	4b7d      	ldr	r3, [pc, #500]	; (800b8cc <_dtoa_r+0x5a4>)
 800b6d8:	f004 020f 	and.w	r2, r4, #15
 800b6dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f7f4 fef8 	bl	80004d8 <__aeabi_dmul>
 800b6e8:	2702      	movs	r7, #2
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6f0:	4e77      	ldr	r6, [pc, #476]	; (800b8d0 <_dtoa_r+0x5a8>)
 800b6f2:	1124      	asrs	r4, r4, #4
 800b6f4:	2c00      	cmp	r4, #0
 800b6f6:	f040 8084 	bne.w	800b802 <_dtoa_r+0x4da>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1d2      	bne.n	800b6a4 <_dtoa_r+0x37c>
 800b6fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 808b 	beq.w	800b81c <_dtoa_r+0x4f4>
 800b706:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b70a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b70e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b712:	2200      	movs	r2, #0
 800b714:	4b6f      	ldr	r3, [pc, #444]	; (800b8d4 <_dtoa_r+0x5ac>)
 800b716:	f7f5 f951 	bl	80009bc <__aeabi_dcmplt>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d07e      	beq.n	800b81c <_dtoa_r+0x4f4>
 800b71e:	9b08      	ldr	r3, [sp, #32]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d07b      	beq.n	800b81c <_dtoa_r+0x4f4>
 800b724:	f1b9 0f00 	cmp.w	r9, #0
 800b728:	dd38      	ble.n	800b79c <_dtoa_r+0x474>
 800b72a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b72e:	2200      	movs	r2, #0
 800b730:	4b69      	ldr	r3, [pc, #420]	; (800b8d8 <_dtoa_r+0x5b0>)
 800b732:	f7f4 fed1 	bl	80004d8 <__aeabi_dmul>
 800b736:	464c      	mov	r4, r9
 800b738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b73c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b740:	3701      	adds	r7, #1
 800b742:	4638      	mov	r0, r7
 800b744:	f7f4 fe5e 	bl	8000404 <__aeabi_i2d>
 800b748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b74c:	f7f4 fec4 	bl	80004d8 <__aeabi_dmul>
 800b750:	2200      	movs	r2, #0
 800b752:	4b62      	ldr	r3, [pc, #392]	; (800b8dc <_dtoa_r+0x5b4>)
 800b754:	f7f4 fd0a 	bl	800016c <__adddf3>
 800b758:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b75c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b760:	9611      	str	r6, [sp, #68]	; 0x44
 800b762:	2c00      	cmp	r4, #0
 800b764:	d15d      	bne.n	800b822 <_dtoa_r+0x4fa>
 800b766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b76a:	2200      	movs	r2, #0
 800b76c:	4b5c      	ldr	r3, [pc, #368]	; (800b8e0 <_dtoa_r+0x5b8>)
 800b76e:	f7f4 fcfb 	bl	8000168 <__aeabi_dsub>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b77a:	4633      	mov	r3, r6
 800b77c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b77e:	f7f5 f93b 	bl	80009f8 <__aeabi_dcmpgt>
 800b782:	2800      	cmp	r0, #0
 800b784:	f040 829c 	bne.w	800bcc0 <_dtoa_r+0x998>
 800b788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b78c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b78e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b792:	f7f5 f913 	bl	80009bc <__aeabi_dcmplt>
 800b796:	2800      	cmp	r0, #0
 800b798:	f040 8290 	bne.w	800bcbc <_dtoa_r+0x994>
 800b79c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b7a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b7a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f2c0 8152 	blt.w	800ba50 <_dtoa_r+0x728>
 800b7ac:	f1ba 0f0e 	cmp.w	sl, #14
 800b7b0:	f300 814e 	bgt.w	800ba50 <_dtoa_r+0x728>
 800b7b4:	4b45      	ldr	r3, [pc, #276]	; (800b8cc <_dtoa_r+0x5a4>)
 800b7b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b7ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b7c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f280 80db 	bge.w	800b980 <_dtoa_r+0x658>
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f300 80d7 	bgt.w	800b980 <_dtoa_r+0x658>
 800b7d2:	f040 8272 	bne.w	800bcba <_dtoa_r+0x992>
 800b7d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4b40      	ldr	r3, [pc, #256]	; (800b8e0 <_dtoa_r+0x5b8>)
 800b7de:	f7f4 fe7b 	bl	80004d8 <__aeabi_dmul>
 800b7e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7e6:	f7f5 f8fd 	bl	80009e4 <__aeabi_dcmpge>
 800b7ea:	9c08      	ldr	r4, [sp, #32]
 800b7ec:	4626      	mov	r6, r4
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f040 8248 	bne.w	800bc84 <_dtoa_r+0x95c>
 800b7f4:	2331      	movs	r3, #49	; 0x31
 800b7f6:	9f03      	ldr	r7, [sp, #12]
 800b7f8:	f10a 0a01 	add.w	sl, sl, #1
 800b7fc:	f807 3b01 	strb.w	r3, [r7], #1
 800b800:	e244      	b.n	800bc8c <_dtoa_r+0x964>
 800b802:	07e2      	lsls	r2, r4, #31
 800b804:	d505      	bpl.n	800b812 <_dtoa_r+0x4ea>
 800b806:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b80a:	f7f4 fe65 	bl	80004d8 <__aeabi_dmul>
 800b80e:	2301      	movs	r3, #1
 800b810:	3701      	adds	r7, #1
 800b812:	1064      	asrs	r4, r4, #1
 800b814:	3608      	adds	r6, #8
 800b816:	e76d      	b.n	800b6f4 <_dtoa_r+0x3cc>
 800b818:	2702      	movs	r7, #2
 800b81a:	e770      	b.n	800b6fe <_dtoa_r+0x3d6>
 800b81c:	46d0      	mov	r8, sl
 800b81e:	9c08      	ldr	r4, [sp, #32]
 800b820:	e78f      	b.n	800b742 <_dtoa_r+0x41a>
 800b822:	9903      	ldr	r1, [sp, #12]
 800b824:	4b29      	ldr	r3, [pc, #164]	; (800b8cc <_dtoa_r+0x5a4>)
 800b826:	4421      	add	r1, r4
 800b828:	9112      	str	r1, [sp, #72]	; 0x48
 800b82a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b82c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b830:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b834:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b838:	2900      	cmp	r1, #0
 800b83a:	d055      	beq.n	800b8e8 <_dtoa_r+0x5c0>
 800b83c:	2000      	movs	r0, #0
 800b83e:	4929      	ldr	r1, [pc, #164]	; (800b8e4 <_dtoa_r+0x5bc>)
 800b840:	f7f4 ff74 	bl	800072c <__aeabi_ddiv>
 800b844:	463b      	mov	r3, r7
 800b846:	4632      	mov	r2, r6
 800b848:	f7f4 fc8e 	bl	8000168 <__aeabi_dsub>
 800b84c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b850:	9f03      	ldr	r7, [sp, #12]
 800b852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b856:	f7f5 f8ef 	bl	8000a38 <__aeabi_d2iz>
 800b85a:	4604      	mov	r4, r0
 800b85c:	f7f4 fdd2 	bl	8000404 <__aeabi_i2d>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b868:	f7f4 fc7e 	bl	8000168 <__aeabi_dsub>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	3430      	adds	r4, #48	; 0x30
 800b872:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b87a:	f807 4b01 	strb.w	r4, [r7], #1
 800b87e:	f7f5 f89d 	bl	80009bc <__aeabi_dcmplt>
 800b882:	2800      	cmp	r0, #0
 800b884:	d174      	bne.n	800b970 <_dtoa_r+0x648>
 800b886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88a:	2000      	movs	r0, #0
 800b88c:	4911      	ldr	r1, [pc, #68]	; (800b8d4 <_dtoa_r+0x5ac>)
 800b88e:	f7f4 fc6b 	bl	8000168 <__aeabi_dsub>
 800b892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b896:	f7f5 f891 	bl	80009bc <__aeabi_dcmplt>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	f040 80b7 	bne.w	800ba0e <_dtoa_r+0x6e6>
 800b8a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8a2:	429f      	cmp	r7, r3
 800b8a4:	f43f af7a 	beq.w	800b79c <_dtoa_r+0x474>
 800b8a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <_dtoa_r+0x5b0>)
 800b8b0:	f7f4 fe12 	bl	80004d8 <__aeabi_dmul>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8be:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <_dtoa_r+0x5b0>)
 800b8c0:	f7f4 fe0a 	bl	80004d8 <__aeabi_dmul>
 800b8c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8c8:	e7c3      	b.n	800b852 <_dtoa_r+0x52a>
 800b8ca:	bf00      	nop
 800b8cc:	0800eba0 	.word	0x0800eba0
 800b8d0:	0800eb78 	.word	0x0800eb78
 800b8d4:	3ff00000 	.word	0x3ff00000
 800b8d8:	40240000 	.word	0x40240000
 800b8dc:	401c0000 	.word	0x401c0000
 800b8e0:	40140000 	.word	0x40140000
 800b8e4:	3fe00000 	.word	0x3fe00000
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f4 fdf4 	bl	80004d8 <__aeabi_dmul>
 800b8f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8f6:	9c03      	ldr	r4, [sp, #12]
 800b8f8:	9314      	str	r3, [sp, #80]	; 0x50
 800b8fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8fe:	f7f5 f89b 	bl	8000a38 <__aeabi_d2iz>
 800b902:	9015      	str	r0, [sp, #84]	; 0x54
 800b904:	f7f4 fd7e 	bl	8000404 <__aeabi_i2d>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b910:	f7f4 fc2a 	bl	8000168 <__aeabi_dsub>
 800b914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b916:	4606      	mov	r6, r0
 800b918:	3330      	adds	r3, #48	; 0x30
 800b91a:	f804 3b01 	strb.w	r3, [r4], #1
 800b91e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b920:	460f      	mov	r7, r1
 800b922:	429c      	cmp	r4, r3
 800b924:	f04f 0200 	mov.w	r2, #0
 800b928:	d124      	bne.n	800b974 <_dtoa_r+0x64c>
 800b92a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b92e:	4bb0      	ldr	r3, [pc, #704]	; (800bbf0 <_dtoa_r+0x8c8>)
 800b930:	f7f4 fc1c 	bl	800016c <__adddf3>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4630      	mov	r0, r6
 800b93a:	4639      	mov	r1, r7
 800b93c:	f7f5 f85c 	bl	80009f8 <__aeabi_dcmpgt>
 800b940:	2800      	cmp	r0, #0
 800b942:	d163      	bne.n	800ba0c <_dtoa_r+0x6e4>
 800b944:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b948:	2000      	movs	r0, #0
 800b94a:	49a9      	ldr	r1, [pc, #676]	; (800bbf0 <_dtoa_r+0x8c8>)
 800b94c:	f7f4 fc0c 	bl	8000168 <__aeabi_dsub>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f5 f830 	bl	80009bc <__aeabi_dcmplt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f43f af1d 	beq.w	800b79c <_dtoa_r+0x474>
 800b962:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b964:	1e7b      	subs	r3, r7, #1
 800b966:	9314      	str	r3, [sp, #80]	; 0x50
 800b968:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b96c:	2b30      	cmp	r3, #48	; 0x30
 800b96e:	d0f8      	beq.n	800b962 <_dtoa_r+0x63a>
 800b970:	46c2      	mov	sl, r8
 800b972:	e03b      	b.n	800b9ec <_dtoa_r+0x6c4>
 800b974:	4b9f      	ldr	r3, [pc, #636]	; (800bbf4 <_dtoa_r+0x8cc>)
 800b976:	f7f4 fdaf 	bl	80004d8 <__aeabi_dmul>
 800b97a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b97e:	e7bc      	b.n	800b8fa <_dtoa_r+0x5d2>
 800b980:	9f03      	ldr	r7, [sp, #12]
 800b982:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b98a:	4640      	mov	r0, r8
 800b98c:	4649      	mov	r1, r9
 800b98e:	f7f4 fecd 	bl	800072c <__aeabi_ddiv>
 800b992:	f7f5 f851 	bl	8000a38 <__aeabi_d2iz>
 800b996:	4604      	mov	r4, r0
 800b998:	f7f4 fd34 	bl	8000404 <__aeabi_i2d>
 800b99c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9a0:	f7f4 fd9a 	bl	80004d8 <__aeabi_dmul>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7f4 fbdc 	bl	8000168 <__aeabi_dsub>
 800b9b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b9b4:	f807 6b01 	strb.w	r6, [r7], #1
 800b9b8:	9e03      	ldr	r6, [sp, #12]
 800b9ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b9be:	1bbe      	subs	r6, r7, r6
 800b9c0:	45b4      	cmp	ip, r6
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	d136      	bne.n	800ba36 <_dtoa_r+0x70e>
 800b9c8:	f7f4 fbd0 	bl	800016c <__adddf3>
 800b9cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	4689      	mov	r9, r1
 800b9d4:	f7f5 f810 	bl	80009f8 <__aeabi_dcmpgt>
 800b9d8:	bb58      	cbnz	r0, 800ba32 <_dtoa_r+0x70a>
 800b9da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9de:	4640      	mov	r0, r8
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	f7f4 ffe1 	bl	80009a8 <__aeabi_dcmpeq>
 800b9e6:	b108      	cbz	r0, 800b9ec <_dtoa_r+0x6c4>
 800b9e8:	07e1      	lsls	r1, r4, #31
 800b9ea:	d422      	bmi.n	800ba32 <_dtoa_r+0x70a>
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	4659      	mov	r1, fp
 800b9f0:	f000 fe68 	bl	800c6c4 <_Bfree>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	703b      	strb	r3, [r7, #0]
 800b9f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b9fa:	f10a 0001 	add.w	r0, sl, #1
 800b9fe:	6018      	str	r0, [r3, #0]
 800ba00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f43f acde 	beq.w	800b3c4 <_dtoa_r+0x9c>
 800ba08:	601f      	str	r7, [r3, #0]
 800ba0a:	e4db      	b.n	800b3c4 <_dtoa_r+0x9c>
 800ba0c:	4627      	mov	r7, r4
 800ba0e:	463b      	mov	r3, r7
 800ba10:	461f      	mov	r7, r3
 800ba12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba16:	2a39      	cmp	r2, #57	; 0x39
 800ba18:	d107      	bne.n	800ba2a <_dtoa_r+0x702>
 800ba1a:	9a03      	ldr	r2, [sp, #12]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d1f7      	bne.n	800ba10 <_dtoa_r+0x6e8>
 800ba20:	2230      	movs	r2, #48	; 0x30
 800ba22:	9903      	ldr	r1, [sp, #12]
 800ba24:	f108 0801 	add.w	r8, r8, #1
 800ba28:	700a      	strb	r2, [r1, #0]
 800ba2a:	781a      	ldrb	r2, [r3, #0]
 800ba2c:	3201      	adds	r2, #1
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e79e      	b.n	800b970 <_dtoa_r+0x648>
 800ba32:	46d0      	mov	r8, sl
 800ba34:	e7eb      	b.n	800ba0e <_dtoa_r+0x6e6>
 800ba36:	2200      	movs	r2, #0
 800ba38:	4b6e      	ldr	r3, [pc, #440]	; (800bbf4 <_dtoa_r+0x8cc>)
 800ba3a:	f7f4 fd4d 	bl	80004d8 <__aeabi_dmul>
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2300      	movs	r3, #0
 800ba42:	4680      	mov	r8, r0
 800ba44:	4689      	mov	r9, r1
 800ba46:	f7f4 ffaf 	bl	80009a8 <__aeabi_dcmpeq>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d09b      	beq.n	800b986 <_dtoa_r+0x65e>
 800ba4e:	e7cd      	b.n	800b9ec <_dtoa_r+0x6c4>
 800ba50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	f000 80d0 	beq.w	800bbf8 <_dtoa_r+0x8d0>
 800ba58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ba5a:	2a01      	cmp	r2, #1
 800ba5c:	f300 80ae 	bgt.w	800bbbc <_dtoa_r+0x894>
 800ba60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	f000 80a6 	beq.w	800bbb4 <_dtoa_r+0x88c>
 800ba68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba6e:	9f06      	ldr	r7, [sp, #24]
 800ba70:	9a06      	ldr	r2, [sp, #24]
 800ba72:	2101      	movs	r1, #1
 800ba74:	441a      	add	r2, r3
 800ba76:	9206      	str	r2, [sp, #24]
 800ba78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	441a      	add	r2, r3
 800ba7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba80:	f000 ff20 	bl	800c8c4 <__i2b>
 800ba84:	4606      	mov	r6, r0
 800ba86:	2f00      	cmp	r7, #0
 800ba88:	dd0c      	ble.n	800baa4 <_dtoa_r+0x77c>
 800ba8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dd09      	ble.n	800baa4 <_dtoa_r+0x77c>
 800ba90:	42bb      	cmp	r3, r7
 800ba92:	bfa8      	it	ge
 800ba94:	463b      	movge	r3, r7
 800ba96:	9a06      	ldr	r2, [sp, #24]
 800ba98:	1aff      	subs	r7, r7, r3
 800ba9a:	1ad2      	subs	r2, r2, r3
 800ba9c:	9206      	str	r2, [sp, #24]
 800ba9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	9309      	str	r3, [sp, #36]	; 0x24
 800baa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa6:	b1f3      	cbz	r3, 800bae6 <_dtoa_r+0x7be>
 800baa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 80a8 	beq.w	800bc00 <_dtoa_r+0x8d8>
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	dd10      	ble.n	800bad6 <_dtoa_r+0x7ae>
 800bab4:	4631      	mov	r1, r6
 800bab6:	4622      	mov	r2, r4
 800bab8:	4628      	mov	r0, r5
 800baba:	f000 ffc1 	bl	800ca40 <__pow5mult>
 800babe:	465a      	mov	r2, fp
 800bac0:	4601      	mov	r1, r0
 800bac2:	4606      	mov	r6, r0
 800bac4:	4628      	mov	r0, r5
 800bac6:	f000 ff13 	bl	800c8f0 <__multiply>
 800baca:	4680      	mov	r8, r0
 800bacc:	4659      	mov	r1, fp
 800bace:	4628      	mov	r0, r5
 800bad0:	f000 fdf8 	bl	800c6c4 <_Bfree>
 800bad4:	46c3      	mov	fp, r8
 800bad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad8:	1b1a      	subs	r2, r3, r4
 800bada:	d004      	beq.n	800bae6 <_dtoa_r+0x7be>
 800badc:	4659      	mov	r1, fp
 800bade:	4628      	mov	r0, r5
 800bae0:	f000 ffae 	bl	800ca40 <__pow5mult>
 800bae4:	4683      	mov	fp, r0
 800bae6:	2101      	movs	r1, #1
 800bae8:	4628      	mov	r0, r5
 800baea:	f000 feeb 	bl	800c8c4 <__i2b>
 800baee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800baf0:	4604      	mov	r4, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f340 8086 	ble.w	800bc04 <_dtoa_r+0x8dc>
 800baf8:	461a      	mov	r2, r3
 800bafa:	4601      	mov	r1, r0
 800bafc:	4628      	mov	r0, r5
 800bafe:	f000 ff9f 	bl	800ca40 <__pow5mult>
 800bb02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb04:	4604      	mov	r4, r0
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	dd7f      	ble.n	800bc0a <_dtoa_r+0x8e2>
 800bb0a:	f04f 0800 	mov.w	r8, #0
 800bb0e:	6923      	ldr	r3, [r4, #16]
 800bb10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb14:	6918      	ldr	r0, [r3, #16]
 800bb16:	f000 fe87 	bl	800c828 <__hi0bits>
 800bb1a:	f1c0 0020 	rsb	r0, r0, #32
 800bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb20:	4418      	add	r0, r3
 800bb22:	f010 001f 	ands.w	r0, r0, #31
 800bb26:	f000 8092 	beq.w	800bc4e <_dtoa_r+0x926>
 800bb2a:	f1c0 0320 	rsb	r3, r0, #32
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	f340 808a 	ble.w	800bc48 <_dtoa_r+0x920>
 800bb34:	f1c0 001c 	rsb	r0, r0, #28
 800bb38:	9b06      	ldr	r3, [sp, #24]
 800bb3a:	4407      	add	r7, r0
 800bb3c:	4403      	add	r3, r0
 800bb3e:	9306      	str	r3, [sp, #24]
 800bb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb42:	4403      	add	r3, r0
 800bb44:	9309      	str	r3, [sp, #36]	; 0x24
 800bb46:	9b06      	ldr	r3, [sp, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	dd05      	ble.n	800bb58 <_dtoa_r+0x830>
 800bb4c:	4659      	mov	r1, fp
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4628      	mov	r0, r5
 800bb52:	f000 ffcf 	bl	800caf4 <__lshift>
 800bb56:	4683      	mov	fp, r0
 800bb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	dd05      	ble.n	800bb6a <_dtoa_r+0x842>
 800bb5e:	4621      	mov	r1, r4
 800bb60:	461a      	mov	r2, r3
 800bb62:	4628      	mov	r0, r5
 800bb64:	f000 ffc6 	bl	800caf4 <__lshift>
 800bb68:	4604      	mov	r4, r0
 800bb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d070      	beq.n	800bc52 <_dtoa_r+0x92a>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4658      	mov	r0, fp
 800bb74:	f001 f82e 	bl	800cbd4 <__mcmp>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	da6a      	bge.n	800bc52 <_dtoa_r+0x92a>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	4659      	mov	r1, fp
 800bb80:	220a      	movs	r2, #10
 800bb82:	4628      	mov	r0, r5
 800bb84:	f000 fdc0 	bl	800c708 <__multadd>
 800bb88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8a:	4683      	mov	fp, r0
 800bb8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 8194 	beq.w	800bebe <_dtoa_r+0xb96>
 800bb96:	4631      	mov	r1, r6
 800bb98:	2300      	movs	r3, #0
 800bb9a:	220a      	movs	r2, #10
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f000 fdb3 	bl	800c708 <__multadd>
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	4606      	mov	r6, r0
 800bba8:	f300 8093 	bgt.w	800bcd2 <_dtoa_r+0x9aa>
 800bbac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	dc57      	bgt.n	800bc62 <_dtoa_r+0x93a>
 800bbb2:	e08e      	b.n	800bcd2 <_dtoa_r+0x9aa>
 800bbb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bbb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bbba:	e757      	b.n	800ba6c <_dtoa_r+0x744>
 800bbbc:	9b08      	ldr	r3, [sp, #32]
 800bbbe:	1e5c      	subs	r4, r3, #1
 800bbc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	bfb7      	itett	lt
 800bbc6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bbc8:	1b1c      	subge	r4, r3, r4
 800bbca:	1ae2      	sublt	r2, r4, r3
 800bbcc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bbce:	bfbe      	ittt	lt
 800bbd0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bbd2:	189b      	addlt	r3, r3, r2
 800bbd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bbd6:	9b08      	ldr	r3, [sp, #32]
 800bbd8:	bfb8      	it	lt
 800bbda:	2400      	movlt	r4, #0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bfbb      	ittet	lt
 800bbe0:	9b06      	ldrlt	r3, [sp, #24]
 800bbe2:	9a08      	ldrlt	r2, [sp, #32]
 800bbe4:	9f06      	ldrge	r7, [sp, #24]
 800bbe6:	1a9f      	sublt	r7, r3, r2
 800bbe8:	bfac      	ite	ge
 800bbea:	9b08      	ldrge	r3, [sp, #32]
 800bbec:	2300      	movlt	r3, #0
 800bbee:	e73f      	b.n	800ba70 <_dtoa_r+0x748>
 800bbf0:	3fe00000 	.word	0x3fe00000
 800bbf4:	40240000 	.word	0x40240000
 800bbf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bbfa:	9f06      	ldr	r7, [sp, #24]
 800bbfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bbfe:	e742      	b.n	800ba86 <_dtoa_r+0x75e>
 800bc00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc02:	e76b      	b.n	800badc <_dtoa_r+0x7b4>
 800bc04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	dc19      	bgt.n	800bc3e <_dtoa_r+0x916>
 800bc0a:	9b04      	ldr	r3, [sp, #16]
 800bc0c:	b9bb      	cbnz	r3, 800bc3e <_dtoa_r+0x916>
 800bc0e:	9b05      	ldr	r3, [sp, #20]
 800bc10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc14:	b99b      	cbnz	r3, 800bc3e <_dtoa_r+0x916>
 800bc16:	9b05      	ldr	r3, [sp, #20]
 800bc18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc1c:	0d1b      	lsrs	r3, r3, #20
 800bc1e:	051b      	lsls	r3, r3, #20
 800bc20:	b183      	cbz	r3, 800bc44 <_dtoa_r+0x91c>
 800bc22:	f04f 0801 	mov.w	r8, #1
 800bc26:	9b06      	ldr	r3, [sp, #24]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	9306      	str	r3, [sp, #24]
 800bc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2e:	3301      	adds	r3, #1
 800bc30:	9309      	str	r3, [sp, #36]	; 0x24
 800bc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f47f af6a 	bne.w	800bb0e <_dtoa_r+0x7e6>
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	e76f      	b.n	800bb1e <_dtoa_r+0x7f6>
 800bc3e:	f04f 0800 	mov.w	r8, #0
 800bc42:	e7f6      	b.n	800bc32 <_dtoa_r+0x90a>
 800bc44:	4698      	mov	r8, r3
 800bc46:	e7f4      	b.n	800bc32 <_dtoa_r+0x90a>
 800bc48:	f43f af7d 	beq.w	800bb46 <_dtoa_r+0x81e>
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	301c      	adds	r0, #28
 800bc50:	e772      	b.n	800bb38 <_dtoa_r+0x810>
 800bc52:	9b08      	ldr	r3, [sp, #32]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dc36      	bgt.n	800bcc6 <_dtoa_r+0x99e>
 800bc58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	dd33      	ble.n	800bcc6 <_dtoa_r+0x99e>
 800bc5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc62:	f1b9 0f00 	cmp.w	r9, #0
 800bc66:	d10d      	bne.n	800bc84 <_dtoa_r+0x95c>
 800bc68:	4621      	mov	r1, r4
 800bc6a:	464b      	mov	r3, r9
 800bc6c:	2205      	movs	r2, #5
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f000 fd4a 	bl	800c708 <__multadd>
 800bc74:	4601      	mov	r1, r0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4658      	mov	r0, fp
 800bc7a:	f000 ffab 	bl	800cbd4 <__mcmp>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	f73f adb8 	bgt.w	800b7f4 <_dtoa_r+0x4cc>
 800bc84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc86:	9f03      	ldr	r7, [sp, #12]
 800bc88:	ea6f 0a03 	mvn.w	sl, r3
 800bc8c:	f04f 0800 	mov.w	r8, #0
 800bc90:	4621      	mov	r1, r4
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 fd16 	bl	800c6c4 <_Bfree>
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	f43f aea7 	beq.w	800b9ec <_dtoa_r+0x6c4>
 800bc9e:	f1b8 0f00 	cmp.w	r8, #0
 800bca2:	d005      	beq.n	800bcb0 <_dtoa_r+0x988>
 800bca4:	45b0      	cmp	r8, r6
 800bca6:	d003      	beq.n	800bcb0 <_dtoa_r+0x988>
 800bca8:	4641      	mov	r1, r8
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f000 fd0a 	bl	800c6c4 <_Bfree>
 800bcb0:	4631      	mov	r1, r6
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 fd06 	bl	800c6c4 <_Bfree>
 800bcb8:	e698      	b.n	800b9ec <_dtoa_r+0x6c4>
 800bcba:	2400      	movs	r4, #0
 800bcbc:	4626      	mov	r6, r4
 800bcbe:	e7e1      	b.n	800bc84 <_dtoa_r+0x95c>
 800bcc0:	46c2      	mov	sl, r8
 800bcc2:	4626      	mov	r6, r4
 800bcc4:	e596      	b.n	800b7f4 <_dtoa_r+0x4cc>
 800bcc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 80fd 	beq.w	800becc <_dtoa_r+0xba4>
 800bcd2:	2f00      	cmp	r7, #0
 800bcd4:	dd05      	ble.n	800bce2 <_dtoa_r+0x9ba>
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	463a      	mov	r2, r7
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f000 ff0a 	bl	800caf4 <__lshift>
 800bce0:	4606      	mov	r6, r0
 800bce2:	f1b8 0f00 	cmp.w	r8, #0
 800bce6:	d05c      	beq.n	800bda2 <_dtoa_r+0xa7a>
 800bce8:	4628      	mov	r0, r5
 800bcea:	6871      	ldr	r1, [r6, #4]
 800bcec:	f000 fcaa 	bl	800c644 <_Balloc>
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	b928      	cbnz	r0, 800bd00 <_dtoa_r+0x9d8>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcfa:	4b7f      	ldr	r3, [pc, #508]	; (800bef8 <_dtoa_r+0xbd0>)
 800bcfc:	f7ff bb28 	b.w	800b350 <_dtoa_r+0x28>
 800bd00:	6932      	ldr	r2, [r6, #16]
 800bd02:	f106 010c 	add.w	r1, r6, #12
 800bd06:	3202      	adds	r2, #2
 800bd08:	0092      	lsls	r2, r2, #2
 800bd0a:	300c      	adds	r0, #12
 800bd0c:	f000 fc8c 	bl	800c628 <memcpy>
 800bd10:	2201      	movs	r2, #1
 800bd12:	4639      	mov	r1, r7
 800bd14:	4628      	mov	r0, r5
 800bd16:	f000 feed 	bl	800caf4 <__lshift>
 800bd1a:	46b0      	mov	r8, r6
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	3301      	adds	r3, #1
 800bd22:	9308      	str	r3, [sp, #32]
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	444b      	add	r3, r9
 800bd28:	930a      	str	r3, [sp, #40]	; 0x28
 800bd2a:	9b04      	ldr	r3, [sp, #16]
 800bd2c:	f003 0301 	and.w	r3, r3, #1
 800bd30:	9309      	str	r3, [sp, #36]	; 0x24
 800bd32:	9b08      	ldr	r3, [sp, #32]
 800bd34:	4621      	mov	r1, r4
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4658      	mov	r0, fp
 800bd3a:	9304      	str	r3, [sp, #16]
 800bd3c:	f7ff fa68 	bl	800b210 <quorem>
 800bd40:	4603      	mov	r3, r0
 800bd42:	4641      	mov	r1, r8
 800bd44:	3330      	adds	r3, #48	; 0x30
 800bd46:	9006      	str	r0, [sp, #24]
 800bd48:	4658      	mov	r0, fp
 800bd4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd4c:	f000 ff42 	bl	800cbd4 <__mcmp>
 800bd50:	4632      	mov	r2, r6
 800bd52:	4681      	mov	r9, r0
 800bd54:	4621      	mov	r1, r4
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 ff58 	bl	800cc0c <__mdiff>
 800bd5c:	68c2      	ldr	r2, [r0, #12]
 800bd5e:	4607      	mov	r7, r0
 800bd60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd62:	bb02      	cbnz	r2, 800bda6 <_dtoa_r+0xa7e>
 800bd64:	4601      	mov	r1, r0
 800bd66:	4658      	mov	r0, fp
 800bd68:	f000 ff34 	bl	800cbd4 <__mcmp>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd70:	4639      	mov	r1, r7
 800bd72:	4628      	mov	r0, r5
 800bd74:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bd78:	f000 fca4 	bl	800c6c4 <_Bfree>
 800bd7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd80:	9f08      	ldr	r7, [sp, #32]
 800bd82:	ea43 0102 	orr.w	r1, r3, r2
 800bd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd88:	430b      	orrs	r3, r1
 800bd8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd8c:	d10d      	bne.n	800bdaa <_dtoa_r+0xa82>
 800bd8e:	2b39      	cmp	r3, #57	; 0x39
 800bd90:	d029      	beq.n	800bde6 <_dtoa_r+0xabe>
 800bd92:	f1b9 0f00 	cmp.w	r9, #0
 800bd96:	dd01      	ble.n	800bd9c <_dtoa_r+0xa74>
 800bd98:	9b06      	ldr	r3, [sp, #24]
 800bd9a:	3331      	adds	r3, #49	; 0x31
 800bd9c:	9a04      	ldr	r2, [sp, #16]
 800bd9e:	7013      	strb	r3, [r2, #0]
 800bda0:	e776      	b.n	800bc90 <_dtoa_r+0x968>
 800bda2:	4630      	mov	r0, r6
 800bda4:	e7b9      	b.n	800bd1a <_dtoa_r+0x9f2>
 800bda6:	2201      	movs	r2, #1
 800bda8:	e7e2      	b.n	800bd70 <_dtoa_r+0xa48>
 800bdaa:	f1b9 0f00 	cmp.w	r9, #0
 800bdae:	db06      	blt.n	800bdbe <_dtoa_r+0xa96>
 800bdb0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bdb2:	ea41 0909 	orr.w	r9, r1, r9
 800bdb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdb8:	ea59 0101 	orrs.w	r1, r9, r1
 800bdbc:	d120      	bne.n	800be00 <_dtoa_r+0xad8>
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	ddec      	ble.n	800bd9c <_dtoa_r+0xa74>
 800bdc2:	4659      	mov	r1, fp
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	9308      	str	r3, [sp, #32]
 800bdca:	f000 fe93 	bl	800caf4 <__lshift>
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4683      	mov	fp, r0
 800bdd2:	f000 feff 	bl	800cbd4 <__mcmp>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	9b08      	ldr	r3, [sp, #32]
 800bdda:	dc02      	bgt.n	800bde2 <_dtoa_r+0xaba>
 800bddc:	d1de      	bne.n	800bd9c <_dtoa_r+0xa74>
 800bdde:	07da      	lsls	r2, r3, #31
 800bde0:	d5dc      	bpl.n	800bd9c <_dtoa_r+0xa74>
 800bde2:	2b39      	cmp	r3, #57	; 0x39
 800bde4:	d1d8      	bne.n	800bd98 <_dtoa_r+0xa70>
 800bde6:	2339      	movs	r3, #57	; 0x39
 800bde8:	9a04      	ldr	r2, [sp, #16]
 800bdea:	7013      	strb	r3, [r2, #0]
 800bdec:	463b      	mov	r3, r7
 800bdee:	461f      	mov	r7, r3
 800bdf0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	2a39      	cmp	r2, #57	; 0x39
 800bdf8:	d050      	beq.n	800be9c <_dtoa_r+0xb74>
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	e747      	b.n	800bc90 <_dtoa_r+0x968>
 800be00:	2a00      	cmp	r2, #0
 800be02:	dd03      	ble.n	800be0c <_dtoa_r+0xae4>
 800be04:	2b39      	cmp	r3, #57	; 0x39
 800be06:	d0ee      	beq.n	800bde6 <_dtoa_r+0xabe>
 800be08:	3301      	adds	r3, #1
 800be0a:	e7c7      	b.n	800bd9c <_dtoa_r+0xa74>
 800be0c:	9a08      	ldr	r2, [sp, #32]
 800be0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800be14:	428a      	cmp	r2, r1
 800be16:	d02a      	beq.n	800be6e <_dtoa_r+0xb46>
 800be18:	4659      	mov	r1, fp
 800be1a:	2300      	movs	r3, #0
 800be1c:	220a      	movs	r2, #10
 800be1e:	4628      	mov	r0, r5
 800be20:	f000 fc72 	bl	800c708 <__multadd>
 800be24:	45b0      	cmp	r8, r6
 800be26:	4683      	mov	fp, r0
 800be28:	f04f 0300 	mov.w	r3, #0
 800be2c:	f04f 020a 	mov.w	r2, #10
 800be30:	4641      	mov	r1, r8
 800be32:	4628      	mov	r0, r5
 800be34:	d107      	bne.n	800be46 <_dtoa_r+0xb1e>
 800be36:	f000 fc67 	bl	800c708 <__multadd>
 800be3a:	4680      	mov	r8, r0
 800be3c:	4606      	mov	r6, r0
 800be3e:	9b08      	ldr	r3, [sp, #32]
 800be40:	3301      	adds	r3, #1
 800be42:	9308      	str	r3, [sp, #32]
 800be44:	e775      	b.n	800bd32 <_dtoa_r+0xa0a>
 800be46:	f000 fc5f 	bl	800c708 <__multadd>
 800be4a:	4631      	mov	r1, r6
 800be4c:	4680      	mov	r8, r0
 800be4e:	2300      	movs	r3, #0
 800be50:	220a      	movs	r2, #10
 800be52:	4628      	mov	r0, r5
 800be54:	f000 fc58 	bl	800c708 <__multadd>
 800be58:	4606      	mov	r6, r0
 800be5a:	e7f0      	b.n	800be3e <_dtoa_r+0xb16>
 800be5c:	f1b9 0f00 	cmp.w	r9, #0
 800be60:	bfcc      	ite	gt
 800be62:	464f      	movgt	r7, r9
 800be64:	2701      	movle	r7, #1
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	9a03      	ldr	r2, [sp, #12]
 800be6c:	4417      	add	r7, r2
 800be6e:	4659      	mov	r1, fp
 800be70:	2201      	movs	r2, #1
 800be72:	4628      	mov	r0, r5
 800be74:	9308      	str	r3, [sp, #32]
 800be76:	f000 fe3d 	bl	800caf4 <__lshift>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4683      	mov	fp, r0
 800be7e:	f000 fea9 	bl	800cbd4 <__mcmp>
 800be82:	2800      	cmp	r0, #0
 800be84:	dcb2      	bgt.n	800bdec <_dtoa_r+0xac4>
 800be86:	d102      	bne.n	800be8e <_dtoa_r+0xb66>
 800be88:	9b08      	ldr	r3, [sp, #32]
 800be8a:	07db      	lsls	r3, r3, #31
 800be8c:	d4ae      	bmi.n	800bdec <_dtoa_r+0xac4>
 800be8e:	463b      	mov	r3, r7
 800be90:	461f      	mov	r7, r3
 800be92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be96:	2a30      	cmp	r2, #48	; 0x30
 800be98:	d0fa      	beq.n	800be90 <_dtoa_r+0xb68>
 800be9a:	e6f9      	b.n	800bc90 <_dtoa_r+0x968>
 800be9c:	9a03      	ldr	r2, [sp, #12]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d1a5      	bne.n	800bdee <_dtoa_r+0xac6>
 800bea2:	2331      	movs	r3, #49	; 0x31
 800bea4:	f10a 0a01 	add.w	sl, sl, #1
 800bea8:	e779      	b.n	800bd9e <_dtoa_r+0xa76>
 800beaa:	4b14      	ldr	r3, [pc, #80]	; (800befc <_dtoa_r+0xbd4>)
 800beac:	f7ff baa8 	b.w	800b400 <_dtoa_r+0xd8>
 800beb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f47f aa81 	bne.w	800b3ba <_dtoa_r+0x92>
 800beb8:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <_dtoa_r+0xbd8>)
 800beba:	f7ff baa1 	b.w	800b400 <_dtoa_r+0xd8>
 800bebe:	f1b9 0f00 	cmp.w	r9, #0
 800bec2:	dc03      	bgt.n	800becc <_dtoa_r+0xba4>
 800bec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	f73f aecb 	bgt.w	800bc62 <_dtoa_r+0x93a>
 800becc:	9f03      	ldr	r7, [sp, #12]
 800bece:	4621      	mov	r1, r4
 800bed0:	4658      	mov	r0, fp
 800bed2:	f7ff f99d 	bl	800b210 <quorem>
 800bed6:	9a03      	ldr	r2, [sp, #12]
 800bed8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bedc:	f807 3b01 	strb.w	r3, [r7], #1
 800bee0:	1aba      	subs	r2, r7, r2
 800bee2:	4591      	cmp	r9, r2
 800bee4:	ddba      	ble.n	800be5c <_dtoa_r+0xb34>
 800bee6:	4659      	mov	r1, fp
 800bee8:	2300      	movs	r3, #0
 800beea:	220a      	movs	r2, #10
 800beec:	4628      	mov	r0, r5
 800beee:	f000 fc0b 	bl	800c708 <__multadd>
 800bef2:	4683      	mov	fp, r0
 800bef4:	e7eb      	b.n	800bece <_dtoa_r+0xba6>
 800bef6:	bf00      	nop
 800bef8:	0800ea90 	.word	0x0800ea90
 800befc:	0800e894 	.word	0x0800e894
 800bf00:	0800ea11 	.word	0x0800ea11

0800bf04 <rshift>:
 800bf04:	6903      	ldr	r3, [r0, #16]
 800bf06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf0e:	f100 0414 	add.w	r4, r0, #20
 800bf12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bf16:	dd46      	ble.n	800bfa6 <rshift+0xa2>
 800bf18:	f011 011f 	ands.w	r1, r1, #31
 800bf1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf24:	d10c      	bne.n	800bf40 <rshift+0x3c>
 800bf26:	4629      	mov	r1, r5
 800bf28:	f100 0710 	add.w	r7, r0, #16
 800bf2c:	42b1      	cmp	r1, r6
 800bf2e:	d335      	bcc.n	800bf9c <rshift+0x98>
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	1eea      	subs	r2, r5, #3
 800bf36:	4296      	cmp	r6, r2
 800bf38:	bf38      	it	cc
 800bf3a:	2300      	movcc	r3, #0
 800bf3c:	4423      	add	r3, r4
 800bf3e:	e015      	b.n	800bf6c <rshift+0x68>
 800bf40:	46a1      	mov	r9, r4
 800bf42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf46:	f1c1 0820 	rsb	r8, r1, #32
 800bf4a:	40cf      	lsrs	r7, r1
 800bf4c:	f105 0e04 	add.w	lr, r5, #4
 800bf50:	4576      	cmp	r6, lr
 800bf52:	46f4      	mov	ip, lr
 800bf54:	d816      	bhi.n	800bf84 <rshift+0x80>
 800bf56:	1a9a      	subs	r2, r3, r2
 800bf58:	0092      	lsls	r2, r2, #2
 800bf5a:	3a04      	subs	r2, #4
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	42ae      	cmp	r6, r5
 800bf60:	bf38      	it	cc
 800bf62:	2200      	movcc	r2, #0
 800bf64:	18a3      	adds	r3, r4, r2
 800bf66:	50a7      	str	r7, [r4, r2]
 800bf68:	b107      	cbz	r7, 800bf6c <rshift+0x68>
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	eba3 0204 	sub.w	r2, r3, r4
 800bf72:	bf08      	it	eq
 800bf74:	2300      	moveq	r3, #0
 800bf76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf7a:	6102      	str	r2, [r0, #16]
 800bf7c:	bf08      	it	eq
 800bf7e:	6143      	streq	r3, [r0, #20]
 800bf80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf84:	f8dc c000 	ldr.w	ip, [ip]
 800bf88:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf8c:	ea4c 0707 	orr.w	r7, ip, r7
 800bf90:	f849 7b04 	str.w	r7, [r9], #4
 800bf94:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf98:	40cf      	lsrs	r7, r1
 800bf9a:	e7d9      	b.n	800bf50 <rshift+0x4c>
 800bf9c:	f851 cb04 	ldr.w	ip, [r1], #4
 800bfa0:	f847 cf04 	str.w	ip, [r7, #4]!
 800bfa4:	e7c2      	b.n	800bf2c <rshift+0x28>
 800bfa6:	4623      	mov	r3, r4
 800bfa8:	e7e0      	b.n	800bf6c <rshift+0x68>

0800bfaa <__hexdig_fun>:
 800bfaa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bfae:	2b09      	cmp	r3, #9
 800bfb0:	d802      	bhi.n	800bfb8 <__hexdig_fun+0xe>
 800bfb2:	3820      	subs	r0, #32
 800bfb4:	b2c0      	uxtb	r0, r0
 800bfb6:	4770      	bx	lr
 800bfb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bfbc:	2b05      	cmp	r3, #5
 800bfbe:	d801      	bhi.n	800bfc4 <__hexdig_fun+0x1a>
 800bfc0:	3847      	subs	r0, #71	; 0x47
 800bfc2:	e7f7      	b.n	800bfb4 <__hexdig_fun+0xa>
 800bfc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bfc8:	2b05      	cmp	r3, #5
 800bfca:	d801      	bhi.n	800bfd0 <__hexdig_fun+0x26>
 800bfcc:	3827      	subs	r0, #39	; 0x27
 800bfce:	e7f1      	b.n	800bfb4 <__hexdig_fun+0xa>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	4770      	bx	lr

0800bfd4 <__gethex>:
 800bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	b08b      	sub	sp, #44	; 0x2c
 800bfda:	9305      	str	r3, [sp, #20]
 800bfdc:	4bb2      	ldr	r3, [pc, #712]	; (800c2a8 <__gethex+0x2d4>)
 800bfde:	9002      	str	r0, [sp, #8]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	468b      	mov	fp, r1
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	4690      	mov	r8, r2
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	f7f4 f8b1 	bl	8000150 <strlen>
 800bfee:	4682      	mov	sl, r0
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	f8db 2000 	ldr.w	r2, [fp]
 800bff6:	4403      	add	r3, r0
 800bff8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bffc:	9306      	str	r3, [sp, #24]
 800bffe:	1c93      	adds	r3, r2, #2
 800c000:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c004:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c008:	32fe      	adds	r2, #254	; 0xfe
 800c00a:	18d1      	adds	r1, r2, r3
 800c00c:	461f      	mov	r7, r3
 800c00e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c012:	9101      	str	r1, [sp, #4]
 800c014:	2830      	cmp	r0, #48	; 0x30
 800c016:	d0f8      	beq.n	800c00a <__gethex+0x36>
 800c018:	f7ff ffc7 	bl	800bfaa <__hexdig_fun>
 800c01c:	4604      	mov	r4, r0
 800c01e:	2800      	cmp	r0, #0
 800c020:	d13a      	bne.n	800c098 <__gethex+0xc4>
 800c022:	4652      	mov	r2, sl
 800c024:	4638      	mov	r0, r7
 800c026:	9903      	ldr	r1, [sp, #12]
 800c028:	f001 fa26 	bl	800d478 <strncmp>
 800c02c:	4605      	mov	r5, r0
 800c02e:	2800      	cmp	r0, #0
 800c030:	d166      	bne.n	800c100 <__gethex+0x12c>
 800c032:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c036:	eb07 060a 	add.w	r6, r7, sl
 800c03a:	f7ff ffb6 	bl	800bfaa <__hexdig_fun>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d060      	beq.n	800c104 <__gethex+0x130>
 800c042:	4633      	mov	r3, r6
 800c044:	7818      	ldrb	r0, [r3, #0]
 800c046:	461f      	mov	r7, r3
 800c048:	2830      	cmp	r0, #48	; 0x30
 800c04a:	f103 0301 	add.w	r3, r3, #1
 800c04e:	d0f9      	beq.n	800c044 <__gethex+0x70>
 800c050:	f7ff ffab 	bl	800bfaa <__hexdig_fun>
 800c054:	2301      	movs	r3, #1
 800c056:	fab0 f480 	clz	r4, r0
 800c05a:	4635      	mov	r5, r6
 800c05c:	0964      	lsrs	r4, r4, #5
 800c05e:	9301      	str	r3, [sp, #4]
 800c060:	463a      	mov	r2, r7
 800c062:	4616      	mov	r6, r2
 800c064:	7830      	ldrb	r0, [r6, #0]
 800c066:	3201      	adds	r2, #1
 800c068:	f7ff ff9f 	bl	800bfaa <__hexdig_fun>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d1f8      	bne.n	800c062 <__gethex+0x8e>
 800c070:	4652      	mov	r2, sl
 800c072:	4630      	mov	r0, r6
 800c074:	9903      	ldr	r1, [sp, #12]
 800c076:	f001 f9ff 	bl	800d478 <strncmp>
 800c07a:	b980      	cbnz	r0, 800c09e <__gethex+0xca>
 800c07c:	b94d      	cbnz	r5, 800c092 <__gethex+0xbe>
 800c07e:	eb06 050a 	add.w	r5, r6, sl
 800c082:	462a      	mov	r2, r5
 800c084:	4616      	mov	r6, r2
 800c086:	7830      	ldrb	r0, [r6, #0]
 800c088:	3201      	adds	r2, #1
 800c08a:	f7ff ff8e 	bl	800bfaa <__hexdig_fun>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d1f8      	bne.n	800c084 <__gethex+0xb0>
 800c092:	1bad      	subs	r5, r5, r6
 800c094:	00ad      	lsls	r5, r5, #2
 800c096:	e004      	b.n	800c0a2 <__gethex+0xce>
 800c098:	2400      	movs	r4, #0
 800c09a:	4625      	mov	r5, r4
 800c09c:	e7e0      	b.n	800c060 <__gethex+0x8c>
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	d1f7      	bne.n	800c092 <__gethex+0xbe>
 800c0a2:	7833      	ldrb	r3, [r6, #0]
 800c0a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c0a8:	2b50      	cmp	r3, #80	; 0x50
 800c0aa:	d139      	bne.n	800c120 <__gethex+0x14c>
 800c0ac:	7873      	ldrb	r3, [r6, #1]
 800c0ae:	2b2b      	cmp	r3, #43	; 0x2b
 800c0b0:	d02a      	beq.n	800c108 <__gethex+0x134>
 800c0b2:	2b2d      	cmp	r3, #45	; 0x2d
 800c0b4:	d02c      	beq.n	800c110 <__gethex+0x13c>
 800c0b6:	f04f 0900 	mov.w	r9, #0
 800c0ba:	1c71      	adds	r1, r6, #1
 800c0bc:	7808      	ldrb	r0, [r1, #0]
 800c0be:	f7ff ff74 	bl	800bfaa <__hexdig_fun>
 800c0c2:	1e43      	subs	r3, r0, #1
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b18      	cmp	r3, #24
 800c0c8:	d82a      	bhi.n	800c120 <__gethex+0x14c>
 800c0ca:	f1a0 0210 	sub.w	r2, r0, #16
 800c0ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c0d2:	f7ff ff6a 	bl	800bfaa <__hexdig_fun>
 800c0d6:	1e43      	subs	r3, r0, #1
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b18      	cmp	r3, #24
 800c0dc:	d91b      	bls.n	800c116 <__gethex+0x142>
 800c0de:	f1b9 0f00 	cmp.w	r9, #0
 800c0e2:	d000      	beq.n	800c0e6 <__gethex+0x112>
 800c0e4:	4252      	negs	r2, r2
 800c0e6:	4415      	add	r5, r2
 800c0e8:	f8cb 1000 	str.w	r1, [fp]
 800c0ec:	b1d4      	cbz	r4, 800c124 <__gethex+0x150>
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bf14      	ite	ne
 800c0f4:	2700      	movne	r7, #0
 800c0f6:	2706      	moveq	r7, #6
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	b00b      	add	sp, #44	; 0x2c
 800c0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c100:	463e      	mov	r6, r7
 800c102:	4625      	mov	r5, r4
 800c104:	2401      	movs	r4, #1
 800c106:	e7cc      	b.n	800c0a2 <__gethex+0xce>
 800c108:	f04f 0900 	mov.w	r9, #0
 800c10c:	1cb1      	adds	r1, r6, #2
 800c10e:	e7d5      	b.n	800c0bc <__gethex+0xe8>
 800c110:	f04f 0901 	mov.w	r9, #1
 800c114:	e7fa      	b.n	800c10c <__gethex+0x138>
 800c116:	230a      	movs	r3, #10
 800c118:	fb03 0202 	mla	r2, r3, r2, r0
 800c11c:	3a10      	subs	r2, #16
 800c11e:	e7d6      	b.n	800c0ce <__gethex+0xfa>
 800c120:	4631      	mov	r1, r6
 800c122:	e7e1      	b.n	800c0e8 <__gethex+0x114>
 800c124:	4621      	mov	r1, r4
 800c126:	1bf3      	subs	r3, r6, r7
 800c128:	3b01      	subs	r3, #1
 800c12a:	2b07      	cmp	r3, #7
 800c12c:	dc0a      	bgt.n	800c144 <__gethex+0x170>
 800c12e:	9802      	ldr	r0, [sp, #8]
 800c130:	f000 fa88 	bl	800c644 <_Balloc>
 800c134:	4604      	mov	r4, r0
 800c136:	b940      	cbnz	r0, 800c14a <__gethex+0x176>
 800c138:	4602      	mov	r2, r0
 800c13a:	21de      	movs	r1, #222	; 0xde
 800c13c:	4b5b      	ldr	r3, [pc, #364]	; (800c2ac <__gethex+0x2d8>)
 800c13e:	485c      	ldr	r0, [pc, #368]	; (800c2b0 <__gethex+0x2dc>)
 800c140:	f001 f9bc 	bl	800d4bc <__assert_func>
 800c144:	3101      	adds	r1, #1
 800c146:	105b      	asrs	r3, r3, #1
 800c148:	e7ef      	b.n	800c12a <__gethex+0x156>
 800c14a:	f04f 0b00 	mov.w	fp, #0
 800c14e:	f100 0914 	add.w	r9, r0, #20
 800c152:	f1ca 0301 	rsb	r3, sl, #1
 800c156:	f8cd 9010 	str.w	r9, [sp, #16]
 800c15a:	f8cd b004 	str.w	fp, [sp, #4]
 800c15e:	9308      	str	r3, [sp, #32]
 800c160:	42b7      	cmp	r7, r6
 800c162:	d33f      	bcc.n	800c1e4 <__gethex+0x210>
 800c164:	9f04      	ldr	r7, [sp, #16]
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	f847 3b04 	str.w	r3, [r7], #4
 800c16c:	eba7 0709 	sub.w	r7, r7, r9
 800c170:	10bf      	asrs	r7, r7, #2
 800c172:	6127      	str	r7, [r4, #16]
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fb57 	bl	800c828 <__hi0bits>
 800c17a:	017f      	lsls	r7, r7, #5
 800c17c:	f8d8 6000 	ldr.w	r6, [r8]
 800c180:	1a3f      	subs	r7, r7, r0
 800c182:	42b7      	cmp	r7, r6
 800c184:	dd62      	ble.n	800c24c <__gethex+0x278>
 800c186:	1bbf      	subs	r7, r7, r6
 800c188:	4639      	mov	r1, r7
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 fef1 	bl	800cf72 <__any_on>
 800c190:	4682      	mov	sl, r0
 800c192:	b1a8      	cbz	r0, 800c1c0 <__gethex+0x1ec>
 800c194:	f04f 0a01 	mov.w	sl, #1
 800c198:	1e7b      	subs	r3, r7, #1
 800c19a:	1159      	asrs	r1, r3, #5
 800c19c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c1a0:	f003 021f 	and.w	r2, r3, #31
 800c1a4:	fa0a f202 	lsl.w	r2, sl, r2
 800c1a8:	420a      	tst	r2, r1
 800c1aa:	d009      	beq.n	800c1c0 <__gethex+0x1ec>
 800c1ac:	4553      	cmp	r3, sl
 800c1ae:	dd05      	ble.n	800c1bc <__gethex+0x1e8>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	1eb9      	subs	r1, r7, #2
 800c1b4:	f000 fedd 	bl	800cf72 <__any_on>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d144      	bne.n	800c246 <__gethex+0x272>
 800c1bc:	f04f 0a02 	mov.w	sl, #2
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7ff fe9e 	bl	800bf04 <rshift>
 800c1c8:	443d      	add	r5, r7
 800c1ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1ce:	42ab      	cmp	r3, r5
 800c1d0:	da4a      	bge.n	800c268 <__gethex+0x294>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	9802      	ldr	r0, [sp, #8]
 800c1d6:	f000 fa75 	bl	800c6c4 <_Bfree>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1de:	27a3      	movs	r7, #163	; 0xa3
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	e789      	b.n	800c0f8 <__gethex+0x124>
 800c1e4:	1e73      	subs	r3, r6, #1
 800c1e6:	9a06      	ldr	r2, [sp, #24]
 800c1e8:	9307      	str	r3, [sp, #28]
 800c1ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d019      	beq.n	800c226 <__gethex+0x252>
 800c1f2:	f1bb 0f20 	cmp.w	fp, #32
 800c1f6:	d107      	bne.n	800c208 <__gethex+0x234>
 800c1f8:	9b04      	ldr	r3, [sp, #16]
 800c1fa:	9a01      	ldr	r2, [sp, #4]
 800c1fc:	f843 2b04 	str.w	r2, [r3], #4
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	2300      	movs	r3, #0
 800c204:	469b      	mov	fp, r3
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c20c:	f7ff fecd 	bl	800bfaa <__hexdig_fun>
 800c210:	9b01      	ldr	r3, [sp, #4]
 800c212:	f000 000f 	and.w	r0, r0, #15
 800c216:	fa00 f00b 	lsl.w	r0, r0, fp
 800c21a:	4303      	orrs	r3, r0
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	f10b 0b04 	add.w	fp, fp, #4
 800c222:	9b07      	ldr	r3, [sp, #28]
 800c224:	e00d      	b.n	800c242 <__gethex+0x26e>
 800c226:	9a08      	ldr	r2, [sp, #32]
 800c228:	1e73      	subs	r3, r6, #1
 800c22a:	4413      	add	r3, r2
 800c22c:	42bb      	cmp	r3, r7
 800c22e:	d3e0      	bcc.n	800c1f2 <__gethex+0x21e>
 800c230:	4618      	mov	r0, r3
 800c232:	4652      	mov	r2, sl
 800c234:	9903      	ldr	r1, [sp, #12]
 800c236:	9309      	str	r3, [sp, #36]	; 0x24
 800c238:	f001 f91e 	bl	800d478 <strncmp>
 800c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23e:	2800      	cmp	r0, #0
 800c240:	d1d7      	bne.n	800c1f2 <__gethex+0x21e>
 800c242:	461e      	mov	r6, r3
 800c244:	e78c      	b.n	800c160 <__gethex+0x18c>
 800c246:	f04f 0a03 	mov.w	sl, #3
 800c24a:	e7b9      	b.n	800c1c0 <__gethex+0x1ec>
 800c24c:	da09      	bge.n	800c262 <__gethex+0x28e>
 800c24e:	1bf7      	subs	r7, r6, r7
 800c250:	4621      	mov	r1, r4
 800c252:	463a      	mov	r2, r7
 800c254:	9802      	ldr	r0, [sp, #8]
 800c256:	f000 fc4d 	bl	800caf4 <__lshift>
 800c25a:	4604      	mov	r4, r0
 800c25c:	1bed      	subs	r5, r5, r7
 800c25e:	f100 0914 	add.w	r9, r0, #20
 800c262:	f04f 0a00 	mov.w	sl, #0
 800c266:	e7b0      	b.n	800c1ca <__gethex+0x1f6>
 800c268:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c26c:	42a8      	cmp	r0, r5
 800c26e:	dd72      	ble.n	800c356 <__gethex+0x382>
 800c270:	1b45      	subs	r5, r0, r5
 800c272:	42ae      	cmp	r6, r5
 800c274:	dc35      	bgt.n	800c2e2 <__gethex+0x30e>
 800c276:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d029      	beq.n	800c2d2 <__gethex+0x2fe>
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d02b      	beq.n	800c2da <__gethex+0x306>
 800c282:	2b01      	cmp	r3, #1
 800c284:	d11c      	bne.n	800c2c0 <__gethex+0x2ec>
 800c286:	42ae      	cmp	r6, r5
 800c288:	d11a      	bne.n	800c2c0 <__gethex+0x2ec>
 800c28a:	2e01      	cmp	r6, #1
 800c28c:	d112      	bne.n	800c2b4 <__gethex+0x2e0>
 800c28e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c292:	9a05      	ldr	r2, [sp, #20]
 800c294:	2762      	movs	r7, #98	; 0x62
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	2301      	movs	r3, #1
 800c29a:	6123      	str	r3, [r4, #16]
 800c29c:	f8c9 3000 	str.w	r3, [r9]
 800c2a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2a2:	601c      	str	r4, [r3, #0]
 800c2a4:	e728      	b.n	800c0f8 <__gethex+0x124>
 800c2a6:	bf00      	nop
 800c2a8:	0800eb08 	.word	0x0800eb08
 800c2ac:	0800ea90 	.word	0x0800ea90
 800c2b0:	0800eaa1 	.word	0x0800eaa1
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	1e71      	subs	r1, r6, #1
 800c2b8:	f000 fe5b 	bl	800cf72 <__any_on>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d1e6      	bne.n	800c28e <__gethex+0x2ba>
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	9802      	ldr	r0, [sp, #8]
 800c2c4:	f000 f9fe 	bl	800c6c4 <_Bfree>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2cc:	2750      	movs	r7, #80	; 0x50
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	e712      	b.n	800c0f8 <__gethex+0x124>
 800c2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1f3      	bne.n	800c2c0 <__gethex+0x2ec>
 800c2d8:	e7d9      	b.n	800c28e <__gethex+0x2ba>
 800c2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1d6      	bne.n	800c28e <__gethex+0x2ba>
 800c2e0:	e7ee      	b.n	800c2c0 <__gethex+0x2ec>
 800c2e2:	1e6f      	subs	r7, r5, #1
 800c2e4:	f1ba 0f00 	cmp.w	sl, #0
 800c2e8:	d132      	bne.n	800c350 <__gethex+0x37c>
 800c2ea:	b127      	cbz	r7, 800c2f6 <__gethex+0x322>
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f000 fe3f 	bl	800cf72 <__any_on>
 800c2f4:	4682      	mov	sl, r0
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	117b      	asrs	r3, r7, #5
 800c2fa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c2fe:	f007 071f 	and.w	r7, r7, #31
 800c302:	fa01 f707 	lsl.w	r7, r1, r7
 800c306:	421f      	tst	r7, r3
 800c308:	f04f 0702 	mov.w	r7, #2
 800c30c:	4629      	mov	r1, r5
 800c30e:	4620      	mov	r0, r4
 800c310:	bf18      	it	ne
 800c312:	f04a 0a02 	orrne.w	sl, sl, #2
 800c316:	1b76      	subs	r6, r6, r5
 800c318:	f7ff fdf4 	bl	800bf04 <rshift>
 800c31c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c320:	f1ba 0f00 	cmp.w	sl, #0
 800c324:	d048      	beq.n	800c3b8 <__gethex+0x3e4>
 800c326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d015      	beq.n	800c35a <__gethex+0x386>
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d017      	beq.n	800c362 <__gethex+0x38e>
 800c332:	2b01      	cmp	r3, #1
 800c334:	d109      	bne.n	800c34a <__gethex+0x376>
 800c336:	f01a 0f02 	tst.w	sl, #2
 800c33a:	d006      	beq.n	800c34a <__gethex+0x376>
 800c33c:	f8d9 0000 	ldr.w	r0, [r9]
 800c340:	ea4a 0a00 	orr.w	sl, sl, r0
 800c344:	f01a 0f01 	tst.w	sl, #1
 800c348:	d10e      	bne.n	800c368 <__gethex+0x394>
 800c34a:	f047 0710 	orr.w	r7, r7, #16
 800c34e:	e033      	b.n	800c3b8 <__gethex+0x3e4>
 800c350:	f04f 0a01 	mov.w	sl, #1
 800c354:	e7cf      	b.n	800c2f6 <__gethex+0x322>
 800c356:	2701      	movs	r7, #1
 800c358:	e7e2      	b.n	800c320 <__gethex+0x34c>
 800c35a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c35c:	f1c3 0301 	rsb	r3, r3, #1
 800c360:	9315      	str	r3, [sp, #84]	; 0x54
 800c362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c364:	2b00      	cmp	r3, #0
 800c366:	d0f0      	beq.n	800c34a <__gethex+0x376>
 800c368:	f04f 0c00 	mov.w	ip, #0
 800c36c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c370:	f104 0314 	add.w	r3, r4, #20
 800c374:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c378:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c382:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c386:	d01c      	beq.n	800c3c2 <__gethex+0x3ee>
 800c388:	3201      	adds	r2, #1
 800c38a:	6002      	str	r2, [r0, #0]
 800c38c:	2f02      	cmp	r7, #2
 800c38e:	f104 0314 	add.w	r3, r4, #20
 800c392:	d13d      	bne.n	800c410 <__gethex+0x43c>
 800c394:	f8d8 2000 	ldr.w	r2, [r8]
 800c398:	3a01      	subs	r2, #1
 800c39a:	42b2      	cmp	r2, r6
 800c39c:	d10a      	bne.n	800c3b4 <__gethex+0x3e0>
 800c39e:	2201      	movs	r2, #1
 800c3a0:	1171      	asrs	r1, r6, #5
 800c3a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3a6:	f006 061f 	and.w	r6, r6, #31
 800c3aa:	fa02 f606 	lsl.w	r6, r2, r6
 800c3ae:	421e      	tst	r6, r3
 800c3b0:	bf18      	it	ne
 800c3b2:	4617      	movne	r7, r2
 800c3b4:	f047 0720 	orr.w	r7, r7, #32
 800c3b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3ba:	601c      	str	r4, [r3, #0]
 800c3bc:	9b05      	ldr	r3, [sp, #20]
 800c3be:	601d      	str	r5, [r3, #0]
 800c3c0:	e69a      	b.n	800c0f8 <__gethex+0x124>
 800c3c2:	4299      	cmp	r1, r3
 800c3c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c3c8:	d8d8      	bhi.n	800c37c <__gethex+0x3a8>
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	459b      	cmp	fp, r3
 800c3ce:	db17      	blt.n	800c400 <__gethex+0x42c>
 800c3d0:	6861      	ldr	r1, [r4, #4]
 800c3d2:	9802      	ldr	r0, [sp, #8]
 800c3d4:	3101      	adds	r1, #1
 800c3d6:	f000 f935 	bl	800c644 <_Balloc>
 800c3da:	4681      	mov	r9, r0
 800c3dc:	b918      	cbnz	r0, 800c3e6 <__gethex+0x412>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	2184      	movs	r1, #132	; 0x84
 800c3e2:	4b19      	ldr	r3, [pc, #100]	; (800c448 <__gethex+0x474>)
 800c3e4:	e6ab      	b.n	800c13e <__gethex+0x16a>
 800c3e6:	6922      	ldr	r2, [r4, #16]
 800c3e8:	f104 010c 	add.w	r1, r4, #12
 800c3ec:	3202      	adds	r2, #2
 800c3ee:	0092      	lsls	r2, r2, #2
 800c3f0:	300c      	adds	r0, #12
 800c3f2:	f000 f919 	bl	800c628 <memcpy>
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	9802      	ldr	r0, [sp, #8]
 800c3fa:	f000 f963 	bl	800c6c4 <_Bfree>
 800c3fe:	464c      	mov	r4, r9
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	1c5a      	adds	r2, r3, #1
 800c404:	6122      	str	r2, [r4, #16]
 800c406:	2201      	movs	r2, #1
 800c408:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c40c:	615a      	str	r2, [r3, #20]
 800c40e:	e7bd      	b.n	800c38c <__gethex+0x3b8>
 800c410:	6922      	ldr	r2, [r4, #16]
 800c412:	455a      	cmp	r2, fp
 800c414:	dd0b      	ble.n	800c42e <__gethex+0x45a>
 800c416:	2101      	movs	r1, #1
 800c418:	4620      	mov	r0, r4
 800c41a:	f7ff fd73 	bl	800bf04 <rshift>
 800c41e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c422:	3501      	adds	r5, #1
 800c424:	42ab      	cmp	r3, r5
 800c426:	f6ff aed4 	blt.w	800c1d2 <__gethex+0x1fe>
 800c42a:	2701      	movs	r7, #1
 800c42c:	e7c2      	b.n	800c3b4 <__gethex+0x3e0>
 800c42e:	f016 061f 	ands.w	r6, r6, #31
 800c432:	d0fa      	beq.n	800c42a <__gethex+0x456>
 800c434:	4453      	add	r3, sl
 800c436:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c43a:	f000 f9f5 	bl	800c828 <__hi0bits>
 800c43e:	f1c6 0620 	rsb	r6, r6, #32
 800c442:	42b0      	cmp	r0, r6
 800c444:	dbe7      	blt.n	800c416 <__gethex+0x442>
 800c446:	e7f0      	b.n	800c42a <__gethex+0x456>
 800c448:	0800ea90 	.word	0x0800ea90

0800c44c <L_shift>:
 800c44c:	f1c2 0208 	rsb	r2, r2, #8
 800c450:	0092      	lsls	r2, r2, #2
 800c452:	b570      	push	{r4, r5, r6, lr}
 800c454:	f1c2 0620 	rsb	r6, r2, #32
 800c458:	6843      	ldr	r3, [r0, #4]
 800c45a:	6804      	ldr	r4, [r0, #0]
 800c45c:	fa03 f506 	lsl.w	r5, r3, r6
 800c460:	432c      	orrs	r4, r5
 800c462:	40d3      	lsrs	r3, r2
 800c464:	6004      	str	r4, [r0, #0]
 800c466:	f840 3f04 	str.w	r3, [r0, #4]!
 800c46a:	4288      	cmp	r0, r1
 800c46c:	d3f4      	bcc.n	800c458 <L_shift+0xc>
 800c46e:	bd70      	pop	{r4, r5, r6, pc}

0800c470 <__match>:
 800c470:	b530      	push	{r4, r5, lr}
 800c472:	6803      	ldr	r3, [r0, #0]
 800c474:	3301      	adds	r3, #1
 800c476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c47a:	b914      	cbnz	r4, 800c482 <__match+0x12>
 800c47c:	6003      	str	r3, [r0, #0]
 800c47e:	2001      	movs	r0, #1
 800c480:	bd30      	pop	{r4, r5, pc}
 800c482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c486:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c48a:	2d19      	cmp	r5, #25
 800c48c:	bf98      	it	ls
 800c48e:	3220      	addls	r2, #32
 800c490:	42a2      	cmp	r2, r4
 800c492:	d0f0      	beq.n	800c476 <__match+0x6>
 800c494:	2000      	movs	r0, #0
 800c496:	e7f3      	b.n	800c480 <__match+0x10>

0800c498 <__hexnan>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	2500      	movs	r5, #0
 800c49e:	680b      	ldr	r3, [r1, #0]
 800c4a0:	4682      	mov	sl, r0
 800c4a2:	115e      	asrs	r6, r3, #5
 800c4a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c4a8:	f013 031f 	ands.w	r3, r3, #31
 800c4ac:	bf18      	it	ne
 800c4ae:	3604      	addne	r6, #4
 800c4b0:	1f37      	subs	r7, r6, #4
 800c4b2:	46b9      	mov	r9, r7
 800c4b4:	463c      	mov	r4, r7
 800c4b6:	46ab      	mov	fp, r5
 800c4b8:	b087      	sub	sp, #28
 800c4ba:	4690      	mov	r8, r2
 800c4bc:	6802      	ldr	r2, [r0, #0]
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c4c4:	9502      	str	r5, [sp, #8]
 800c4c6:	7851      	ldrb	r1, [r2, #1]
 800c4c8:	1c53      	adds	r3, r2, #1
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	b341      	cbz	r1, 800c520 <__hexnan+0x88>
 800c4ce:	4608      	mov	r0, r1
 800c4d0:	9205      	str	r2, [sp, #20]
 800c4d2:	9104      	str	r1, [sp, #16]
 800c4d4:	f7ff fd69 	bl	800bfaa <__hexdig_fun>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d14f      	bne.n	800c57c <__hexnan+0xe4>
 800c4dc:	9904      	ldr	r1, [sp, #16]
 800c4de:	9a05      	ldr	r2, [sp, #20]
 800c4e0:	2920      	cmp	r1, #32
 800c4e2:	d818      	bhi.n	800c516 <__hexnan+0x7e>
 800c4e4:	9b02      	ldr	r3, [sp, #8]
 800c4e6:	459b      	cmp	fp, r3
 800c4e8:	dd13      	ble.n	800c512 <__hexnan+0x7a>
 800c4ea:	454c      	cmp	r4, r9
 800c4ec:	d206      	bcs.n	800c4fc <__hexnan+0x64>
 800c4ee:	2d07      	cmp	r5, #7
 800c4f0:	dc04      	bgt.n	800c4fc <__hexnan+0x64>
 800c4f2:	462a      	mov	r2, r5
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7ff ffa8 	bl	800c44c <L_shift>
 800c4fc:	4544      	cmp	r4, r8
 800c4fe:	d950      	bls.n	800c5a2 <__hexnan+0x10a>
 800c500:	2300      	movs	r3, #0
 800c502:	f1a4 0904 	sub.w	r9, r4, #4
 800c506:	f844 3c04 	str.w	r3, [r4, #-4]
 800c50a:	461d      	mov	r5, r3
 800c50c:	464c      	mov	r4, r9
 800c50e:	f8cd b008 	str.w	fp, [sp, #8]
 800c512:	9a03      	ldr	r2, [sp, #12]
 800c514:	e7d7      	b.n	800c4c6 <__hexnan+0x2e>
 800c516:	2929      	cmp	r1, #41	; 0x29
 800c518:	d156      	bne.n	800c5c8 <__hexnan+0x130>
 800c51a:	3202      	adds	r2, #2
 800c51c:	f8ca 2000 	str.w	r2, [sl]
 800c520:	f1bb 0f00 	cmp.w	fp, #0
 800c524:	d050      	beq.n	800c5c8 <__hexnan+0x130>
 800c526:	454c      	cmp	r4, r9
 800c528:	d206      	bcs.n	800c538 <__hexnan+0xa0>
 800c52a:	2d07      	cmp	r5, #7
 800c52c:	dc04      	bgt.n	800c538 <__hexnan+0xa0>
 800c52e:	462a      	mov	r2, r5
 800c530:	4649      	mov	r1, r9
 800c532:	4620      	mov	r0, r4
 800c534:	f7ff ff8a 	bl	800c44c <L_shift>
 800c538:	4544      	cmp	r4, r8
 800c53a:	d934      	bls.n	800c5a6 <__hexnan+0x10e>
 800c53c:	4623      	mov	r3, r4
 800c53e:	f1a8 0204 	sub.w	r2, r8, #4
 800c542:	f853 1b04 	ldr.w	r1, [r3], #4
 800c546:	429f      	cmp	r7, r3
 800c548:	f842 1f04 	str.w	r1, [r2, #4]!
 800c54c:	d2f9      	bcs.n	800c542 <__hexnan+0xaa>
 800c54e:	1b3b      	subs	r3, r7, r4
 800c550:	f023 0303 	bic.w	r3, r3, #3
 800c554:	3304      	adds	r3, #4
 800c556:	3401      	adds	r4, #1
 800c558:	3e03      	subs	r6, #3
 800c55a:	42b4      	cmp	r4, r6
 800c55c:	bf88      	it	hi
 800c55e:	2304      	movhi	r3, #4
 800c560:	2200      	movs	r2, #0
 800c562:	4443      	add	r3, r8
 800c564:	f843 2b04 	str.w	r2, [r3], #4
 800c568:	429f      	cmp	r7, r3
 800c56a:	d2fb      	bcs.n	800c564 <__hexnan+0xcc>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	b91b      	cbnz	r3, 800c578 <__hexnan+0xe0>
 800c570:	4547      	cmp	r7, r8
 800c572:	d127      	bne.n	800c5c4 <__hexnan+0x12c>
 800c574:	2301      	movs	r3, #1
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	2005      	movs	r0, #5
 800c57a:	e026      	b.n	800c5ca <__hexnan+0x132>
 800c57c:	3501      	adds	r5, #1
 800c57e:	2d08      	cmp	r5, #8
 800c580:	f10b 0b01 	add.w	fp, fp, #1
 800c584:	dd06      	ble.n	800c594 <__hexnan+0xfc>
 800c586:	4544      	cmp	r4, r8
 800c588:	d9c3      	bls.n	800c512 <__hexnan+0x7a>
 800c58a:	2300      	movs	r3, #0
 800c58c:	2501      	movs	r5, #1
 800c58e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c592:	3c04      	subs	r4, #4
 800c594:	6822      	ldr	r2, [r4, #0]
 800c596:	f000 000f 	and.w	r0, r0, #15
 800c59a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c59e:	6022      	str	r2, [r4, #0]
 800c5a0:	e7b7      	b.n	800c512 <__hexnan+0x7a>
 800c5a2:	2508      	movs	r5, #8
 800c5a4:	e7b5      	b.n	800c512 <__hexnan+0x7a>
 800c5a6:	9b01      	ldr	r3, [sp, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0df      	beq.n	800c56c <__hexnan+0xd4>
 800c5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b0:	f1c3 0320 	rsb	r3, r3, #32
 800c5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5bc:	401a      	ands	r2, r3
 800c5be:	f846 2c04 	str.w	r2, [r6, #-4]
 800c5c2:	e7d3      	b.n	800c56c <__hexnan+0xd4>
 800c5c4:	3f04      	subs	r7, #4
 800c5c6:	e7d1      	b.n	800c56c <__hexnan+0xd4>
 800c5c8:	2004      	movs	r0, #4
 800c5ca:	b007      	add	sp, #28
 800c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5d0 <_localeconv_r>:
 800c5d0:	4800      	ldr	r0, [pc, #0]	; (800c5d4 <_localeconv_r+0x4>)
 800c5d2:	4770      	bx	lr
 800c5d4:	20000190 	.word	0x20000190

0800c5d8 <malloc>:
 800c5d8:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <malloc+0xc>)
 800c5da:	4601      	mov	r1, r0
 800c5dc:	6818      	ldr	r0, [r3, #0]
 800c5de:	f000 bd65 	b.w	800d0ac <_malloc_r>
 800c5e2:	bf00      	nop
 800c5e4:	20000038 	.word	0x20000038

0800c5e8 <__ascii_mbtowc>:
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	b901      	cbnz	r1, 800c5ee <__ascii_mbtowc+0x6>
 800c5ec:	a901      	add	r1, sp, #4
 800c5ee:	b142      	cbz	r2, 800c602 <__ascii_mbtowc+0x1a>
 800c5f0:	b14b      	cbz	r3, 800c606 <__ascii_mbtowc+0x1e>
 800c5f2:	7813      	ldrb	r3, [r2, #0]
 800c5f4:	600b      	str	r3, [r1, #0]
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	1e10      	subs	r0, r2, #0
 800c5fa:	bf18      	it	ne
 800c5fc:	2001      	movne	r0, #1
 800c5fe:	b002      	add	sp, #8
 800c600:	4770      	bx	lr
 800c602:	4610      	mov	r0, r2
 800c604:	e7fb      	b.n	800c5fe <__ascii_mbtowc+0x16>
 800c606:	f06f 0001 	mvn.w	r0, #1
 800c60a:	e7f8      	b.n	800c5fe <__ascii_mbtowc+0x16>

0800c60c <memchr>:
 800c60c:	4603      	mov	r3, r0
 800c60e:	b510      	push	{r4, lr}
 800c610:	b2c9      	uxtb	r1, r1
 800c612:	4402      	add	r2, r0
 800c614:	4293      	cmp	r3, r2
 800c616:	4618      	mov	r0, r3
 800c618:	d101      	bne.n	800c61e <memchr+0x12>
 800c61a:	2000      	movs	r0, #0
 800c61c:	e003      	b.n	800c626 <memchr+0x1a>
 800c61e:	7804      	ldrb	r4, [r0, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	428c      	cmp	r4, r1
 800c624:	d1f6      	bne.n	800c614 <memchr+0x8>
 800c626:	bd10      	pop	{r4, pc}

0800c628 <memcpy>:
 800c628:	440a      	add	r2, r1
 800c62a:	4291      	cmp	r1, r2
 800c62c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c630:	d100      	bne.n	800c634 <memcpy+0xc>
 800c632:	4770      	bx	lr
 800c634:	b510      	push	{r4, lr}
 800c636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63a:	4291      	cmp	r1, r2
 800c63c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c640:	d1f9      	bne.n	800c636 <memcpy+0xe>
 800c642:	bd10      	pop	{r4, pc}

0800c644 <_Balloc>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c648:	4604      	mov	r4, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	b976      	cbnz	r6, 800c66c <_Balloc+0x28>
 800c64e:	2010      	movs	r0, #16
 800c650:	f7ff ffc2 	bl	800c5d8 <malloc>
 800c654:	4602      	mov	r2, r0
 800c656:	6260      	str	r0, [r4, #36]	; 0x24
 800c658:	b920      	cbnz	r0, 800c664 <_Balloc+0x20>
 800c65a:	2166      	movs	r1, #102	; 0x66
 800c65c:	4b17      	ldr	r3, [pc, #92]	; (800c6bc <_Balloc+0x78>)
 800c65e:	4818      	ldr	r0, [pc, #96]	; (800c6c0 <_Balloc+0x7c>)
 800c660:	f000 ff2c 	bl	800d4bc <__assert_func>
 800c664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c668:	6006      	str	r6, [r0, #0]
 800c66a:	60c6      	str	r6, [r0, #12]
 800c66c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c66e:	68f3      	ldr	r3, [r6, #12]
 800c670:	b183      	cbz	r3, 800c694 <_Balloc+0x50>
 800c672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c67a:	b9b8      	cbnz	r0, 800c6ac <_Balloc+0x68>
 800c67c:	2101      	movs	r1, #1
 800c67e:	fa01 f605 	lsl.w	r6, r1, r5
 800c682:	1d72      	adds	r2, r6, #5
 800c684:	4620      	mov	r0, r4
 800c686:	0092      	lsls	r2, r2, #2
 800c688:	f000 fc94 	bl	800cfb4 <_calloc_r>
 800c68c:	b160      	cbz	r0, 800c6a8 <_Balloc+0x64>
 800c68e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c692:	e00e      	b.n	800c6b2 <_Balloc+0x6e>
 800c694:	2221      	movs	r2, #33	; 0x21
 800c696:	2104      	movs	r1, #4
 800c698:	4620      	mov	r0, r4
 800c69a:	f000 fc8b 	bl	800cfb4 <_calloc_r>
 800c69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6a0:	60f0      	str	r0, [r6, #12]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e4      	bne.n	800c672 <_Balloc+0x2e>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	6802      	ldr	r2, [r0, #0]
 800c6ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6b8:	e7f7      	b.n	800c6aa <_Balloc+0x66>
 800c6ba:	bf00      	nop
 800c6bc:	0800ea1e 	.word	0x0800ea1e
 800c6c0:	0800eb1c 	.word	0x0800eb1c

0800c6c4 <_Bfree>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	b976      	cbnz	r6, 800c6ec <_Bfree+0x28>
 800c6ce:	2010      	movs	r0, #16
 800c6d0:	f7ff ff82 	bl	800c5d8 <malloc>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	6268      	str	r0, [r5, #36]	; 0x24
 800c6d8:	b920      	cbnz	r0, 800c6e4 <_Bfree+0x20>
 800c6da:	218a      	movs	r1, #138	; 0x8a
 800c6dc:	4b08      	ldr	r3, [pc, #32]	; (800c700 <_Bfree+0x3c>)
 800c6de:	4809      	ldr	r0, [pc, #36]	; (800c704 <_Bfree+0x40>)
 800c6e0:	f000 feec 	bl	800d4bc <__assert_func>
 800c6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6e8:	6006      	str	r6, [r0, #0]
 800c6ea:	60c6      	str	r6, [r0, #12]
 800c6ec:	b13c      	cbz	r4, 800c6fe <_Bfree+0x3a>
 800c6ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6f0:	6862      	ldr	r2, [r4, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6f8:	6021      	str	r1, [r4, #0]
 800c6fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	0800ea1e 	.word	0x0800ea1e
 800c704:	0800eb1c 	.word	0x0800eb1c

0800c708 <__multadd>:
 800c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70c:	4607      	mov	r7, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	461e      	mov	r6, r3
 800c712:	2000      	movs	r0, #0
 800c714:	690d      	ldr	r5, [r1, #16]
 800c716:	f101 0c14 	add.w	ip, r1, #20
 800c71a:	f8dc 3000 	ldr.w	r3, [ip]
 800c71e:	3001      	adds	r0, #1
 800c720:	b299      	uxth	r1, r3
 800c722:	fb02 6101 	mla	r1, r2, r1, r6
 800c726:	0c1e      	lsrs	r6, r3, #16
 800c728:	0c0b      	lsrs	r3, r1, #16
 800c72a:	fb02 3306 	mla	r3, r2, r6, r3
 800c72e:	b289      	uxth	r1, r1
 800c730:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c734:	4285      	cmp	r5, r0
 800c736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c73a:	f84c 1b04 	str.w	r1, [ip], #4
 800c73e:	dcec      	bgt.n	800c71a <__multadd+0x12>
 800c740:	b30e      	cbz	r6, 800c786 <__multadd+0x7e>
 800c742:	68a3      	ldr	r3, [r4, #8]
 800c744:	42ab      	cmp	r3, r5
 800c746:	dc19      	bgt.n	800c77c <__multadd+0x74>
 800c748:	6861      	ldr	r1, [r4, #4]
 800c74a:	4638      	mov	r0, r7
 800c74c:	3101      	adds	r1, #1
 800c74e:	f7ff ff79 	bl	800c644 <_Balloc>
 800c752:	4680      	mov	r8, r0
 800c754:	b928      	cbnz	r0, 800c762 <__multadd+0x5a>
 800c756:	4602      	mov	r2, r0
 800c758:	21b5      	movs	r1, #181	; 0xb5
 800c75a:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <__multadd+0x84>)
 800c75c:	480c      	ldr	r0, [pc, #48]	; (800c790 <__multadd+0x88>)
 800c75e:	f000 fead 	bl	800d4bc <__assert_func>
 800c762:	6922      	ldr	r2, [r4, #16]
 800c764:	f104 010c 	add.w	r1, r4, #12
 800c768:	3202      	adds	r2, #2
 800c76a:	0092      	lsls	r2, r2, #2
 800c76c:	300c      	adds	r0, #12
 800c76e:	f7ff ff5b 	bl	800c628 <memcpy>
 800c772:	4621      	mov	r1, r4
 800c774:	4638      	mov	r0, r7
 800c776:	f7ff ffa5 	bl	800c6c4 <_Bfree>
 800c77a:	4644      	mov	r4, r8
 800c77c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c780:	3501      	adds	r5, #1
 800c782:	615e      	str	r6, [r3, #20]
 800c784:	6125      	str	r5, [r4, #16]
 800c786:	4620      	mov	r0, r4
 800c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78c:	0800ea90 	.word	0x0800ea90
 800c790:	0800eb1c 	.word	0x0800eb1c

0800c794 <__s2b>:
 800c794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c798:	4615      	mov	r5, r2
 800c79a:	2209      	movs	r2, #9
 800c79c:	461f      	mov	r7, r3
 800c79e:	3308      	adds	r3, #8
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	db09      	blt.n	800c7c4 <__s2b+0x30>
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7ff ff47 	bl	800c644 <_Balloc>
 800c7b6:	b940      	cbnz	r0, 800c7ca <__s2b+0x36>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	21ce      	movs	r1, #206	; 0xce
 800c7bc:	4b18      	ldr	r3, [pc, #96]	; (800c820 <__s2b+0x8c>)
 800c7be:	4819      	ldr	r0, [pc, #100]	; (800c824 <__s2b+0x90>)
 800c7c0:	f000 fe7c 	bl	800d4bc <__assert_func>
 800c7c4:	0052      	lsls	r2, r2, #1
 800c7c6:	3101      	adds	r1, #1
 800c7c8:	e7f0      	b.n	800c7ac <__s2b+0x18>
 800c7ca:	9b08      	ldr	r3, [sp, #32]
 800c7cc:	2d09      	cmp	r5, #9
 800c7ce:	6143      	str	r3, [r0, #20]
 800c7d0:	f04f 0301 	mov.w	r3, #1
 800c7d4:	6103      	str	r3, [r0, #16]
 800c7d6:	dd16      	ble.n	800c806 <__s2b+0x72>
 800c7d8:	f104 0909 	add.w	r9, r4, #9
 800c7dc:	46c8      	mov	r8, r9
 800c7de:	442c      	add	r4, r5
 800c7e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7e4:	4601      	mov	r1, r0
 800c7e6:	220a      	movs	r2, #10
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	3b30      	subs	r3, #48	; 0x30
 800c7ec:	f7ff ff8c 	bl	800c708 <__multadd>
 800c7f0:	45a0      	cmp	r8, r4
 800c7f2:	d1f5      	bne.n	800c7e0 <__s2b+0x4c>
 800c7f4:	f1a5 0408 	sub.w	r4, r5, #8
 800c7f8:	444c      	add	r4, r9
 800c7fa:	1b2d      	subs	r5, r5, r4
 800c7fc:	1963      	adds	r3, r4, r5
 800c7fe:	42bb      	cmp	r3, r7
 800c800:	db04      	blt.n	800c80c <__s2b+0x78>
 800c802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c806:	2509      	movs	r5, #9
 800c808:	340a      	adds	r4, #10
 800c80a:	e7f6      	b.n	800c7fa <__s2b+0x66>
 800c80c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c810:	4601      	mov	r1, r0
 800c812:	220a      	movs	r2, #10
 800c814:	4630      	mov	r0, r6
 800c816:	3b30      	subs	r3, #48	; 0x30
 800c818:	f7ff ff76 	bl	800c708 <__multadd>
 800c81c:	e7ee      	b.n	800c7fc <__s2b+0x68>
 800c81e:	bf00      	nop
 800c820:	0800ea90 	.word	0x0800ea90
 800c824:	0800eb1c 	.word	0x0800eb1c

0800c828 <__hi0bits>:
 800c828:	0c02      	lsrs	r2, r0, #16
 800c82a:	0412      	lsls	r2, r2, #16
 800c82c:	4603      	mov	r3, r0
 800c82e:	b9ca      	cbnz	r2, 800c864 <__hi0bits+0x3c>
 800c830:	0403      	lsls	r3, r0, #16
 800c832:	2010      	movs	r0, #16
 800c834:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c838:	bf04      	itt	eq
 800c83a:	021b      	lsleq	r3, r3, #8
 800c83c:	3008      	addeq	r0, #8
 800c83e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c842:	bf04      	itt	eq
 800c844:	011b      	lsleq	r3, r3, #4
 800c846:	3004      	addeq	r0, #4
 800c848:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c84c:	bf04      	itt	eq
 800c84e:	009b      	lsleq	r3, r3, #2
 800c850:	3002      	addeq	r0, #2
 800c852:	2b00      	cmp	r3, #0
 800c854:	db05      	blt.n	800c862 <__hi0bits+0x3a>
 800c856:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c85a:	f100 0001 	add.w	r0, r0, #1
 800c85e:	bf08      	it	eq
 800c860:	2020      	moveq	r0, #32
 800c862:	4770      	bx	lr
 800c864:	2000      	movs	r0, #0
 800c866:	e7e5      	b.n	800c834 <__hi0bits+0xc>

0800c868 <__lo0bits>:
 800c868:	6803      	ldr	r3, [r0, #0]
 800c86a:	4602      	mov	r2, r0
 800c86c:	f013 0007 	ands.w	r0, r3, #7
 800c870:	d00b      	beq.n	800c88a <__lo0bits+0x22>
 800c872:	07d9      	lsls	r1, r3, #31
 800c874:	d421      	bmi.n	800c8ba <__lo0bits+0x52>
 800c876:	0798      	lsls	r0, r3, #30
 800c878:	bf49      	itett	mi
 800c87a:	085b      	lsrmi	r3, r3, #1
 800c87c:	089b      	lsrpl	r3, r3, #2
 800c87e:	2001      	movmi	r0, #1
 800c880:	6013      	strmi	r3, [r2, #0]
 800c882:	bf5c      	itt	pl
 800c884:	2002      	movpl	r0, #2
 800c886:	6013      	strpl	r3, [r2, #0]
 800c888:	4770      	bx	lr
 800c88a:	b299      	uxth	r1, r3
 800c88c:	b909      	cbnz	r1, 800c892 <__lo0bits+0x2a>
 800c88e:	2010      	movs	r0, #16
 800c890:	0c1b      	lsrs	r3, r3, #16
 800c892:	b2d9      	uxtb	r1, r3
 800c894:	b909      	cbnz	r1, 800c89a <__lo0bits+0x32>
 800c896:	3008      	adds	r0, #8
 800c898:	0a1b      	lsrs	r3, r3, #8
 800c89a:	0719      	lsls	r1, r3, #28
 800c89c:	bf04      	itt	eq
 800c89e:	091b      	lsreq	r3, r3, #4
 800c8a0:	3004      	addeq	r0, #4
 800c8a2:	0799      	lsls	r1, r3, #30
 800c8a4:	bf04      	itt	eq
 800c8a6:	089b      	lsreq	r3, r3, #2
 800c8a8:	3002      	addeq	r0, #2
 800c8aa:	07d9      	lsls	r1, r3, #31
 800c8ac:	d403      	bmi.n	800c8b6 <__lo0bits+0x4e>
 800c8ae:	085b      	lsrs	r3, r3, #1
 800c8b0:	f100 0001 	add.w	r0, r0, #1
 800c8b4:	d003      	beq.n	800c8be <__lo0bits+0x56>
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	4770      	bx	lr
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	4770      	bx	lr
 800c8be:	2020      	movs	r0, #32
 800c8c0:	4770      	bx	lr
	...

0800c8c4 <__i2b>:
 800c8c4:	b510      	push	{r4, lr}
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	f7ff febb 	bl	800c644 <_Balloc>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	b928      	cbnz	r0, 800c8de <__i2b+0x1a>
 800c8d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8d6:	4b04      	ldr	r3, [pc, #16]	; (800c8e8 <__i2b+0x24>)
 800c8d8:	4804      	ldr	r0, [pc, #16]	; (800c8ec <__i2b+0x28>)
 800c8da:	f000 fdef 	bl	800d4bc <__assert_func>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	6144      	str	r4, [r0, #20]
 800c8e2:	6103      	str	r3, [r0, #16]
 800c8e4:	bd10      	pop	{r4, pc}
 800c8e6:	bf00      	nop
 800c8e8:	0800ea90 	.word	0x0800ea90
 800c8ec:	0800eb1c 	.word	0x0800eb1c

0800c8f0 <__multiply>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	4691      	mov	r9, r2
 800c8f6:	690a      	ldr	r2, [r1, #16]
 800c8f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	429a      	cmp	r2, r3
 800c900:	bfbe      	ittt	lt
 800c902:	460b      	movlt	r3, r1
 800c904:	464c      	movlt	r4, r9
 800c906:	4699      	movlt	r9, r3
 800c908:	6927      	ldr	r7, [r4, #16]
 800c90a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c90e:	68a3      	ldr	r3, [r4, #8]
 800c910:	6861      	ldr	r1, [r4, #4]
 800c912:	eb07 060a 	add.w	r6, r7, sl
 800c916:	42b3      	cmp	r3, r6
 800c918:	b085      	sub	sp, #20
 800c91a:	bfb8      	it	lt
 800c91c:	3101      	addlt	r1, #1
 800c91e:	f7ff fe91 	bl	800c644 <_Balloc>
 800c922:	b930      	cbnz	r0, 800c932 <__multiply+0x42>
 800c924:	4602      	mov	r2, r0
 800c926:	f240 115d 	movw	r1, #349	; 0x15d
 800c92a:	4b43      	ldr	r3, [pc, #268]	; (800ca38 <__multiply+0x148>)
 800c92c:	4843      	ldr	r0, [pc, #268]	; (800ca3c <__multiply+0x14c>)
 800c92e:	f000 fdc5 	bl	800d4bc <__assert_func>
 800c932:	f100 0514 	add.w	r5, r0, #20
 800c936:	462b      	mov	r3, r5
 800c938:	2200      	movs	r2, #0
 800c93a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c93e:	4543      	cmp	r3, r8
 800c940:	d321      	bcc.n	800c986 <__multiply+0x96>
 800c942:	f104 0314 	add.w	r3, r4, #20
 800c946:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c94a:	f109 0314 	add.w	r3, r9, #20
 800c94e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c952:	9202      	str	r2, [sp, #8]
 800c954:	1b3a      	subs	r2, r7, r4
 800c956:	3a15      	subs	r2, #21
 800c958:	f022 0203 	bic.w	r2, r2, #3
 800c95c:	3204      	adds	r2, #4
 800c95e:	f104 0115 	add.w	r1, r4, #21
 800c962:	428f      	cmp	r7, r1
 800c964:	bf38      	it	cc
 800c966:	2204      	movcc	r2, #4
 800c968:	9201      	str	r2, [sp, #4]
 800c96a:	9a02      	ldr	r2, [sp, #8]
 800c96c:	9303      	str	r3, [sp, #12]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d80c      	bhi.n	800c98c <__multiply+0x9c>
 800c972:	2e00      	cmp	r6, #0
 800c974:	dd03      	ble.n	800c97e <__multiply+0x8e>
 800c976:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d059      	beq.n	800ca32 <__multiply+0x142>
 800c97e:	6106      	str	r6, [r0, #16]
 800c980:	b005      	add	sp, #20
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	f843 2b04 	str.w	r2, [r3], #4
 800c98a:	e7d8      	b.n	800c93e <__multiply+0x4e>
 800c98c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c990:	f1ba 0f00 	cmp.w	sl, #0
 800c994:	d023      	beq.n	800c9de <__multiply+0xee>
 800c996:	46a9      	mov	r9, r5
 800c998:	f04f 0c00 	mov.w	ip, #0
 800c99c:	f104 0e14 	add.w	lr, r4, #20
 800c9a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c9a4:	f8d9 1000 	ldr.w	r1, [r9]
 800c9a8:	fa1f fb82 	uxth.w	fp, r2
 800c9ac:	b289      	uxth	r1, r1
 800c9ae:	fb0a 110b 	mla	r1, sl, fp, r1
 800c9b2:	4461      	add	r1, ip
 800c9b4:	f8d9 c000 	ldr.w	ip, [r9]
 800c9b8:	0c12      	lsrs	r2, r2, #16
 800c9ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c9be:	fb0a c202 	mla	r2, sl, r2, ip
 800c9c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9c6:	b289      	uxth	r1, r1
 800c9c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c9cc:	4577      	cmp	r7, lr
 800c9ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c9d2:	f849 1b04 	str.w	r1, [r9], #4
 800c9d6:	d8e3      	bhi.n	800c9a0 <__multiply+0xb0>
 800c9d8:	9a01      	ldr	r2, [sp, #4]
 800c9da:	f845 c002 	str.w	ip, [r5, r2]
 800c9de:	9a03      	ldr	r2, [sp, #12]
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9e6:	f1b9 0f00 	cmp.w	r9, #0
 800c9ea:	d020      	beq.n	800ca2e <__multiply+0x13e>
 800c9ec:	46ae      	mov	lr, r5
 800c9ee:	f04f 0a00 	mov.w	sl, #0
 800c9f2:	6829      	ldr	r1, [r5, #0]
 800c9f4:	f104 0c14 	add.w	ip, r4, #20
 800c9f8:	f8bc b000 	ldrh.w	fp, [ip]
 800c9fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca00:	b289      	uxth	r1, r1
 800ca02:	fb09 220b 	mla	r2, r9, fp, r2
 800ca06:	4492      	add	sl, r2
 800ca08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ca0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ca10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca14:	f8be 1000 	ldrh.w	r1, [lr]
 800ca18:	0c12      	lsrs	r2, r2, #16
 800ca1a:	fb09 1102 	mla	r1, r9, r2, r1
 800ca1e:	4567      	cmp	r7, ip
 800ca20:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ca24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca28:	d8e6      	bhi.n	800c9f8 <__multiply+0x108>
 800ca2a:	9a01      	ldr	r2, [sp, #4]
 800ca2c:	50a9      	str	r1, [r5, r2]
 800ca2e:	3504      	adds	r5, #4
 800ca30:	e79b      	b.n	800c96a <__multiply+0x7a>
 800ca32:	3e01      	subs	r6, #1
 800ca34:	e79d      	b.n	800c972 <__multiply+0x82>
 800ca36:	bf00      	nop
 800ca38:	0800ea90 	.word	0x0800ea90
 800ca3c:	0800eb1c 	.word	0x0800eb1c

0800ca40 <__pow5mult>:
 800ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	4615      	mov	r5, r2
 800ca46:	f012 0203 	ands.w	r2, r2, #3
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	d007      	beq.n	800ca60 <__pow5mult+0x20>
 800ca50:	4c25      	ldr	r4, [pc, #148]	; (800cae8 <__pow5mult+0xa8>)
 800ca52:	3a01      	subs	r2, #1
 800ca54:	2300      	movs	r3, #0
 800ca56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca5a:	f7ff fe55 	bl	800c708 <__multadd>
 800ca5e:	4607      	mov	r7, r0
 800ca60:	10ad      	asrs	r5, r5, #2
 800ca62:	d03d      	beq.n	800cae0 <__pow5mult+0xa0>
 800ca64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca66:	b97c      	cbnz	r4, 800ca88 <__pow5mult+0x48>
 800ca68:	2010      	movs	r0, #16
 800ca6a:	f7ff fdb5 	bl	800c5d8 <malloc>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	6270      	str	r0, [r6, #36]	; 0x24
 800ca72:	b928      	cbnz	r0, 800ca80 <__pow5mult+0x40>
 800ca74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca78:	4b1c      	ldr	r3, [pc, #112]	; (800caec <__pow5mult+0xac>)
 800ca7a:	481d      	ldr	r0, [pc, #116]	; (800caf0 <__pow5mult+0xb0>)
 800ca7c:	f000 fd1e 	bl	800d4bc <__assert_func>
 800ca80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca84:	6004      	str	r4, [r0, #0]
 800ca86:	60c4      	str	r4, [r0, #12]
 800ca88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca90:	b94c      	cbnz	r4, 800caa6 <__pow5mult+0x66>
 800ca92:	f240 2171 	movw	r1, #625	; 0x271
 800ca96:	4630      	mov	r0, r6
 800ca98:	f7ff ff14 	bl	800c8c4 <__i2b>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4604      	mov	r4, r0
 800caa0:	f8c8 0008 	str.w	r0, [r8, #8]
 800caa4:	6003      	str	r3, [r0, #0]
 800caa6:	f04f 0900 	mov.w	r9, #0
 800caaa:	07eb      	lsls	r3, r5, #31
 800caac:	d50a      	bpl.n	800cac4 <__pow5mult+0x84>
 800caae:	4639      	mov	r1, r7
 800cab0:	4622      	mov	r2, r4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7ff ff1c 	bl	800c8f0 <__multiply>
 800cab8:	4680      	mov	r8, r0
 800caba:	4639      	mov	r1, r7
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7ff fe01 	bl	800c6c4 <_Bfree>
 800cac2:	4647      	mov	r7, r8
 800cac4:	106d      	asrs	r5, r5, #1
 800cac6:	d00b      	beq.n	800cae0 <__pow5mult+0xa0>
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	b938      	cbnz	r0, 800cadc <__pow5mult+0x9c>
 800cacc:	4622      	mov	r2, r4
 800cace:	4621      	mov	r1, r4
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7ff ff0d 	bl	800c8f0 <__multiply>
 800cad6:	6020      	str	r0, [r4, #0]
 800cad8:	f8c0 9000 	str.w	r9, [r0]
 800cadc:	4604      	mov	r4, r0
 800cade:	e7e4      	b.n	800caaa <__pow5mult+0x6a>
 800cae0:	4638      	mov	r0, r7
 800cae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cae6:	bf00      	nop
 800cae8:	0800ec68 	.word	0x0800ec68
 800caec:	0800ea1e 	.word	0x0800ea1e
 800caf0:	0800eb1c 	.word	0x0800eb1c

0800caf4 <__lshift>:
 800caf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	4607      	mov	r7, r0
 800cafc:	4691      	mov	r9, r2
 800cafe:	6923      	ldr	r3, [r4, #16]
 800cb00:	6849      	ldr	r1, [r1, #4]
 800cb02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb0c:	f108 0601 	add.w	r6, r8, #1
 800cb10:	42b3      	cmp	r3, r6
 800cb12:	db0b      	blt.n	800cb2c <__lshift+0x38>
 800cb14:	4638      	mov	r0, r7
 800cb16:	f7ff fd95 	bl	800c644 <_Balloc>
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	b948      	cbnz	r0, 800cb32 <__lshift+0x3e>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb24:	4b29      	ldr	r3, [pc, #164]	; (800cbcc <__lshift+0xd8>)
 800cb26:	482a      	ldr	r0, [pc, #168]	; (800cbd0 <__lshift+0xdc>)
 800cb28:	f000 fcc8 	bl	800d4bc <__assert_func>
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	e7ee      	b.n	800cb10 <__lshift+0x1c>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f100 0114 	add.w	r1, r0, #20
 800cb38:	f100 0210 	add.w	r2, r0, #16
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	4553      	cmp	r3, sl
 800cb40:	db37      	blt.n	800cbb2 <__lshift+0xbe>
 800cb42:	6920      	ldr	r0, [r4, #16]
 800cb44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb48:	f104 0314 	add.w	r3, r4, #20
 800cb4c:	f019 091f 	ands.w	r9, r9, #31
 800cb50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb58:	d02f      	beq.n	800cbba <__lshift+0xc6>
 800cb5a:	468a      	mov	sl, r1
 800cb5c:	f04f 0c00 	mov.w	ip, #0
 800cb60:	f1c9 0e20 	rsb	lr, r9, #32
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	fa02 f209 	lsl.w	r2, r2, r9
 800cb6a:	ea42 020c 	orr.w	r2, r2, ip
 800cb6e:	f84a 2b04 	str.w	r2, [sl], #4
 800cb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb76:	4298      	cmp	r0, r3
 800cb78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cb7c:	d8f2      	bhi.n	800cb64 <__lshift+0x70>
 800cb7e:	1b03      	subs	r3, r0, r4
 800cb80:	3b15      	subs	r3, #21
 800cb82:	f023 0303 	bic.w	r3, r3, #3
 800cb86:	3304      	adds	r3, #4
 800cb88:	f104 0215 	add.w	r2, r4, #21
 800cb8c:	4290      	cmp	r0, r2
 800cb8e:	bf38      	it	cc
 800cb90:	2304      	movcc	r3, #4
 800cb92:	f841 c003 	str.w	ip, [r1, r3]
 800cb96:	f1bc 0f00 	cmp.w	ip, #0
 800cb9a:	d001      	beq.n	800cba0 <__lshift+0xac>
 800cb9c:	f108 0602 	add.w	r6, r8, #2
 800cba0:	3e01      	subs	r6, #1
 800cba2:	4638      	mov	r0, r7
 800cba4:	4621      	mov	r1, r4
 800cba6:	612e      	str	r6, [r5, #16]
 800cba8:	f7ff fd8c 	bl	800c6c4 <_Bfree>
 800cbac:	4628      	mov	r0, r5
 800cbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	e7c1      	b.n	800cb3e <__lshift+0x4a>
 800cbba:	3904      	subs	r1, #4
 800cbbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc0:	4298      	cmp	r0, r3
 800cbc2:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbc6:	d8f9      	bhi.n	800cbbc <__lshift+0xc8>
 800cbc8:	e7ea      	b.n	800cba0 <__lshift+0xac>
 800cbca:	bf00      	nop
 800cbcc:	0800ea90 	.word	0x0800ea90
 800cbd0:	0800eb1c 	.word	0x0800eb1c

0800cbd4 <__mcmp>:
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	690a      	ldr	r2, [r1, #16]
 800cbd8:	6900      	ldr	r0, [r0, #16]
 800cbda:	b530      	push	{r4, r5, lr}
 800cbdc:	1a80      	subs	r0, r0, r2
 800cbde:	d10d      	bne.n	800cbfc <__mcmp+0x28>
 800cbe0:	3314      	adds	r3, #20
 800cbe2:	3114      	adds	r1, #20
 800cbe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cbe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cbec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cbf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbf4:	4295      	cmp	r5, r2
 800cbf6:	d002      	beq.n	800cbfe <__mcmp+0x2a>
 800cbf8:	d304      	bcc.n	800cc04 <__mcmp+0x30>
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	bd30      	pop	{r4, r5, pc}
 800cbfe:	42a3      	cmp	r3, r4
 800cc00:	d3f4      	bcc.n	800cbec <__mcmp+0x18>
 800cc02:	e7fb      	b.n	800cbfc <__mcmp+0x28>
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	e7f8      	b.n	800cbfc <__mcmp+0x28>
	...

0800cc0c <__mdiff>:
 800cc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	460d      	mov	r5, r1
 800cc12:	4607      	mov	r7, r0
 800cc14:	4611      	mov	r1, r2
 800cc16:	4628      	mov	r0, r5
 800cc18:	4614      	mov	r4, r2
 800cc1a:	f7ff ffdb 	bl	800cbd4 <__mcmp>
 800cc1e:	1e06      	subs	r6, r0, #0
 800cc20:	d111      	bne.n	800cc46 <__mdiff+0x3a>
 800cc22:	4631      	mov	r1, r6
 800cc24:	4638      	mov	r0, r7
 800cc26:	f7ff fd0d 	bl	800c644 <_Balloc>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	b928      	cbnz	r0, 800cc3a <__mdiff+0x2e>
 800cc2e:	f240 2132 	movw	r1, #562	; 0x232
 800cc32:	4b3a      	ldr	r3, [pc, #232]	; (800cd1c <__mdiff+0x110>)
 800cc34:	483a      	ldr	r0, [pc, #232]	; (800cd20 <__mdiff+0x114>)
 800cc36:	f000 fc41 	bl	800d4bc <__assert_func>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cc40:	4610      	mov	r0, r2
 800cc42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc46:	bfa4      	itt	ge
 800cc48:	4623      	movge	r3, r4
 800cc4a:	462c      	movge	r4, r5
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	6861      	ldr	r1, [r4, #4]
 800cc50:	bfa6      	itte	ge
 800cc52:	461d      	movge	r5, r3
 800cc54:	2600      	movge	r6, #0
 800cc56:	2601      	movlt	r6, #1
 800cc58:	f7ff fcf4 	bl	800c644 <_Balloc>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	b918      	cbnz	r0, 800cc68 <__mdiff+0x5c>
 800cc60:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc64:	4b2d      	ldr	r3, [pc, #180]	; (800cd1c <__mdiff+0x110>)
 800cc66:	e7e5      	b.n	800cc34 <__mdiff+0x28>
 800cc68:	f102 0814 	add.w	r8, r2, #20
 800cc6c:	46c2      	mov	sl, r8
 800cc6e:	f04f 0c00 	mov.w	ip, #0
 800cc72:	6927      	ldr	r7, [r4, #16]
 800cc74:	60c6      	str	r6, [r0, #12]
 800cc76:	692e      	ldr	r6, [r5, #16]
 800cc78:	f104 0014 	add.w	r0, r4, #20
 800cc7c:	f105 0914 	add.w	r9, r5, #20
 800cc80:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800cc84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc88:	3410      	adds	r4, #16
 800cc8a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800cc8e:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc92:	fa1f f18b 	uxth.w	r1, fp
 800cc96:	448c      	add	ip, r1
 800cc98:	b299      	uxth	r1, r3
 800cc9a:	0c1b      	lsrs	r3, r3, #16
 800cc9c:	ebac 0101 	sub.w	r1, ip, r1
 800cca0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cca4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cca8:	b289      	uxth	r1, r1
 800ccaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ccae:	454e      	cmp	r6, r9
 800ccb0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ccb4:	f84a 3b04 	str.w	r3, [sl], #4
 800ccb8:	d8e7      	bhi.n	800cc8a <__mdiff+0x7e>
 800ccba:	1b73      	subs	r3, r6, r5
 800ccbc:	3b15      	subs	r3, #21
 800ccbe:	f023 0303 	bic.w	r3, r3, #3
 800ccc2:	3515      	adds	r5, #21
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	42ae      	cmp	r6, r5
 800ccc8:	bf38      	it	cc
 800ccca:	2304      	movcc	r3, #4
 800cccc:	4418      	add	r0, r3
 800ccce:	4443      	add	r3, r8
 800ccd0:	461e      	mov	r6, r3
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	4575      	cmp	r5, lr
 800ccd6:	d30e      	bcc.n	800ccf6 <__mdiff+0xea>
 800ccd8:	f10e 0103 	add.w	r1, lr, #3
 800ccdc:	1a09      	subs	r1, r1, r0
 800ccde:	f021 0103 	bic.w	r1, r1, #3
 800cce2:	3803      	subs	r0, #3
 800cce4:	4586      	cmp	lr, r0
 800cce6:	bf38      	it	cc
 800cce8:	2100      	movcc	r1, #0
 800ccea:	4419      	add	r1, r3
 800ccec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ccf0:	b18b      	cbz	r3, 800cd16 <__mdiff+0x10a>
 800ccf2:	6117      	str	r7, [r2, #16]
 800ccf4:	e7a4      	b.n	800cc40 <__mdiff+0x34>
 800ccf6:	f855 8b04 	ldr.w	r8, [r5], #4
 800ccfa:	fa1f f188 	uxth.w	r1, r8
 800ccfe:	4461      	add	r1, ip
 800cd00:	140c      	asrs	r4, r1, #16
 800cd02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd06:	b289      	uxth	r1, r1
 800cd08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cd0c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cd10:	f846 1b04 	str.w	r1, [r6], #4
 800cd14:	e7de      	b.n	800ccd4 <__mdiff+0xc8>
 800cd16:	3f01      	subs	r7, #1
 800cd18:	e7e8      	b.n	800ccec <__mdiff+0xe0>
 800cd1a:	bf00      	nop
 800cd1c:	0800ea90 	.word	0x0800ea90
 800cd20:	0800eb1c 	.word	0x0800eb1c

0800cd24 <__ulp>:
 800cd24:	4b11      	ldr	r3, [pc, #68]	; (800cd6c <__ulp+0x48>)
 800cd26:	400b      	ands	r3, r1
 800cd28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd02      	ble.n	800cd36 <__ulp+0x12>
 800cd30:	2000      	movs	r0, #0
 800cd32:	4619      	mov	r1, r3
 800cd34:	4770      	bx	lr
 800cd36:	425b      	negs	r3, r3
 800cd38:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cd3c:	f04f 0000 	mov.w	r0, #0
 800cd40:	f04f 0100 	mov.w	r1, #0
 800cd44:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd48:	da04      	bge.n	800cd54 <__ulp+0x30>
 800cd4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd4e:	fa43 f102 	asr.w	r1, r3, r2
 800cd52:	4770      	bx	lr
 800cd54:	f1a2 0314 	sub.w	r3, r2, #20
 800cd58:	2b1e      	cmp	r3, #30
 800cd5a:	bfd6      	itet	le
 800cd5c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cd60:	2301      	movgt	r3, #1
 800cd62:	fa22 f303 	lsrle.w	r3, r2, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	7ff00000 	.word	0x7ff00000

0800cd70 <__b2d>:
 800cd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd74:	6907      	ldr	r7, [r0, #16]
 800cd76:	f100 0914 	add.w	r9, r0, #20
 800cd7a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cd7e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cd82:	f1a7 0804 	sub.w	r8, r7, #4
 800cd86:	4630      	mov	r0, r6
 800cd88:	f7ff fd4e 	bl	800c828 <__hi0bits>
 800cd8c:	f1c0 0320 	rsb	r3, r0, #32
 800cd90:	280a      	cmp	r0, #10
 800cd92:	600b      	str	r3, [r1, #0]
 800cd94:	491f      	ldr	r1, [pc, #124]	; (800ce14 <__b2d+0xa4>)
 800cd96:	dc17      	bgt.n	800cdc8 <__b2d+0x58>
 800cd98:	45c1      	cmp	r9, r8
 800cd9a:	bf28      	it	cs
 800cd9c:	2200      	movcs	r2, #0
 800cd9e:	f1c0 0c0b 	rsb	ip, r0, #11
 800cda2:	fa26 f30c 	lsr.w	r3, r6, ip
 800cda6:	bf38      	it	cc
 800cda8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cdac:	ea43 0501 	orr.w	r5, r3, r1
 800cdb0:	f100 0315 	add.w	r3, r0, #21
 800cdb4:	fa06 f303 	lsl.w	r3, r6, r3
 800cdb8:	fa22 f20c 	lsr.w	r2, r2, ip
 800cdbc:	ea43 0402 	orr.w	r4, r3, r2
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc8:	45c1      	cmp	r9, r8
 800cdca:	bf2e      	itee	cs
 800cdcc:	2200      	movcs	r2, #0
 800cdce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cdd2:	f1a7 0808 	subcc.w	r8, r7, #8
 800cdd6:	f1b0 030b 	subs.w	r3, r0, #11
 800cdda:	d016      	beq.n	800ce0a <__b2d+0x9a>
 800cddc:	f1c3 0720 	rsb	r7, r3, #32
 800cde0:	fa22 f107 	lsr.w	r1, r2, r7
 800cde4:	45c8      	cmp	r8, r9
 800cde6:	fa06 f603 	lsl.w	r6, r6, r3
 800cdea:	ea46 0601 	orr.w	r6, r6, r1
 800cdee:	bf94      	ite	ls
 800cdf0:	2100      	movls	r1, #0
 800cdf2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cdf6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cdfa:	fa02 f003 	lsl.w	r0, r2, r3
 800cdfe:	40f9      	lsrs	r1, r7
 800ce00:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce04:	ea40 0401 	orr.w	r4, r0, r1
 800ce08:	e7da      	b.n	800cdc0 <__b2d+0x50>
 800ce0a:	4614      	mov	r4, r2
 800ce0c:	ea46 0501 	orr.w	r5, r6, r1
 800ce10:	e7d6      	b.n	800cdc0 <__b2d+0x50>
 800ce12:	bf00      	nop
 800ce14:	3ff00000 	.word	0x3ff00000

0800ce18 <__d2b>:
 800ce18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ce22:	4690      	mov	r8, r2
 800ce24:	461d      	mov	r5, r3
 800ce26:	f7ff fc0d 	bl	800c644 <_Balloc>
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	b930      	cbnz	r0, 800ce3c <__d2b+0x24>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	f240 310a 	movw	r1, #778	; 0x30a
 800ce34:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <__d2b+0xb0>)
 800ce36:	4825      	ldr	r0, [pc, #148]	; (800cecc <__d2b+0xb4>)
 800ce38:	f000 fb40 	bl	800d4bc <__assert_func>
 800ce3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ce40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ce44:	bb2d      	cbnz	r5, 800ce92 <__d2b+0x7a>
 800ce46:	9301      	str	r3, [sp, #4]
 800ce48:	f1b8 0300 	subs.w	r3, r8, #0
 800ce4c:	d026      	beq.n	800ce9c <__d2b+0x84>
 800ce4e:	4668      	mov	r0, sp
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	f7ff fd09 	bl	800c868 <__lo0bits>
 800ce56:	9900      	ldr	r1, [sp, #0]
 800ce58:	b1f0      	cbz	r0, 800ce98 <__d2b+0x80>
 800ce5a:	9a01      	ldr	r2, [sp, #4]
 800ce5c:	f1c0 0320 	rsb	r3, r0, #32
 800ce60:	fa02 f303 	lsl.w	r3, r2, r3
 800ce64:	430b      	orrs	r3, r1
 800ce66:	40c2      	lsrs	r2, r0
 800ce68:	6163      	str	r3, [r4, #20]
 800ce6a:	9201      	str	r2, [sp, #4]
 800ce6c:	9b01      	ldr	r3, [sp, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bf14      	ite	ne
 800ce72:	2102      	movne	r1, #2
 800ce74:	2101      	moveq	r1, #1
 800ce76:	61a3      	str	r3, [r4, #24]
 800ce78:	6121      	str	r1, [r4, #16]
 800ce7a:	b1c5      	cbz	r5, 800ceae <__d2b+0x96>
 800ce7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce80:	4405      	add	r5, r0
 800ce82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce86:	603d      	str	r5, [r7, #0]
 800ce88:	6030      	str	r0, [r6, #0]
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	b002      	add	sp, #8
 800ce8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce96:	e7d6      	b.n	800ce46 <__d2b+0x2e>
 800ce98:	6161      	str	r1, [r4, #20]
 800ce9a:	e7e7      	b.n	800ce6c <__d2b+0x54>
 800ce9c:	a801      	add	r0, sp, #4
 800ce9e:	f7ff fce3 	bl	800c868 <__lo0bits>
 800cea2:	2101      	movs	r1, #1
 800cea4:	9b01      	ldr	r3, [sp, #4]
 800cea6:	6121      	str	r1, [r4, #16]
 800cea8:	6163      	str	r3, [r4, #20]
 800ceaa:	3020      	adds	r0, #32
 800ceac:	e7e5      	b.n	800ce7a <__d2b+0x62>
 800ceae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ceb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ceb6:	6038      	str	r0, [r7, #0]
 800ceb8:	6918      	ldr	r0, [r3, #16]
 800ceba:	f7ff fcb5 	bl	800c828 <__hi0bits>
 800cebe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cec2:	6031      	str	r1, [r6, #0]
 800cec4:	e7e1      	b.n	800ce8a <__d2b+0x72>
 800cec6:	bf00      	nop
 800cec8:	0800ea90 	.word	0x0800ea90
 800cecc:	0800eb1c 	.word	0x0800eb1c

0800ced0 <__ratio>:
 800ced0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced4:	4688      	mov	r8, r1
 800ced6:	4669      	mov	r1, sp
 800ced8:	4681      	mov	r9, r0
 800ceda:	f7ff ff49 	bl	800cd70 <__b2d>
 800cede:	460f      	mov	r7, r1
 800cee0:	4604      	mov	r4, r0
 800cee2:	460d      	mov	r5, r1
 800cee4:	4640      	mov	r0, r8
 800cee6:	a901      	add	r1, sp, #4
 800cee8:	f7ff ff42 	bl	800cd70 <__b2d>
 800ceec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cef0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cef4:	468b      	mov	fp, r1
 800cef6:	eba3 0c02 	sub.w	ip, r3, r2
 800cefa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cefe:	1a9b      	subs	r3, r3, r2
 800cf00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfd5      	itete	le
 800cf08:	460a      	movle	r2, r1
 800cf0a:	462a      	movgt	r2, r5
 800cf0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf10:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf14:	bfd8      	it	le
 800cf16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cf1a:	465b      	mov	r3, fp
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	4639      	mov	r1, r7
 800cf20:	4620      	mov	r0, r4
 800cf22:	f7f3 fc03 	bl	800072c <__aeabi_ddiv>
 800cf26:	b003      	add	sp, #12
 800cf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf2c <__copybits>:
 800cf2c:	3901      	subs	r1, #1
 800cf2e:	b570      	push	{r4, r5, r6, lr}
 800cf30:	1149      	asrs	r1, r1, #5
 800cf32:	6914      	ldr	r4, [r2, #16]
 800cf34:	3101      	adds	r1, #1
 800cf36:	f102 0314 	add.w	r3, r2, #20
 800cf3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf42:	1f05      	subs	r5, r0, #4
 800cf44:	42a3      	cmp	r3, r4
 800cf46:	d30c      	bcc.n	800cf62 <__copybits+0x36>
 800cf48:	1aa3      	subs	r3, r4, r2
 800cf4a:	3b11      	subs	r3, #17
 800cf4c:	f023 0303 	bic.w	r3, r3, #3
 800cf50:	3211      	adds	r2, #17
 800cf52:	42a2      	cmp	r2, r4
 800cf54:	bf88      	it	hi
 800cf56:	2300      	movhi	r3, #0
 800cf58:	4418      	add	r0, r3
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4288      	cmp	r0, r1
 800cf5e:	d305      	bcc.n	800cf6c <__copybits+0x40>
 800cf60:	bd70      	pop	{r4, r5, r6, pc}
 800cf62:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf66:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf6a:	e7eb      	b.n	800cf44 <__copybits+0x18>
 800cf6c:	f840 3b04 	str.w	r3, [r0], #4
 800cf70:	e7f4      	b.n	800cf5c <__copybits+0x30>

0800cf72 <__any_on>:
 800cf72:	f100 0214 	add.w	r2, r0, #20
 800cf76:	6900      	ldr	r0, [r0, #16]
 800cf78:	114b      	asrs	r3, r1, #5
 800cf7a:	4298      	cmp	r0, r3
 800cf7c:	b510      	push	{r4, lr}
 800cf7e:	db11      	blt.n	800cfa4 <__any_on+0x32>
 800cf80:	dd0a      	ble.n	800cf98 <__any_on+0x26>
 800cf82:	f011 011f 	ands.w	r1, r1, #31
 800cf86:	d007      	beq.n	800cf98 <__any_on+0x26>
 800cf88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf8c:	fa24 f001 	lsr.w	r0, r4, r1
 800cf90:	fa00 f101 	lsl.w	r1, r0, r1
 800cf94:	428c      	cmp	r4, r1
 800cf96:	d10b      	bne.n	800cfb0 <__any_on+0x3e>
 800cf98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d803      	bhi.n	800cfa8 <__any_on+0x36>
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	bd10      	pop	{r4, pc}
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	e7f7      	b.n	800cf98 <__any_on+0x26>
 800cfa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d0f5      	beq.n	800cf9c <__any_on+0x2a>
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	e7f6      	b.n	800cfa2 <__any_on+0x30>

0800cfb4 <_calloc_r>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	fba1 5402 	umull	r5, r4, r1, r2
 800cfba:	b934      	cbnz	r4, 800cfca <_calloc_r+0x16>
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	f000 f875 	bl	800d0ac <_malloc_r>
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	b928      	cbnz	r0, 800cfd2 <_calloc_r+0x1e>
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	bd70      	pop	{r4, r5, r6, pc}
 800cfca:	220c      	movs	r2, #12
 800cfcc:	2600      	movs	r6, #0
 800cfce:	6002      	str	r2, [r0, #0]
 800cfd0:	e7f9      	b.n	800cfc6 <_calloc_r+0x12>
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	f7fc fbf1 	bl	80097bc <memset>
 800cfda:	e7f4      	b.n	800cfc6 <_calloc_r+0x12>

0800cfdc <_free_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4605      	mov	r5, r0
 800cfe0:	2900      	cmp	r1, #0
 800cfe2:	d040      	beq.n	800d066 <_free_r+0x8a>
 800cfe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfe8:	1f0c      	subs	r4, r1, #4
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	bfb8      	it	lt
 800cfee:	18e4      	addlt	r4, r4, r3
 800cff0:	f000 faae 	bl	800d550 <__malloc_lock>
 800cff4:	4a1c      	ldr	r2, [pc, #112]	; (800d068 <_free_r+0x8c>)
 800cff6:	6813      	ldr	r3, [r2, #0]
 800cff8:	b933      	cbnz	r3, 800d008 <_free_r+0x2c>
 800cffa:	6063      	str	r3, [r4, #4]
 800cffc:	6014      	str	r4, [r2, #0]
 800cffe:	4628      	mov	r0, r5
 800d000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d004:	f000 baaa 	b.w	800d55c <__malloc_unlock>
 800d008:	42a3      	cmp	r3, r4
 800d00a:	d908      	bls.n	800d01e <_free_r+0x42>
 800d00c:	6820      	ldr	r0, [r4, #0]
 800d00e:	1821      	adds	r1, r4, r0
 800d010:	428b      	cmp	r3, r1
 800d012:	bf01      	itttt	eq
 800d014:	6819      	ldreq	r1, [r3, #0]
 800d016:	685b      	ldreq	r3, [r3, #4]
 800d018:	1809      	addeq	r1, r1, r0
 800d01a:	6021      	streq	r1, [r4, #0]
 800d01c:	e7ed      	b.n	800cffa <_free_r+0x1e>
 800d01e:	461a      	mov	r2, r3
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	b10b      	cbz	r3, 800d028 <_free_r+0x4c>
 800d024:	42a3      	cmp	r3, r4
 800d026:	d9fa      	bls.n	800d01e <_free_r+0x42>
 800d028:	6811      	ldr	r1, [r2, #0]
 800d02a:	1850      	adds	r0, r2, r1
 800d02c:	42a0      	cmp	r0, r4
 800d02e:	d10b      	bne.n	800d048 <_free_r+0x6c>
 800d030:	6820      	ldr	r0, [r4, #0]
 800d032:	4401      	add	r1, r0
 800d034:	1850      	adds	r0, r2, r1
 800d036:	4283      	cmp	r3, r0
 800d038:	6011      	str	r1, [r2, #0]
 800d03a:	d1e0      	bne.n	800cffe <_free_r+0x22>
 800d03c:	6818      	ldr	r0, [r3, #0]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	4401      	add	r1, r0
 800d042:	6011      	str	r1, [r2, #0]
 800d044:	6053      	str	r3, [r2, #4]
 800d046:	e7da      	b.n	800cffe <_free_r+0x22>
 800d048:	d902      	bls.n	800d050 <_free_r+0x74>
 800d04a:	230c      	movs	r3, #12
 800d04c:	602b      	str	r3, [r5, #0]
 800d04e:	e7d6      	b.n	800cffe <_free_r+0x22>
 800d050:	6820      	ldr	r0, [r4, #0]
 800d052:	1821      	adds	r1, r4, r0
 800d054:	428b      	cmp	r3, r1
 800d056:	bf01      	itttt	eq
 800d058:	6819      	ldreq	r1, [r3, #0]
 800d05a:	685b      	ldreq	r3, [r3, #4]
 800d05c:	1809      	addeq	r1, r1, r0
 800d05e:	6021      	streq	r1, [r4, #0]
 800d060:	6063      	str	r3, [r4, #4]
 800d062:	6054      	str	r4, [r2, #4]
 800d064:	e7cb      	b.n	800cffe <_free_r+0x22>
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	20002d68 	.word	0x20002d68

0800d06c <sbrk_aligned>:
 800d06c:	b570      	push	{r4, r5, r6, lr}
 800d06e:	4e0e      	ldr	r6, [pc, #56]	; (800d0a8 <sbrk_aligned+0x3c>)
 800d070:	460c      	mov	r4, r1
 800d072:	6831      	ldr	r1, [r6, #0]
 800d074:	4605      	mov	r5, r0
 800d076:	b911      	cbnz	r1, 800d07e <sbrk_aligned+0x12>
 800d078:	f000 f9ee 	bl	800d458 <_sbrk_r>
 800d07c:	6030      	str	r0, [r6, #0]
 800d07e:	4621      	mov	r1, r4
 800d080:	4628      	mov	r0, r5
 800d082:	f000 f9e9 	bl	800d458 <_sbrk_r>
 800d086:	1c43      	adds	r3, r0, #1
 800d088:	d00a      	beq.n	800d0a0 <sbrk_aligned+0x34>
 800d08a:	1cc4      	adds	r4, r0, #3
 800d08c:	f024 0403 	bic.w	r4, r4, #3
 800d090:	42a0      	cmp	r0, r4
 800d092:	d007      	beq.n	800d0a4 <sbrk_aligned+0x38>
 800d094:	1a21      	subs	r1, r4, r0
 800d096:	4628      	mov	r0, r5
 800d098:	f000 f9de 	bl	800d458 <_sbrk_r>
 800d09c:	3001      	adds	r0, #1
 800d09e:	d101      	bne.n	800d0a4 <sbrk_aligned+0x38>
 800d0a0:	f04f 34ff 	mov.w	r4, #4294967295
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}
 800d0a8:	20002d6c 	.word	0x20002d6c

0800d0ac <_malloc_r>:
 800d0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b0:	1ccd      	adds	r5, r1, #3
 800d0b2:	f025 0503 	bic.w	r5, r5, #3
 800d0b6:	3508      	adds	r5, #8
 800d0b8:	2d0c      	cmp	r5, #12
 800d0ba:	bf38      	it	cc
 800d0bc:	250c      	movcc	r5, #12
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	db01      	blt.n	800d0c8 <_malloc_r+0x1c>
 800d0c4:	42a9      	cmp	r1, r5
 800d0c6:	d905      	bls.n	800d0d4 <_malloc_r+0x28>
 800d0c8:	230c      	movs	r3, #12
 800d0ca:	2600      	movs	r6, #0
 800d0cc:	603b      	str	r3, [r7, #0]
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d4:	4e2e      	ldr	r6, [pc, #184]	; (800d190 <_malloc_r+0xe4>)
 800d0d6:	f000 fa3b 	bl	800d550 <__malloc_lock>
 800d0da:	6833      	ldr	r3, [r6, #0]
 800d0dc:	461c      	mov	r4, r3
 800d0de:	bb34      	cbnz	r4, 800d12e <_malloc_r+0x82>
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	f7ff ffc2 	bl	800d06c <sbrk_aligned>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	d14d      	bne.n	800d18a <_malloc_r+0xde>
 800d0ee:	6834      	ldr	r4, [r6, #0]
 800d0f0:	4626      	mov	r6, r4
 800d0f2:	2e00      	cmp	r6, #0
 800d0f4:	d140      	bne.n	800d178 <_malloc_r+0xcc>
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	4631      	mov	r1, r6
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	eb04 0803 	add.w	r8, r4, r3
 800d100:	f000 f9aa 	bl	800d458 <_sbrk_r>
 800d104:	4580      	cmp	r8, r0
 800d106:	d13a      	bne.n	800d17e <_malloc_r+0xd2>
 800d108:	6821      	ldr	r1, [r4, #0]
 800d10a:	3503      	adds	r5, #3
 800d10c:	1a6d      	subs	r5, r5, r1
 800d10e:	f025 0503 	bic.w	r5, r5, #3
 800d112:	3508      	adds	r5, #8
 800d114:	2d0c      	cmp	r5, #12
 800d116:	bf38      	it	cc
 800d118:	250c      	movcc	r5, #12
 800d11a:	4638      	mov	r0, r7
 800d11c:	4629      	mov	r1, r5
 800d11e:	f7ff ffa5 	bl	800d06c <sbrk_aligned>
 800d122:	3001      	adds	r0, #1
 800d124:	d02b      	beq.n	800d17e <_malloc_r+0xd2>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	442b      	add	r3, r5
 800d12a:	6023      	str	r3, [r4, #0]
 800d12c:	e00e      	b.n	800d14c <_malloc_r+0xa0>
 800d12e:	6822      	ldr	r2, [r4, #0]
 800d130:	1b52      	subs	r2, r2, r5
 800d132:	d41e      	bmi.n	800d172 <_malloc_r+0xc6>
 800d134:	2a0b      	cmp	r2, #11
 800d136:	d916      	bls.n	800d166 <_malloc_r+0xba>
 800d138:	1961      	adds	r1, r4, r5
 800d13a:	42a3      	cmp	r3, r4
 800d13c:	6025      	str	r5, [r4, #0]
 800d13e:	bf18      	it	ne
 800d140:	6059      	strne	r1, [r3, #4]
 800d142:	6863      	ldr	r3, [r4, #4]
 800d144:	bf08      	it	eq
 800d146:	6031      	streq	r1, [r6, #0]
 800d148:	5162      	str	r2, [r4, r5]
 800d14a:	604b      	str	r3, [r1, #4]
 800d14c:	4638      	mov	r0, r7
 800d14e:	f104 060b 	add.w	r6, r4, #11
 800d152:	f000 fa03 	bl	800d55c <__malloc_unlock>
 800d156:	f026 0607 	bic.w	r6, r6, #7
 800d15a:	1d23      	adds	r3, r4, #4
 800d15c:	1af2      	subs	r2, r6, r3
 800d15e:	d0b6      	beq.n	800d0ce <_malloc_r+0x22>
 800d160:	1b9b      	subs	r3, r3, r6
 800d162:	50a3      	str	r3, [r4, r2]
 800d164:	e7b3      	b.n	800d0ce <_malloc_r+0x22>
 800d166:	6862      	ldr	r2, [r4, #4]
 800d168:	42a3      	cmp	r3, r4
 800d16a:	bf0c      	ite	eq
 800d16c:	6032      	streq	r2, [r6, #0]
 800d16e:	605a      	strne	r2, [r3, #4]
 800d170:	e7ec      	b.n	800d14c <_malloc_r+0xa0>
 800d172:	4623      	mov	r3, r4
 800d174:	6864      	ldr	r4, [r4, #4]
 800d176:	e7b2      	b.n	800d0de <_malloc_r+0x32>
 800d178:	4634      	mov	r4, r6
 800d17a:	6876      	ldr	r6, [r6, #4]
 800d17c:	e7b9      	b.n	800d0f2 <_malloc_r+0x46>
 800d17e:	230c      	movs	r3, #12
 800d180:	4638      	mov	r0, r7
 800d182:	603b      	str	r3, [r7, #0]
 800d184:	f000 f9ea 	bl	800d55c <__malloc_unlock>
 800d188:	e7a1      	b.n	800d0ce <_malloc_r+0x22>
 800d18a:	6025      	str	r5, [r4, #0]
 800d18c:	e7de      	b.n	800d14c <_malloc_r+0xa0>
 800d18e:	bf00      	nop
 800d190:	20002d68 	.word	0x20002d68

0800d194 <__ssputs_r>:
 800d194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	688e      	ldr	r6, [r1, #8]
 800d19a:	4682      	mov	sl, r0
 800d19c:	429e      	cmp	r6, r3
 800d19e:	460c      	mov	r4, r1
 800d1a0:	4690      	mov	r8, r2
 800d1a2:	461f      	mov	r7, r3
 800d1a4:	d838      	bhi.n	800d218 <__ssputs_r+0x84>
 800d1a6:	898a      	ldrh	r2, [r1, #12]
 800d1a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1ac:	d032      	beq.n	800d214 <__ssputs_r+0x80>
 800d1ae:	6825      	ldr	r5, [r4, #0]
 800d1b0:	6909      	ldr	r1, [r1, #16]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	eba5 0901 	sub.w	r9, r5, r1
 800d1b8:	6965      	ldr	r5, [r4, #20]
 800d1ba:	444b      	add	r3, r9
 800d1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1c4:	106d      	asrs	r5, r5, #1
 800d1c6:	429d      	cmp	r5, r3
 800d1c8:	bf38      	it	cc
 800d1ca:	461d      	movcc	r5, r3
 800d1cc:	0553      	lsls	r3, r2, #21
 800d1ce:	d531      	bpl.n	800d234 <__ssputs_r+0xa0>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7ff ff6b 	bl	800d0ac <_malloc_r>
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	b950      	cbnz	r0, 800d1f0 <__ssputs_r+0x5c>
 800d1da:	230c      	movs	r3, #12
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e0:	f8ca 3000 	str.w	r3, [sl]
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f0:	464a      	mov	r2, r9
 800d1f2:	6921      	ldr	r1, [r4, #16]
 800d1f4:	f7ff fa18 	bl	800c628 <memcpy>
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d202:	81a3      	strh	r3, [r4, #12]
 800d204:	6126      	str	r6, [r4, #16]
 800d206:	444e      	add	r6, r9
 800d208:	6026      	str	r6, [r4, #0]
 800d20a:	463e      	mov	r6, r7
 800d20c:	6165      	str	r5, [r4, #20]
 800d20e:	eba5 0509 	sub.w	r5, r5, r9
 800d212:	60a5      	str	r5, [r4, #8]
 800d214:	42be      	cmp	r6, r7
 800d216:	d900      	bls.n	800d21a <__ssputs_r+0x86>
 800d218:	463e      	mov	r6, r7
 800d21a:	4632      	mov	r2, r6
 800d21c:	4641      	mov	r1, r8
 800d21e:	6820      	ldr	r0, [r4, #0]
 800d220:	f000 f97c 	bl	800d51c <memmove>
 800d224:	68a3      	ldr	r3, [r4, #8]
 800d226:	2000      	movs	r0, #0
 800d228:	1b9b      	subs	r3, r3, r6
 800d22a:	60a3      	str	r3, [r4, #8]
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	4433      	add	r3, r6
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	e7db      	b.n	800d1ec <__ssputs_r+0x58>
 800d234:	462a      	mov	r2, r5
 800d236:	f000 f997 	bl	800d568 <_realloc_r>
 800d23a:	4606      	mov	r6, r0
 800d23c:	2800      	cmp	r0, #0
 800d23e:	d1e1      	bne.n	800d204 <__ssputs_r+0x70>
 800d240:	4650      	mov	r0, sl
 800d242:	6921      	ldr	r1, [r4, #16]
 800d244:	f7ff feca 	bl	800cfdc <_free_r>
 800d248:	e7c7      	b.n	800d1da <__ssputs_r+0x46>
	...

0800d24c <_svfiprintf_r>:
 800d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d250:	4698      	mov	r8, r3
 800d252:	898b      	ldrh	r3, [r1, #12]
 800d254:	4607      	mov	r7, r0
 800d256:	061b      	lsls	r3, r3, #24
 800d258:	460d      	mov	r5, r1
 800d25a:	4614      	mov	r4, r2
 800d25c:	b09d      	sub	sp, #116	; 0x74
 800d25e:	d50e      	bpl.n	800d27e <_svfiprintf_r+0x32>
 800d260:	690b      	ldr	r3, [r1, #16]
 800d262:	b963      	cbnz	r3, 800d27e <_svfiprintf_r+0x32>
 800d264:	2140      	movs	r1, #64	; 0x40
 800d266:	f7ff ff21 	bl	800d0ac <_malloc_r>
 800d26a:	6028      	str	r0, [r5, #0]
 800d26c:	6128      	str	r0, [r5, #16]
 800d26e:	b920      	cbnz	r0, 800d27a <_svfiprintf_r+0x2e>
 800d270:	230c      	movs	r3, #12
 800d272:	603b      	str	r3, [r7, #0]
 800d274:	f04f 30ff 	mov.w	r0, #4294967295
 800d278:	e0d1      	b.n	800d41e <_svfiprintf_r+0x1d2>
 800d27a:	2340      	movs	r3, #64	; 0x40
 800d27c:	616b      	str	r3, [r5, #20]
 800d27e:	2300      	movs	r3, #0
 800d280:	9309      	str	r3, [sp, #36]	; 0x24
 800d282:	2320      	movs	r3, #32
 800d284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d288:	2330      	movs	r3, #48	; 0x30
 800d28a:	f04f 0901 	mov.w	r9, #1
 800d28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d292:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d438 <_svfiprintf_r+0x1ec>
 800d296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d29a:	4623      	mov	r3, r4
 800d29c:	469a      	mov	sl, r3
 800d29e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2a2:	b10a      	cbz	r2, 800d2a8 <_svfiprintf_r+0x5c>
 800d2a4:	2a25      	cmp	r2, #37	; 0x25
 800d2a6:	d1f9      	bne.n	800d29c <_svfiprintf_r+0x50>
 800d2a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ac:	d00b      	beq.n	800d2c6 <_svfiprintf_r+0x7a>
 800d2ae:	465b      	mov	r3, fp
 800d2b0:	4622      	mov	r2, r4
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	f7ff ff6d 	bl	800d194 <__ssputs_r>
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	f000 80aa 	beq.w	800d414 <_svfiprintf_r+0x1c8>
 800d2c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2c2:	445a      	add	r2, fp
 800d2c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 80a2 	beq.w	800d414 <_svfiprintf_r+0x1c8>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2da:	f10a 0a01 	add.w	sl, sl, #1
 800d2de:	9304      	str	r3, [sp, #16]
 800d2e0:	9307      	str	r3, [sp, #28]
 800d2e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d2e8:	4654      	mov	r4, sl
 800d2ea:	2205      	movs	r2, #5
 800d2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f0:	4851      	ldr	r0, [pc, #324]	; (800d438 <_svfiprintf_r+0x1ec>)
 800d2f2:	f7ff f98b 	bl	800c60c <memchr>
 800d2f6:	9a04      	ldr	r2, [sp, #16]
 800d2f8:	b9d8      	cbnz	r0, 800d332 <_svfiprintf_r+0xe6>
 800d2fa:	06d0      	lsls	r0, r2, #27
 800d2fc:	bf44      	itt	mi
 800d2fe:	2320      	movmi	r3, #32
 800d300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d304:	0711      	lsls	r1, r2, #28
 800d306:	bf44      	itt	mi
 800d308:	232b      	movmi	r3, #43	; 0x2b
 800d30a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d30e:	f89a 3000 	ldrb.w	r3, [sl]
 800d312:	2b2a      	cmp	r3, #42	; 0x2a
 800d314:	d015      	beq.n	800d342 <_svfiprintf_r+0xf6>
 800d316:	4654      	mov	r4, sl
 800d318:	2000      	movs	r0, #0
 800d31a:	f04f 0c0a 	mov.w	ip, #10
 800d31e:	9a07      	ldr	r2, [sp, #28]
 800d320:	4621      	mov	r1, r4
 800d322:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d326:	3b30      	subs	r3, #48	; 0x30
 800d328:	2b09      	cmp	r3, #9
 800d32a:	d94e      	bls.n	800d3ca <_svfiprintf_r+0x17e>
 800d32c:	b1b0      	cbz	r0, 800d35c <_svfiprintf_r+0x110>
 800d32e:	9207      	str	r2, [sp, #28]
 800d330:	e014      	b.n	800d35c <_svfiprintf_r+0x110>
 800d332:	eba0 0308 	sub.w	r3, r0, r8
 800d336:	fa09 f303 	lsl.w	r3, r9, r3
 800d33a:	4313      	orrs	r3, r2
 800d33c:	46a2      	mov	sl, r4
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	e7d2      	b.n	800d2e8 <_svfiprintf_r+0x9c>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	1d19      	adds	r1, r3, #4
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	9103      	str	r1, [sp, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	bfbb      	ittet	lt
 800d34e:	425b      	neglt	r3, r3
 800d350:	f042 0202 	orrlt.w	r2, r2, #2
 800d354:	9307      	strge	r3, [sp, #28]
 800d356:	9307      	strlt	r3, [sp, #28]
 800d358:	bfb8      	it	lt
 800d35a:	9204      	strlt	r2, [sp, #16]
 800d35c:	7823      	ldrb	r3, [r4, #0]
 800d35e:	2b2e      	cmp	r3, #46	; 0x2e
 800d360:	d10c      	bne.n	800d37c <_svfiprintf_r+0x130>
 800d362:	7863      	ldrb	r3, [r4, #1]
 800d364:	2b2a      	cmp	r3, #42	; 0x2a
 800d366:	d135      	bne.n	800d3d4 <_svfiprintf_r+0x188>
 800d368:	9b03      	ldr	r3, [sp, #12]
 800d36a:	3402      	adds	r4, #2
 800d36c:	1d1a      	adds	r2, r3, #4
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	9203      	str	r2, [sp, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	bfb8      	it	lt
 800d376:	f04f 33ff 	movlt.w	r3, #4294967295
 800d37a:	9305      	str	r3, [sp, #20]
 800d37c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d43c <_svfiprintf_r+0x1f0>
 800d380:	2203      	movs	r2, #3
 800d382:	4650      	mov	r0, sl
 800d384:	7821      	ldrb	r1, [r4, #0]
 800d386:	f7ff f941 	bl	800c60c <memchr>
 800d38a:	b140      	cbz	r0, 800d39e <_svfiprintf_r+0x152>
 800d38c:	2340      	movs	r3, #64	; 0x40
 800d38e:	eba0 000a 	sub.w	r0, r0, sl
 800d392:	fa03 f000 	lsl.w	r0, r3, r0
 800d396:	9b04      	ldr	r3, [sp, #16]
 800d398:	3401      	adds	r4, #1
 800d39a:	4303      	orrs	r3, r0
 800d39c:	9304      	str	r3, [sp, #16]
 800d39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3a2:	2206      	movs	r2, #6
 800d3a4:	4826      	ldr	r0, [pc, #152]	; (800d440 <_svfiprintf_r+0x1f4>)
 800d3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3aa:	f7ff f92f 	bl	800c60c <memchr>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d038      	beq.n	800d424 <_svfiprintf_r+0x1d8>
 800d3b2:	4b24      	ldr	r3, [pc, #144]	; (800d444 <_svfiprintf_r+0x1f8>)
 800d3b4:	bb1b      	cbnz	r3, 800d3fe <_svfiprintf_r+0x1b2>
 800d3b6:	9b03      	ldr	r3, [sp, #12]
 800d3b8:	3307      	adds	r3, #7
 800d3ba:	f023 0307 	bic.w	r3, r3, #7
 800d3be:	3308      	adds	r3, #8
 800d3c0:	9303      	str	r3, [sp, #12]
 800d3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c4:	4433      	add	r3, r6
 800d3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3c8:	e767      	b.n	800d29a <_svfiprintf_r+0x4e>
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3d2:	e7a5      	b.n	800d320 <_svfiprintf_r+0xd4>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f04f 0c0a 	mov.w	ip, #10
 800d3da:	4619      	mov	r1, r3
 800d3dc:	3401      	adds	r4, #1
 800d3de:	9305      	str	r3, [sp, #20]
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3e6:	3a30      	subs	r2, #48	; 0x30
 800d3e8:	2a09      	cmp	r2, #9
 800d3ea:	d903      	bls.n	800d3f4 <_svfiprintf_r+0x1a8>
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d0c5      	beq.n	800d37c <_svfiprintf_r+0x130>
 800d3f0:	9105      	str	r1, [sp, #20]
 800d3f2:	e7c3      	b.n	800d37c <_svfiprintf_r+0x130>
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3fc:	e7f0      	b.n	800d3e0 <_svfiprintf_r+0x194>
 800d3fe:	ab03      	add	r3, sp, #12
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	462a      	mov	r2, r5
 800d404:	4638      	mov	r0, r7
 800d406:	4b10      	ldr	r3, [pc, #64]	; (800d448 <_svfiprintf_r+0x1fc>)
 800d408:	a904      	add	r1, sp, #16
 800d40a:	f7fc fa7d 	bl	8009908 <_printf_float>
 800d40e:	1c42      	adds	r2, r0, #1
 800d410:	4606      	mov	r6, r0
 800d412:	d1d6      	bne.n	800d3c2 <_svfiprintf_r+0x176>
 800d414:	89ab      	ldrh	r3, [r5, #12]
 800d416:	065b      	lsls	r3, r3, #25
 800d418:	f53f af2c 	bmi.w	800d274 <_svfiprintf_r+0x28>
 800d41c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d41e:	b01d      	add	sp, #116	; 0x74
 800d420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d424:	ab03      	add	r3, sp, #12
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	462a      	mov	r2, r5
 800d42a:	4638      	mov	r0, r7
 800d42c:	4b06      	ldr	r3, [pc, #24]	; (800d448 <_svfiprintf_r+0x1fc>)
 800d42e:	a904      	add	r1, sp, #16
 800d430:	f7fc fd06 	bl	8009e40 <_printf_i>
 800d434:	e7eb      	b.n	800d40e <_svfiprintf_r+0x1c2>
 800d436:	bf00      	nop
 800d438:	0800ec74 	.word	0x0800ec74
 800d43c:	0800ec7a 	.word	0x0800ec7a
 800d440:	0800ec7e 	.word	0x0800ec7e
 800d444:	08009909 	.word	0x08009909
 800d448:	0800d195 	.word	0x0800d195

0800d44c <nan>:
 800d44c:	2000      	movs	r0, #0
 800d44e:	4901      	ldr	r1, [pc, #4]	; (800d454 <nan+0x8>)
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	7ff80000 	.word	0x7ff80000

0800d458 <_sbrk_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	2300      	movs	r3, #0
 800d45c:	4d05      	ldr	r5, [pc, #20]	; (800d474 <_sbrk_r+0x1c>)
 800d45e:	4604      	mov	r4, r0
 800d460:	4608      	mov	r0, r1
 800d462:	602b      	str	r3, [r5, #0]
 800d464:	f7f5 faec 	bl	8002a40 <_sbrk>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d102      	bne.n	800d472 <_sbrk_r+0x1a>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	b103      	cbz	r3, 800d472 <_sbrk_r+0x1a>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd38      	pop	{r3, r4, r5, pc}
 800d474:	20002d70 	.word	0x20002d70

0800d478 <strncmp>:
 800d478:	4603      	mov	r3, r0
 800d47a:	b510      	push	{r4, lr}
 800d47c:	b172      	cbz	r2, 800d49c <strncmp+0x24>
 800d47e:	3901      	subs	r1, #1
 800d480:	1884      	adds	r4, r0, r2
 800d482:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d486:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d48a:	4290      	cmp	r0, r2
 800d48c:	d101      	bne.n	800d492 <strncmp+0x1a>
 800d48e:	42a3      	cmp	r3, r4
 800d490:	d101      	bne.n	800d496 <strncmp+0x1e>
 800d492:	1a80      	subs	r0, r0, r2
 800d494:	bd10      	pop	{r4, pc}
 800d496:	2800      	cmp	r0, #0
 800d498:	d1f3      	bne.n	800d482 <strncmp+0xa>
 800d49a:	e7fa      	b.n	800d492 <strncmp+0x1a>
 800d49c:	4610      	mov	r0, r2
 800d49e:	e7f9      	b.n	800d494 <strncmp+0x1c>

0800d4a0 <__ascii_wctomb>:
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	4608      	mov	r0, r1
 800d4a4:	b141      	cbz	r1, 800d4b8 <__ascii_wctomb+0x18>
 800d4a6:	2aff      	cmp	r2, #255	; 0xff
 800d4a8:	d904      	bls.n	800d4b4 <__ascii_wctomb+0x14>
 800d4aa:	228a      	movs	r2, #138	; 0x8a
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	601a      	str	r2, [r3, #0]
 800d4b2:	4770      	bx	lr
 800d4b4:	2001      	movs	r0, #1
 800d4b6:	700a      	strb	r2, [r1, #0]
 800d4b8:	4770      	bx	lr
	...

0800d4bc <__assert_func>:
 800d4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4be:	4614      	mov	r4, r2
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	4b09      	ldr	r3, [pc, #36]	; (800d4e8 <__assert_func+0x2c>)
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68d8      	ldr	r0, [r3, #12]
 800d4ca:	b14c      	cbz	r4, 800d4e0 <__assert_func+0x24>
 800d4cc:	4b07      	ldr	r3, [pc, #28]	; (800d4ec <__assert_func+0x30>)
 800d4ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4d2:	9100      	str	r1, [sp, #0]
 800d4d4:	462b      	mov	r3, r5
 800d4d6:	4906      	ldr	r1, [pc, #24]	; (800d4f0 <__assert_func+0x34>)
 800d4d8:	f000 f80e 	bl	800d4f8 <fiprintf>
 800d4dc:	f000 fa8a 	bl	800d9f4 <abort>
 800d4e0:	4b04      	ldr	r3, [pc, #16]	; (800d4f4 <__assert_func+0x38>)
 800d4e2:	461c      	mov	r4, r3
 800d4e4:	e7f3      	b.n	800d4ce <__assert_func+0x12>
 800d4e6:	bf00      	nop
 800d4e8:	20000038 	.word	0x20000038
 800d4ec:	0800ec85 	.word	0x0800ec85
 800d4f0:	0800ec92 	.word	0x0800ec92
 800d4f4:	0800ecc0 	.word	0x0800ecc0

0800d4f8 <fiprintf>:
 800d4f8:	b40e      	push	{r1, r2, r3}
 800d4fa:	b503      	push	{r0, r1, lr}
 800d4fc:	4601      	mov	r1, r0
 800d4fe:	ab03      	add	r3, sp, #12
 800d500:	4805      	ldr	r0, [pc, #20]	; (800d518 <fiprintf+0x20>)
 800d502:	f853 2b04 	ldr.w	r2, [r3], #4
 800d506:	6800      	ldr	r0, [r0, #0]
 800d508:	9301      	str	r3, [sp, #4]
 800d50a:	f000 f883 	bl	800d614 <_vfiprintf_r>
 800d50e:	b002      	add	sp, #8
 800d510:	f85d eb04 	ldr.w	lr, [sp], #4
 800d514:	b003      	add	sp, #12
 800d516:	4770      	bx	lr
 800d518:	20000038 	.word	0x20000038

0800d51c <memmove>:
 800d51c:	4288      	cmp	r0, r1
 800d51e:	b510      	push	{r4, lr}
 800d520:	eb01 0402 	add.w	r4, r1, r2
 800d524:	d902      	bls.n	800d52c <memmove+0x10>
 800d526:	4284      	cmp	r4, r0
 800d528:	4623      	mov	r3, r4
 800d52a:	d807      	bhi.n	800d53c <memmove+0x20>
 800d52c:	1e43      	subs	r3, r0, #1
 800d52e:	42a1      	cmp	r1, r4
 800d530:	d008      	beq.n	800d544 <memmove+0x28>
 800d532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d53a:	e7f8      	b.n	800d52e <memmove+0x12>
 800d53c:	4601      	mov	r1, r0
 800d53e:	4402      	add	r2, r0
 800d540:	428a      	cmp	r2, r1
 800d542:	d100      	bne.n	800d546 <memmove+0x2a>
 800d544:	bd10      	pop	{r4, pc}
 800d546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d54a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d54e:	e7f7      	b.n	800d540 <memmove+0x24>

0800d550 <__malloc_lock>:
 800d550:	4801      	ldr	r0, [pc, #4]	; (800d558 <__malloc_lock+0x8>)
 800d552:	f000 bc0b 	b.w	800dd6c <__retarget_lock_acquire_recursive>
 800d556:	bf00      	nop
 800d558:	20002d74 	.word	0x20002d74

0800d55c <__malloc_unlock>:
 800d55c:	4801      	ldr	r0, [pc, #4]	; (800d564 <__malloc_unlock+0x8>)
 800d55e:	f000 bc06 	b.w	800dd6e <__retarget_lock_release_recursive>
 800d562:	bf00      	nop
 800d564:	20002d74 	.word	0x20002d74

0800d568 <_realloc_r>:
 800d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56c:	4680      	mov	r8, r0
 800d56e:	4614      	mov	r4, r2
 800d570:	460e      	mov	r6, r1
 800d572:	b921      	cbnz	r1, 800d57e <_realloc_r+0x16>
 800d574:	4611      	mov	r1, r2
 800d576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d57a:	f7ff bd97 	b.w	800d0ac <_malloc_r>
 800d57e:	b92a      	cbnz	r2, 800d58c <_realloc_r+0x24>
 800d580:	f7ff fd2c 	bl	800cfdc <_free_r>
 800d584:	4625      	mov	r5, r4
 800d586:	4628      	mov	r0, r5
 800d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58c:	f000 fc56 	bl	800de3c <_malloc_usable_size_r>
 800d590:	4284      	cmp	r4, r0
 800d592:	4607      	mov	r7, r0
 800d594:	d802      	bhi.n	800d59c <_realloc_r+0x34>
 800d596:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d59a:	d812      	bhi.n	800d5c2 <_realloc_r+0x5a>
 800d59c:	4621      	mov	r1, r4
 800d59e:	4640      	mov	r0, r8
 800d5a0:	f7ff fd84 	bl	800d0ac <_malloc_r>
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d0ed      	beq.n	800d586 <_realloc_r+0x1e>
 800d5aa:	42bc      	cmp	r4, r7
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	bf28      	it	cs
 800d5b2:	463a      	movcs	r2, r7
 800d5b4:	f7ff f838 	bl	800c628 <memcpy>
 800d5b8:	4631      	mov	r1, r6
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	f7ff fd0e 	bl	800cfdc <_free_r>
 800d5c0:	e7e1      	b.n	800d586 <_realloc_r+0x1e>
 800d5c2:	4635      	mov	r5, r6
 800d5c4:	e7df      	b.n	800d586 <_realloc_r+0x1e>

0800d5c6 <__sfputc_r>:
 800d5c6:	6893      	ldr	r3, [r2, #8]
 800d5c8:	b410      	push	{r4}
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	6093      	str	r3, [r2, #8]
 800d5d0:	da07      	bge.n	800d5e2 <__sfputc_r+0x1c>
 800d5d2:	6994      	ldr	r4, [r2, #24]
 800d5d4:	42a3      	cmp	r3, r4
 800d5d6:	db01      	blt.n	800d5dc <__sfputc_r+0x16>
 800d5d8:	290a      	cmp	r1, #10
 800d5da:	d102      	bne.n	800d5e2 <__sfputc_r+0x1c>
 800d5dc:	bc10      	pop	{r4}
 800d5de:	f000 b949 	b.w	800d874 <__swbuf_r>
 800d5e2:	6813      	ldr	r3, [r2, #0]
 800d5e4:	1c58      	adds	r0, r3, #1
 800d5e6:	6010      	str	r0, [r2, #0]
 800d5e8:	7019      	strb	r1, [r3, #0]
 800d5ea:	4608      	mov	r0, r1
 800d5ec:	bc10      	pop	{r4}
 800d5ee:	4770      	bx	lr

0800d5f0 <__sfputs_r>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	460f      	mov	r7, r1
 800d5f6:	4614      	mov	r4, r2
 800d5f8:	18d5      	adds	r5, r2, r3
 800d5fa:	42ac      	cmp	r4, r5
 800d5fc:	d101      	bne.n	800d602 <__sfputs_r+0x12>
 800d5fe:	2000      	movs	r0, #0
 800d600:	e007      	b.n	800d612 <__sfputs_r+0x22>
 800d602:	463a      	mov	r2, r7
 800d604:	4630      	mov	r0, r6
 800d606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60a:	f7ff ffdc 	bl	800d5c6 <__sfputc_r>
 800d60e:	1c43      	adds	r3, r0, #1
 800d610:	d1f3      	bne.n	800d5fa <__sfputs_r+0xa>
 800d612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d614 <_vfiprintf_r>:
 800d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d618:	460d      	mov	r5, r1
 800d61a:	4614      	mov	r4, r2
 800d61c:	4698      	mov	r8, r3
 800d61e:	4606      	mov	r6, r0
 800d620:	b09d      	sub	sp, #116	; 0x74
 800d622:	b118      	cbz	r0, 800d62c <_vfiprintf_r+0x18>
 800d624:	6983      	ldr	r3, [r0, #24]
 800d626:	b90b      	cbnz	r3, 800d62c <_vfiprintf_r+0x18>
 800d628:	f000 fb02 	bl	800dc30 <__sinit>
 800d62c:	4b89      	ldr	r3, [pc, #548]	; (800d854 <_vfiprintf_r+0x240>)
 800d62e:	429d      	cmp	r5, r3
 800d630:	d11b      	bne.n	800d66a <_vfiprintf_r+0x56>
 800d632:	6875      	ldr	r5, [r6, #4]
 800d634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d636:	07d9      	lsls	r1, r3, #31
 800d638:	d405      	bmi.n	800d646 <_vfiprintf_r+0x32>
 800d63a:	89ab      	ldrh	r3, [r5, #12]
 800d63c:	059a      	lsls	r2, r3, #22
 800d63e:	d402      	bmi.n	800d646 <_vfiprintf_r+0x32>
 800d640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d642:	f000 fb93 	bl	800dd6c <__retarget_lock_acquire_recursive>
 800d646:	89ab      	ldrh	r3, [r5, #12]
 800d648:	071b      	lsls	r3, r3, #28
 800d64a:	d501      	bpl.n	800d650 <_vfiprintf_r+0x3c>
 800d64c:	692b      	ldr	r3, [r5, #16]
 800d64e:	b9eb      	cbnz	r3, 800d68c <_vfiprintf_r+0x78>
 800d650:	4629      	mov	r1, r5
 800d652:	4630      	mov	r0, r6
 800d654:	f000 f960 	bl	800d918 <__swsetup_r>
 800d658:	b1c0      	cbz	r0, 800d68c <_vfiprintf_r+0x78>
 800d65a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d65c:	07dc      	lsls	r4, r3, #31
 800d65e:	d50e      	bpl.n	800d67e <_vfiprintf_r+0x6a>
 800d660:	f04f 30ff 	mov.w	r0, #4294967295
 800d664:	b01d      	add	sp, #116	; 0x74
 800d666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66a:	4b7b      	ldr	r3, [pc, #492]	; (800d858 <_vfiprintf_r+0x244>)
 800d66c:	429d      	cmp	r5, r3
 800d66e:	d101      	bne.n	800d674 <_vfiprintf_r+0x60>
 800d670:	68b5      	ldr	r5, [r6, #8]
 800d672:	e7df      	b.n	800d634 <_vfiprintf_r+0x20>
 800d674:	4b79      	ldr	r3, [pc, #484]	; (800d85c <_vfiprintf_r+0x248>)
 800d676:	429d      	cmp	r5, r3
 800d678:	bf08      	it	eq
 800d67a:	68f5      	ldreq	r5, [r6, #12]
 800d67c:	e7da      	b.n	800d634 <_vfiprintf_r+0x20>
 800d67e:	89ab      	ldrh	r3, [r5, #12]
 800d680:	0598      	lsls	r0, r3, #22
 800d682:	d4ed      	bmi.n	800d660 <_vfiprintf_r+0x4c>
 800d684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d686:	f000 fb72 	bl	800dd6e <__retarget_lock_release_recursive>
 800d68a:	e7e9      	b.n	800d660 <_vfiprintf_r+0x4c>
 800d68c:	2300      	movs	r3, #0
 800d68e:	9309      	str	r3, [sp, #36]	; 0x24
 800d690:	2320      	movs	r3, #32
 800d692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d696:	2330      	movs	r3, #48	; 0x30
 800d698:	f04f 0901 	mov.w	r9, #1
 800d69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d860 <_vfiprintf_r+0x24c>
 800d6a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6a8:	4623      	mov	r3, r4
 800d6aa:	469a      	mov	sl, r3
 800d6ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b0:	b10a      	cbz	r2, 800d6b6 <_vfiprintf_r+0xa2>
 800d6b2:	2a25      	cmp	r2, #37	; 0x25
 800d6b4:	d1f9      	bne.n	800d6aa <_vfiprintf_r+0x96>
 800d6b6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ba:	d00b      	beq.n	800d6d4 <_vfiprintf_r+0xc0>
 800d6bc:	465b      	mov	r3, fp
 800d6be:	4622      	mov	r2, r4
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f7ff ff94 	bl	800d5f0 <__sfputs_r>
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	f000 80aa 	beq.w	800d822 <_vfiprintf_r+0x20e>
 800d6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6d0:	445a      	add	r2, fp
 800d6d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 80a2 	beq.w	800d822 <_vfiprintf_r+0x20e>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6e8:	f10a 0a01 	add.w	sl, sl, #1
 800d6ec:	9304      	str	r3, [sp, #16]
 800d6ee:	9307      	str	r3, [sp, #28]
 800d6f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6f4:	931a      	str	r3, [sp, #104]	; 0x68
 800d6f6:	4654      	mov	r4, sl
 800d6f8:	2205      	movs	r2, #5
 800d6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fe:	4858      	ldr	r0, [pc, #352]	; (800d860 <_vfiprintf_r+0x24c>)
 800d700:	f7fe ff84 	bl	800c60c <memchr>
 800d704:	9a04      	ldr	r2, [sp, #16]
 800d706:	b9d8      	cbnz	r0, 800d740 <_vfiprintf_r+0x12c>
 800d708:	06d1      	lsls	r1, r2, #27
 800d70a:	bf44      	itt	mi
 800d70c:	2320      	movmi	r3, #32
 800d70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d712:	0713      	lsls	r3, r2, #28
 800d714:	bf44      	itt	mi
 800d716:	232b      	movmi	r3, #43	; 0x2b
 800d718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d71c:	f89a 3000 	ldrb.w	r3, [sl]
 800d720:	2b2a      	cmp	r3, #42	; 0x2a
 800d722:	d015      	beq.n	800d750 <_vfiprintf_r+0x13c>
 800d724:	4654      	mov	r4, sl
 800d726:	2000      	movs	r0, #0
 800d728:	f04f 0c0a 	mov.w	ip, #10
 800d72c:	9a07      	ldr	r2, [sp, #28]
 800d72e:	4621      	mov	r1, r4
 800d730:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d734:	3b30      	subs	r3, #48	; 0x30
 800d736:	2b09      	cmp	r3, #9
 800d738:	d94e      	bls.n	800d7d8 <_vfiprintf_r+0x1c4>
 800d73a:	b1b0      	cbz	r0, 800d76a <_vfiprintf_r+0x156>
 800d73c:	9207      	str	r2, [sp, #28]
 800d73e:	e014      	b.n	800d76a <_vfiprintf_r+0x156>
 800d740:	eba0 0308 	sub.w	r3, r0, r8
 800d744:	fa09 f303 	lsl.w	r3, r9, r3
 800d748:	4313      	orrs	r3, r2
 800d74a:	46a2      	mov	sl, r4
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	e7d2      	b.n	800d6f6 <_vfiprintf_r+0xe2>
 800d750:	9b03      	ldr	r3, [sp, #12]
 800d752:	1d19      	adds	r1, r3, #4
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	9103      	str	r1, [sp, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	bfbb      	ittet	lt
 800d75c:	425b      	neglt	r3, r3
 800d75e:	f042 0202 	orrlt.w	r2, r2, #2
 800d762:	9307      	strge	r3, [sp, #28]
 800d764:	9307      	strlt	r3, [sp, #28]
 800d766:	bfb8      	it	lt
 800d768:	9204      	strlt	r2, [sp, #16]
 800d76a:	7823      	ldrb	r3, [r4, #0]
 800d76c:	2b2e      	cmp	r3, #46	; 0x2e
 800d76e:	d10c      	bne.n	800d78a <_vfiprintf_r+0x176>
 800d770:	7863      	ldrb	r3, [r4, #1]
 800d772:	2b2a      	cmp	r3, #42	; 0x2a
 800d774:	d135      	bne.n	800d7e2 <_vfiprintf_r+0x1ce>
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	3402      	adds	r4, #2
 800d77a:	1d1a      	adds	r2, r3, #4
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	9203      	str	r2, [sp, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	bfb8      	it	lt
 800d784:	f04f 33ff 	movlt.w	r3, #4294967295
 800d788:	9305      	str	r3, [sp, #20]
 800d78a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d864 <_vfiprintf_r+0x250>
 800d78e:	2203      	movs	r2, #3
 800d790:	4650      	mov	r0, sl
 800d792:	7821      	ldrb	r1, [r4, #0]
 800d794:	f7fe ff3a 	bl	800c60c <memchr>
 800d798:	b140      	cbz	r0, 800d7ac <_vfiprintf_r+0x198>
 800d79a:	2340      	movs	r3, #64	; 0x40
 800d79c:	eba0 000a 	sub.w	r0, r0, sl
 800d7a0:	fa03 f000 	lsl.w	r0, r3, r0
 800d7a4:	9b04      	ldr	r3, [sp, #16]
 800d7a6:	3401      	adds	r4, #1
 800d7a8:	4303      	orrs	r3, r0
 800d7aa:	9304      	str	r3, [sp, #16]
 800d7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b0:	2206      	movs	r2, #6
 800d7b2:	482d      	ldr	r0, [pc, #180]	; (800d868 <_vfiprintf_r+0x254>)
 800d7b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7b8:	f7fe ff28 	bl	800c60c <memchr>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d03f      	beq.n	800d840 <_vfiprintf_r+0x22c>
 800d7c0:	4b2a      	ldr	r3, [pc, #168]	; (800d86c <_vfiprintf_r+0x258>)
 800d7c2:	bb1b      	cbnz	r3, 800d80c <_vfiprintf_r+0x1f8>
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	3307      	adds	r3, #7
 800d7c8:	f023 0307 	bic.w	r3, r3, #7
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	9303      	str	r3, [sp, #12]
 800d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d2:	443b      	add	r3, r7
 800d7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d6:	e767      	b.n	800d6a8 <_vfiprintf_r+0x94>
 800d7d8:	460c      	mov	r4, r1
 800d7da:	2001      	movs	r0, #1
 800d7dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e0:	e7a5      	b.n	800d72e <_vfiprintf_r+0x11a>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f04f 0c0a 	mov.w	ip, #10
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	3401      	adds	r4, #1
 800d7ec:	9305      	str	r3, [sp, #20]
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7f4:	3a30      	subs	r2, #48	; 0x30
 800d7f6:	2a09      	cmp	r2, #9
 800d7f8:	d903      	bls.n	800d802 <_vfiprintf_r+0x1ee>
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0c5      	beq.n	800d78a <_vfiprintf_r+0x176>
 800d7fe:	9105      	str	r1, [sp, #20]
 800d800:	e7c3      	b.n	800d78a <_vfiprintf_r+0x176>
 800d802:	4604      	mov	r4, r0
 800d804:	2301      	movs	r3, #1
 800d806:	fb0c 2101 	mla	r1, ip, r1, r2
 800d80a:	e7f0      	b.n	800d7ee <_vfiprintf_r+0x1da>
 800d80c:	ab03      	add	r3, sp, #12
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	462a      	mov	r2, r5
 800d812:	4630      	mov	r0, r6
 800d814:	4b16      	ldr	r3, [pc, #88]	; (800d870 <_vfiprintf_r+0x25c>)
 800d816:	a904      	add	r1, sp, #16
 800d818:	f7fc f876 	bl	8009908 <_printf_float>
 800d81c:	4607      	mov	r7, r0
 800d81e:	1c78      	adds	r0, r7, #1
 800d820:	d1d6      	bne.n	800d7d0 <_vfiprintf_r+0x1bc>
 800d822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d824:	07d9      	lsls	r1, r3, #31
 800d826:	d405      	bmi.n	800d834 <_vfiprintf_r+0x220>
 800d828:	89ab      	ldrh	r3, [r5, #12]
 800d82a:	059a      	lsls	r2, r3, #22
 800d82c:	d402      	bmi.n	800d834 <_vfiprintf_r+0x220>
 800d82e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d830:	f000 fa9d 	bl	800dd6e <__retarget_lock_release_recursive>
 800d834:	89ab      	ldrh	r3, [r5, #12]
 800d836:	065b      	lsls	r3, r3, #25
 800d838:	f53f af12 	bmi.w	800d660 <_vfiprintf_r+0x4c>
 800d83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d83e:	e711      	b.n	800d664 <_vfiprintf_r+0x50>
 800d840:	ab03      	add	r3, sp, #12
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	462a      	mov	r2, r5
 800d846:	4630      	mov	r0, r6
 800d848:	4b09      	ldr	r3, [pc, #36]	; (800d870 <_vfiprintf_r+0x25c>)
 800d84a:	a904      	add	r1, sp, #16
 800d84c:	f7fc faf8 	bl	8009e40 <_printf_i>
 800d850:	e7e4      	b.n	800d81c <_vfiprintf_r+0x208>
 800d852:	bf00      	nop
 800d854:	0800ece4 	.word	0x0800ece4
 800d858:	0800ed04 	.word	0x0800ed04
 800d85c:	0800ecc4 	.word	0x0800ecc4
 800d860:	0800ec74 	.word	0x0800ec74
 800d864:	0800ec7a 	.word	0x0800ec7a
 800d868:	0800ec7e 	.word	0x0800ec7e
 800d86c:	08009909 	.word	0x08009909
 800d870:	0800d5f1 	.word	0x0800d5f1

0800d874 <__swbuf_r>:
 800d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d876:	460e      	mov	r6, r1
 800d878:	4614      	mov	r4, r2
 800d87a:	4605      	mov	r5, r0
 800d87c:	b118      	cbz	r0, 800d886 <__swbuf_r+0x12>
 800d87e:	6983      	ldr	r3, [r0, #24]
 800d880:	b90b      	cbnz	r3, 800d886 <__swbuf_r+0x12>
 800d882:	f000 f9d5 	bl	800dc30 <__sinit>
 800d886:	4b21      	ldr	r3, [pc, #132]	; (800d90c <__swbuf_r+0x98>)
 800d888:	429c      	cmp	r4, r3
 800d88a:	d12b      	bne.n	800d8e4 <__swbuf_r+0x70>
 800d88c:	686c      	ldr	r4, [r5, #4]
 800d88e:	69a3      	ldr	r3, [r4, #24]
 800d890:	60a3      	str	r3, [r4, #8]
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	071a      	lsls	r2, r3, #28
 800d896:	d52f      	bpl.n	800d8f8 <__swbuf_r+0x84>
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	b36b      	cbz	r3, 800d8f8 <__swbuf_r+0x84>
 800d89c:	6923      	ldr	r3, [r4, #16]
 800d89e:	6820      	ldr	r0, [r4, #0]
 800d8a0:	b2f6      	uxtb	r6, r6
 800d8a2:	1ac0      	subs	r0, r0, r3
 800d8a4:	6963      	ldr	r3, [r4, #20]
 800d8a6:	4637      	mov	r7, r6
 800d8a8:	4283      	cmp	r3, r0
 800d8aa:	dc04      	bgt.n	800d8b6 <__swbuf_r+0x42>
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f000 f92a 	bl	800db08 <_fflush_r>
 800d8b4:	bb30      	cbnz	r0, 800d904 <__swbuf_r+0x90>
 800d8b6:	68a3      	ldr	r3, [r4, #8]
 800d8b8:	3001      	adds	r0, #1
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	60a3      	str	r3, [r4, #8]
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	1c5a      	adds	r2, r3, #1
 800d8c2:	6022      	str	r2, [r4, #0]
 800d8c4:	701e      	strb	r6, [r3, #0]
 800d8c6:	6963      	ldr	r3, [r4, #20]
 800d8c8:	4283      	cmp	r3, r0
 800d8ca:	d004      	beq.n	800d8d6 <__swbuf_r+0x62>
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	07db      	lsls	r3, r3, #31
 800d8d0:	d506      	bpl.n	800d8e0 <__swbuf_r+0x6c>
 800d8d2:	2e0a      	cmp	r6, #10
 800d8d4:	d104      	bne.n	800d8e0 <__swbuf_r+0x6c>
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f000 f915 	bl	800db08 <_fflush_r>
 800d8de:	b988      	cbnz	r0, 800d904 <__swbuf_r+0x90>
 800d8e0:	4638      	mov	r0, r7
 800d8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8e4:	4b0a      	ldr	r3, [pc, #40]	; (800d910 <__swbuf_r+0x9c>)
 800d8e6:	429c      	cmp	r4, r3
 800d8e8:	d101      	bne.n	800d8ee <__swbuf_r+0x7a>
 800d8ea:	68ac      	ldr	r4, [r5, #8]
 800d8ec:	e7cf      	b.n	800d88e <__swbuf_r+0x1a>
 800d8ee:	4b09      	ldr	r3, [pc, #36]	; (800d914 <__swbuf_r+0xa0>)
 800d8f0:	429c      	cmp	r4, r3
 800d8f2:	bf08      	it	eq
 800d8f4:	68ec      	ldreq	r4, [r5, #12]
 800d8f6:	e7ca      	b.n	800d88e <__swbuf_r+0x1a>
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f000 f80c 	bl	800d918 <__swsetup_r>
 800d900:	2800      	cmp	r0, #0
 800d902:	d0cb      	beq.n	800d89c <__swbuf_r+0x28>
 800d904:	f04f 37ff 	mov.w	r7, #4294967295
 800d908:	e7ea      	b.n	800d8e0 <__swbuf_r+0x6c>
 800d90a:	bf00      	nop
 800d90c:	0800ece4 	.word	0x0800ece4
 800d910:	0800ed04 	.word	0x0800ed04
 800d914:	0800ecc4 	.word	0x0800ecc4

0800d918 <__swsetup_r>:
 800d918:	4b32      	ldr	r3, [pc, #200]	; (800d9e4 <__swsetup_r+0xcc>)
 800d91a:	b570      	push	{r4, r5, r6, lr}
 800d91c:	681d      	ldr	r5, [r3, #0]
 800d91e:	4606      	mov	r6, r0
 800d920:	460c      	mov	r4, r1
 800d922:	b125      	cbz	r5, 800d92e <__swsetup_r+0x16>
 800d924:	69ab      	ldr	r3, [r5, #24]
 800d926:	b913      	cbnz	r3, 800d92e <__swsetup_r+0x16>
 800d928:	4628      	mov	r0, r5
 800d92a:	f000 f981 	bl	800dc30 <__sinit>
 800d92e:	4b2e      	ldr	r3, [pc, #184]	; (800d9e8 <__swsetup_r+0xd0>)
 800d930:	429c      	cmp	r4, r3
 800d932:	d10f      	bne.n	800d954 <__swsetup_r+0x3c>
 800d934:	686c      	ldr	r4, [r5, #4]
 800d936:	89a3      	ldrh	r3, [r4, #12]
 800d938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d93c:	0719      	lsls	r1, r3, #28
 800d93e:	d42c      	bmi.n	800d99a <__swsetup_r+0x82>
 800d940:	06dd      	lsls	r5, r3, #27
 800d942:	d411      	bmi.n	800d968 <__swsetup_r+0x50>
 800d944:	2309      	movs	r3, #9
 800d946:	6033      	str	r3, [r6, #0]
 800d948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	81a3      	strh	r3, [r4, #12]
 800d952:	e03e      	b.n	800d9d2 <__swsetup_r+0xba>
 800d954:	4b25      	ldr	r3, [pc, #148]	; (800d9ec <__swsetup_r+0xd4>)
 800d956:	429c      	cmp	r4, r3
 800d958:	d101      	bne.n	800d95e <__swsetup_r+0x46>
 800d95a:	68ac      	ldr	r4, [r5, #8]
 800d95c:	e7eb      	b.n	800d936 <__swsetup_r+0x1e>
 800d95e:	4b24      	ldr	r3, [pc, #144]	; (800d9f0 <__swsetup_r+0xd8>)
 800d960:	429c      	cmp	r4, r3
 800d962:	bf08      	it	eq
 800d964:	68ec      	ldreq	r4, [r5, #12]
 800d966:	e7e6      	b.n	800d936 <__swsetup_r+0x1e>
 800d968:	0758      	lsls	r0, r3, #29
 800d96a:	d512      	bpl.n	800d992 <__swsetup_r+0x7a>
 800d96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d96e:	b141      	cbz	r1, 800d982 <__swsetup_r+0x6a>
 800d970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d974:	4299      	cmp	r1, r3
 800d976:	d002      	beq.n	800d97e <__swsetup_r+0x66>
 800d978:	4630      	mov	r0, r6
 800d97a:	f7ff fb2f 	bl	800cfdc <_free_r>
 800d97e:	2300      	movs	r3, #0
 800d980:	6363      	str	r3, [r4, #52]	; 0x34
 800d982:	89a3      	ldrh	r3, [r4, #12]
 800d984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	2300      	movs	r3, #0
 800d98c:	6063      	str	r3, [r4, #4]
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	f043 0308 	orr.w	r3, r3, #8
 800d998:	81a3      	strh	r3, [r4, #12]
 800d99a:	6923      	ldr	r3, [r4, #16]
 800d99c:	b94b      	cbnz	r3, 800d9b2 <__swsetup_r+0x9a>
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9a8:	d003      	beq.n	800d9b2 <__swsetup_r+0x9a>
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	f000 fa05 	bl	800ddbc <__smakebuf_r>
 800d9b2:	89a0      	ldrh	r0, [r4, #12]
 800d9b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9b8:	f010 0301 	ands.w	r3, r0, #1
 800d9bc:	d00a      	beq.n	800d9d4 <__swsetup_r+0xbc>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60a3      	str	r3, [r4, #8]
 800d9c2:	6963      	ldr	r3, [r4, #20]
 800d9c4:	425b      	negs	r3, r3
 800d9c6:	61a3      	str	r3, [r4, #24]
 800d9c8:	6923      	ldr	r3, [r4, #16]
 800d9ca:	b943      	cbnz	r3, 800d9de <__swsetup_r+0xc6>
 800d9cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d9d0:	d1ba      	bne.n	800d948 <__swsetup_r+0x30>
 800d9d2:	bd70      	pop	{r4, r5, r6, pc}
 800d9d4:	0781      	lsls	r1, r0, #30
 800d9d6:	bf58      	it	pl
 800d9d8:	6963      	ldrpl	r3, [r4, #20]
 800d9da:	60a3      	str	r3, [r4, #8]
 800d9dc:	e7f4      	b.n	800d9c8 <__swsetup_r+0xb0>
 800d9de:	2000      	movs	r0, #0
 800d9e0:	e7f7      	b.n	800d9d2 <__swsetup_r+0xba>
 800d9e2:	bf00      	nop
 800d9e4:	20000038 	.word	0x20000038
 800d9e8:	0800ece4 	.word	0x0800ece4
 800d9ec:	0800ed04 	.word	0x0800ed04
 800d9f0:	0800ecc4 	.word	0x0800ecc4

0800d9f4 <abort>:
 800d9f4:	2006      	movs	r0, #6
 800d9f6:	b508      	push	{r3, lr}
 800d9f8:	f000 fa50 	bl	800de9c <raise>
 800d9fc:	2001      	movs	r0, #1
 800d9fe:	f7f4 ffac 	bl	800295a <_exit>
	...

0800da04 <__sflush_r>:
 800da04:	898a      	ldrh	r2, [r1, #12]
 800da06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da08:	4605      	mov	r5, r0
 800da0a:	0710      	lsls	r0, r2, #28
 800da0c:	460c      	mov	r4, r1
 800da0e:	d457      	bmi.n	800dac0 <__sflush_r+0xbc>
 800da10:	684b      	ldr	r3, [r1, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	dc04      	bgt.n	800da20 <__sflush_r+0x1c>
 800da16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da18:	2b00      	cmp	r3, #0
 800da1a:	dc01      	bgt.n	800da20 <__sflush_r+0x1c>
 800da1c:	2000      	movs	r0, #0
 800da1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da22:	2e00      	cmp	r6, #0
 800da24:	d0fa      	beq.n	800da1c <__sflush_r+0x18>
 800da26:	2300      	movs	r3, #0
 800da28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da2c:	682f      	ldr	r7, [r5, #0]
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	d032      	beq.n	800da98 <__sflush_r+0x94>
 800da32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	075a      	lsls	r2, r3, #29
 800da38:	d505      	bpl.n	800da46 <__sflush_r+0x42>
 800da3a:	6863      	ldr	r3, [r4, #4]
 800da3c:	1ac0      	subs	r0, r0, r3
 800da3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da40:	b10b      	cbz	r3, 800da46 <__sflush_r+0x42>
 800da42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da44:	1ac0      	subs	r0, r0, r3
 800da46:	2300      	movs	r3, #0
 800da48:	4602      	mov	r2, r0
 800da4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da4c:	4628      	mov	r0, r5
 800da4e:	6a21      	ldr	r1, [r4, #32]
 800da50:	47b0      	blx	r6
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	d106      	bne.n	800da66 <__sflush_r+0x62>
 800da58:	6829      	ldr	r1, [r5, #0]
 800da5a:	291d      	cmp	r1, #29
 800da5c:	d82c      	bhi.n	800dab8 <__sflush_r+0xb4>
 800da5e:	4a29      	ldr	r2, [pc, #164]	; (800db04 <__sflush_r+0x100>)
 800da60:	40ca      	lsrs	r2, r1
 800da62:	07d6      	lsls	r6, r2, #31
 800da64:	d528      	bpl.n	800dab8 <__sflush_r+0xb4>
 800da66:	2200      	movs	r2, #0
 800da68:	6062      	str	r2, [r4, #4]
 800da6a:	6922      	ldr	r2, [r4, #16]
 800da6c:	04d9      	lsls	r1, r3, #19
 800da6e:	6022      	str	r2, [r4, #0]
 800da70:	d504      	bpl.n	800da7c <__sflush_r+0x78>
 800da72:	1c42      	adds	r2, r0, #1
 800da74:	d101      	bne.n	800da7a <__sflush_r+0x76>
 800da76:	682b      	ldr	r3, [r5, #0]
 800da78:	b903      	cbnz	r3, 800da7c <__sflush_r+0x78>
 800da7a:	6560      	str	r0, [r4, #84]	; 0x54
 800da7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da7e:	602f      	str	r7, [r5, #0]
 800da80:	2900      	cmp	r1, #0
 800da82:	d0cb      	beq.n	800da1c <__sflush_r+0x18>
 800da84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da88:	4299      	cmp	r1, r3
 800da8a:	d002      	beq.n	800da92 <__sflush_r+0x8e>
 800da8c:	4628      	mov	r0, r5
 800da8e:	f7ff faa5 	bl	800cfdc <_free_r>
 800da92:	2000      	movs	r0, #0
 800da94:	6360      	str	r0, [r4, #52]	; 0x34
 800da96:	e7c2      	b.n	800da1e <__sflush_r+0x1a>
 800da98:	6a21      	ldr	r1, [r4, #32]
 800da9a:	2301      	movs	r3, #1
 800da9c:	4628      	mov	r0, r5
 800da9e:	47b0      	blx	r6
 800daa0:	1c41      	adds	r1, r0, #1
 800daa2:	d1c7      	bne.n	800da34 <__sflush_r+0x30>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0c4      	beq.n	800da34 <__sflush_r+0x30>
 800daaa:	2b1d      	cmp	r3, #29
 800daac:	d001      	beq.n	800dab2 <__sflush_r+0xae>
 800daae:	2b16      	cmp	r3, #22
 800dab0:	d101      	bne.n	800dab6 <__sflush_r+0xb2>
 800dab2:	602f      	str	r7, [r5, #0]
 800dab4:	e7b2      	b.n	800da1c <__sflush_r+0x18>
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	e7ae      	b.n	800da1e <__sflush_r+0x1a>
 800dac0:	690f      	ldr	r7, [r1, #16]
 800dac2:	2f00      	cmp	r7, #0
 800dac4:	d0aa      	beq.n	800da1c <__sflush_r+0x18>
 800dac6:	0793      	lsls	r3, r2, #30
 800dac8:	bf18      	it	ne
 800daca:	2300      	movne	r3, #0
 800dacc:	680e      	ldr	r6, [r1, #0]
 800dace:	bf08      	it	eq
 800dad0:	694b      	ldreq	r3, [r1, #20]
 800dad2:	1bf6      	subs	r6, r6, r7
 800dad4:	600f      	str	r7, [r1, #0]
 800dad6:	608b      	str	r3, [r1, #8]
 800dad8:	2e00      	cmp	r6, #0
 800dada:	dd9f      	ble.n	800da1c <__sflush_r+0x18>
 800dadc:	4633      	mov	r3, r6
 800dade:	463a      	mov	r2, r7
 800dae0:	4628      	mov	r0, r5
 800dae2:	6a21      	ldr	r1, [r4, #32]
 800dae4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800dae8:	47e0      	blx	ip
 800daea:	2800      	cmp	r0, #0
 800daec:	dc06      	bgt.n	800dafc <__sflush_r+0xf8>
 800daee:	89a3      	ldrh	r3, [r4, #12]
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295
 800daf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf8:	81a3      	strh	r3, [r4, #12]
 800dafa:	e790      	b.n	800da1e <__sflush_r+0x1a>
 800dafc:	4407      	add	r7, r0
 800dafe:	1a36      	subs	r6, r6, r0
 800db00:	e7ea      	b.n	800dad8 <__sflush_r+0xd4>
 800db02:	bf00      	nop
 800db04:	20400001 	.word	0x20400001

0800db08 <_fflush_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	690b      	ldr	r3, [r1, #16]
 800db0c:	4605      	mov	r5, r0
 800db0e:	460c      	mov	r4, r1
 800db10:	b913      	cbnz	r3, 800db18 <_fflush_r+0x10>
 800db12:	2500      	movs	r5, #0
 800db14:	4628      	mov	r0, r5
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	b118      	cbz	r0, 800db22 <_fflush_r+0x1a>
 800db1a:	6983      	ldr	r3, [r0, #24]
 800db1c:	b90b      	cbnz	r3, 800db22 <_fflush_r+0x1a>
 800db1e:	f000 f887 	bl	800dc30 <__sinit>
 800db22:	4b14      	ldr	r3, [pc, #80]	; (800db74 <_fflush_r+0x6c>)
 800db24:	429c      	cmp	r4, r3
 800db26:	d11b      	bne.n	800db60 <_fflush_r+0x58>
 800db28:	686c      	ldr	r4, [r5, #4]
 800db2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0ef      	beq.n	800db12 <_fflush_r+0xa>
 800db32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db34:	07d0      	lsls	r0, r2, #31
 800db36:	d404      	bmi.n	800db42 <_fflush_r+0x3a>
 800db38:	0599      	lsls	r1, r3, #22
 800db3a:	d402      	bmi.n	800db42 <_fflush_r+0x3a>
 800db3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db3e:	f000 f915 	bl	800dd6c <__retarget_lock_acquire_recursive>
 800db42:	4628      	mov	r0, r5
 800db44:	4621      	mov	r1, r4
 800db46:	f7ff ff5d 	bl	800da04 <__sflush_r>
 800db4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db4c:	4605      	mov	r5, r0
 800db4e:	07da      	lsls	r2, r3, #31
 800db50:	d4e0      	bmi.n	800db14 <_fflush_r+0xc>
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	059b      	lsls	r3, r3, #22
 800db56:	d4dd      	bmi.n	800db14 <_fflush_r+0xc>
 800db58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db5a:	f000 f908 	bl	800dd6e <__retarget_lock_release_recursive>
 800db5e:	e7d9      	b.n	800db14 <_fflush_r+0xc>
 800db60:	4b05      	ldr	r3, [pc, #20]	; (800db78 <_fflush_r+0x70>)
 800db62:	429c      	cmp	r4, r3
 800db64:	d101      	bne.n	800db6a <_fflush_r+0x62>
 800db66:	68ac      	ldr	r4, [r5, #8]
 800db68:	e7df      	b.n	800db2a <_fflush_r+0x22>
 800db6a:	4b04      	ldr	r3, [pc, #16]	; (800db7c <_fflush_r+0x74>)
 800db6c:	429c      	cmp	r4, r3
 800db6e:	bf08      	it	eq
 800db70:	68ec      	ldreq	r4, [r5, #12]
 800db72:	e7da      	b.n	800db2a <_fflush_r+0x22>
 800db74:	0800ece4 	.word	0x0800ece4
 800db78:	0800ed04 	.word	0x0800ed04
 800db7c:	0800ecc4 	.word	0x0800ecc4

0800db80 <std>:
 800db80:	2300      	movs	r3, #0
 800db82:	b510      	push	{r4, lr}
 800db84:	4604      	mov	r4, r0
 800db86:	e9c0 3300 	strd	r3, r3, [r0]
 800db8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db8e:	6083      	str	r3, [r0, #8]
 800db90:	8181      	strh	r1, [r0, #12]
 800db92:	6643      	str	r3, [r0, #100]	; 0x64
 800db94:	81c2      	strh	r2, [r0, #14]
 800db96:	6183      	str	r3, [r0, #24]
 800db98:	4619      	mov	r1, r3
 800db9a:	2208      	movs	r2, #8
 800db9c:	305c      	adds	r0, #92	; 0x5c
 800db9e:	f7fb fe0d 	bl	80097bc <memset>
 800dba2:	4b05      	ldr	r3, [pc, #20]	; (800dbb8 <std+0x38>)
 800dba4:	6224      	str	r4, [r4, #32]
 800dba6:	6263      	str	r3, [r4, #36]	; 0x24
 800dba8:	4b04      	ldr	r3, [pc, #16]	; (800dbbc <std+0x3c>)
 800dbaa:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbac:	4b04      	ldr	r3, [pc, #16]	; (800dbc0 <std+0x40>)
 800dbae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbb0:	4b04      	ldr	r3, [pc, #16]	; (800dbc4 <std+0x44>)
 800dbb2:	6323      	str	r3, [r4, #48]	; 0x30
 800dbb4:	bd10      	pop	{r4, pc}
 800dbb6:	bf00      	nop
 800dbb8:	0800ded5 	.word	0x0800ded5
 800dbbc:	0800def7 	.word	0x0800def7
 800dbc0:	0800df2f 	.word	0x0800df2f
 800dbc4:	0800df53 	.word	0x0800df53

0800dbc8 <_cleanup_r>:
 800dbc8:	4901      	ldr	r1, [pc, #4]	; (800dbd0 <_cleanup_r+0x8>)
 800dbca:	f000 b8af 	b.w	800dd2c <_fwalk_reent>
 800dbce:	bf00      	nop
 800dbd0:	0800db09 	.word	0x0800db09

0800dbd4 <__sfmoreglue>:
 800dbd4:	2268      	movs	r2, #104	; 0x68
 800dbd6:	b570      	push	{r4, r5, r6, lr}
 800dbd8:	1e4d      	subs	r5, r1, #1
 800dbda:	4355      	muls	r5, r2
 800dbdc:	460e      	mov	r6, r1
 800dbde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dbe2:	f7ff fa63 	bl	800d0ac <_malloc_r>
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	b140      	cbz	r0, 800dbfc <__sfmoreglue+0x28>
 800dbea:	2100      	movs	r1, #0
 800dbec:	e9c0 1600 	strd	r1, r6, [r0]
 800dbf0:	300c      	adds	r0, #12
 800dbf2:	60a0      	str	r0, [r4, #8]
 800dbf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dbf8:	f7fb fde0 	bl	80097bc <memset>
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}

0800dc00 <__sfp_lock_acquire>:
 800dc00:	4801      	ldr	r0, [pc, #4]	; (800dc08 <__sfp_lock_acquire+0x8>)
 800dc02:	f000 b8b3 	b.w	800dd6c <__retarget_lock_acquire_recursive>
 800dc06:	bf00      	nop
 800dc08:	20002d75 	.word	0x20002d75

0800dc0c <__sfp_lock_release>:
 800dc0c:	4801      	ldr	r0, [pc, #4]	; (800dc14 <__sfp_lock_release+0x8>)
 800dc0e:	f000 b8ae 	b.w	800dd6e <__retarget_lock_release_recursive>
 800dc12:	bf00      	nop
 800dc14:	20002d75 	.word	0x20002d75

0800dc18 <__sinit_lock_acquire>:
 800dc18:	4801      	ldr	r0, [pc, #4]	; (800dc20 <__sinit_lock_acquire+0x8>)
 800dc1a:	f000 b8a7 	b.w	800dd6c <__retarget_lock_acquire_recursive>
 800dc1e:	bf00      	nop
 800dc20:	20002d76 	.word	0x20002d76

0800dc24 <__sinit_lock_release>:
 800dc24:	4801      	ldr	r0, [pc, #4]	; (800dc2c <__sinit_lock_release+0x8>)
 800dc26:	f000 b8a2 	b.w	800dd6e <__retarget_lock_release_recursive>
 800dc2a:	bf00      	nop
 800dc2c:	20002d76 	.word	0x20002d76

0800dc30 <__sinit>:
 800dc30:	b510      	push	{r4, lr}
 800dc32:	4604      	mov	r4, r0
 800dc34:	f7ff fff0 	bl	800dc18 <__sinit_lock_acquire>
 800dc38:	69a3      	ldr	r3, [r4, #24]
 800dc3a:	b11b      	cbz	r3, 800dc44 <__sinit+0x14>
 800dc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc40:	f7ff bff0 	b.w	800dc24 <__sinit_lock_release>
 800dc44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc48:	6523      	str	r3, [r4, #80]	; 0x50
 800dc4a:	4b13      	ldr	r3, [pc, #76]	; (800dc98 <__sinit+0x68>)
 800dc4c:	4a13      	ldr	r2, [pc, #76]	; (800dc9c <__sinit+0x6c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc52:	42a3      	cmp	r3, r4
 800dc54:	bf08      	it	eq
 800dc56:	2301      	moveq	r3, #1
 800dc58:	4620      	mov	r0, r4
 800dc5a:	bf08      	it	eq
 800dc5c:	61a3      	streq	r3, [r4, #24]
 800dc5e:	f000 f81f 	bl	800dca0 <__sfp>
 800dc62:	6060      	str	r0, [r4, #4]
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 f81b 	bl	800dca0 <__sfp>
 800dc6a:	60a0      	str	r0, [r4, #8]
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f000 f817 	bl	800dca0 <__sfp>
 800dc72:	2200      	movs	r2, #0
 800dc74:	2104      	movs	r1, #4
 800dc76:	60e0      	str	r0, [r4, #12]
 800dc78:	6860      	ldr	r0, [r4, #4]
 800dc7a:	f7ff ff81 	bl	800db80 <std>
 800dc7e:	2201      	movs	r2, #1
 800dc80:	2109      	movs	r1, #9
 800dc82:	68a0      	ldr	r0, [r4, #8]
 800dc84:	f7ff ff7c 	bl	800db80 <std>
 800dc88:	2202      	movs	r2, #2
 800dc8a:	2112      	movs	r1, #18
 800dc8c:	68e0      	ldr	r0, [r4, #12]
 800dc8e:	f7ff ff77 	bl	800db80 <std>
 800dc92:	2301      	movs	r3, #1
 800dc94:	61a3      	str	r3, [r4, #24]
 800dc96:	e7d1      	b.n	800dc3c <__sinit+0xc>
 800dc98:	0800e880 	.word	0x0800e880
 800dc9c:	0800dbc9 	.word	0x0800dbc9

0800dca0 <__sfp>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	4607      	mov	r7, r0
 800dca4:	f7ff ffac 	bl	800dc00 <__sfp_lock_acquire>
 800dca8:	4b1e      	ldr	r3, [pc, #120]	; (800dd24 <__sfp+0x84>)
 800dcaa:	681e      	ldr	r6, [r3, #0]
 800dcac:	69b3      	ldr	r3, [r6, #24]
 800dcae:	b913      	cbnz	r3, 800dcb6 <__sfp+0x16>
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f7ff ffbd 	bl	800dc30 <__sinit>
 800dcb6:	3648      	adds	r6, #72	; 0x48
 800dcb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	d503      	bpl.n	800dcc8 <__sfp+0x28>
 800dcc0:	6833      	ldr	r3, [r6, #0]
 800dcc2:	b30b      	cbz	r3, 800dd08 <__sfp+0x68>
 800dcc4:	6836      	ldr	r6, [r6, #0]
 800dcc6:	e7f7      	b.n	800dcb8 <__sfp+0x18>
 800dcc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dccc:	b9d5      	cbnz	r5, 800dd04 <__sfp+0x64>
 800dcce:	4b16      	ldr	r3, [pc, #88]	; (800dd28 <__sfp+0x88>)
 800dcd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dcd4:	60e3      	str	r3, [r4, #12]
 800dcd6:	6665      	str	r5, [r4, #100]	; 0x64
 800dcd8:	f000 f847 	bl	800dd6a <__retarget_lock_init_recursive>
 800dcdc:	f7ff ff96 	bl	800dc0c <__sfp_lock_release>
 800dce0:	2208      	movs	r2, #8
 800dce2:	4629      	mov	r1, r5
 800dce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dcec:	6025      	str	r5, [r4, #0]
 800dcee:	61a5      	str	r5, [r4, #24]
 800dcf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dcf4:	f7fb fd62 	bl	80097bc <memset>
 800dcf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dcfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd00:	4620      	mov	r0, r4
 800dd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd04:	3468      	adds	r4, #104	; 0x68
 800dd06:	e7d9      	b.n	800dcbc <__sfp+0x1c>
 800dd08:	2104      	movs	r1, #4
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	f7ff ff62 	bl	800dbd4 <__sfmoreglue>
 800dd10:	4604      	mov	r4, r0
 800dd12:	6030      	str	r0, [r6, #0]
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d1d5      	bne.n	800dcc4 <__sfp+0x24>
 800dd18:	f7ff ff78 	bl	800dc0c <__sfp_lock_release>
 800dd1c:	230c      	movs	r3, #12
 800dd1e:	603b      	str	r3, [r7, #0]
 800dd20:	e7ee      	b.n	800dd00 <__sfp+0x60>
 800dd22:	bf00      	nop
 800dd24:	0800e880 	.word	0x0800e880
 800dd28:	ffff0001 	.word	0xffff0001

0800dd2c <_fwalk_reent>:
 800dd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd30:	4606      	mov	r6, r0
 800dd32:	4688      	mov	r8, r1
 800dd34:	2700      	movs	r7, #0
 800dd36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd3e:	f1b9 0901 	subs.w	r9, r9, #1
 800dd42:	d505      	bpl.n	800dd50 <_fwalk_reent+0x24>
 800dd44:	6824      	ldr	r4, [r4, #0]
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	d1f7      	bne.n	800dd3a <_fwalk_reent+0xe>
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd50:	89ab      	ldrh	r3, [r5, #12]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d907      	bls.n	800dd66 <_fwalk_reent+0x3a>
 800dd56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	d003      	beq.n	800dd66 <_fwalk_reent+0x3a>
 800dd5e:	4629      	mov	r1, r5
 800dd60:	4630      	mov	r0, r6
 800dd62:	47c0      	blx	r8
 800dd64:	4307      	orrs	r7, r0
 800dd66:	3568      	adds	r5, #104	; 0x68
 800dd68:	e7e9      	b.n	800dd3e <_fwalk_reent+0x12>

0800dd6a <__retarget_lock_init_recursive>:
 800dd6a:	4770      	bx	lr

0800dd6c <__retarget_lock_acquire_recursive>:
 800dd6c:	4770      	bx	lr

0800dd6e <__retarget_lock_release_recursive>:
 800dd6e:	4770      	bx	lr

0800dd70 <__swhatbuf_r>:
 800dd70:	b570      	push	{r4, r5, r6, lr}
 800dd72:	460e      	mov	r6, r1
 800dd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd78:	4614      	mov	r4, r2
 800dd7a:	2900      	cmp	r1, #0
 800dd7c:	461d      	mov	r5, r3
 800dd7e:	b096      	sub	sp, #88	; 0x58
 800dd80:	da08      	bge.n	800dd94 <__swhatbuf_r+0x24>
 800dd82:	2200      	movs	r2, #0
 800dd84:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dd88:	602a      	str	r2, [r5, #0]
 800dd8a:	061a      	lsls	r2, r3, #24
 800dd8c:	d410      	bmi.n	800ddb0 <__swhatbuf_r+0x40>
 800dd8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd92:	e00e      	b.n	800ddb2 <__swhatbuf_r+0x42>
 800dd94:	466a      	mov	r2, sp
 800dd96:	f000 f903 	bl	800dfa0 <_fstat_r>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	dbf1      	blt.n	800dd82 <__swhatbuf_r+0x12>
 800dd9e:	9a01      	ldr	r2, [sp, #4]
 800dda0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dda4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dda8:	425a      	negs	r2, r3
 800ddaa:	415a      	adcs	r2, r3
 800ddac:	602a      	str	r2, [r5, #0]
 800ddae:	e7ee      	b.n	800dd8e <__swhatbuf_r+0x1e>
 800ddb0:	2340      	movs	r3, #64	; 0x40
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	b016      	add	sp, #88	; 0x58
 800ddb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ddbc <__smakebuf_r>:
 800ddbc:	898b      	ldrh	r3, [r1, #12]
 800ddbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddc0:	079d      	lsls	r5, r3, #30
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	d507      	bpl.n	800ddd8 <__smakebuf_r+0x1c>
 800ddc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	6123      	str	r3, [r4, #16]
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	6163      	str	r3, [r4, #20]
 800ddd4:	b002      	add	sp, #8
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	466a      	mov	r2, sp
 800ddda:	ab01      	add	r3, sp, #4
 800dddc:	f7ff ffc8 	bl	800dd70 <__swhatbuf_r>
 800dde0:	9900      	ldr	r1, [sp, #0]
 800dde2:	4605      	mov	r5, r0
 800dde4:	4630      	mov	r0, r6
 800dde6:	f7ff f961 	bl	800d0ac <_malloc_r>
 800ddea:	b948      	cbnz	r0, 800de00 <__smakebuf_r+0x44>
 800ddec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf0:	059a      	lsls	r2, r3, #22
 800ddf2:	d4ef      	bmi.n	800ddd4 <__smakebuf_r+0x18>
 800ddf4:	f023 0303 	bic.w	r3, r3, #3
 800ddf8:	f043 0302 	orr.w	r3, r3, #2
 800ddfc:	81a3      	strh	r3, [r4, #12]
 800ddfe:	e7e3      	b.n	800ddc8 <__smakebuf_r+0xc>
 800de00:	4b0d      	ldr	r3, [pc, #52]	; (800de38 <__smakebuf_r+0x7c>)
 800de02:	62b3      	str	r3, [r6, #40]	; 0x28
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	6020      	str	r0, [r4, #0]
 800de08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de0c:	81a3      	strh	r3, [r4, #12]
 800de0e:	9b00      	ldr	r3, [sp, #0]
 800de10:	6120      	str	r0, [r4, #16]
 800de12:	6163      	str	r3, [r4, #20]
 800de14:	9b01      	ldr	r3, [sp, #4]
 800de16:	b15b      	cbz	r3, 800de30 <__smakebuf_r+0x74>
 800de18:	4630      	mov	r0, r6
 800de1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de1e:	f000 f8d1 	bl	800dfc4 <_isatty_r>
 800de22:	b128      	cbz	r0, 800de30 <__smakebuf_r+0x74>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	f023 0303 	bic.w	r3, r3, #3
 800de2a:	f043 0301 	orr.w	r3, r3, #1
 800de2e:	81a3      	strh	r3, [r4, #12]
 800de30:	89a0      	ldrh	r0, [r4, #12]
 800de32:	4305      	orrs	r5, r0
 800de34:	81a5      	strh	r5, [r4, #12]
 800de36:	e7cd      	b.n	800ddd4 <__smakebuf_r+0x18>
 800de38:	0800dbc9 	.word	0x0800dbc9

0800de3c <_malloc_usable_size_r>:
 800de3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de40:	1f18      	subs	r0, r3, #4
 800de42:	2b00      	cmp	r3, #0
 800de44:	bfbc      	itt	lt
 800de46:	580b      	ldrlt	r3, [r1, r0]
 800de48:	18c0      	addlt	r0, r0, r3
 800de4a:	4770      	bx	lr

0800de4c <_raise_r>:
 800de4c:	291f      	cmp	r1, #31
 800de4e:	b538      	push	{r3, r4, r5, lr}
 800de50:	4604      	mov	r4, r0
 800de52:	460d      	mov	r5, r1
 800de54:	d904      	bls.n	800de60 <_raise_r+0x14>
 800de56:	2316      	movs	r3, #22
 800de58:	6003      	str	r3, [r0, #0]
 800de5a:	f04f 30ff 	mov.w	r0, #4294967295
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de62:	b112      	cbz	r2, 800de6a <_raise_r+0x1e>
 800de64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de68:	b94b      	cbnz	r3, 800de7e <_raise_r+0x32>
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 f830 	bl	800ded0 <_getpid_r>
 800de70:	462a      	mov	r2, r5
 800de72:	4601      	mov	r1, r0
 800de74:	4620      	mov	r0, r4
 800de76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de7a:	f000 b817 	b.w	800deac <_kill_r>
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d00a      	beq.n	800de98 <_raise_r+0x4c>
 800de82:	1c59      	adds	r1, r3, #1
 800de84:	d103      	bne.n	800de8e <_raise_r+0x42>
 800de86:	2316      	movs	r3, #22
 800de88:	6003      	str	r3, [r0, #0]
 800de8a:	2001      	movs	r0, #1
 800de8c:	e7e7      	b.n	800de5e <_raise_r+0x12>
 800de8e:	2400      	movs	r4, #0
 800de90:	4628      	mov	r0, r5
 800de92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de96:	4798      	blx	r3
 800de98:	2000      	movs	r0, #0
 800de9a:	e7e0      	b.n	800de5e <_raise_r+0x12>

0800de9c <raise>:
 800de9c:	4b02      	ldr	r3, [pc, #8]	; (800dea8 <raise+0xc>)
 800de9e:	4601      	mov	r1, r0
 800dea0:	6818      	ldr	r0, [r3, #0]
 800dea2:	f7ff bfd3 	b.w	800de4c <_raise_r>
 800dea6:	bf00      	nop
 800dea8:	20000038 	.word	0x20000038

0800deac <_kill_r>:
 800deac:	b538      	push	{r3, r4, r5, lr}
 800deae:	2300      	movs	r3, #0
 800deb0:	4d06      	ldr	r5, [pc, #24]	; (800decc <_kill_r+0x20>)
 800deb2:	4604      	mov	r4, r0
 800deb4:	4608      	mov	r0, r1
 800deb6:	4611      	mov	r1, r2
 800deb8:	602b      	str	r3, [r5, #0]
 800deba:	f7f4 fd3e 	bl	800293a <_kill>
 800debe:	1c43      	adds	r3, r0, #1
 800dec0:	d102      	bne.n	800dec8 <_kill_r+0x1c>
 800dec2:	682b      	ldr	r3, [r5, #0]
 800dec4:	b103      	cbz	r3, 800dec8 <_kill_r+0x1c>
 800dec6:	6023      	str	r3, [r4, #0]
 800dec8:	bd38      	pop	{r3, r4, r5, pc}
 800deca:	bf00      	nop
 800decc:	20002d70 	.word	0x20002d70

0800ded0 <_getpid_r>:
 800ded0:	f7f4 bd2c 	b.w	800292c <_getpid>

0800ded4 <__sread>:
 800ded4:	b510      	push	{r4, lr}
 800ded6:	460c      	mov	r4, r1
 800ded8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dedc:	f000 f894 	bl	800e008 <_read_r>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	bfab      	itete	ge
 800dee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dee6:	89a3      	ldrhlt	r3, [r4, #12]
 800dee8:	181b      	addge	r3, r3, r0
 800deea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800deee:	bfac      	ite	ge
 800def0:	6563      	strge	r3, [r4, #84]	; 0x54
 800def2:	81a3      	strhlt	r3, [r4, #12]
 800def4:	bd10      	pop	{r4, pc}

0800def6 <__swrite>:
 800def6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800defa:	461f      	mov	r7, r3
 800defc:	898b      	ldrh	r3, [r1, #12]
 800defe:	4605      	mov	r5, r0
 800df00:	05db      	lsls	r3, r3, #23
 800df02:	460c      	mov	r4, r1
 800df04:	4616      	mov	r6, r2
 800df06:	d505      	bpl.n	800df14 <__swrite+0x1e>
 800df08:	2302      	movs	r3, #2
 800df0a:	2200      	movs	r2, #0
 800df0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df10:	f000 f868 	bl	800dfe4 <_lseek_r>
 800df14:	89a3      	ldrh	r3, [r4, #12]
 800df16:	4632      	mov	r2, r6
 800df18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df1c:	81a3      	strh	r3, [r4, #12]
 800df1e:	4628      	mov	r0, r5
 800df20:	463b      	mov	r3, r7
 800df22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df2a:	f000 b817 	b.w	800df5c <_write_r>

0800df2e <__sseek>:
 800df2e:	b510      	push	{r4, lr}
 800df30:	460c      	mov	r4, r1
 800df32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df36:	f000 f855 	bl	800dfe4 <_lseek_r>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	bf15      	itete	ne
 800df40:	6560      	strne	r0, [r4, #84]	; 0x54
 800df42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df4a:	81a3      	strheq	r3, [r4, #12]
 800df4c:	bf18      	it	ne
 800df4e:	81a3      	strhne	r3, [r4, #12]
 800df50:	bd10      	pop	{r4, pc}

0800df52 <__sclose>:
 800df52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df56:	f000 b813 	b.w	800df80 <_close_r>
	...

0800df5c <_write_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	4611      	mov	r1, r2
 800df64:	2200      	movs	r2, #0
 800df66:	4d05      	ldr	r5, [pc, #20]	; (800df7c <_write_r+0x20>)
 800df68:	602a      	str	r2, [r5, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f7f4 fd1c 	bl	80029a8 <_write>
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	d102      	bne.n	800df7a <_write_r+0x1e>
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	b103      	cbz	r3, 800df7a <_write_r+0x1e>
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	20002d70 	.word	0x20002d70

0800df80 <_close_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	2300      	movs	r3, #0
 800df84:	4d05      	ldr	r5, [pc, #20]	; (800df9c <_close_r+0x1c>)
 800df86:	4604      	mov	r4, r0
 800df88:	4608      	mov	r0, r1
 800df8a:	602b      	str	r3, [r5, #0]
 800df8c:	f7f4 fd28 	bl	80029e0 <_close>
 800df90:	1c43      	adds	r3, r0, #1
 800df92:	d102      	bne.n	800df9a <_close_r+0x1a>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	b103      	cbz	r3, 800df9a <_close_r+0x1a>
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
 800df9c:	20002d70 	.word	0x20002d70

0800dfa0 <_fstat_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	4d06      	ldr	r5, [pc, #24]	; (800dfc0 <_fstat_r+0x20>)
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	4611      	mov	r1, r2
 800dfac:	602b      	str	r3, [r5, #0]
 800dfae:	f7f4 fd22 	bl	80029f6 <_fstat>
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	d102      	bne.n	800dfbc <_fstat_r+0x1c>
 800dfb6:	682b      	ldr	r3, [r5, #0]
 800dfb8:	b103      	cbz	r3, 800dfbc <_fstat_r+0x1c>
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	20002d70 	.word	0x20002d70

0800dfc4 <_isatty_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	4d05      	ldr	r5, [pc, #20]	; (800dfe0 <_isatty_r+0x1c>)
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	602b      	str	r3, [r5, #0]
 800dfd0:	f7f4 fd20 	bl	8002a14 <_isatty>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_isatty_r+0x1a>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_isatty_r+0x1a>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	20002d70 	.word	0x20002d70

0800dfe4 <_lseek_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	4608      	mov	r0, r1
 800dfea:	4611      	mov	r1, r2
 800dfec:	2200      	movs	r2, #0
 800dfee:	4d05      	ldr	r5, [pc, #20]	; (800e004 <_lseek_r+0x20>)
 800dff0:	602a      	str	r2, [r5, #0]
 800dff2:	461a      	mov	r2, r3
 800dff4:	f7f4 fd18 	bl	8002a28 <_lseek>
 800dff8:	1c43      	adds	r3, r0, #1
 800dffa:	d102      	bne.n	800e002 <_lseek_r+0x1e>
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	b103      	cbz	r3, 800e002 <_lseek_r+0x1e>
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	bd38      	pop	{r3, r4, r5, pc}
 800e004:	20002d70 	.word	0x20002d70

0800e008 <_read_r>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	4604      	mov	r4, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	4611      	mov	r1, r2
 800e010:	2200      	movs	r2, #0
 800e012:	4d05      	ldr	r5, [pc, #20]	; (800e028 <_read_r+0x20>)
 800e014:	602a      	str	r2, [r5, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	f7f4 fca9 	bl	800296e <_read>
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	d102      	bne.n	800e026 <_read_r+0x1e>
 800e020:	682b      	ldr	r3, [r5, #0]
 800e022:	b103      	cbz	r3, 800e026 <_read_r+0x1e>
 800e024:	6023      	str	r3, [r4, #0]
 800e026:	bd38      	pop	{r3, r4, r5, pc}
 800e028:	20002d70 	.word	0x20002d70

0800e02c <log>:
 800e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02e:	4604      	mov	r4, r0
 800e030:	460d      	mov	r5, r1
 800e032:	f000 f82d 	bl	800e090 <__ieee754_log>
 800e036:	4622      	mov	r2, r4
 800e038:	4606      	mov	r6, r0
 800e03a:	460f      	mov	r7, r1
 800e03c:	462b      	mov	r3, r5
 800e03e:	4620      	mov	r0, r4
 800e040:	4629      	mov	r1, r5
 800e042:	f7f2 fce3 	bl	8000a0c <__aeabi_dcmpun>
 800e046:	b998      	cbnz	r0, 800e070 <log+0x44>
 800e048:	2200      	movs	r2, #0
 800e04a:	2300      	movs	r3, #0
 800e04c:	4620      	mov	r0, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	f7f2 fcd2 	bl	80009f8 <__aeabi_dcmpgt>
 800e054:	b960      	cbnz	r0, 800e070 <log+0x44>
 800e056:	2200      	movs	r2, #0
 800e058:	2300      	movs	r3, #0
 800e05a:	4620      	mov	r0, r4
 800e05c:	4629      	mov	r1, r5
 800e05e:	f7f2 fca3 	bl	80009a8 <__aeabi_dcmpeq>
 800e062:	b140      	cbz	r0, 800e076 <log+0x4a>
 800e064:	f7fb fb80 	bl	8009768 <__errno>
 800e068:	2322      	movs	r3, #34	; 0x22
 800e06a:	2600      	movs	r6, #0
 800e06c:	4f06      	ldr	r7, [pc, #24]	; (800e088 <log+0x5c>)
 800e06e:	6003      	str	r3, [r0, #0]
 800e070:	4630      	mov	r0, r6
 800e072:	4639      	mov	r1, r7
 800e074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e076:	f7fb fb77 	bl	8009768 <__errno>
 800e07a:	2321      	movs	r3, #33	; 0x21
 800e07c:	6003      	str	r3, [r0, #0]
 800e07e:	4803      	ldr	r0, [pc, #12]	; (800e08c <log+0x60>)
 800e080:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e084:	f7ff b9e2 	b.w	800d44c <nan>
 800e088:	fff00000 	.word	0xfff00000
 800e08c:	0800ecc0 	.word	0x0800ecc0

0800e090 <__ieee754_log>:
 800e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	460d      	mov	r5, r1
 800e09e:	b087      	sub	sp, #28
 800e0a0:	da24      	bge.n	800e0ec <__ieee754_log+0x5c>
 800e0a2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e0a6:	4304      	orrs	r4, r0
 800e0a8:	d108      	bne.n	800e0bc <__ieee754_log+0x2c>
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	49cb      	ldr	r1, [pc, #812]	; (800e3e0 <__ieee754_log+0x350>)
 800e0b2:	f7f2 fb3b 	bl	800072c <__aeabi_ddiv>
 800e0b6:	b007      	add	sp, #28
 800e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	da04      	bge.n	800e0ca <__ieee754_log+0x3a>
 800e0c0:	f7f2 f852 	bl	8000168 <__aeabi_dsub>
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	e7f3      	b.n	800e0b2 <__ieee754_log+0x22>
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4bc5      	ldr	r3, [pc, #788]	; (800e3e4 <__ieee754_log+0x354>)
 800e0ce:	f7f2 fa03 	bl	80004d8 <__aeabi_dmul>
 800e0d2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	460b      	mov	r3, r1
 800e0da:	460d      	mov	r5, r1
 800e0dc:	49c2      	ldr	r1, [pc, #776]	; (800e3e8 <__ieee754_log+0x358>)
 800e0de:	428d      	cmp	r5, r1
 800e0e0:	dd06      	ble.n	800e0f0 <__ieee754_log+0x60>
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	f7f2 f841 	bl	800016c <__adddf3>
 800e0ea:	e7e4      	b.n	800e0b6 <__ieee754_log+0x26>
 800e0ec:	2600      	movs	r6, #0
 800e0ee:	e7f5      	b.n	800e0dc <__ieee754_log+0x4c>
 800e0f0:	152c      	asrs	r4, r5, #20
 800e0f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e0f6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800e0fa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e0fe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800e102:	4426      	add	r6, r4
 800e104:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800e108:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800e10c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800e110:	ea41 0305 	orr.w	r3, r1, r5
 800e114:	4610      	mov	r0, r2
 800e116:	4619      	mov	r1, r3
 800e118:	2200      	movs	r2, #0
 800e11a:	4bb4      	ldr	r3, [pc, #720]	; (800e3ec <__ieee754_log+0x35c>)
 800e11c:	f7f2 f824 	bl	8000168 <__aeabi_dsub>
 800e120:	1cab      	adds	r3, r5, #2
 800e122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e126:	2b02      	cmp	r3, #2
 800e128:	4682      	mov	sl, r0
 800e12a:	468b      	mov	fp, r1
 800e12c:	f04f 0200 	mov.w	r2, #0
 800e130:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800e134:	dc53      	bgt.n	800e1de <__ieee754_log+0x14e>
 800e136:	2300      	movs	r3, #0
 800e138:	f7f2 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800e13c:	b1d0      	cbz	r0, 800e174 <__ieee754_log+0xe4>
 800e13e:	2c00      	cmp	r4, #0
 800e140:	f000 8122 	beq.w	800e388 <__ieee754_log+0x2f8>
 800e144:	4620      	mov	r0, r4
 800e146:	f7f2 f95d 	bl	8000404 <__aeabi_i2d>
 800e14a:	a391      	add	r3, pc, #580	; (adr r3, 800e390 <__ieee754_log+0x300>)
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	4606      	mov	r6, r0
 800e152:	460f      	mov	r7, r1
 800e154:	f7f2 f9c0 	bl	80004d8 <__aeabi_dmul>
 800e158:	a38f      	add	r3, pc, #572	; (adr r3, 800e398 <__ieee754_log+0x308>)
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	4604      	mov	r4, r0
 800e160:	460d      	mov	r5, r1
 800e162:	4630      	mov	r0, r6
 800e164:	4639      	mov	r1, r7
 800e166:	f7f2 f9b7 	bl	80004d8 <__aeabi_dmul>
 800e16a:	4602      	mov	r2, r0
 800e16c:	460b      	mov	r3, r1
 800e16e:	4620      	mov	r0, r4
 800e170:	4629      	mov	r1, r5
 800e172:	e7b8      	b.n	800e0e6 <__ieee754_log+0x56>
 800e174:	a38a      	add	r3, pc, #552	; (adr r3, 800e3a0 <__ieee754_log+0x310>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	4650      	mov	r0, sl
 800e17c:	4659      	mov	r1, fp
 800e17e:	f7f2 f9ab 	bl	80004d8 <__aeabi_dmul>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	2000      	movs	r0, #0
 800e188:	4999      	ldr	r1, [pc, #612]	; (800e3f0 <__ieee754_log+0x360>)
 800e18a:	f7f1 ffed 	bl	8000168 <__aeabi_dsub>
 800e18e:	4652      	mov	r2, sl
 800e190:	4606      	mov	r6, r0
 800e192:	460f      	mov	r7, r1
 800e194:	465b      	mov	r3, fp
 800e196:	4650      	mov	r0, sl
 800e198:	4659      	mov	r1, fp
 800e19a:	f7f2 f99d 	bl	80004d8 <__aeabi_dmul>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	4639      	mov	r1, r7
 800e1a6:	f7f2 f997 	bl	80004d8 <__aeabi_dmul>
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460f      	mov	r7, r1
 800e1ae:	b914      	cbnz	r4, 800e1b6 <__ieee754_log+0x126>
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	463b      	mov	r3, r7
 800e1b4:	e0a2      	b.n	800e2fc <__ieee754_log+0x26c>
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f7f2 f924 	bl	8000404 <__aeabi_i2d>
 800e1bc:	a374      	add	r3, pc, #464	; (adr r3, 800e390 <__ieee754_log+0x300>)
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	4680      	mov	r8, r0
 800e1c4:	4689      	mov	r9, r1
 800e1c6:	f7f2 f987 	bl	80004d8 <__aeabi_dmul>
 800e1ca:	a373      	add	r3, pc, #460	; (adr r3, 800e398 <__ieee754_log+0x308>)
 800e1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	460d      	mov	r5, r1
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	4649      	mov	r1, r9
 800e1d8:	f7f2 f97e 	bl	80004d8 <__aeabi_dmul>
 800e1dc:	e0a7      	b.n	800e32e <__ieee754_log+0x29e>
 800e1de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1e2:	f7f1 ffc3 	bl	800016c <__adddf3>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	4650      	mov	r0, sl
 800e1ec:	4659      	mov	r1, fp
 800e1ee:	f7f2 fa9d 	bl	800072c <__aeabi_ddiv>
 800e1f2:	e9cd 0100 	strd	r0, r1, [sp]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f7f2 f904 	bl	8000404 <__aeabi_i2d>
 800e1fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e204:	4610      	mov	r0, r2
 800e206:	4619      	mov	r1, r3
 800e208:	f7f2 f966 	bl	80004d8 <__aeabi_dmul>
 800e20c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e210:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e214:	4602      	mov	r2, r0
 800e216:	9305      	str	r3, [sp, #20]
 800e218:	460b      	mov	r3, r1
 800e21a:	4606      	mov	r6, r0
 800e21c:	460f      	mov	r7, r1
 800e21e:	f7f2 f95b 	bl	80004d8 <__aeabi_dmul>
 800e222:	a361      	add	r3, pc, #388	; (adr r3, 800e3a8 <__ieee754_log+0x318>)
 800e224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e228:	4680      	mov	r8, r0
 800e22a:	4689      	mov	r9, r1
 800e22c:	f7f2 f954 	bl	80004d8 <__aeabi_dmul>
 800e230:	a35f      	add	r3, pc, #380	; (adr r3, 800e3b0 <__ieee754_log+0x320>)
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	f7f1 ff99 	bl	800016c <__adddf3>
 800e23a:	4642      	mov	r2, r8
 800e23c:	464b      	mov	r3, r9
 800e23e:	f7f2 f94b 	bl	80004d8 <__aeabi_dmul>
 800e242:	a35d      	add	r3, pc, #372	; (adr r3, 800e3b8 <__ieee754_log+0x328>)
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	f7f1 ff90 	bl	800016c <__adddf3>
 800e24c:	4642      	mov	r2, r8
 800e24e:	464b      	mov	r3, r9
 800e250:	f7f2 f942 	bl	80004d8 <__aeabi_dmul>
 800e254:	a35a      	add	r3, pc, #360	; (adr r3, 800e3c0 <__ieee754_log+0x330>)
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	f7f1 ff87 	bl	800016c <__adddf3>
 800e25e:	4632      	mov	r2, r6
 800e260:	463b      	mov	r3, r7
 800e262:	f7f2 f939 	bl	80004d8 <__aeabi_dmul>
 800e266:	a358      	add	r3, pc, #352	; (adr r3, 800e3c8 <__ieee754_log+0x338>)
 800e268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26c:	4606      	mov	r6, r0
 800e26e:	460f      	mov	r7, r1
 800e270:	4640      	mov	r0, r8
 800e272:	4649      	mov	r1, r9
 800e274:	f7f2 f930 	bl	80004d8 <__aeabi_dmul>
 800e278:	a355      	add	r3, pc, #340	; (adr r3, 800e3d0 <__ieee754_log+0x340>)
 800e27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27e:	f7f1 ff75 	bl	800016c <__adddf3>
 800e282:	4642      	mov	r2, r8
 800e284:	464b      	mov	r3, r9
 800e286:	f7f2 f927 	bl	80004d8 <__aeabi_dmul>
 800e28a:	a353      	add	r3, pc, #332	; (adr r3, 800e3d8 <__ieee754_log+0x348>)
 800e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e290:	f7f1 ff6c 	bl	800016c <__adddf3>
 800e294:	4642      	mov	r2, r8
 800e296:	464b      	mov	r3, r9
 800e298:	f7f2 f91e 	bl	80004d8 <__aeabi_dmul>
 800e29c:	460b      	mov	r3, r1
 800e29e:	4602      	mov	r2, r0
 800e2a0:	4639      	mov	r1, r7
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f7f1 ff62 	bl	800016c <__adddf3>
 800e2a8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e2ac:	9b05      	ldr	r3, [sp, #20]
 800e2ae:	3551      	adds	r5, #81	; 0x51
 800e2b0:	431d      	orrs	r5, r3
 800e2b2:	2d00      	cmp	r5, #0
 800e2b4:	4680      	mov	r8, r0
 800e2b6:	4689      	mov	r9, r1
 800e2b8:	dd48      	ble.n	800e34c <__ieee754_log+0x2bc>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	4b4c      	ldr	r3, [pc, #304]	; (800e3f0 <__ieee754_log+0x360>)
 800e2be:	4650      	mov	r0, sl
 800e2c0:	4659      	mov	r1, fp
 800e2c2:	f7f2 f909 	bl	80004d8 <__aeabi_dmul>
 800e2c6:	4652      	mov	r2, sl
 800e2c8:	465b      	mov	r3, fp
 800e2ca:	f7f2 f905 	bl	80004d8 <__aeabi_dmul>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	460f      	mov	r7, r1
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	4649      	mov	r1, r9
 800e2da:	f7f1 ff47 	bl	800016c <__adddf3>
 800e2de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2e2:	f7f2 f8f9 	bl	80004d8 <__aeabi_dmul>
 800e2e6:	4680      	mov	r8, r0
 800e2e8:	4689      	mov	r9, r1
 800e2ea:	b964      	cbnz	r4, 800e306 <__ieee754_log+0x276>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	4639      	mov	r1, r7
 800e2f4:	f7f1 ff38 	bl	8000168 <__aeabi_dsub>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4650      	mov	r0, sl
 800e2fe:	4659      	mov	r1, fp
 800e300:	f7f1 ff32 	bl	8000168 <__aeabi_dsub>
 800e304:	e6d7      	b.n	800e0b6 <__ieee754_log+0x26>
 800e306:	a322      	add	r3, pc, #136	; (adr r3, 800e390 <__ieee754_log+0x300>)
 800e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e310:	f7f2 f8e2 	bl	80004d8 <__aeabi_dmul>
 800e314:	a320      	add	r3, pc, #128	; (adr r3, 800e398 <__ieee754_log+0x308>)
 800e316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31a:	4604      	mov	r4, r0
 800e31c:	460d      	mov	r5, r1
 800e31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e322:	f7f2 f8d9 	bl	80004d8 <__aeabi_dmul>
 800e326:	4642      	mov	r2, r8
 800e328:	464b      	mov	r3, r9
 800e32a:	f7f1 ff1f 	bl	800016c <__adddf3>
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	4630      	mov	r0, r6
 800e334:	4639      	mov	r1, r7
 800e336:	f7f1 ff17 	bl	8000168 <__aeabi_dsub>
 800e33a:	4652      	mov	r2, sl
 800e33c:	465b      	mov	r3, fp
 800e33e:	f7f1 ff13 	bl	8000168 <__aeabi_dsub>
 800e342:	4602      	mov	r2, r0
 800e344:	460b      	mov	r3, r1
 800e346:	4620      	mov	r0, r4
 800e348:	4629      	mov	r1, r5
 800e34a:	e7d9      	b.n	800e300 <__ieee754_log+0x270>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	4650      	mov	r0, sl
 800e352:	4659      	mov	r1, fp
 800e354:	f7f1 ff08 	bl	8000168 <__aeabi_dsub>
 800e358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e35c:	f7f2 f8bc 	bl	80004d8 <__aeabi_dmul>
 800e360:	4606      	mov	r6, r0
 800e362:	460f      	mov	r7, r1
 800e364:	2c00      	cmp	r4, #0
 800e366:	f43f af23 	beq.w	800e1b0 <__ieee754_log+0x120>
 800e36a:	a309      	add	r3, pc, #36	; (adr r3, 800e390 <__ieee754_log+0x300>)
 800e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e374:	f7f2 f8b0 	bl	80004d8 <__aeabi_dmul>
 800e378:	a307      	add	r3, pc, #28	; (adr r3, 800e398 <__ieee754_log+0x308>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	4604      	mov	r4, r0
 800e380:	460d      	mov	r5, r1
 800e382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e386:	e727      	b.n	800e1d8 <__ieee754_log+0x148>
 800e388:	2000      	movs	r0, #0
 800e38a:	2100      	movs	r1, #0
 800e38c:	e693      	b.n	800e0b6 <__ieee754_log+0x26>
 800e38e:	bf00      	nop
 800e390:	fee00000 	.word	0xfee00000
 800e394:	3fe62e42 	.word	0x3fe62e42
 800e398:	35793c76 	.word	0x35793c76
 800e39c:	3dea39ef 	.word	0x3dea39ef
 800e3a0:	55555555 	.word	0x55555555
 800e3a4:	3fd55555 	.word	0x3fd55555
 800e3a8:	df3e5244 	.word	0xdf3e5244
 800e3ac:	3fc2f112 	.word	0x3fc2f112
 800e3b0:	96cb03de 	.word	0x96cb03de
 800e3b4:	3fc74664 	.word	0x3fc74664
 800e3b8:	94229359 	.word	0x94229359
 800e3bc:	3fd24924 	.word	0x3fd24924
 800e3c0:	55555593 	.word	0x55555593
 800e3c4:	3fe55555 	.word	0x3fe55555
 800e3c8:	d078c69f 	.word	0xd078c69f
 800e3cc:	3fc39a09 	.word	0x3fc39a09
 800e3d0:	1d8e78af 	.word	0x1d8e78af
 800e3d4:	3fcc71c5 	.word	0x3fcc71c5
 800e3d8:	9997fa04 	.word	0x9997fa04
 800e3dc:	3fd99999 	.word	0x3fd99999
 800e3e0:	c3500000 	.word	0xc3500000
 800e3e4:	43500000 	.word	0x43500000
 800e3e8:	7fefffff 	.word	0x7fefffff
 800e3ec:	3ff00000 	.word	0x3ff00000
 800e3f0:	3fe00000 	.word	0x3fe00000

0800e3f4 <_init>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	bf00      	nop
 800e3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3fa:	bc08      	pop	{r3}
 800e3fc:	469e      	mov	lr, r3
 800e3fe:	4770      	bx	lr

0800e400 <_fini>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	bf00      	nop
 800e404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e406:	bc08      	pop	{r3}
 800e408:	469e      	mov	lr, r3
 800e40a:	4770      	bx	lr
